package fsk.service.healthReport;

import java.math.BigDecimal;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import org.apache.log4j.Logger;


import fsk.entity.employee.EmployeeEntity;
import fsk.entity.healthReportPhoto.HealthReportPhotoEntity;

import fsk.entity.healthReport.HealthReportEntity;
import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;



/**   
 * @Title: Service
 * @Description: 健康评估报告服务类
 * @author feng.gu
 * @date 2016-07-12 15:06:40
 * @version V1.0   
 *
 */
public class HealthReportService {
	   private static Logger logger = Logger.getLogger(HealthReportService.class);
	   private DBManager dbManager = DBManager.getInstance();
    		
	   private static HealthReportService healthReportService;
	   /**
	    * 获取实例	
	    * @return
	    */
	   public static HealthReportService getInstance(){
		if(healthReportService==null){
			healthReportService = new HealthReportService();
		}
		return healthReportService;
	   }
	                 	                 				     				     				     				     
				     	 
	   /**
		 * 保存记录
		 * 
		 * @param obj
		 */
		public boolean save(HealthReportEntity healthReport) {			
			boolean result =false;
			if(healthReport!=null){
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					 tx.beginTransaction();					 					 
					 					 				     				     					     //关联信息保存
					     EmployeeEntity employee = healthReport.getEmployee();
						 if(employee!=null){						   
							 dbManager.saveNoTransaction(employee);
							 healthReport.setEmployeeId(employee.getId());
						 }						 
				     				     				     					 					 				     					     if(healthReport.getHealthReportPhotoList()!=null&&healthReport.getHealthReportPhotoList().size()>0){						   
			    	            //关联信息保存
			    	            if(healthReport.getId()==null){	  
			    	                dbManager.saveNoTransaction(healthReport); 
			    	            } 	           
							    for(HealthReportPhotoEntity healthReportPhotoEntity:healthReport.getHealthReportPhotoList()){
							    	healthReportPhotoEntity.setHealthReportId(healthReport.getId());
							    	dbManager.saveNoTransaction(healthReportPhotoEntity);
							    }
						 }
				     				     				     				     					 					 result=dbManager.saveNoTransaction(healthReport);	
					 tx.commitAndClose();  
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {				    
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  			
			}	
			return result;
		}
		
		/**
		 * 批量保存记录
		 * 
		 * @param list
		 */
		public boolean saveList(List<HealthReportEntity> healthReportList) {
			boolean result = false;
			if (healthReportList != null && healthReportList.size() > 0) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 
					for(HealthReportEntity healthReport:healthReportList){
						if(healthReport!=null){												  								 
								 									 					                 								     								         //关联信息保存
									     EmployeeEntity employee = healthReport.getEmployee();
										 if(employee!=null){						   
											 dbManager.saveNoTransaction(employee);
											 healthReport.setEmployeeId(employee.getId());
										 }									 
								     								     								     								 									 					                 					                     //关联信息保存
						                 if(healthReport.getHealthReportPhotoList()!=null&&healthReport.getHealthReportPhotoList().size()>0){										 		    	           
										 if(healthReport.getId()==null){
										     dbManager.saveNoTransaction(healthReport);
										 }
										 for(HealthReportPhotoEntity healthReportPhotoEntity:healthReport.getHealthReportPhotoList()){
										     healthReportPhotoEntity.setHealthReportId(healthReport.getId());
										     dbManager.saveNoTransaction(healthReportPhotoEntity);
										 }
									     }
								     								     								     								     								 								 result=dbManager.saveNoTransaction(healthReport);								 			
						}	
					}
				    tx.commitAndClose(); 
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
				/**
		 * 根据id读取记录
		 * 
		 * @param id
		 *            主键
		 * @param obj
		 */
		public HealthReportEntity getById(Integer id) {
			HealthReportEntity obj = null;
			if (id != null) {
				obj = (HealthReportEntity) dbManager.getById(id, HealthReportEntity.class);			
			}
			return obj;
		}
				
		
		/**
		 * 根据id读取记录
		 * @param id 主键
		 		             	                 				     		 * @param employeeShow 是否查询关联信息
				     				     				     		 		             	                 	     * @param healthReportPhotoListShow 是否查询关联信息
				     				     				     				     		 		 * @param obj
		 */
		public HealthReportEntity getById(Integer id,Boolean employeeShow,Boolean healthReportPhotoListShow) {
			HealthReportEntity obj = null;
			if (id!=null) {
				obj = (HealthReportEntity)dbManager.getById(id, HealthReportEntity.class);
									 	                 				     				        //查询关联内容
						if(employeeShow!=null&&employeeShow.booleanValue()&&obj!=null&&obj.getEmployeeId()!=null&&obj.getEmployeeId()>0){
							EmployeeEntity employee = (EmployeeEntity)dbManager.getById(obj.getEmployeeId(), EmployeeEntity.class);
							obj.setEmployee(employee);        	  	  
						}
				     				     				     				   					 	                 	                    //查询关联内容
						if(healthReportPhotoListShow!=null&&healthReportPhotoListShow.booleanValue()&&obj!=null&&obj.getId()!=null&&obj.getId()>0){
							List<Object> list = dbManager.searchListByColumn(HealthReportPhotoEntity.class, HealthReportPhotoEntity.HEALTH_REPORT_ID, String.valueOf(id));
			            	  if(list!=null&&list.size()>0){
			            		  List<HealthReportPhotoEntity> healthReportPhotoList= new ArrayList<HealthReportPhotoEntity>();
			            		  for(Object o:list){
			            			  healthReportPhotoList.add((HealthReportPhotoEntity)o);
			            		  }
			            		  obj.setHealthReportPhotoList(healthReportPhotoList);          		  
			            	  }	            	  	  
						}
				     				     				     				     				   			}
			return obj;
		}
		
		/**
		 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
		 * @param queryMap 查询条件集合		
		 * @return
		 */
		public List<HealthReportEntity> getListByCondition(Map<String,Object> queryMap) {
		    List<HealthReportEntity> returnlist = null;
			List<Object> list = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
												Object id=queryMap.get("id");
					Object id_gt=queryMap.get("id_gt");
					Object id_ge=queryMap.get("id_ge");
					Object id_lt=queryMap.get("id_lt");
					Object id_le=queryMap.get("id_le");
					Object id_in=queryMap.get("id_in");
																					Object assessmentTime_gt=queryMap.get("assessmentTime_gt");
					Object assessmentTime_ge=queryMap.get("assessmentTime_ge");
					Object assessmentTime_lt=queryMap.get("assessmentTime_lt");
					Object assessmentTime_le=queryMap.get("assessmentTime_le");
																					Object employeeId=queryMap.get("employeeId");
					Object employeeId_gt=queryMap.get("employeeId_gt");
					Object employeeId_ge=queryMap.get("employeeId_ge");
					Object employeeId_lt=queryMap.get("employeeId_lt");
					Object employeeId_le=queryMap.get("employeeId_le");
					Object employeeId_in=queryMap.get("employeeId_in");
																					Object diseaseSummary=queryMap.get("diseaseSummary");
					Object diseaseSummary_like=queryMap.get("diseaseSummary_like");
					Object diseaseSummary_isNull=queryMap.get("diseaseSummary_isNull");
					Object diseaseSummary_isNotNull=queryMap.get("diseaseSummary_isNotNull");
					Object diseaseSummary_in=queryMap.get("diseaseSummary_in");
																										Object recentRehabilitationGoals=queryMap.get("recentRehabilitationGoals");
					Object recentRehabilitationGoals_like=queryMap.get("recentRehabilitationGoals_like");
					Object recentRehabilitationGoals_isNull=queryMap.get("recentRehabilitationGoals_isNull");
					Object recentRehabilitationGoals_isNotNull=queryMap.get("recentRehabilitationGoals_isNotNull");
					Object recentRehabilitationGoals_in=queryMap.get("recentRehabilitationGoals_in");
																										Object rehabilitationLongTermGoal=queryMap.get("rehabilitationLongTermGoal");
					Object rehabilitationLongTermGoal_like=queryMap.get("rehabilitationLongTermGoal_like");
					Object rehabilitationLongTermGoal_isNull=queryMap.get("rehabilitationLongTermGoal_isNull");
					Object rehabilitationLongTermGoal_isNotNull=queryMap.get("rehabilitationLongTermGoal_isNotNull");
					Object rehabilitationLongTermGoal_in=queryMap.get("rehabilitationLongTermGoal_in");
																										Object trainingProgram=queryMap.get("trainingProgram");
					Object trainingProgram_like=queryMap.get("trainingProgram_like");
					Object trainingProgram_isNull=queryMap.get("trainingProgram_isNull");
					Object trainingProgram_isNotNull=queryMap.get("trainingProgram_isNotNull");
					Object trainingProgram_in=queryMap.get("trainingProgram_in");
																					Object status=queryMap.get("status");
					Object status_gt=queryMap.get("status_gt");
					Object status_ge=queryMap.get("status_ge");
					Object status_lt=queryMap.get("status_lt");
					Object status_le=queryMap.get("status_le");
					Object status_in=queryMap.get("status_in");
																					Object mainProblem=queryMap.get("mainProblem");
					Object mainProblem_like=queryMap.get("mainProblem_like");
					Object mainProblem_isNull=queryMap.get("mainProblem_isNull");
					Object mainProblem_isNotNull=queryMap.get("mainProblem_isNotNull");
					Object mainProblem_in=queryMap.get("mainProblem_in");
																										Object suggest=queryMap.get("suggest");
					Object suggest_like=queryMap.get("suggest_like");
					Object suggest_isNull=queryMap.get("suggest_isNull");
					Object suggest_isNotNull=queryMap.get("suggest_isNotNull");
					Object suggest_in=queryMap.get("suggest_in");
												
			

																				
			
			QueryCondition qc = new QueryCondition(HealthReportEntity.ID, QueryCondition.gt, "0");				
												if(id!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.eq, id));}
					if(id_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.gt, id_gt));}
					if(id_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.ge, id_ge));}
					if(id_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.lt, id_lt));}
					if(id_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.le, id_le));}
					if(id_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.in, id_in));}
															  					if(assessmentTime_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.gt, assessmentTime_gt));}
					if(assessmentTime_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.ge, assessmentTime_ge));}
					if(assessmentTime_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.lt, assessmentTime_lt));}
					if(assessmentTime_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.le, assessmentTime_le));}
				  																if(employeeId!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.eq, employeeId));}
					if(employeeId_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.gt, employeeId_gt));}
					if(employeeId_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.ge, employeeId_ge));}
					if(employeeId_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.lt, employeeId_lt));}
					if(employeeId_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.le, employeeId_le));}
					if(employeeId_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.in, employeeId_in));}
															  					if(diseaseSummary!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.eq, diseaseSummary));}
		            if(diseaseSummary_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.like, diseaseSummary_like));}
		            if(diseaseSummary_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.isNull, diseaseSummary_isNull));}
		            if(diseaseSummary_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.isNotNull, diseaseSummary_isNotNull));}
				    if(diseaseSummary_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.in, diseaseSummary_in));}
				  															  					if(recentRehabilitationGoals!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.eq, recentRehabilitationGoals));}
		            if(recentRehabilitationGoals_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.like, recentRehabilitationGoals_like));}
		            if(recentRehabilitationGoals_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.isNull, recentRehabilitationGoals_isNull));}
		            if(recentRehabilitationGoals_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.isNotNull, recentRehabilitationGoals_isNotNull));}
				    if(recentRehabilitationGoals_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.in, recentRehabilitationGoals_in));}
				  															  					if(rehabilitationLongTermGoal!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.eq, rehabilitationLongTermGoal));}
		            if(rehabilitationLongTermGoal_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.like, rehabilitationLongTermGoal_like));}
		            if(rehabilitationLongTermGoal_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.isNull, rehabilitationLongTermGoal_isNull));}
		            if(rehabilitationLongTermGoal_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.isNotNull, rehabilitationLongTermGoal_isNotNull));}
				    if(rehabilitationLongTermGoal_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.in, rehabilitationLongTermGoal_in));}
				  															  					if(trainingProgram!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.eq, trainingProgram));}
		            if(trainingProgram_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.like, trainingProgram_like));}
		            if(trainingProgram_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.isNull, trainingProgram_isNull));}
		            if(trainingProgram_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.isNotNull, trainingProgram_isNotNull));}
				    if(trainingProgram_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.in, trainingProgram_in));}
				  																if(status!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.eq, status));}
					if(status_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.gt, status_gt));}
					if(status_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.ge, status_ge));}
					if(status_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.lt, status_lt));}
					if(status_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.le, status_le));}
					if(status_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.in, status_in));}
															  					if(mainProblem!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.eq, mainProblem));}
		            if(mainProblem_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.like, mainProblem_like));}
		            if(mainProblem_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.isNull, mainProblem_isNull));}
		            if(mainProblem_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.isNotNull, mainProblem_isNotNull));}
				    if(mainProblem_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.in, mainProblem_in));}
				  															  					if(suggest!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.eq, suggest));}
		            if(suggest_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.like, suggest_like));}
		            if(suggest_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.isNull, suggest_isNull));}
		            if(suggest_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.isNotNull, suggest_isNotNull));}
				    if(suggest_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.in, suggest_in));}
				  										
						  						  			            list = dbManager.queryByCondition(HealthReportEntity.class,qc);    
            if(list!=null&&list.size()>0){
               returnlist = new ArrayList<HealthReportEntity>();
               for (Object obj:list) {           
                 returnlist.add((HealthReportEntity)obj);
               }
            }       					
			return returnlist;
		}
		
		
		/**
		 * 根据条件查询记录集合（不分页 带排序 带级联查询）
		 * @param queryMap 查询条件集合
		 * @param orderList 排序条件集合
		 		             	                 				     		 * @param employeeShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		             	                 	     * @param healthReportPhotoListShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     				     		 		 * @return
		 */
		public List<HealthReportEntity> getListByCondition(Map<String,Object> queryMap,List<OrderVO> orderList,Boolean employeeShow,Boolean healthReportPhotoListShow) {
			List<HealthReportEntity> returnlist = null;
			List<Object> list = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
												Object id=queryMap.get("id");
					Object id_gt=queryMap.get("id_gt");
					Object id_ge=queryMap.get("id_ge");
					Object id_lt=queryMap.get("id_lt");
					Object id_le=queryMap.get("id_le");
					Object id_in=queryMap.get("id_in");
																					Object assessmentTime_gt=queryMap.get("assessmentTime_gt");
					Object assessmentTime_ge=queryMap.get("assessmentTime_ge");
					Object assessmentTime_lt=queryMap.get("assessmentTime_lt");
					Object assessmentTime_le=queryMap.get("assessmentTime_le");
																					Object employeeId=queryMap.get("employeeId");
					Object employeeId_gt=queryMap.get("employeeId_gt");
					Object employeeId_ge=queryMap.get("employeeId_ge");
					Object employeeId_lt=queryMap.get("employeeId_lt");
					Object employeeId_le=queryMap.get("employeeId_le");
					Object employeeId_in=queryMap.get("employeeId_in");
																					Object diseaseSummary=queryMap.get("diseaseSummary");
					Object diseaseSummary_like=queryMap.get("diseaseSummary_like");
					Object diseaseSummary_isNull=queryMap.get("diseaseSummary_isNull");
					Object diseaseSummary_isNotNull=queryMap.get("diseaseSummary_isNotNull");
					Object diseaseSummary_in=queryMap.get("diseaseSummary_in");
																										Object recentRehabilitationGoals=queryMap.get("recentRehabilitationGoals");
					Object recentRehabilitationGoals_like=queryMap.get("recentRehabilitationGoals_like");
					Object recentRehabilitationGoals_isNull=queryMap.get("recentRehabilitationGoals_isNull");
					Object recentRehabilitationGoals_isNotNull=queryMap.get("recentRehabilitationGoals_isNotNull");
					Object recentRehabilitationGoals_in=queryMap.get("recentRehabilitationGoals_in");
																										Object rehabilitationLongTermGoal=queryMap.get("rehabilitationLongTermGoal");
					Object rehabilitationLongTermGoal_like=queryMap.get("rehabilitationLongTermGoal_like");
					Object rehabilitationLongTermGoal_isNull=queryMap.get("rehabilitationLongTermGoal_isNull");
					Object rehabilitationLongTermGoal_isNotNull=queryMap.get("rehabilitationLongTermGoal_isNotNull");
					Object rehabilitationLongTermGoal_in=queryMap.get("rehabilitationLongTermGoal_in");
																										Object trainingProgram=queryMap.get("trainingProgram");
					Object trainingProgram_like=queryMap.get("trainingProgram_like");
					Object trainingProgram_isNull=queryMap.get("trainingProgram_isNull");
					Object trainingProgram_isNotNull=queryMap.get("trainingProgram_isNotNull");
					Object trainingProgram_in=queryMap.get("trainingProgram_in");
																					Object status=queryMap.get("status");
					Object status_gt=queryMap.get("status_gt");
					Object status_ge=queryMap.get("status_ge");
					Object status_lt=queryMap.get("status_lt");
					Object status_le=queryMap.get("status_le");
					Object status_in=queryMap.get("status_in");
																					Object mainProblem=queryMap.get("mainProblem");
					Object mainProblem_like=queryMap.get("mainProblem_like");
					Object mainProblem_isNull=queryMap.get("mainProblem_isNull");
					Object mainProblem_isNotNull=queryMap.get("mainProblem_isNotNull");
					Object mainProblem_in=queryMap.get("mainProblem_in");
																										Object suggest=queryMap.get("suggest");
					Object suggest_like=queryMap.get("suggest_like");
					Object suggest_isNull=queryMap.get("suggest_isNull");
					Object suggest_isNotNull=queryMap.get("suggest_isNotNull");
					Object suggest_in=queryMap.get("suggest_in");
												
			

																				
			
			QueryCondition qc = new QueryCondition(HealthReportEntity.ID, QueryCondition.gt, "0");				
												if(id!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.eq, id));}
					if(id_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.gt, id_gt));}
					if(id_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.ge, id_ge));}
					if(id_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.lt, id_lt));}
					if(id_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.le, id_le));}
					if(id_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.in, id_in));}
															  					if(assessmentTime_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.gt, assessmentTime_gt));}
					if(assessmentTime_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.ge, assessmentTime_ge));}
					if(assessmentTime_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.lt, assessmentTime_lt));}
					if(assessmentTime_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.le, assessmentTime_le));}
				  																if(employeeId!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.eq, employeeId));}
					if(employeeId_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.gt, employeeId_gt));}
					if(employeeId_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.ge, employeeId_ge));}
					if(employeeId_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.lt, employeeId_lt));}
					if(employeeId_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.le, employeeId_le));}
					if(employeeId_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.in, employeeId_in));}
															  					if(diseaseSummary!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.eq, diseaseSummary));}
		            if(diseaseSummary_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.like, diseaseSummary_like));}
		            if(diseaseSummary_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.isNull, diseaseSummary_isNull));}
		            if(diseaseSummary_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.isNotNull, diseaseSummary_isNotNull));}
				    if(diseaseSummary_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.in, diseaseSummary_in));}
				  															  					if(recentRehabilitationGoals!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.eq, recentRehabilitationGoals));}
		            if(recentRehabilitationGoals_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.like, recentRehabilitationGoals_like));}
		            if(recentRehabilitationGoals_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.isNull, recentRehabilitationGoals_isNull));}
		            if(recentRehabilitationGoals_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.isNotNull, recentRehabilitationGoals_isNotNull));}
				    if(recentRehabilitationGoals_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.in, recentRehabilitationGoals_in));}
				  															  					if(rehabilitationLongTermGoal!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.eq, rehabilitationLongTermGoal));}
		            if(rehabilitationLongTermGoal_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.like, rehabilitationLongTermGoal_like));}
		            if(rehabilitationLongTermGoal_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.isNull, rehabilitationLongTermGoal_isNull));}
		            if(rehabilitationLongTermGoal_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.isNotNull, rehabilitationLongTermGoal_isNotNull));}
				    if(rehabilitationLongTermGoal_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.in, rehabilitationLongTermGoal_in));}
				  															  					if(trainingProgram!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.eq, trainingProgram));}
		            if(trainingProgram_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.like, trainingProgram_like));}
		            if(trainingProgram_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.isNull, trainingProgram_isNull));}
		            if(trainingProgram_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.isNotNull, trainingProgram_isNotNull));}
				    if(trainingProgram_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.in, trainingProgram_in));}
				  																if(status!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.eq, status));}
					if(status_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.gt, status_gt));}
					if(status_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.ge, status_ge));}
					if(status_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.lt, status_lt));}
					if(status_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.le, status_le));}
					if(status_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.in, status_in));}
															  					if(mainProblem!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.eq, mainProblem));}
		            if(mainProblem_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.like, mainProblem_like));}
		            if(mainProblem_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.isNull, mainProblem_isNull));}
		            if(mainProblem_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.isNotNull, mainProblem_isNotNull));}
				    if(mainProblem_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.in, mainProblem_in));}
				  															  					if(suggest!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.eq, suggest));}
		            if(suggest_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.like, suggest_like));}
		            if(suggest_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.isNull, suggest_isNull));}
		            if(suggest_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.isNotNull, suggest_isNotNull));}
				    if(suggest_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.in, suggest_in));}
				  										
						  						  						OrderByCondition oc = null;
			if(orderList!=null&&orderList.size()>0){
				for(int i=0;i<orderList.size();i++){
					OrderVO order = orderList.get(i);
					String orderColumnt =null;
					String orderType=null;
					if(order.getName()!=null&&!"".equals(order.getName())){
						orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
						orderType = order.getOrderType();
						if(orderType==null||"".equals(orderType.trim())){
							orderType=OrderByCondition.desc;
						}
						if(i==0){
							oc = new OrderByCondition(orderColumnt,orderType);
						}else{
							oc.orderByCondition(new OrderByCondition(orderColumnt,orderType));
						}					
					}
					
				}
			}			
            list = dbManager.queryByConditions(HealthReportEntity.class,qc,oc);
                                    int a=0;
            					             	                 				     				     if(employeeShow!=null&&employeeShow.booleanValue()){
						a++;
					 }
				     				     				     		    		             	                 	                 if(healthReportPhotoListShow!=null&&healthReportPhotoListShow.booleanValue()){
						a++;
					 }
				     				     				     				     		    		                if(a>0&&list!=null&&list.size()>0){
				List<Object> result = new ArrayList<Object>();
				for(int i=0;i<list.size();i++){
					HealthReportEntity obj = (HealthReportEntity)list.get(i);
										 	                 				     				        //查询关联内容
						if(employeeShow!=null&&employeeShow.booleanValue()&&obj!=null&&obj.getEmployeeId()!=null&&obj.getEmployeeId()>0){
							EmployeeEntity employee = (EmployeeEntity)dbManager.getById(obj.getEmployeeId(), EmployeeEntity.class);
							obj.setEmployee(employee);        	  	  
						}
				     				     				     				    					 	                 	                    //查询关联内容
						if(healthReportPhotoListShow!=null&&healthReportPhotoListShow.booleanValue()&&obj!=null&&obj.getId()!=null&&obj.getId()>0){
							List<Object> objList = dbManager.searchListByColumn(HealthReportPhotoEntity.class, HealthReportPhotoEntity.HEALTH_REPORT_ID, String.valueOf(obj.getId()));
			            	  if(objList!=null&&objList.size()>0){
			            		  List<HealthReportPhotoEntity> healthReportPhotoList= new ArrayList<HealthReportPhotoEntity>();
			            		  for(Object o:objList){
			            			  healthReportPhotoList.add((HealthReportPhotoEntity)o);
			            		  }
			            		  obj.setHealthReportPhotoList(healthReportPhotoList);          		  
			            	  }	            	  	  
						}
				     				     				     				     				    					result.add(obj);					
				}
				list=result;			
		}	
					if(list!=null&&list.size()>0){
               returnlist = new ArrayList<HealthReportEntity>();
               for (Object obj:list) {           
                 returnlist.add((HealthReportEntity)obj);
               }
            }       					
			return returnlist;
		}
		
		/**
		 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
		 * @param queryMap 查询条件集合
		 * @param pageno 查询页码
		 * @param pagesize 查询每页记录条数		
		 * @return
		 */
		public PageList getListByCondition(Map<String,Object> queryMap,int pageno,int pagesize) {
			PageList pagelist = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
												Object id=queryMap.get("id");
					Object id_gt=queryMap.get("id_gt");
					Object id_ge=queryMap.get("id_ge");
					Object id_lt=queryMap.get("id_lt");
					Object id_le=queryMap.get("id_le");
					Object id_in=queryMap.get("id_in");
															  					Object assessmentTime_gt=queryMap.get("assessmentTime_gt");
					Object assessmentTime_ge=queryMap.get("assessmentTime_ge");
					Object assessmentTime_lt=queryMap.get("assessmentTime_lt");
					Object assessmentTime_le=queryMap.get("assessmentTime_le");
				  																Object employeeId=queryMap.get("employeeId");
					Object employeeId_gt=queryMap.get("employeeId_gt");
					Object employeeId_ge=queryMap.get("employeeId_ge");
					Object employeeId_lt=queryMap.get("employeeId_lt");
					Object employeeId_le=queryMap.get("employeeId_le");
					Object employeeId_in=queryMap.get("employeeId_in");
															  					Object diseaseSummary=queryMap.get("diseaseSummary");
					Object diseaseSummary_like=queryMap.get("diseaseSummary_like");
					Object diseaseSummary_isNull=queryMap.get("diseaseSummary_isNull");
					Object diseaseSummary_isNotNull=queryMap.get("diseaseSummary_isNotNull");
					Object diseaseSummary_in=queryMap.get("diseaseSummary_in");
				   															  					Object recentRehabilitationGoals=queryMap.get("recentRehabilitationGoals");
					Object recentRehabilitationGoals_like=queryMap.get("recentRehabilitationGoals_like");
					Object recentRehabilitationGoals_isNull=queryMap.get("recentRehabilitationGoals_isNull");
					Object recentRehabilitationGoals_isNotNull=queryMap.get("recentRehabilitationGoals_isNotNull");
					Object recentRehabilitationGoals_in=queryMap.get("recentRehabilitationGoals_in");
				   															  					Object rehabilitationLongTermGoal=queryMap.get("rehabilitationLongTermGoal");
					Object rehabilitationLongTermGoal_like=queryMap.get("rehabilitationLongTermGoal_like");
					Object rehabilitationLongTermGoal_isNull=queryMap.get("rehabilitationLongTermGoal_isNull");
					Object rehabilitationLongTermGoal_isNotNull=queryMap.get("rehabilitationLongTermGoal_isNotNull");
					Object rehabilitationLongTermGoal_in=queryMap.get("rehabilitationLongTermGoal_in");
				   															  					Object trainingProgram=queryMap.get("trainingProgram");
					Object trainingProgram_like=queryMap.get("trainingProgram_like");
					Object trainingProgram_isNull=queryMap.get("trainingProgram_isNull");
					Object trainingProgram_isNotNull=queryMap.get("trainingProgram_isNotNull");
					Object trainingProgram_in=queryMap.get("trainingProgram_in");
				   																Object status=queryMap.get("status");
					Object status_gt=queryMap.get("status_gt");
					Object status_ge=queryMap.get("status_ge");
					Object status_lt=queryMap.get("status_lt");
					Object status_le=queryMap.get("status_le");
					Object status_in=queryMap.get("status_in");
															  					Object mainProblem=queryMap.get("mainProblem");
					Object mainProblem_like=queryMap.get("mainProblem_like");
					Object mainProblem_isNull=queryMap.get("mainProblem_isNull");
					Object mainProblem_isNotNull=queryMap.get("mainProblem_isNotNull");
					Object mainProblem_in=queryMap.get("mainProblem_in");
				   															  					Object suggest=queryMap.get("suggest");
					Object suggest_like=queryMap.get("suggest_like");
					Object suggest_isNull=queryMap.get("suggest_isNull");
					Object suggest_isNotNull=queryMap.get("suggest_isNotNull");
					Object suggest_in=queryMap.get("suggest_in");
				   							
			

																				
			
			QueryCondition qc = new QueryCondition(HealthReportEntity.ID, QueryCondition.gt, "0");				
												if(id!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.eq, id));}
					if(id_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.gt, id_gt));}
					if(id_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.ge, id_ge));}
					if(id_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.lt, id_lt));}
					if(id_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.le, id_le));}
					if(id_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.in, id_in));}
															  					if(assessmentTime_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.gt, assessmentTime_gt));}
					if(assessmentTime_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.ge, assessmentTime_ge));}
					if(assessmentTime_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.lt, assessmentTime_lt));}
					if(assessmentTime_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.le, assessmentTime_le));}
				  																if(employeeId!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.eq, employeeId));}
					if(employeeId_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.gt, employeeId_gt));}
					if(employeeId_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.ge, employeeId_ge));}
					if(employeeId_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.lt, employeeId_lt));}
					if(employeeId_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.le, employeeId_le));}
					if(employeeId_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.in, employeeId_in));}
															  					if(diseaseSummary!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.eq, diseaseSummary));}
		            if(diseaseSummary_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.like, diseaseSummary_like));}
		            if(diseaseSummary_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.isNull, diseaseSummary_isNull));}
		            if(diseaseSummary_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.isNotNull, diseaseSummary_isNotNull));}
				    if(diseaseSummary_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.in, diseaseSummary_in));}
				  															  					if(recentRehabilitationGoals!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.eq, recentRehabilitationGoals));}
		            if(recentRehabilitationGoals_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.like, recentRehabilitationGoals_like));}
		            if(recentRehabilitationGoals_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.isNull, recentRehabilitationGoals_isNull));}
		            if(recentRehabilitationGoals_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.isNotNull, recentRehabilitationGoals_isNotNull));}
				    if(recentRehabilitationGoals_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.in, recentRehabilitationGoals_in));}
				  															  					if(rehabilitationLongTermGoal!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.eq, rehabilitationLongTermGoal));}
		            if(rehabilitationLongTermGoal_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.like, rehabilitationLongTermGoal_like));}
		            if(rehabilitationLongTermGoal_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.isNull, rehabilitationLongTermGoal_isNull));}
		            if(rehabilitationLongTermGoal_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.isNotNull, rehabilitationLongTermGoal_isNotNull));}
				    if(rehabilitationLongTermGoal_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.in, rehabilitationLongTermGoal_in));}
				  															  					if(trainingProgram!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.eq, trainingProgram));}
		            if(trainingProgram_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.like, trainingProgram_like));}
		            if(trainingProgram_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.isNull, trainingProgram_isNull));}
		            if(trainingProgram_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.isNotNull, trainingProgram_isNotNull));}
				    if(trainingProgram_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.in, trainingProgram_in));}
				  																if(status!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.eq, status));}
					if(status_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.gt, status_gt));}
					if(status_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.ge, status_ge));}
					if(status_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.lt, status_lt));}
					if(status_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.le, status_le));}
					if(status_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.in, status_in));}
															  					if(mainProblem!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.eq, mainProblem));}
		            if(mainProblem_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.like, mainProblem_like));}
		            if(mainProblem_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.isNull, mainProblem_isNull));}
		            if(mainProblem_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.isNotNull, mainProblem_isNotNull));}
				    if(mainProblem_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.in, mainProblem_in));}
				  															  					if(suggest!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.eq, suggest));}
		            if(suggest_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.like, suggest_like));}
		            if(suggest_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.isNull, suggest_isNull));}
		            if(suggest_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.isNotNull, suggest_isNotNull));}
				    if(suggest_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.in, suggest_in));}
				  										
						  						  			            pagelist = dbManager.queryByCondition(HealthReportEntity.class,qc,pageno,pagesize);	                      			
			return pagelist;
		}
		
		/**
		 * 根据条件查询记录集合（带分页 带排序 带级联查询）
		 * @param queryMap 查询条件集合
		 * @param orderList 排序条件集合
		 * @param pageno 查询页码
		 * @param pagesize 查询每页记录条数
		 		             	                 				     		 * @param employeeShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		             	                 	     * @param healthReportPhotoListShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     				     		 		 * @return
		 */
		public PageList getListByCondition(Map<String,Object> queryMap,List<OrderVO> orderList,int pageno,int pagesize,Boolean employeeShow,Boolean healthReportPhotoListShow) {
			PageList pagelist = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
												Object id=queryMap.get("id");
					Object id_gt=queryMap.get("id_gt");
					Object id_ge=queryMap.get("id_ge");
					Object id_lt=queryMap.get("id_lt");
					Object id_le=queryMap.get("id_le");
					Object id_in=queryMap.get("id_in");
															  					Object assessmentTime_gt=queryMap.get("assessmentTime_gt");
					Object assessmentTime_ge=queryMap.get("assessmentTime_ge");
					Object assessmentTime_lt=queryMap.get("assessmentTime_lt");
					Object assessmentTime_le=queryMap.get("assessmentTime_le");
				  																Object employeeId=queryMap.get("employeeId");
					Object employeeId_gt=queryMap.get("employeeId_gt");
					Object employeeId_ge=queryMap.get("employeeId_ge");
					Object employeeId_lt=queryMap.get("employeeId_lt");
					Object employeeId_le=queryMap.get("employeeId_le");
					Object employeeId_in=queryMap.get("employeeId_in");
															  					Object diseaseSummary=queryMap.get("diseaseSummary");
					Object diseaseSummary_like=queryMap.get("diseaseSummary_like");
					Object diseaseSummary_isNull=queryMap.get("diseaseSummary_isNull");
					Object diseaseSummary_isNotNull=queryMap.get("diseaseSummary_isNotNull");
					Object diseaseSummary_in=queryMap.get("diseaseSummary_in");
				   															  					Object recentRehabilitationGoals=queryMap.get("recentRehabilitationGoals");
					Object recentRehabilitationGoals_like=queryMap.get("recentRehabilitationGoals_like");
					Object recentRehabilitationGoals_isNull=queryMap.get("recentRehabilitationGoals_isNull");
					Object recentRehabilitationGoals_isNotNull=queryMap.get("recentRehabilitationGoals_isNotNull");
					Object recentRehabilitationGoals_in=queryMap.get("recentRehabilitationGoals_in");
				   															  					Object rehabilitationLongTermGoal=queryMap.get("rehabilitationLongTermGoal");
					Object rehabilitationLongTermGoal_like=queryMap.get("rehabilitationLongTermGoal_like");
					Object rehabilitationLongTermGoal_isNull=queryMap.get("rehabilitationLongTermGoal_isNull");
					Object rehabilitationLongTermGoal_isNotNull=queryMap.get("rehabilitationLongTermGoal_isNotNull");
					Object rehabilitationLongTermGoal_in=queryMap.get("rehabilitationLongTermGoal_in");
				   															  					Object trainingProgram=queryMap.get("trainingProgram");
					Object trainingProgram_like=queryMap.get("trainingProgram_like");
					Object trainingProgram_isNull=queryMap.get("trainingProgram_isNull");
					Object trainingProgram_isNotNull=queryMap.get("trainingProgram_isNotNull");
					Object trainingProgram_in=queryMap.get("trainingProgram_in");
				   																Object status=queryMap.get("status");
					Object status_gt=queryMap.get("status_gt");
					Object status_ge=queryMap.get("status_ge");
					Object status_lt=queryMap.get("status_lt");
					Object status_le=queryMap.get("status_le");
					Object status_in=queryMap.get("status_in");
															  					Object mainProblem=queryMap.get("mainProblem");
					Object mainProblem_like=queryMap.get("mainProblem_like");
					Object mainProblem_isNull=queryMap.get("mainProblem_isNull");
					Object mainProblem_isNotNull=queryMap.get("mainProblem_isNotNull");
					Object mainProblem_in=queryMap.get("mainProblem_in");
				   															  					Object suggest=queryMap.get("suggest");
					Object suggest_like=queryMap.get("suggest_like");
					Object suggest_isNull=queryMap.get("suggest_isNull");
					Object suggest_isNotNull=queryMap.get("suggest_isNotNull");
					Object suggest_in=queryMap.get("suggest_in");
				   							
			

																				
			
			QueryCondition qc = new QueryCondition(HealthReportEntity.ID, QueryCondition.gt, "0");				
												if(id!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.eq, id));}
					if(id_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.gt, id_gt));}
					if(id_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.ge, id_ge));}
					if(id_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.lt, id_lt));}
					if(id_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.le, id_le));}
					if(id_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.in, id_in));}
															  					if(assessmentTime_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.gt, assessmentTime_gt));}
					if(assessmentTime_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.ge, assessmentTime_ge));}
					if(assessmentTime_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.lt, assessmentTime_lt));}
					if(assessmentTime_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.le, assessmentTime_le));}
				  																if(employeeId!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.eq, employeeId));}
					if(employeeId_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.gt, employeeId_gt));}
					if(employeeId_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.ge, employeeId_ge));}
					if(employeeId_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.lt, employeeId_lt));}
					if(employeeId_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.le, employeeId_le));}
					if(employeeId_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.in, employeeId_in));}
															  					if(diseaseSummary!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.eq, diseaseSummary));}
		            if(diseaseSummary_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.like, diseaseSummary_like));}
		            if(diseaseSummary_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.isNull, diseaseSummary_isNull));}
		            if(diseaseSummary_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.isNotNull, diseaseSummary_isNotNull));}
				    if(diseaseSummary_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.in, diseaseSummary_in));}
				  															  					if(recentRehabilitationGoals!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.eq, recentRehabilitationGoals));}
		            if(recentRehabilitationGoals_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.like, recentRehabilitationGoals_like));}
		            if(recentRehabilitationGoals_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.isNull, recentRehabilitationGoals_isNull));}
		            if(recentRehabilitationGoals_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.isNotNull, recentRehabilitationGoals_isNotNull));}
				    if(recentRehabilitationGoals_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.in, recentRehabilitationGoals_in));}
				  															  					if(rehabilitationLongTermGoal!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.eq, rehabilitationLongTermGoal));}
		            if(rehabilitationLongTermGoal_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.like, rehabilitationLongTermGoal_like));}
		            if(rehabilitationLongTermGoal_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.isNull, rehabilitationLongTermGoal_isNull));}
		            if(rehabilitationLongTermGoal_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.isNotNull, rehabilitationLongTermGoal_isNotNull));}
				    if(rehabilitationLongTermGoal_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.in, rehabilitationLongTermGoal_in));}
				  															  					if(trainingProgram!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.eq, trainingProgram));}
		            if(trainingProgram_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.like, trainingProgram_like));}
		            if(trainingProgram_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.isNull, trainingProgram_isNull));}
		            if(trainingProgram_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.isNotNull, trainingProgram_isNotNull));}
				    if(trainingProgram_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.in, trainingProgram_in));}
				  																if(status!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.eq, status));}
					if(status_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.gt, status_gt));}
					if(status_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.ge, status_ge));}
					if(status_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.lt, status_lt));}
					if(status_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.le, status_le));}
					if(status_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.in, status_in));}
															  					if(mainProblem!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.eq, mainProblem));}
		            if(mainProblem_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.like, mainProblem_like));}
		            if(mainProblem_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.isNull, mainProblem_isNull));}
		            if(mainProblem_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.isNotNull, mainProblem_isNotNull));}
				    if(mainProblem_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.in, mainProblem_in));}
				  															  					if(suggest!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.eq, suggest));}
		            if(suggest_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.like, suggest_like));}
		            if(suggest_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.isNull, suggest_isNull));}
		            if(suggest_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.isNotNull, suggest_isNotNull));}
				    if(suggest_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.in, suggest_in));}
				  										
						  						  						OrderByCondition oc = null;
			if(orderList!=null&&orderList.size()>0){
				for(int i=0;i<orderList.size();i++){
					OrderVO order = orderList.get(i);
					String orderColumnt =null;
					String orderType=null;
					if(order.getName()!=null&&!"".equals(order.getName())){
						orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
						orderType = order.getOrderType();
						if(orderType==null||"".equals(orderType.trim())){
							orderType=OrderByCondition.desc;
						}
						if(i==0){
							oc = new OrderByCondition(orderColumnt,orderType);
						}else{
							oc.orderByCondition(new OrderByCondition(orderColumnt,orderType));
						}					
					}
					
				}
			}		
            pagelist = dbManager.queryByConditions(HealthReportEntity.class,qc,oc,pageno,pagesize);	           
                                    int a=0;
            					             	                 				     				     if(employeeShow!=null&&employeeShow.booleanValue()){
						a++;
					 }
				     				     				     		    		             	                 	                 if(healthReportPhotoListShow!=null&&healthReportPhotoListShow.booleanValue()){
						a++;
					 }
				     				     				     				     		    		                if(a>0&&pagelist!=null&&pagelist.getResultList()!=null&&pagelist.getResultList().size()>0){
				List<Object> result = new ArrayList<Object>();
				for(int i=0;i<pagelist.getResultList().size();i++){
					HealthReportEntity obj = (HealthReportEntity)pagelist.getResultList().get(i);
										 	                 				     				        //查询关联内容
						if(employeeShow!=null&&employeeShow.booleanValue()&&obj!=null&&obj.getEmployeeId()!=null&&obj.getEmployeeId()>0){
							EmployeeEntity employee = (EmployeeEntity)dbManager.getById(obj.getEmployeeId(), EmployeeEntity.class);
							obj.setEmployee(employee);        	  	  
						}
				     				     				     				    					 	                 	                    //查询关联内容
						if(healthReportPhotoListShow!=null&&healthReportPhotoListShow.booleanValue()&&obj!=null&&obj.getId()!=null&&obj.getId()>0){
							List<Object> objList = dbManager.searchListByColumn(HealthReportPhotoEntity.class, HealthReportPhotoEntity.HEALTH_REPORT_ID, String.valueOf(obj.getId()));
			            	  if(objList!=null&&objList.size()>0){
			            		  List<HealthReportPhotoEntity> healthReportPhotoList= new ArrayList<HealthReportPhotoEntity>();
			            		  for(Object o:objList){
			            			  healthReportPhotoList.add((HealthReportPhotoEntity)o);
			            		  }
			            		  obj.setHealthReportPhotoList(healthReportPhotoList);          		  
			            	  }	            	  	  
						}
				     				     				     				     				    					result.add(obj);					
				}
				pagelist.setResultList(result);			
		}	
					return pagelist;
		}
		
		/**
		 * 删除记录
		 * 
		 * @param id 主键
		 * @param obj
		 */
		public boolean del(Integer id,Boolean delEmployee,Boolean delHealthReportPhotoList) {
			boolean result = false;
			if (id !=null&&id>0) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 					
										 	                 				     					    //删除关联信息
						if(delEmployee!=null&&delEmployee.booleanValue()){	
							HealthReportEntity healthReport = (HealthReportEntity)dbManager.getById(id, HealthReportEntity.class);
							if(healthReport!=null&&healthReport.getEmployeeId()!=null){
								dbManager.delNoTransaction(healthReport.getEmployeeId(), EmployeeEntity.class);
							}						
						}
				     				     				     										 	                 	                    //删除关联信息
						if(delHealthReportPhotoList!=null&&delHealthReportPhotoList.booleanValue()){
							QueryCondition qc = new QueryCondition(HealthReportPhotoEntity.HEALTH_REPORT_ID, QueryCondition.eq, id);
							dbManager.delByConditionsNoTransaction(HealthReportPhotoEntity.class, qc);
						}
				     				     				     				     										result = dbManager.delNoTransaction(id, HealthReportEntity.class);
					tx.commitAndClose(); 
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
		/**
		 * 批量删除记录
		 * 
		 * @param ids
		 *            主键 英文逗号间隔
		 * @param obj
		 */
		public boolean del(String ids) {
			boolean result = false;
			if (ids != null && !"".equals(ids.trim())) {
				TransactionManager tx = DbUtils.getTranManager();
				try {
					tx.beginTransaction();
					QueryCondition qc = new QueryCondition(HealthReportEntity.ID,QueryCondition.in, ids);
					result = dbManager.delByConditionsNoTransaction(HealthReportEntity.class, qc);
					tx.commitAndClose();
				} catch (Exception e) {
					logger.error("数据库提交失败！");
					logger.error(e);
					result = false;
					try {
						tx.rollbackAndClose();
					} catch (Exception ex) {
						logger.error("数据库回滚失败！");
						logger.error(ex);
					}
				}
			}
			return result;
		}

		/**
		 * 批量条件删除记录
		 * @param queryMap 查询条件集合
		 */
		public boolean delList(Map<String,Object> queryMap,Boolean delEmployee,Boolean delHealthReportPhotoList) {
			boolean result = false;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
												Object id=queryMap.get("id");
					Object id_gt=queryMap.get("id_gt");
					Object id_ge=queryMap.get("id_ge");
					Object id_lt=queryMap.get("id_lt");
					Object id_le=queryMap.get("id_le");
					Object id_in=queryMap.get("id_in");
															  					Object assessmentTime_gt=queryMap.get("assessmentTime_gt");
					Object assessmentTime_ge=queryMap.get("assessmentTime_ge");
					Object assessmentTime_lt=queryMap.get("assessmentTime_lt");
					Object assessmentTime_le=queryMap.get("assessmentTime_le");
				  																Object employeeId=queryMap.get("employeeId");
					Object employeeId_gt=queryMap.get("employeeId_gt");
					Object employeeId_ge=queryMap.get("employeeId_ge");
					Object employeeId_lt=queryMap.get("employeeId_lt");
					Object employeeId_le=queryMap.get("employeeId_le");
					Object employeeId_in=queryMap.get("employeeId_in");
															  					Object diseaseSummary=queryMap.get("diseaseSummary");
					Object diseaseSummary_like=queryMap.get("diseaseSummary_like");
					Object diseaseSummary_isNull=queryMap.get("diseaseSummary_isNull");
					Object diseaseSummary_isNotNull=queryMap.get("diseaseSummary_isNotNull");
					Object diseaseSummary_in=queryMap.get("diseaseSummary_in");
				  															  					Object recentRehabilitationGoals=queryMap.get("recentRehabilitationGoals");
					Object recentRehabilitationGoals_like=queryMap.get("recentRehabilitationGoals_like");
					Object recentRehabilitationGoals_isNull=queryMap.get("recentRehabilitationGoals_isNull");
					Object recentRehabilitationGoals_isNotNull=queryMap.get("recentRehabilitationGoals_isNotNull");
					Object recentRehabilitationGoals_in=queryMap.get("recentRehabilitationGoals_in");
				  															  					Object rehabilitationLongTermGoal=queryMap.get("rehabilitationLongTermGoal");
					Object rehabilitationLongTermGoal_like=queryMap.get("rehabilitationLongTermGoal_like");
					Object rehabilitationLongTermGoal_isNull=queryMap.get("rehabilitationLongTermGoal_isNull");
					Object rehabilitationLongTermGoal_isNotNull=queryMap.get("rehabilitationLongTermGoal_isNotNull");
					Object rehabilitationLongTermGoal_in=queryMap.get("rehabilitationLongTermGoal_in");
				  															  					Object trainingProgram=queryMap.get("trainingProgram");
					Object trainingProgram_like=queryMap.get("trainingProgram_like");
					Object trainingProgram_isNull=queryMap.get("trainingProgram_isNull");
					Object trainingProgram_isNotNull=queryMap.get("trainingProgram_isNotNull");
					Object trainingProgram_in=queryMap.get("trainingProgram_in");
				  																Object status=queryMap.get("status");
					Object status_gt=queryMap.get("status_gt");
					Object status_ge=queryMap.get("status_ge");
					Object status_lt=queryMap.get("status_lt");
					Object status_le=queryMap.get("status_le");
					Object status_in=queryMap.get("status_in");
															  					Object mainProblem=queryMap.get("mainProblem");
					Object mainProblem_like=queryMap.get("mainProblem_like");
					Object mainProblem_isNull=queryMap.get("mainProblem_isNull");
					Object mainProblem_isNotNull=queryMap.get("mainProblem_isNotNull");
					Object mainProblem_in=queryMap.get("mainProblem_in");
				  															  					Object suggest=queryMap.get("suggest");
					Object suggest_like=queryMap.get("suggest_like");
					Object suggest_isNull=queryMap.get("suggest_isNull");
					Object suggest_isNotNull=queryMap.get("suggest_isNotNull");
					Object suggest_in=queryMap.get("suggest_in");
				  																											
			QueryCondition qc = new QueryCondition(HealthReportEntity.ID, QueryCondition.gt, "0");				
												if(id!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.eq, id));}
					if(id_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.gt, id_gt));}
					if(id_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.ge, id_ge));}
					if(id_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.lt, id_lt));}
					if(id_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.le, id_le));}
					if(id_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ID, QueryCondition.in, id_in));}
															  					if(assessmentTime_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.gt, assessmentTime_gt));}
					if(assessmentTime_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.ge, assessmentTime_ge));}
					if(assessmentTime_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.lt, assessmentTime_lt));}
					if(assessmentTime_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.ASSESSMENT_TIME, QueryCondition.le, assessmentTime_le));}
				  																if(employeeId!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.eq, employeeId));}
					if(employeeId_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.gt, employeeId_gt));}
					if(employeeId_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.ge, employeeId_ge));}
					if(employeeId_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.lt, employeeId_lt));}
					if(employeeId_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.le, employeeId_le));}
					if(employeeId_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.EMPLOYEE_ID, QueryCondition.in, employeeId_in));}
															  					if(diseaseSummary!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.eq, diseaseSummary));}
		            if(diseaseSummary_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.like, diseaseSummary_like));}
		            if(diseaseSummary_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.isNull, diseaseSummary_isNull));}
		            if(diseaseSummary_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.isNotNull, diseaseSummary_isNotNull));}
				    if(diseaseSummary_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.DISEASE_SUMMARY, QueryCondition.in, diseaseSummary_in));}
				  															  					if(recentRehabilitationGoals!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.eq, recentRehabilitationGoals));}
		            if(recentRehabilitationGoals_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.like, recentRehabilitationGoals_like));}
		            if(recentRehabilitationGoals_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.isNull, recentRehabilitationGoals_isNull));}
		            if(recentRehabilitationGoals_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.isNotNull, recentRehabilitationGoals_isNotNull));}
				    if(recentRehabilitationGoals_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.RECENT_REHABILITATION_GOALS, QueryCondition.in, recentRehabilitationGoals_in));}
				  															  					if(rehabilitationLongTermGoal!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.eq, rehabilitationLongTermGoal));}
		            if(rehabilitationLongTermGoal_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.like, rehabilitationLongTermGoal_like));}
		            if(rehabilitationLongTermGoal_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.isNull, rehabilitationLongTermGoal_isNull));}
		            if(rehabilitationLongTermGoal_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.isNotNull, rehabilitationLongTermGoal_isNotNull));}
				    if(rehabilitationLongTermGoal_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.REHABILITATION_LONG_TERM_GOAL, QueryCondition.in, rehabilitationLongTermGoal_in));}
				  															  					if(trainingProgram!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.eq, trainingProgram));}
		            if(trainingProgram_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.like, trainingProgram_like));}
		            if(trainingProgram_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.isNull, trainingProgram_isNull));}
		            if(trainingProgram_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.isNotNull, trainingProgram_isNotNull));}
				    if(trainingProgram_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.TRAINING_PROGRAM, QueryCondition.in, trainingProgram_in));}
				  																if(status!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.eq, status));}
					if(status_gt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.gt, status_gt));}
					if(status_ge!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.ge, status_ge));}
					if(status_lt!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.lt, status_lt));}
					if(status_le!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.le, status_le));}
					if(status_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.STATUS, QueryCondition.in, status_in));}
															  					if(mainProblem!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.eq, mainProblem));}
		            if(mainProblem_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.like, mainProblem_like));}
		            if(mainProblem_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.isNull, mainProblem_isNull));}
		            if(mainProblem_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.isNotNull, mainProblem_isNotNull));}
				    if(mainProblem_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.MAIN_PROBLEM, QueryCondition.in, mainProblem_in));}
				  															  					if(suggest!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.eq, suggest));}
		            if(suggest_like!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.like, suggest_like));}
		            if(suggest_isNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.isNull, suggest_isNull));}
		            if(suggest_isNotNull!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.isNotNull, suggest_isNotNull));}
				    if(suggest_in!=null){qc.andCondition(new QueryCondition(HealthReportEntity.SUGGEST, QueryCondition.in, suggest_in));}
				  										
				            				            						if (qc.getQueryNextCondition()!=null) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 						
										 	                 				     					     //删除关联信息
						if(delEmployee!=null&&delEmployee.booleanValue()){
							List<Object> list=dbManager.queryByConditionNoTransaction(HealthReportEntity.class,qc);
							String strIds="";
							if(list!=null&&list.size()>0){
								for(Object obj:list){
									HealthReportEntity entity=(HealthReportEntity)obj;
									strIds += entity.getEmployeeId()+",";
								}
								strIds = strIds.substring(0, strIds.length()-1);
							}
							if(strIds!=null&&!"".equals(strIds)){
								QueryCondition qc1 = new QueryCondition(EmployeeEntity.ID, QueryCondition.in, strIds);
								dbManager.delByConditionsNoTransaction(EmployeeEntity.class, qc1);
							}
							
						}
				     				     				     										 	                 		                 //删除关联信息
						if(delHealthReportPhotoList!=null&&delHealthReportPhotoList.booleanValue()){
							List<Object> list=dbManager.queryByConditionNoTransaction(HealthReportEntity.class,qc);
							String strIds="";
							if(list!=null&&list.size()>0){
								for(Object obj:list){
									HealthReportEntity entity=(HealthReportEntity)obj;
									strIds += entity.getId()+",";
								}
								strIds = strIds.substring(0, strIds.length()-1);
							}
							if(strIds!=null&&!"".equals(strIds)){
								QueryCondition qc1 = new QueryCondition(HealthReportPhotoEntity.HEALTH_REPORT_ID, QueryCondition.in, strIds);
								dbManager.delByConditionsNoTransaction(HealthReportPhotoEntity.class, qc1);
							}
							
						}
				     				     				     				     										result = dbManager.delByConditionsNoTransaction(HealthReportEntity.class,qc);				
					tx.commitAndClose();  
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
		
}
