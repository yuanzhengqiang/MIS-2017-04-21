package fsk.service.caseRecord;

import java.math.BigDecimal;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import org.apache.log4j.Logger;

import fsk.entity.older.OlderEntity;
import fsk.entity.medicalHistory.MedicalHistoryEntity;

import fsk.entity.caseRecord.CaseRecordEntity;
import fsk.service.medicalHistory.MedicalHistoryService;

import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

/**
 * @Title: Service
 * @Description: 病例记录服务类
 * @author feng.gu
 * @date 2016-07-19 11:09:09
 * @version V1.0
 * 
 */
public class CaseRecordService {
	private static Logger logger = Logger.getLogger(CaseRecordService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static CaseRecordService caseRecordService;
	private static MedicalHistoryService medicalHistoryService=MedicalHistoryService.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static CaseRecordService getInstance() {
		if (caseRecordService == null) {
			caseRecordService = new CaseRecordService();
		}
		return caseRecordService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(CaseRecordEntity caseRecord) {
		boolean result = false;
		if (caseRecord != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 关联信息保存
				OlderEntity older = caseRecord.getOlder();
				if (older != null) {
					dbManager.saveNoTransaction(older);
					caseRecord.setOlderId(older.getId());
				}
				if (caseRecord.getMedicalHistoryList() != null
						&& caseRecord.getMedicalHistoryList().size() > 0) {
					// 关联信息保存
					if (caseRecord.getId() == null) {
						dbManager.saveNoTransaction(caseRecord);
					}
					for (MedicalHistoryEntity medicalHistoryEntity : caseRecord
							.getMedicalHistoryList()) {
						medicalHistoryEntity
								.setCaseRecordId(caseRecord.getId());
						dbManager.saveNoTransaction(medicalHistoryEntity);
					}
				}
				result = dbManager.saveNoTransaction(caseRecord);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(List<CaseRecordEntity> caseRecordList) {
		boolean result = false;
		if (caseRecordList != null && caseRecordList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (CaseRecordEntity caseRecord : caseRecordList) {
					if (caseRecord != null) {
						// 关联信息保存
						OlderEntity older = caseRecord.getOlder();
						if (older != null) {
							dbManager.saveNoTransaction(older);
							caseRecord.setOlderId(older.getId());
						}
						// 关联信息保存
						if (caseRecord.getMedicalHistoryList() != null
								&& caseRecord.getMedicalHistoryList().size() > 0) {
							if (caseRecord.getId() == null) {
								dbManager.saveNoTransaction(caseRecord);
							}
							for (MedicalHistoryEntity medicalHistoryEntity : caseRecord
									.getMedicalHistoryList()) {
								medicalHistoryEntity.setCaseRecordId(caseRecord
										.getId());
								dbManager
										.saveNoTransaction(medicalHistoryEntity);
							}
						}
						result = dbManager.saveNoTransaction(caseRecord);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public CaseRecordEntity getById(Integer id) {
		CaseRecordEntity obj = null;
		if (id != null) {
			obj = (CaseRecordEntity) dbManager.getById(id,
					CaseRecordEntity.class);
		}
		return obj;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param olderShow
	 *            是否查询关联信息
	 * @param medicalHistoryListShow
	 *            是否查询关联信息
	 * @param obj
	 */
	public CaseRecordEntity getById(Integer id, Boolean olderShow,
			Boolean medicalHistoryListShow) {
		CaseRecordEntity obj = null;
		if (id != null) {
			obj = (CaseRecordEntity) dbManager.getById(id,
					CaseRecordEntity.class);
			// 查询关联内容
			if (olderShow != null && olderShow.booleanValue() && obj != null
					&& obj.getOlderId() != null && obj.getOlderId() > 0) {
				OlderEntity older = (OlderEntity) dbManager.getById(
						obj.getOlderId(), OlderEntity.class);
				obj.setOlder(older);
			}
			// 查询关联内容
			if (medicalHistoryListShow != null
					&& medicalHistoryListShow.booleanValue() && obj != null
					&& obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager
						.searchListByColumn(MedicalHistoryEntity.class,
								MedicalHistoryEntity.CASE_RECORD_ID,
								String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<MedicalHistoryEntity> medicalHistoryList = new ArrayList<MedicalHistoryEntity>();
					for (Object o : list) {
						medicalHistoryList.add((MedicalHistoryEntity) o);
					}
					obj.setMedicalHistoryList(medicalHistoryList);
				}
			}
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<CaseRecordEntity> getListByCondition(
			Map<String, Object> queryMap) {
		List<CaseRecordEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object olderId = queryMap.get("olderId");
		Object olderId_gt = queryMap.get("olderId_gt");
		Object olderId_ge = queryMap.get("olderId_ge");
		Object olderId_lt = queryMap.get("olderId_lt");
		Object olderId_le = queryMap.get("olderId_le");
		Object olderId_in = queryMap.get("olderId_in");
		Object recoveryTime_gt = queryMap.get("recoveryTime_gt");
		Object recoveryTime_ge = queryMap.get("recoveryTime_ge");
		Object recoveryTime_lt = queryMap.get("recoveryTime_lt");
		Object recoveryTime_le = queryMap.get("recoveryTime_le");
		Object other = queryMap.get("other");
		Object other_like = queryMap.get("other_like");
		Object other_isNull = queryMap.get("other_isNull");
		Object other_isNotNull = queryMap.get("other_isNotNull");
		Object other_in = queryMap.get("other_in");
		Object des = queryMap.get("des");
		Object des_like = queryMap.get("des_like");
		Object des_isNull = queryMap.get("des_isNull");
		Object des_isNotNull = queryMap.get("des_isNotNull");
		Object des_in = queryMap.get("des_in");
		Object assessmentPerson = queryMap.get("assessmentPerson");
		Object assessmentPerson_like = queryMap.get("assessmentPerson_like");
		Object assessmentPerson_isNull = queryMap
				.get("assessmentPerson_isNull");
		Object assessmentPerson_isNotNull = queryMap
				.get("assessmentPerson_isNotNull");
		Object assessmentPerson_in = queryMap.get("assessmentPerson_in");
		Object assessmentTime_gt = queryMap.get("assessmentTime_gt");
		Object assessmentTime_ge = queryMap.get("assessmentTime_ge");
		Object assessmentTime_lt = queryMap.get("assessmentTime_lt");
		Object assessmentTime_le = queryMap.get("assessmentTime_le");

		QueryCondition qc = new QueryCondition(CaseRecordEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.in, id_in));
		}
		if (olderId != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.eq, olderId));
		}
		if (olderId_gt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.gt, olderId_gt));
		}
		if (olderId_ge != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.ge, olderId_ge));
		}
		if (olderId_lt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.lt, olderId_lt));
		}
		if (olderId_le != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.le, olderId_le));
		}
		if (olderId_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.in, olderId_in));
		}
		if (recoveryTime_gt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.gt, recoveryTime_gt));
		}
		if (recoveryTime_ge != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.ge, recoveryTime_ge));
		}
		if (recoveryTime_lt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.lt, recoveryTime_lt));
		}
		if (recoveryTime_le != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.le, recoveryTime_le));
		}
		if (other != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.eq, other));
		}
		if (other_like != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.like, other_like));
		}
		if (other_isNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.isNull, other_isNull));
		}
		if (other_isNotNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.isNotNull, other_isNotNull));
		}
		if (other_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.in, other_in));
		}
		if (des != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.eq, des));
		}
		if (des_like != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.like, des_like));
		}
		if (des_isNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.isNull, des_isNull));
		}
		if (des_isNotNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.isNotNull, des_isNotNull));
		}
		if (des_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.in, des_in));
		}
		if (assessmentPerson != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.eq,
					assessmentPerson));
		}
		if (assessmentPerson_like != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.like,
					assessmentPerson_like));
		}
		if (assessmentPerson_isNull != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.isNull,
					assessmentPerson_isNull));
		}
		if (assessmentPerson_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON,
					QueryCondition.isNotNull, assessmentPerson_isNotNull));
		}
		if (assessmentPerson_in != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.in,
					assessmentPerson_in));
		}
		if (assessmentTime_gt != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.gt,
					assessmentTime_gt));
		}
		if (assessmentTime_ge != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.ge,
					assessmentTime_ge));
		}
		if (assessmentTime_lt != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.lt,
					assessmentTime_lt));
		}
		if (assessmentTime_le != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.le,
					assessmentTime_le));
		}

		list = dbManager.queryByCondition(CaseRecordEntity.class, qc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<CaseRecordEntity>();
			for (Object obj : list) {
				returnlist.add((CaseRecordEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param olderShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param medicalHistoryListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public List<CaseRecordEntity> getListByCondition(
			Map<String, Object> queryMap, List<OrderVO> orderList,
			Boolean olderShow, Boolean medicalHistoryListShow) {
		List<CaseRecordEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object olderId = queryMap.get("olderId");
		Object olderId_gt = queryMap.get("olderId_gt");
		Object olderId_ge = queryMap.get("olderId_ge");
		Object olderId_lt = queryMap.get("olderId_lt");
		Object olderId_le = queryMap.get("olderId_le");
		Object olderId_in = queryMap.get("olderId_in");
		Object recoveryTime_gt = queryMap.get("recoveryTime_gt");
		Object recoveryTime_ge = queryMap.get("recoveryTime_ge");
		Object recoveryTime_lt = queryMap.get("recoveryTime_lt");
		Object recoveryTime_le = queryMap.get("recoveryTime_le");
		Object other = queryMap.get("other");
		Object other_like = queryMap.get("other_like");
		Object other_isNull = queryMap.get("other_isNull");
		Object other_isNotNull = queryMap.get("other_isNotNull");
		Object other_in = queryMap.get("other_in");
		Object des = queryMap.get("des");
		Object des_like = queryMap.get("des_like");
		Object des_isNull = queryMap.get("des_isNull");
		Object des_isNotNull = queryMap.get("des_isNotNull");
		Object des_in = queryMap.get("des_in");
		Object assessmentPerson = queryMap.get("assessmentPerson");
		Object assessmentPerson_like = queryMap.get("assessmentPerson_like");
		Object assessmentPerson_isNull = queryMap
				.get("assessmentPerson_isNull");
		Object assessmentPerson_isNotNull = queryMap
				.get("assessmentPerson_isNotNull");
		Object assessmentPerson_in = queryMap.get("assessmentPerson_in");
		Object assessmentTime_gt = queryMap.get("assessmentTime_gt");
		Object assessmentTime_ge = queryMap.get("assessmentTime_ge");
		Object assessmentTime_lt = queryMap.get("assessmentTime_lt");
		Object assessmentTime_le = queryMap.get("assessmentTime_le");

		QueryCondition qc = new QueryCondition(CaseRecordEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.in, id_in));
		}
		if (olderId != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.eq, olderId));
		}
		if (olderId_gt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.gt, olderId_gt));
		}
		if (olderId_ge != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.ge, olderId_ge));
		}
		if (olderId_lt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.lt, olderId_lt));
		}
		if (olderId_le != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.le, olderId_le));
		}
		if (olderId_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.in, olderId_in));
		}
		if (recoveryTime_gt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.gt, recoveryTime_gt));
		}
		if (recoveryTime_ge != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.ge, recoveryTime_ge));
		}
		if (recoveryTime_lt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.lt, recoveryTime_lt));
		}
		if (recoveryTime_le != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.le, recoveryTime_le));
		}
		if (other != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.eq, other));
		}
		if (other_like != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.like, other_like));
		}
		if (other_isNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.isNull, other_isNull));
		}
		if (other_isNotNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.isNotNull, other_isNotNull));
		}
		if (other_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.in, other_in));
		}
		if (des != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.eq, des));
		}
		if (des_like != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.like, des_like));
		}
		if (des_isNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.isNull, des_isNull));
		}
		if (des_isNotNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.isNotNull, des_isNotNull));
		}
		if (des_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.in, des_in));
		}
		if (assessmentPerson != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.eq,
					assessmentPerson));
		}
		if (assessmentPerson_like != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.like,
					assessmentPerson_like));
		}
		if (assessmentPerson_isNull != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.isNull,
					assessmentPerson_isNull));
		}
		if (assessmentPerson_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON,
					QueryCondition.isNotNull, assessmentPerson_isNotNull));
		}
		if (assessmentPerson_in != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.in,
					assessmentPerson_in));
		}
		if (assessmentTime_gt != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.gt,
					assessmentTime_gt));
		}
		if (assessmentTime_ge != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.ge,
					assessmentTime_ge));
		}
		if (assessmentTime_lt != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.lt,
					assessmentTime_lt));
		}
		if (assessmentTime_le != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.le,
					assessmentTime_le));
		}

		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(CaseRecordEntity.class, qc, oc);
		int a = 0;
		if (olderShow != null && olderShow.booleanValue()) {
			a++;
		}
		if (medicalHistoryListShow != null
				&& medicalHistoryListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && list != null && list.size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < list.size(); i++) {
				CaseRecordEntity obj = (CaseRecordEntity) list.get(i);
				// 查询关联内容
				if (olderShow != null && olderShow.booleanValue()
						&& obj != null && obj.getOlderId() != null
						&& obj.getOlderId() > 0) {
					OlderEntity older = (OlderEntity) dbManager.getById(
							obj.getOlderId(), OlderEntity.class);
					obj.setOlder(older);
				}
				// 查询关联内容
				if (medicalHistoryListShow != null
						&& medicalHistoryListShow.booleanValue() && obj != null
						&& obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							MedicalHistoryEntity.class,
							MedicalHistoryEntity.CASE_RECORD_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<MedicalHistoryEntity> medicalHistoryList = new ArrayList<MedicalHistoryEntity>();
						for (Object o : objList) {
							medicalHistoryList.add((MedicalHistoryEntity) o);
						}
						obj.setMedicalHistoryList(medicalHistoryList);
					}
				}
				result.add(obj);
			}
			list = result;
		}
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<CaseRecordEntity>();
			for (Object obj : list) {
				returnlist.add((CaseRecordEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object olderId = queryMap.get("olderId");
		Object olderId_gt = queryMap.get("olderId_gt");
		Object olderId_ge = queryMap.get("olderId_ge");
		Object olderId_lt = queryMap.get("olderId_lt");
		Object olderId_le = queryMap.get("olderId_le");
		Object olderId_in = queryMap.get("olderId_in");
		Object recoveryTime_gt = queryMap.get("recoveryTime_gt");
		Object recoveryTime_ge = queryMap.get("recoveryTime_ge");
		Object recoveryTime_lt = queryMap.get("recoveryTime_lt");
		Object recoveryTime_le = queryMap.get("recoveryTime_le");
		Object other = queryMap.get("other");
		Object other_like = queryMap.get("other_like");
		Object other_isNull = queryMap.get("other_isNull");
		Object other_isNotNull = queryMap.get("other_isNotNull");
		Object other_in = queryMap.get("other_in");
		Object des = queryMap.get("des");
		Object des_like = queryMap.get("des_like");
		Object des_isNull = queryMap.get("des_isNull");
		Object des_isNotNull = queryMap.get("des_isNotNull");
		Object des_in = queryMap.get("des_in");
		Object assessmentPerson = queryMap.get("assessmentPerson");
		Object assessmentPerson_like = queryMap.get("assessmentPerson_like");
		Object assessmentPerson_isNull = queryMap
				.get("assessmentPerson_isNull");
		Object assessmentPerson_isNotNull = queryMap
				.get("assessmentPerson_isNotNull");
		Object assessmentPerson_in = queryMap.get("assessmentPerson_in");
		Object assessmentTime_gt = queryMap.get("assessmentTime_gt");
		Object assessmentTime_ge = queryMap.get("assessmentTime_ge");
		Object assessmentTime_lt = queryMap.get("assessmentTime_lt");
		Object assessmentTime_le = queryMap.get("assessmentTime_le");

		QueryCondition qc = new QueryCondition(CaseRecordEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.in, id_in));
		}
		if (olderId != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.eq, olderId));
		}
		if (olderId_gt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.gt, olderId_gt));
		}
		if (olderId_ge != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.ge, olderId_ge));
		}
		if (olderId_lt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.lt, olderId_lt));
		}
		if (olderId_le != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.le, olderId_le));
		}
		if (olderId_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.in, olderId_in));
		}
		if (recoveryTime_gt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.gt, recoveryTime_gt));
		}
		if (recoveryTime_ge != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.ge, recoveryTime_ge));
		}
		if (recoveryTime_lt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.lt, recoveryTime_lt));
		}
		if (recoveryTime_le != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.le, recoveryTime_le));
		}
		if (other != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.eq, other));
		}
		if (other_like != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.like, other_like));
		}
		if (other_isNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.isNull, other_isNull));
		}
		if (other_isNotNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.isNotNull, other_isNotNull));
		}
		if (other_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.in, other_in));
		}
		if (des != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.eq, des));
		}
		if (des_like != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.like, des_like));
		}
		if (des_isNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.isNull, des_isNull));
		}
		if (des_isNotNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.isNotNull, des_isNotNull));
		}
		if (des_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.in, des_in));
		}
		if (assessmentPerson != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.eq,
					assessmentPerson));
		}
		if (assessmentPerson_like != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.like,
					assessmentPerson_like));
		}
		if (assessmentPerson_isNull != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.isNull,
					assessmentPerson_isNull));
		}
		if (assessmentPerson_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON,
					QueryCondition.isNotNull, assessmentPerson_isNotNull));
		}
		if (assessmentPerson_in != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.in,
					assessmentPerson_in));
		}
		if (assessmentTime_gt != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.gt,
					assessmentTime_gt));
		}
		if (assessmentTime_ge != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.ge,
					assessmentTime_ge));
		}
		if (assessmentTime_lt != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.lt,
					assessmentTime_lt));
		}
		if (assessmentTime_le != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.le,
					assessmentTime_le));
		}

		pagelist = dbManager.queryByCondition(CaseRecordEntity.class, qc,
				pageno, pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @param olderShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param medicalHistoryListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, int pageno, int pagesize,
			Boolean olderShow, Boolean medicalHistoryListShow) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object olderId = queryMap.get("olderId");
		Object olderId_gt = queryMap.get("olderId_gt");
		Object olderId_ge = queryMap.get("olderId_ge");
		Object olderId_lt = queryMap.get("olderId_lt");
		Object olderId_le = queryMap.get("olderId_le");
		Object olderId_in = queryMap.get("olderId_in");
		Object recoveryTime_gt = queryMap.get("recoveryTime_gt");
		Object recoveryTime_ge = queryMap.get("recoveryTime_ge");
		Object recoveryTime_lt = queryMap.get("recoveryTime_lt");
		Object recoveryTime_le = queryMap.get("recoveryTime_le");
		Object other = queryMap.get("other");
		Object other_like = queryMap.get("other_like");
		Object other_isNull = queryMap.get("other_isNull");
		Object other_isNotNull = queryMap.get("other_isNotNull");
		Object other_in = queryMap.get("other_in");
		Object des = queryMap.get("des");
		Object des_like = queryMap.get("des_like");
		Object des_isNull = queryMap.get("des_isNull");
		Object des_isNotNull = queryMap.get("des_isNotNull");
		Object des_in = queryMap.get("des_in");
		Object assessmentPerson = queryMap.get("assessmentPerson");
		Object assessmentPerson_like = queryMap.get("assessmentPerson_like");
		Object assessmentPerson_isNull = queryMap
				.get("assessmentPerson_isNull");
		Object assessmentPerson_isNotNull = queryMap
				.get("assessmentPerson_isNotNull");
		Object assessmentPerson_in = queryMap.get("assessmentPerson_in");
		Object assessmentTime_gt = queryMap.get("assessmentTime_gt");
		Object assessmentTime_ge = queryMap.get("assessmentTime_ge");
		Object assessmentTime_lt = queryMap.get("assessmentTime_lt");
		Object assessmentTime_le = queryMap.get("assessmentTime_le");

		QueryCondition qc = new QueryCondition(CaseRecordEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.in, id_in));
		}
		if (olderId != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.eq, olderId));
		}
		if (olderId_gt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.gt, olderId_gt));
		}
		if (olderId_ge != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.ge, olderId_ge));
		}
		if (olderId_lt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.lt, olderId_lt));
		}
		if (olderId_le != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.le, olderId_le));
		}
		if (olderId_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.in, olderId_in));
		}
		if (recoveryTime_gt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.gt, recoveryTime_gt));
		}
		if (recoveryTime_ge != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.ge, recoveryTime_ge));
		}
		if (recoveryTime_lt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.lt, recoveryTime_lt));
		}
		if (recoveryTime_le != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.le, recoveryTime_le));
		}
		if (other != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.eq, other));
		}
		if (other_like != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.like, other_like));
		}
		if (other_isNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.isNull, other_isNull));
		}
		if (other_isNotNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.isNotNull, other_isNotNull));
		}
		if (other_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.in, other_in));
		}
		if (des != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.eq, des));
		}
		if (des_like != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.like, des_like));
		}
		if (des_isNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.isNull, des_isNull));
		}
		if (des_isNotNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.isNotNull, des_isNotNull));
		}
		if (des_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.in, des_in));
		}
		if (assessmentPerson != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.eq,
					assessmentPerson));
		}
		if (assessmentPerson_like != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.like,
					assessmentPerson_like));
		}
		if (assessmentPerson_isNull != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.isNull,
					assessmentPerson_isNull));
		}
		if (assessmentPerson_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON,
					QueryCondition.isNotNull, assessmentPerson_isNotNull));
		}
		if (assessmentPerson_in != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.in,
					assessmentPerson_in));
		}
		if (assessmentTime_gt != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.gt,
					assessmentTime_gt));
		}
		if (assessmentTime_ge != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.ge,
					assessmentTime_ge));
		}
		if (assessmentTime_lt != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.lt,
					assessmentTime_lt));
		}
		if (assessmentTime_le != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.le,
					assessmentTime_le));
		}

		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		pagelist = dbManager.queryByConditions(CaseRecordEntity.class, qc, oc,
				pageno, pagesize);
		int a = 0;
		if (olderShow != null && olderShow.booleanValue()) {
			a++;
		}
		if (medicalHistoryListShow != null
				&& medicalHistoryListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && pagelist != null && pagelist.getResultList() != null
				&& pagelist.getResultList().size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < pagelist.getResultList().size(); i++) {
				CaseRecordEntity obj = (CaseRecordEntity) pagelist
						.getResultList().get(i);
				// 查询关联内容
				if (olderShow != null && olderShow.booleanValue()
						&& obj != null && obj.getOlderId() != null
						&& obj.getOlderId() > 0) {
					OlderEntity older = (OlderEntity) dbManager.getById(
							obj.getOlderId(), OlderEntity.class);
					obj.setOlder(older);
				}
				// 查询关联内容
				if (medicalHistoryListShow != null
						&& medicalHistoryListShow.booleanValue() && obj != null
						&& obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							MedicalHistoryEntity.class,
							MedicalHistoryEntity.CASE_RECORD_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<MedicalHistoryEntity> medicalHistoryList = new ArrayList<MedicalHistoryEntity>();
						for (Object o : objList) {
							medicalHistoryList.add((MedicalHistoryEntity) o);
						}
						obj.setMedicalHistoryList(medicalHistoryList);
					}
				}
				result.add(obj);
			}
			pagelist.setResultList(result);
		}
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id, Boolean delOlder,
			Boolean delMedicalHistoryList) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delOlder != null && delOlder.booleanValue()) {
					CaseRecordEntity caseRecord = (CaseRecordEntity) dbManager
							.getById(id, CaseRecordEntity.class);
					if (caseRecord != null && caseRecord.getOlderId() != null) {
						dbManager.delNoTransaction(caseRecord.getOlderId(),
								OlderEntity.class);
					}
				}
				// 删除关联信息
				if (delMedicalHistoryList != null
						&& delMedicalHistoryList.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							MedicalHistoryEntity.CASE_RECORD_ID,
							QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(
							MedicalHistoryEntity.class, qc);
				}
				result = dbManager.delNoTransaction(id, CaseRecordEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(CaseRecordEntity.ID,
						QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(
						CaseRecordEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		/*删除关联表pei*/
		boolean flag = true;
		Map<String,Object> queryMapmed = new HashMap<String,Object>();
		queryMapmed.put("caseRecordId_in", ids);	
		List<MedicalHistoryEntity> entityList = medicalHistoryService.getListByCondition(queryMapmed);
		String idsdel="";
		if(entityList!=null&&entityList.size()>0){
			for(MedicalHistoryEntity entity:entityList){
			/*	idsdel = idsdel+entity.getId()+",";
				idsdel = idsdel.replaceAll(",,", ",");
				idsdel = idsdel.substring(0,idsdel.length()-1);
				if(!"".equals(idsdel)){
				QueryCondition qcqc = new QueryCondition(MedicalHistoryEntity.ID,QueryCondition.in, ids);
					try {
						flag=dbManager.delByConditionsNoTransaction(MedicalHistoryEntity.class,qcqc);
					} catch (Exception e) {
					}
				}*/
				Integer iddel = entity.getId();
				flag=dbManager.del(iddel, MedicalHistoryEntity.class);
			}
			
		}
		if(!flag){
			result = false;
		}
		//
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap, Boolean delOlder,
			Boolean delMedicalHistoryList) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object olderId = queryMap.get("olderId");
		Object olderId_gt = queryMap.get("olderId_gt");
		Object olderId_ge = queryMap.get("olderId_ge");
		Object olderId_lt = queryMap.get("olderId_lt");
		Object olderId_le = queryMap.get("olderId_le");
		Object olderId_in = queryMap.get("olderId_in");
		Object recoveryTime_gt = queryMap.get("recoveryTime_gt");
		Object recoveryTime_ge = queryMap.get("recoveryTime_ge");
		Object recoveryTime_lt = queryMap.get("recoveryTime_lt");
		Object recoveryTime_le = queryMap.get("recoveryTime_le");
		Object other = queryMap.get("other");
		Object other_like = queryMap.get("other_like");
		Object other_isNull = queryMap.get("other_isNull");
		Object other_isNotNull = queryMap.get("other_isNotNull");
		Object other_in = queryMap.get("other_in");
		Object des = queryMap.get("des");
		Object des_like = queryMap.get("des_like");
		Object des_isNull = queryMap.get("des_isNull");
		Object des_isNotNull = queryMap.get("des_isNotNull");
		Object des_in = queryMap.get("des_in");
		Object assessmentPerson = queryMap.get("assessmentPerson");
		Object assessmentPerson_like = queryMap.get("assessmentPerson_like");
		Object assessmentPerson_isNull = queryMap
				.get("assessmentPerson_isNull");
		Object assessmentPerson_isNotNull = queryMap
				.get("assessmentPerson_isNotNull");
		Object assessmentPerson_in = queryMap.get("assessmentPerson_in");
		Object assessmentTime_gt = queryMap.get("assessmentTime_gt");
		Object assessmentTime_ge = queryMap.get("assessmentTime_ge");
		Object assessmentTime_lt = queryMap.get("assessmentTime_lt");
		Object assessmentTime_le = queryMap.get("assessmentTime_le");

		QueryCondition qc = new QueryCondition(CaseRecordEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.ID,
					QueryCondition.in, id_in));
		}
		if (olderId != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.eq, olderId));
		}
		if (olderId_gt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.gt, olderId_gt));
		}
		if (olderId_ge != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.ge, olderId_ge));
		}
		if (olderId_lt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.lt, olderId_lt));
		}
		if (olderId_le != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.le, olderId_le));
		}
		if (olderId_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OLDER_ID,
					QueryCondition.in, olderId_in));
		}
		if (recoveryTime_gt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.gt, recoveryTime_gt));
		}
		if (recoveryTime_ge != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.ge, recoveryTime_ge));
		}
		if (recoveryTime_lt != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.lt, recoveryTime_lt));
		}
		if (recoveryTime_le != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.RECOVERY_TIME,
					QueryCondition.le, recoveryTime_le));
		}
		if (other != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.eq, other));
		}
		if (other_like != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.like, other_like));
		}
		if (other_isNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.isNull, other_isNull));
		}
		if (other_isNotNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.isNotNull, other_isNotNull));
		}
		if (other_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.OTHER,
					QueryCondition.in, other_in));
		}
		if (des != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.eq, des));
		}
		if (des_like != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.like, des_like));
		}
		if (des_isNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.isNull, des_isNull));
		}
		if (des_isNotNull != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.isNotNull, des_isNotNull));
		}
		if (des_in != null) {
			qc.andCondition(new QueryCondition(CaseRecordEntity.DES,
					QueryCondition.in, des_in));
		}
		if (assessmentPerson != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.eq,
					assessmentPerson));
		}
		if (assessmentPerson_like != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.like,
					assessmentPerson_like));
		}
		if (assessmentPerson_isNull != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.isNull,
					assessmentPerson_isNull));
		}
		if (assessmentPerson_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON,
					QueryCondition.isNotNull, assessmentPerson_isNotNull));
		}
		if (assessmentPerson_in != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_PERSON, QueryCondition.in,
					assessmentPerson_in));
		}
		if (assessmentTime_gt != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.gt,
					assessmentTime_gt));
		}
		if (assessmentTime_ge != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.ge,
					assessmentTime_ge));
		}
		if (assessmentTime_lt != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.lt,
					assessmentTime_lt));
		}
		if (assessmentTime_le != null) {
			qc.andCondition(new QueryCondition(
					CaseRecordEntity.ASSESSMENT_TIME, QueryCondition.le,
					assessmentTime_le));
		}

		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delOlder != null && delOlder.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									CaseRecordEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							CaseRecordEntity entity = (CaseRecordEntity) obj;
							strIds += entity.getOlderId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(OlderEntity.ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								OlderEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delMedicalHistoryList != null
						&& delMedicalHistoryList.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									CaseRecordEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							CaseRecordEntity entity = (CaseRecordEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								MedicalHistoryEntity.CASE_RECORD_ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								MedicalHistoryEntity.class, qc1);
					}

				}
				result = dbManager.delByConditionsNoTransaction(
						CaseRecordEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

}
