package fsk.handler.review;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.business.handler.BaseHandler;
import com.framework.system.common.service.SystemService;
import com.framework.system.db.query.OrderVO;

import fsk.entity.older.OlderEntity;
import fsk.entity.review.ReviewEntity;
import fsk.pack.review.ReviewPack;
import fsk.parse.review.ReviewParse;
import fsk.service.older.OlderService;
import fsk.service.review.ReviewService;
import fsk.util.CodeCreateUtil;

/**
 * @Title: Handler
 * @Description: 回访记录业务处理器
 * @author feng.gu
 * @date 2016-11-17 10:38:46
 * @version V1.0
 * 
 */
public class ReviewHandler extends BaseHandler {
	private static Logger logger = Logger.getLogger(ReviewService.class);
	private static SimpleDateFormat formater = new SimpleDateFormat("yyyyMMddHHmmss");
	/**
	 * 解析器
	 */
	private ReviewParse reviewParse = ReviewParse.getInstance();
	/**
	 * 业务处理器
	 */
	private ReviewService reviewService = ReviewService.getInstance();
	/**
	 * 封装器
	 */
	private ReviewPack reviewPack = ReviewPack.getInstance();

	private static ReviewHandler reviewHandler;

	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();
	private static OlderService olderService = OlderService.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static ReviewHandler getInstance() {
		if (reviewHandler == null) {
			reviewHandler = new ReviewHandler();
		}
		return reviewHandler;
	}

	/**
	 * 
	 * @param type
	 *            1-json 2-xml
	 * @param entityName
	 * @param command
	 * @param reqStr
	 * @param request
	 * @param response
	 */
	public String doHandler(int type, String command, String reqStr, HttpServletRequest request, HttpServletResponse response) {
		logger.debug("请求消息：" + reqStr);
		String resultStr = "";
		try {
			// 解析
			Map<String, Object> parseMap = reviewParse.parse(type, command, reqStr, request);
			String action = (String) parseMap.get("action");
			ReviewEntity review = (ReviewEntity) parseMap.get("review");
			List<ReviewEntity> reviewList = (List<ReviewEntity>) parseMap.get("reviewList");
			Integer id = (Integer) parseMap.get("id");
			Map<String, Object> queryMap = (Map<String, Object>) parseMap.get("queryMap");
			Integer pageno = (Integer) parseMap.get("pageno");
			Integer pagesize = (Integer) parseMap.get("pagesize");
			List<OrderVO> orderList = (List<OrderVO>) parseMap.get("orderList");

			Boolean olderShow = (Boolean) parseMap.get("olderShow");
			Boolean delOlder = (Boolean) parseMap.get("delOlder");
			Boolean siteShow = (Boolean) parseMap.get("siteShow");
			Boolean delSite = (Boolean) parseMap.get("delSite");
			Boolean employeeShow = (Boolean) parseMap.get("employeeShow");
			Boolean delEmployee = (Boolean) parseMap.get("delEmployee");

			// 业务处理
			Object result = null;
			if ("save".equals(action)) {
				// 新增时自动生成回访编号
				if (review.getId() == null) {
					review.setRecordCode(CodeCreateUtil.creatreviewNum());
				}
				// 回访结束时，更新老人的上次回访时间
				if (review.getId() != null) {
					ReviewEntity olderReview = reviewService.getById(review.getId());
					String olderStatus = olderReview.getStatus();
					if ("1".equals(olderStatus) && "2".equals(review.getStatus())) {
						OlderEntity older = olderService.getById(review.getOlderId());
						if (older != null) {
							older.setLastReviewTime(formater.format(new Date()));
							olderService.save(older);
						}
					}
				}
				result = reviewService.save(review);
			} else if ("saveList".equals(action)) {
				result = reviewService.saveList(reviewList);
			} else if ("getById".equals(action)) {
				result = reviewService.getById(id, olderShow, siteShow, employeeShow);
			} else if ("getListByCondition".equals(action)) {
				// 根据数据权限 增加查询条件
				queryMap = systemService.addDataRuleByRoles("ReviewEntity", queryMap, request);
				result = reviewService.getListByCondition(queryMap, orderList, pageno, pagesize, olderShow, siteShow, employeeShow);
			} else if ("del".equals(action)) {
				result = reviewService.del(id, delOlder, delSite, delEmployee);
			} else if ("delList".equals(action)) {
				result = reviewService.delList(queryMap, delOlder, delSite, delEmployee);
			}
			// 封装
			Map<String, Object> packMap = reviewPack.pack(type, action, result, review);
			String actionBack = (String) packMap.get("action");
			String resultBack = (String) packMap.get("result");
			String desBack = (String) packMap.get("des");
			JSONObject pageBack = (JSONObject) packMap.get("page");
			JSONObject contentBack = (JSONObject) packMap.get("content");

			JSONObject repJson = new JSONObject();
			if (actionBack != null && !"".equals(actionBack)) {
				repJson.put("action", actionBack);
			}
			if (resultBack != null && !"".equals(resultBack)) {
				repJson.put("result", resultBack);
			}
			if (desBack != null && !"".equals(desBack)) {
				repJson.put("des", desBack);
			}
			if (pageBack != null) {
				repJson.put("page", pageBack);
			}
			if (contentBack != null && !"".equals(contentBack)) {
				repJson.put("content", contentBack);
			}
			logger.debug("返回消息：" + repJson.toString());
			resultStr = repJson.toString();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error(e);
		}
		return resultStr;
	}
}
