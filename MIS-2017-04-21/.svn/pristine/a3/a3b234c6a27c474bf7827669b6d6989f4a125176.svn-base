package ${requestMap.entityInfo.bussiPackage}.parse.${requestMap.entityInfo.entityPackage};

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.framework.system.util.JsonUtil;

import javax.servlet.http.HttpServletRequest;
import com.framework.system.db.manager.DBManager;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import ${requestMap.entityInfo.bussiPackage}.entity.${requestMap.entityInfo.entityPackage}.${requestMap.entityInfo.entityName}Entity;



#foreach( $relation in $requestMap.relationList)
#if(${relation.relation}!="ParentToOne")
#if(${relation.joinColumnFirstUpper}=="User")
import com.framework.system.common.entity.user.UserEntity;
#else
#if(${relation.joinColumnFirstUpper}=="DataDic")
import com.framework.system.common.entity.dataDic.DataDicEntity;
#else
import ${requestMap.entityInfo.bussiPackage}.entity.${relation.joinColumn}.${relation.joinColumnFirstUpper}Entity;
#if(${relation.relation}=="ManyToMany")
#if(${relation.jionFirst}=='Y')import ${requestMap.entityInfo.bussiPackage}.entity.${requestMap.entityInfo.entityPackage}${relation.joinColumnFirstUpper}.#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity;#end
#if(${relation.jionFirst}=='N')import ${requestMap.entityInfo.bussiPackage}.entity.${relation.joinColumn}${requestMap.entityInfo.entityName}.${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}Entity;#end
#end
#end
#end
#end
#end

import com.framework.system.util.JsonUtil;
import com.framework.system.db.query.OrderVO;
 /**   
 * @Title: Parse
 * @Description: $requestMap.entityInfo.tableDescription解析器
 * @author feng.gu
 * @date $requestMap.entityInfo.createTime
 * @version V1.0   
 *
 */
public class ${requestMap.entityInfo.entityName}Parse {
	private static Logger logger = Logger.getLogger(${requestMap.entityInfo.entityName}Parse.class);
	private static ${requestMap.entityInfo.entityName}Parse ${requestMap.entityInfo.entityPackage}Parse;
	private DBManager dbManager = DBManager.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static ${requestMap.entityInfo.entityName}Parse getInstance() {
		if (${requestMap.entityInfo.entityPackage}Parse == null) {
			${requestMap.entityInfo.entityPackage}Parse = new ${requestMap.entityInfo.entityName}Parse();
		}
		return ${requestMap.entityInfo.entityPackage}Parse;
	}

	public Map<String, Object> parse(int type, String command,String reqStr,
			HttpServletRequest request) {
		// 定义返回参数
		Map<String, Object> parseMap = new HashMap<String, Object>();
		if (type == 1) {
			// json
			parseMap = this.parseByJson(command,reqStr, request);
		} else if (type == 2) {
			// xml
			parseMap = this.parseByXml(command,reqStr, request);
		}
		return parseMap;
	}

	private Map<String, Object> parseByJson(String command,String reqStr,
			HttpServletRequest request) {
		// 定义返回参数
		Map<String, Object> parseMap = new HashMap<String, Object>();
		try {
			String actionReturn = null;
			${requestMap.entityInfo.entityName}Entity ${requestMap.entityInfo.entityPackage}Return = null;
			List<${requestMap.entityInfo.entityName}Entity> ${requestMap.entityInfo.entityPackage}ListReturn = null;
			Integer idReturn = null;			
			Map<String, Object> queryMapReturn = null;
			int pagenoReturn = 1;
			int pagesizeReturn = 10;
			List<OrderVO> orderListReturn = null;
			
			#foreach( $relation in $requestMap.relationList)
			#if(${relation.relation}=="ManyToMany")
            Boolean ${relation.joinColumn}ListShowReturn = false;
            Boolean del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}ListReturn = false;
			#end
			#if(${relation.relation}=="OneToMany")
            Boolean ${relation.joinColumn}ListShowReturn = false;
            Boolean del${relation.joinColumnFirstUpper}ListReturn = false;
			#end
			#if(${relation.relation}=="ManyToOne")
			Boolean ${relation.joinEntityName}ShowReturn = false;
			Boolean del${relation.joinEntityFirstUpper}Return = false;
			#end
			#if(${relation.relation}=="ParentToOne")
			Boolean parent${requestMap.entityInfo.entityName}ShowReturn = false;
			Boolean delParent${requestMap.entityInfo.entityName}Return = false;
			Boolean delParent${requestMap.entityInfo.entityName}ListReturn = false;
			Boolean child${requestMap.entityInfo.entityName}ListShowReturn = false;
            Boolean delChild${requestMap.entityInfo.entityName}ListReturn = false;
			#end
			#if(${relation.relation}=="OneToOne")
			Boolean ${relation.joinEntityName}ShowReturn = false;
			Boolean del${relation.joinEntityFirstUpper}Return = false;
			#end
			#end
			
			//json
			Map reqParams = JsonUtil.getMap4Json(reqStr);
			JSONObject contentreq = (JSONObject)reqParams.get("content");
			if ("ADD_${requestMap.entityInfo.tableUpperName}_INFO_REQUEST".equals(command)) {
				actionReturn = "save";
				${requestMap.entityInfo.entityPackage}Return = new ${requestMap.entityInfo.entityName}Entity();
				if(true){
					if(contentreq!=null){
						#foreach( $column in $requestMap.columntList)
						    #if("Double"==$column.fieldType||"BigDecimal"==$column.fieldType) 
						     #if("BigDecimal"==$column.fieldType)
						     Double $column.fieldName = JsonUtil.getJSONDouble(contentreq, "$column.fieldName");
							 if ($column.fieldName != null) {
								${requestMap.entityInfo.entityPackage}Return.set${column.fieldFirstUpperName}(BigDecimal.valueOf($column.fieldName));
							 }
						     #end
						     #if("Double"==$column.fieldType)
						     Double $column.fieldName = JsonUtil.getJSONDouble(contentreq, "$column.fieldName");
							 if ($column.fieldName != null) {
								${requestMap.entityInfo.entityPackage}Return.set${column.fieldFirstUpperName}($column.fieldName);
							 }
						     #end
						    #else
						    $column.fieldType $column.fieldName = ($column.fieldType)contentreq.get("$column.fieldName");
	                		if($column.fieldName!=null){
	                		    #if("id"==$column.fieldName)
	                		    ${requestMap.entityInfo.entityPackage}Return  = (${requestMap.entityInfo.entityName}Entity)dbManager.getById(id, ${requestMap.entityInfo.entityName}Entity.class);	                		    
	                		    #end
			                	${requestMap.entityInfo.entityPackage}Return.set${column.fieldFirstUpperName}(${column.fieldName});
			                }
						    #end                  		
						#end                
					}					
				}
				#foreach( $relation in $requestMap.relationList)
				#if(${relation.relation}=="ManyToMany")
				if(true){
					Object temp = contentreq.get("${requestMap.entityInfo.entityPackage}_${relation.joinColumn}_list");
					if(temp!=null){
						JSONArray list = (JSONArray)temp;					
						if(list!=null){
							List<${relation.joinColumnFirstUpper}Entity> entityList = new ArrayList<${relation.joinColumnFirstUpper}Entity>();
							for (int i = 0; i < list.size(); i++) {
			  	              JSONObject obj = list.getJSONObject(i);
			  	              if(obj!=null){
			  	            	${relation.joinColumnFirstUpper}Entity entity = new ${relation.joinColumnFirstUpper}Entity();						
								Integer id = (Integer)obj.get("${relation.joinColumn}Id");
								if(id!=null){
				                	entity.setId(id);
				                }
								entityList.add(entity);
			  	              }
			  	            }
							${requestMap.entityInfo.entityPackage}Return.set${relation.joinColumnFirstUpper}List(entityList);
						}
					}
				}
				#end
				#if(${relation.relation}=="OneToMany")
				if(true){
					Object ${relation.joinColumn}List = contentreq.get("${relation.joinColumn}List");
					if(${relation.joinColumn}List!=null){
						JSONArray list = (JSONArray)${relation.joinColumn}List;
						if(list!=null){
							List<${relation.joinColumnFirstUpper}Entity> entityList = new ArrayList<${relation.joinColumnFirstUpper}Entity>();
							for (int i = 0; i < list.size(); i++) {
			  	              JSONObject obj = list.getJSONObject(i);
			  	              if(obj!=null){
									${relation.joinColumnFirstUpper}Entity entity = new ${relation.joinColumnFirstUpper}Entity();						
													
									#foreach( $column in $relation.joinTableColumnts2)
			                		#if("Double"==$column.fieldType||"BigDecimal"==$column.fieldType) 
									     #if("BigDecimal"==$column.fieldType)
									     Double $column.fieldName = JsonUtil.getJSONDouble(obj, "$column.fieldName");
										 if ($column.fieldName != null) {
											entity.set${column.fieldFirstUpperName}(BigDecimal.valueOf($column.fieldName));
										 }
									     #end
									     #if("Double"==$column.fieldType)
									     Double $column.fieldName = JsonUtil.getJSONDouble(obj, "$column.fieldName");
										 if ($column.fieldName != null) {
											entity.set${column.fieldFirstUpperName}($column.fieldName);
										 }
									     #end
									    #else
									    $column.fieldType $column.fieldName = ($column.fieldType)obj.get("$column.fieldName");
				                		if($column.fieldName!=null){
						                	entity.set${column.fieldFirstUpperName}(${column.fieldName});
						                }
									    #end
									#end
							                entityList.add(entity);
										}
					  	            }
							${requestMap.entityInfo.entityPackage}Return.set${relation.joinColumnFirstUpper}List(entityList);
						}
						
					}
				}
				#end
				#if(${relation.relation}=="ManyToOne")
				if(true){
					Object ${relation.joinEntityName} = contentreq.get("${relation.joinEntityName}");
					if(${relation.joinEntityName}!=null){
						JSONObject obj = (JSONObject)${relation.joinEntityName};
						if(obj!=null){
							${relation.joinColumnFirstUpper}Entity entity = new ${relation.joinColumnFirstUpper}Entity();						
							#foreach( $column in $relation.joinTableColumnts2)
								#if("Double"==$column.fieldType||"BigDecimal"==$column.fieldType) 
							     #if("BigDecimal"==$column.fieldType)
							     Double $column.fieldName = JsonUtil.getJSONDouble(obj, "$column.fieldName");
								 if ($column.fieldName != null) {
									entity.set${column.fieldFirstUpperName}(BigDecimal.valueOf($column.fieldName));
								 }
							     #end
							     #if("Double"==$column.fieldType)
							     Double $column.fieldName = JsonUtil.getJSONDouble(obj, "$column.fieldName");
								 if ($column.fieldName != null) {
									entity.set${column.fieldFirstUpperName}($column.fieldName);
								 }
							     #end
							    #else
							    $column.fieldType $column.fieldName = ($column.fieldType)obj.get("$column.fieldName");
		                		if($column.fieldName!=null){
				                	entity.set${column.fieldFirstUpperName}(${column.fieldName});
				                }
							    #end                		
							#end
							${requestMap.entityInfo.entityPackage}Return.set${relation.joinEntityFirstUpper}(entity);
						}						
					}
				}
				#end
				#if(${relation.relation}=="ParentToOne")
				if(true){
					Object parent${requestMap.entityInfo.entityName} = contentreq.get("parent${requestMap.entityInfo.entityName}");
	                if(parent${requestMap.entityInfo.entityName}!=null){
	                	JSONObject obj = (JSONObject)parent${requestMap.entityInfo.entityName};
	                	if(obj!=null){
	                		${requestMap.entityInfo.entityName}Entity entity = new ${requestMap.entityInfo.entityName}Entity();	
	                		
	                		#foreach( $column in $requestMap.columntList)
	                		   #if("Double"==$column.fieldType||"BigDecimal"==$column.fieldType) 
							     #if("BigDecimal"==$column.fieldType)
							     Double $column.fieldName = JsonUtil.getJSONDouble(obj, "$column.fieldName");
								 if ($column.fieldName != null) {
									entity.set${column.fieldFirstUpperName}(BigDecimal.valueOf($column.fieldName));
								 }
							     #end
							     #if("Double"==$column.fieldType)
							     Double $column.fieldName = JsonUtil.getJSONDouble(obj, "$column.fieldName");
								 if ($column.fieldName != null) {
									entity.set${column.fieldFirstUpperName}($column.fieldName);
								 }
							     #end
							    #else
							    $column.fieldType $column.fieldName = ($column.fieldType)obj.get("$column.fieldName");
		                		if($column.fieldName!=null){
				                	entity.set${column.fieldFirstUpperName}(${column.fieldName});
				                }
							    #end
							#end	                			                		                			                
	                	}	                	
	                }
				}
				if(true){
					Object child${requestMap.entityInfo.entityName}List = contentreq.get("child${requestMap.entityInfo.entityName}List");
					if(child${requestMap.entityInfo.entityName}List!=null){
						JSONArray list = (JSONArray)child${requestMap.entityInfo.entityName}List;
						if(list!=null){
							List<${requestMap.entityInfo.entityName}Entity> entityList = new ArrayList<${requestMap.entityInfo.entityName}Entity>();
							for (int i = 0; i < list.size(); i++) {
			  	              JSONObject obj = list.getJSONObject(i);
			  	              if(obj!=null){
									${requestMap.entityInfo.entityName}Entity entity = new ${requestMap.entityInfo.entityName}Entity();						
													
									#foreach( $column in $requestMap.columntList)
			                		#if("Double"==$column.fieldType||"BigDecimal"==$column.fieldType) 
									     #if("BigDecimal"==$column.fieldType)
									     Double $column.fieldName = JsonUtil.getJSONDouble(obj, "$column.fieldName");
										 if ($column.fieldName != null) {
											entity.set${column.fieldFirstUpperName}(BigDecimal.valueOf($column.fieldName));
										 }
									     #end
									     #if("Double"==$column.fieldType)
									     Double $column.fieldName = JsonUtil.getJSONDouble(obj, "$column.fieldName");
										 if ($column.fieldName != null) {
											entity.set${column.fieldFirstUpperName}($column.fieldName);
										 }
									     #end
									    #else
									    $column.fieldType $column.fieldName = ($column.fieldType)obj.get("$column.fieldName");
				                		if($column.fieldName!=null){
						                	entity.set${column.fieldFirstUpperName}(${column.fieldName});
						                }
									    #end
									#end
							                entityList.add(entity);
										}
					  	            }
							${requestMap.entityInfo.entityPackage}Return.setChild${requestMap.entityInfo.entityName}List(entityList);
						}
						
					}
				}
				#end
				#if(${relation.relation}=="OneToOne")
				if(true){
					Object ${relation.joinEntityName} = contentreq.get("${relation.joinEntityName}");
					if(${relation.joinEntityName}!=null){
						JSONObject obj = (JSONObject)${relation.joinEntityName};
						if(obj!=null){
							${relation.joinColumnFirstUpper}Entity entity = new ${relation.joinColumnFirstUpper}Entity();						
							#foreach( $column in $relation.joinTableColumnts2)
	                		#if("Double"==$column.fieldType||"BigDecimal"==$column.fieldType) 
							     #if("BigDecimal"==$column.fieldType)
							     Double $column.fieldName = JsonUtil.getJSONDouble(obj, "$column.fieldName");
								 if ($column.fieldName != null) {
									entity.set${column.fieldFirstUpperName}(BigDecimal.valueOf($column.fieldName));
								 }
							     #end
							     #if("Double"==$column.fieldType)
							     Double $column.fieldName = JsonUtil.getJSONDouble(obj, "$column.fieldName");
								 if ($column.fieldName != null) {
									entity.set${column.fieldFirstUpperName}($column.fieldName);
								 }
							     #end
							    #else
							    $column.fieldType $column.fieldName = ($column.fieldType)obj.get("$column.fieldName");
		                		if($column.fieldName!=null){
				                	entity.set${column.fieldFirstUpperName}(${column.fieldName});
				                }
							    #end
							#end
							${requestMap.entityInfo.entityPackage}Return.set${relation.joinEntityFirstUpper}(entity);
						}						
					}
				}
				#end
				#end						            
			} else if ("QUERY_${requestMap.entityInfo.tableUpperName}_INFO_REQUEST".equals(command)) {
				actionReturn = "getById";
				if(true){
					if(contentreq!=null){
						idReturn = (Integer)contentreq.get("id");
					        #foreach( $relation in $requestMap.relationList)
							#if(${relation.relation}=="ManyToMany")	
							String ${relation.joinColumn}ListShow = (String)contentreq.get("${relation.joinColumn}ListShow");
							if("true".equals(${relation.joinColumn}ListShow)){
								${relation.joinColumn}ListShowReturn = true;
							}		          
							#end
							#if(${relation.relation}=="OneToMany")	
							String ${relation.joinColumn}ListShow = (String)contentreq.get("${relation.joinColumn}ListShow");
							if("true".equals(${relation.joinColumn}ListShow)){
								${relation.joinColumn}ListShowReturn = true;
							}		           
							#end
							#if(${relation.relation}=="ManyToOne")
							String ${relation.joinEntityName}Show = (String)contentreq.get("${relation.joinEntityName}Show");
							if("true".equals(${relation.joinEntityName}Show)){
								${relation.joinEntityName}ShowReturn = true;
							}
							#end
							#if(${relation.relation}=="ParentToOne")
							String parent${requestMap.entityInfo.entityName}Show = (String)contentreq.get("parent${requestMap.entityInfo.entityName}Show");																
							if("true".equals(parent${requestMap.entityInfo.entityName}Show)){
								parent${requestMap.entityInfo.entityName}ShowReturn = true;
							}
							String child${requestMap.entityInfo.entityName}ListShow = (String)contentreq.get("child${requestMap.entityInfo.entityName}ListShow");
							if("true".equals(child${requestMap.entityInfo.entityName}ListShow)){
								child${requestMap.entityInfo.entityName}ListShowReturn = true;
							}
							#end
							#if(${relation.relation}=="OneToOne")
							String ${relation.joinEntityName}Show = (String)contentreq.get("${relation.joinEntityName}Show");
							if("true".equals(${relation.joinEntityName}Show)){
								${relation.joinEntityName}ShowReturn = true;
							}
							#end
							#end												
					}	
				}
			} else if ("QUERY_${requestMap.entityInfo.tableUpperName}_LIST_REQUEST".equals(command)) {
				actionReturn = "getListByCondition";
				if(true){
					if(contentreq!=null){
						queryMapReturn = new HashMap<String, Object>();
						#foreach( $column in $requestMap.columntList)
						#if("Long"==$column.fieldType||"Integer"==$column.fieldType||"Float"==$column.fieldType||"BigDecimal"==$column.fieldType)
						Integer ${column.fieldName}_gt = (Integer)contentreq.get("${column.fieldName}_gt");
						Integer ${column.fieldName}_ge = (Integer)contentreq.get("${column.fieldName}_ge");
						Integer ${column.fieldName}_lt = (Integer)contentreq.get("${column.fieldName}_lt");
						Integer ${column.fieldName}_le = (Integer)contentreq.get("${column.fieldName}_le");
						String ${column.fieldName}_in = (String)contentreq.get("${column.fieldName}_in");
						Integer ${column.fieldName} = (Integer)contentreq.get("${column.fieldName}");
                        if(${column.fieldName}_gt!=null){
                        	queryMapReturn.put("${column.fieldName}_gt", ${column.fieldName}_gt);
						}
						if(${column.fieldName}_ge!=null){
                        	queryMapReturn.put("${column.fieldName}_ge", ${column.fieldName}_ge);
						}
						if(${column.fieldName}_lt!=null){
                        	queryMapReturn.put("${column.fieldName}_lt", ${column.fieldName}_lt);
						}
						if(${column.fieldName}_le!=null){
                        	queryMapReturn.put("${column.fieldName}_le", ${column.fieldName}_le);
						}
						if(${column.fieldName}_in!=null){
                        	queryMapReturn.put("${column.fieldName}_in", ${column.fieldName}_in);
						}
						if(${column.fieldName}!=null){
                        	queryMapReturn.put("${column.fieldName}", ${column.fieldName});
						}		
						#else
							#if(${column.fieldUpperName.indexOf("TIME")}>-1) 
							String ${column.fieldName}_gt = (String)contentreq.get("${column.fieldName}_gt");
							String ${column.fieldName}_ge = (String)contentreq.get("${column.fieldName}_ge");
							String ${column.fieldName}_lt = (String)contentreq.get("${column.fieldName}_lt");
							String ${column.fieldName}_le = (String)contentreq.get("${column.fieldName}_le");
	                        if(${column.fieldName}_gt!=null){
	                        	queryMapReturn.put("${column.fieldName}_gt", ${column.fieldName}_gt);
							}
							if(${column.fieldName}_ge!=null){
	                        	queryMapReturn.put("${column.fieldName}_ge", ${column.fieldName}_ge);
							}
							if(${column.fieldName}_lt!=null){
	                        	queryMapReturn.put("${column.fieldName}_lt", ${column.fieldName}_lt);
							}
							if(${column.fieldName}_le!=null){
	                        	queryMapReturn.put("${column.fieldName}_le", ${column.fieldName}_le);
							} 
							#else							
							String ${column.fieldName}_like = (String)contentreq.get("${column.fieldName}_like");
							String ${column.fieldName}_isNull = (String)contentreq.get("${column.fieldName}_isNull");
							String ${column.fieldName}_isNotNull = (String)contentreq.get("${column.fieldName}_isNotNull");
							String ${column.fieldName}_in = (String)contentreq.get("${column.fieldName}_in");
							String ${column.fieldName} = (String)contentreq.get("${column.fieldName}");
							if(${column.fieldName}_like!=null){
	                        	queryMapReturn.put("${column.fieldName}_like", ${column.fieldName}_like);
							}
							if(${column.fieldName}_isNull!=null){
	                        	queryMapReturn.put("${column.fieldName}_isNull", ${column.fieldName}_isNull);
							}
							if(${column.fieldName}_isNotNull!=null){
	                        	queryMapReturn.put("${column.fieldName}_isNotNull", ${column.fieldName}_isNotNull);
							}
							if(${column.fieldName}_in!=null){
	                        	queryMapReturn.put("${column.fieldName}_in", ${column.fieldName}_in);
							}
							if(${column.fieldName}!=null){
	                        	queryMapReturn.put("${column.fieldName}", ${column.fieldName});
							}						           
							#end				
						#end
						#end
			
						    #foreach( $relation in $requestMap.relationList)
							#if(${relation.relation}=="ManyToMany")	
							Integer ${relation.joinColumn}Id = (Integer)contentreq.get("${relation.joinColumn}Id");
	                        if(${relation.joinColumn}Id!=null){
	                        	queryMapReturn.put("${relation.joinColumn}Id", ${relation.joinColumn}Id);
	                        }		          
							#end
							#if(${relation.relation}=="OneToMany")	
							Integer ${relation.joinColumn}Id = (Integer)contentreq.get("${relation.joinColumn}Id");
	                        if(${relation.joinColumn}Id!=null){
	                        	queryMapReturn.put("${relation.joinColumn}Id", ${relation.joinColumn}Id);
	                        }		           
							#end							
							#end
							
							#foreach( $relation in $requestMap.relationList)
							#if(${relation.relation}=="ManyToMany")	
							String ${relation.joinColumn}ListShow = (String)contentreq.get("${relation.joinColumn}ListShow");
							if("true".equals(${relation.joinColumn}ListShow)){
								${relation.joinColumn}ListShowReturn = true;
							}		          
							#end
							#if(${relation.relation}=="OneToMany")	
							String ${relation.joinColumn}ListShow = (String)contentreq.get("${relation.joinColumn}ListShow");
							if("true".equals(${relation.joinColumn}ListShow)){
								${relation.joinColumn}ListShowReturn = true;
							}		           
							#end
							#if(${relation.relation}=="ManyToOne")
							String ${relation.joinEntityName}Show = (String)contentreq.get("${relation.joinEntityName}Show");
							if("true".equals(${relation.joinEntityName}Show)){
								${relation.joinEntityName}ShowReturn = true;
							}
							#end
							#if(${relation.relation}=="ParentToOne")
							String parent${requestMap.entityInfo.entityName}Show = (String)contentreq.get("parent${requestMap.entityInfo.entityName}Show");																
							if("true".equals(parent${requestMap.entityInfo.entityName}Show)){
								parent${requestMap.entityInfo.entityName}ShowReturn = true;
							}
							String child${requestMap.entityInfo.entityName}ListShow = (String)contentreq.get("child${requestMap.entityInfo.entityName}ListShow");
							if("true".equals(child${requestMap.entityInfo.entityName}ListShow)){
								child${requestMap.entityInfo.entityName}ListShowReturn = true;
							}
							#end
							#if(${relation.relation}=="OneToOne")
							String ${relation.joinEntityName}Show = (String)contentreq.get("${relation.joinEntityName}Show");
							if("true".equals(${relation.joinEntityName}Show)){
								${relation.joinEntityName}ShowReturn = true;
							}
							#end
							#end												               
					}
					JSONObject pagereq = (JSONObject)reqParams.get("page");
				    if (pagereq != null) {
				    String pagenotemp = (String)pagereq.get("pageno");
				    String pagesizetemp = (String)pagereq.get("pagesize");
				    if ((pagenotemp != null) && (!"".equals(pagenotemp.trim()))) {
				          pagenoReturn = Integer.valueOf(pagenotemp).intValue();
				    }
				    if ((pagesizetemp != null) && (!"".equals(pagesizetemp.trim()))) {
				          pagesizeReturn = Integer.valueOf(pagesizetemp).intValue();
				        }
				    }
				    Object orderreq = (Object) reqParams.get("order");
					if (orderreq != null) {
						JSONArray order = (JSONArray)orderreq;
						orderListReturn = new ArrayList<OrderVO>();
						for(int i=0;i<order.size();i++){
							JSONObject obj = order.getJSONObject(i);
							OrderVO orderVO = new OrderVO();
							orderVO.setName((String)obj.get("column"));
							orderVO.setOrderType((String)obj.get("type"));
							orderListReturn.add(orderVO);
						}						
					}
				}
			} else if ("DEL_${requestMap.entityInfo.tableUpperName}_INFO_REQUEST".equals(command)) {
				actionReturn = "del";
				if(true){
					if(contentreq!=null){
						idReturn = (Integer)contentreq.get("id");	
						    #foreach( $relation in $requestMap.relationList)
							#if(${relation.relation}=="ManyToMany")	
							String del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List = (String)contentreq.get("del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List");
							if("true".equals(del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List)){
								del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}ListReturn = true;
							}		          
							#end
							#if(${relation.relation}=="OneToMany")	
							String del${relation.joinColumnFirstUpper}List = (String)contentreq.get("del${relation.joinColumnFirstUpper}List");
							if("true".equals(del${relation.joinColumnFirstUpper}List)){
								del${relation.joinColumnFirstUpper}ListReturn = true;
							}		           
							#end
							#if(${relation.relation}=="ManyToOne")
							String del${relation.joinEntityFirstUpper} = (String)contentreq.get("del${relation.joinEntityFirstUpper}");
							if("true".equals(del${relation.joinEntityFirstUpper})){
								del${relation.joinEntityFirstUpper}Return = true;
							}
							#end
							#if(${relation.relation}=="ParentToOne")
							String delParent${requestMap.entityInfo.entityName} = (String)contentreq.get("delParent${requestMap.entityInfo.entityName}");
							if("true".equals(delParent${requestMap.entityInfo.entityName})){
								delParent${requestMap.entityInfo.entityName}Return = true;
							}
							String delChild${requestMap.entityInfo.entityName}List = (String)contentreq.get("delChild${requestMap.entityInfo.entityName}List");
							if("true".equals(delChild${requestMap.entityInfo.entityName}List)){
								delChild${requestMap.entityInfo.entityName}ListReturn = true;
							}
							#end
							#if(${relation.relation}=="OneToOne")
							String del${relation.joinEntityFirstUpper} = (String)contentreq.get("del${relation.joinEntityFirstUpper}");
							if("true".equals(del${relation.joinEntityFirstUpper})){
								del${relation.joinEntityFirstUpper}Return = true;
							}
							#end
							#end			
					}	
				}
			} else if ("DEL_${requestMap.entityInfo.tableUpperName}_LIST_REQUEST".equals(command)) {
				actionReturn = "delList";
				if(true){
					if(contentreq!=null){
						queryMapReturn = new HashMap<String, Object>();
						#foreach( $column in $requestMap.columntList)
						#if("Long"==$column.fieldType||"Integer"==$column.fieldType||"Float"==$column.fieldType||"BigDecimal"==$column.fieldType)
						Integer ${column.fieldName}_gt = (Integer)contentreq.get("${column.fieldName}_gt");
						Integer ${column.fieldName}_ge = (Integer)contentreq.get("${column.fieldName}_ge");
						Integer ${column.fieldName}_lt = (Integer)contentreq.get("${column.fieldName}_lt");
						Integer ${column.fieldName}_le = (Integer)contentreq.get("${column.fieldName}_le");
						String ${column.fieldName}_in = (String)contentreq.get("${column.fieldName}_in");
						Integer ${column.fieldName} = (Integer)contentreq.get("${column.fieldName}");
                        if(${column.fieldName}_gt!=null){
                        	queryMapReturn.put("${column.fieldName}_gt", ${column.fieldName}_gt);
						}
						if(${column.fieldName}_ge!=null){
                        	queryMapReturn.put("${column.fieldName}_ge", ${column.fieldName}_ge);
						}
						if(${column.fieldName}_lt!=null){
                        	queryMapReturn.put("${column.fieldName}_lt", ${column.fieldName}_lt);
						}
						if(${column.fieldName}_le!=null){
                        	queryMapReturn.put("${column.fieldName}_le", ${column.fieldName}_le);
						}
						if(${column.fieldName}_in!=null){
                        	queryMapReturn.put("${column.fieldName}_in", ${column.fieldName}_in);
						}
						if(${column.fieldName}!=null){
                        	queryMapReturn.put("${column.fieldName}", ${column.fieldName});
						}		
						#else
							#if(${column.fieldUpperName.indexOf("TIME")}>-1) 
							String ${column.fieldName}_gt = (String)contentreq.get("${column.fieldName}_gt");
							String ${column.fieldName}_ge = (String)contentreq.get("${column.fieldName}_ge");
							String ${column.fieldName}_lt = (String)contentreq.get("${column.fieldName}_lt");
							String ${column.fieldName}_le = (String)contentreq.get("${column.fieldName}_le");
	                        if(${column.fieldName}_gt!=null){
	                        	queryMapReturn.put("${column.fieldName}_gt", ${column.fieldName}_gt);
							}
							if(${column.fieldName}_ge!=null){
	                        	queryMapReturn.put("${column.fieldName}_ge", ${column.fieldName}_ge);
							}
							if(${column.fieldName}_lt!=null){
	                        	queryMapReturn.put("${column.fieldName}_lt", ${column.fieldName}_lt);
							}
							if(${column.fieldName}_le!=null){
	                        	queryMapReturn.put("${column.fieldName}_le", ${column.fieldName}_le);
							} 
							#else							
							String ${column.fieldName}_like = (String)contentreq.get("${column.fieldName}_like");
							String ${column.fieldName}_isNull = (String)contentreq.get("${column.fieldName}_isNull");
							String ${column.fieldName}_isNotNull = (String)contentreq.get("${column.fieldName}_isNotNull");
							String ${column.fieldName}_in = (String)contentreq.get("${column.fieldName}_in");
							String ${column.fieldName} = (String)contentreq.get("${column.fieldName}");
							if(${column.fieldName}_like!=null){
	                        	queryMapReturn.put("${column.fieldName}_like", ${column.fieldName}_like);
							}
							if(${column.fieldName}_isNull!=null){
	                        	queryMapReturn.put("${column.fieldName}_isNull", ${column.fieldName}_isNull);
							}
							if(${column.fieldName}_isNotNull!=null){
	                        	queryMapReturn.put("${column.fieldName}_isNotNull", ${column.fieldName}_isNotNull);
							}
							if(${column.fieldName}_in!=null){
	                        	queryMapReturn.put("${column.fieldName}_in", ${column.fieldName}_in);
							}
							if(${column.fieldName}!=null){
	                        	queryMapReturn.put("${column.fieldName}", ${column.fieldName});
							}						           
							#end				
						#end
						#end
						
						#foreach( $relation in $requestMap.relationList)
						#if(${relation.relation}=="ManyToMany")
			            Integer ${relation.joinColumn}Id = (Integer)contentreq.get("${relation.joinColumn}Id");
                        if(${relation.joinColumn}Id!=null){
                        	queryMapReturn.put("${relation.joinColumn}Id", ${relation.joinColumn}Id);
                        }
                        String del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List = (String)contentreq.get("del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List");
						if("true".equals(del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List)){
							del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}ListReturn = true;
						}
						#end
						#if(${relation.relation}=="OneToMany")
			            Integer ${relation.joinColumn}Id = (Integer)contentreq.get("${relation.joinColumn}Id");
                        if(${relation.joinColumn}Id!=null){
                        	queryMapReturn.put("${relation.joinColumn}Id", ${relation.joinColumn}Id);
                        }
                        String del${relation.joinColumnFirstUpper}List = (String)contentreq.get("del${relation.joinColumnFirstUpper}List");
						if("true".equals(del${relation.joinColumnFirstUpper}List)){
							del${relation.joinColumnFirstUpper}ListReturn = true;
						}
						#end
						#if(${relation.relation}=="ManyToOne")
						String del${relation.joinEntityFirstUpper} = (String)contentreq.get("del${relation.joinEntityFirstUpper}");
						if("true".equals(del${relation.joinEntityFirstUpper})){
							del${relation.joinEntityFirstUpper}Return = true;
						}
						#end
						#if(${relation.relation}=="ParentToOne")
						String delParent${requestMap.entityInfo.entityName} = (String)contentreq.get("delParent${requestMap.entityInfo.entityName}");
						if("true".equals(delParent${requestMap.entityInfo.entityName})){
							delParent${requestMap.entityInfo.entityName}Return = true;
						}
                        String delChild${requestMap.entityInfo.entityName}List = (String)contentreq.get("delChild${requestMap.entityInfo.entityName}List");
						if("true".equals(delChild${requestMap.entityInfo.entityName}List)){
							delChild${requestMap.entityInfo.entityName}ListReturn = true;
						}
						#end
						#if(${relation.relation}=="OneToOne")
						String del${relation.joinEntityFirstUpper} = (String)contentreq.get("del${relation.joinEntityFirstUpper}");
						if("true".equals(del${relation.joinEntityFirstUpper})){
							del${relation.joinEntityFirstUpper}Return = true;
						}
						#end
						#end																		
					}
					JSONObject pagereq = (JSONObject)reqParams.get("page");
				    if (pagereq != null) {
				    String pagenotemp = (String)pagereq.get("pageno");
				    String pagesizetemp = (String)pagereq.get("pagesize");
				    if ((pagenotemp != null) && (!"".equals(pagenotemp.trim()))) {
				          pagenoReturn = Integer.valueOf(pagenotemp).intValue();
				    }
				    if ((pagesizetemp != null) && (!"".equals(pagesizetemp.trim()))) {
				          pagesizeReturn = Integer.valueOf(pagesizetemp).intValue();
				        }
				    }
				}
			}

			if (actionReturn != null && !"".equals(actionReturn)) {
				parseMap.put("action", actionReturn);
			}
			if (${requestMap.entityInfo.entityPackage}Return != null) {
				parseMap.put("${requestMap.entityInfo.entityPackage}", ${requestMap.entityInfo.entityPackage}Return);
			}
			if (${requestMap.entityInfo.entityPackage}ListReturn != null && ${requestMap.entityInfo.entityPackage}ListReturn.size() > 0) {
				parseMap.put("${requestMap.entityInfo.entityPackage}List", ${requestMap.entityInfo.entityPackage}ListReturn);
			}
			if (idReturn != null) {
				parseMap.put("id", idReturn);
			}	
			if (orderListReturn != null && orderListReturn.size() > 0) {
				parseMap.put("orderList", orderListReturn);
			}		
			if (queryMapReturn != null) {
				parseMap.put("queryMap", queryMapReturn);
			}
			if (pagenoReturn > 0) {
				parseMap.put("pageno", pagenoReturn);
			}
			if (pagesizeReturn > 0) {
				parseMap.put("pagesize", pagesizeReturn);
			}
			
			
			#foreach( $relation in $requestMap.relationList)
			#if(${relation.relation}=="ManyToMany")
            if (${relation.joinColumn}ListShowReturn != null) {
				parseMap.put("${relation.joinColumn}ListShow", ${relation.joinColumn}ListShowReturn);
			}
            if (del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}ListReturn != null) {
				parseMap.put("del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List", del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}ListReturn);
			}
			#end
			#if(${relation.relation}=="OneToMany")
            if (${relation.joinColumn}ListShowReturn != null) {
				parseMap.put("${relation.joinColumn}ListShow", ${relation.joinColumn}ListShowReturn);
			}
            if (del${relation.joinColumnFirstUpper}ListReturn != null) {
				parseMap.put("del${relation.joinColumnFirstUpper}List", del${relation.joinColumnFirstUpper}ListReturn);
			}
			#end
			#if(${relation.relation}=="ManyToOne")
			if (${relation.joinEntityName}ShowReturn != null) {
				parseMap.put("${relation.joinEntityName}Show", ${relation.joinEntityName}ShowReturn);
			}
			if (del${relation.joinEntityFirstUpper}Return != null) {
				parseMap.put("del${relation.joinEntityFirstUpper}", del${relation.joinEntityFirstUpper}Return);
			}
			#end
			#if(${relation.relation}=="ParentToOne")
			if (parent${requestMap.entityInfo.entityName}ShowReturn != null) {
				parseMap.put("parent${requestMap.entityInfo.entityName}Show", parent${requestMap.entityInfo.entityName}ShowReturn);
			}
			if (delParent${requestMap.entityInfo.entityName}Return != null) {
				parseMap.put("delParent${requestMap.entityInfo.entityName}", delParent${requestMap.entityInfo.entityName}Return);
			}
			if (delParent${requestMap.entityInfo.entityName}ListReturn != null) {
				parseMap.put("delParent${requestMap.entityInfo.entityName}List", delParent${requestMap.entityInfo.entityName}ListReturn);
			}
			if (child${requestMap.entityInfo.entityName}ListShowReturn != null) {
				parseMap.put("child${requestMap.entityInfo.entityName}ListShow", child${requestMap.entityInfo.entityName}ListShowReturn);
			}
            if (delChild${requestMap.entityInfo.entityName}ListReturn != null) {
				parseMap.put("delChild${requestMap.entityInfo.entityName}List", delChild${requestMap.entityInfo.entityName}ListReturn);
			}
			#end
			#if(${relation.relation}=="OneToOne")
			if (${relation.joinEntityName}ShowReturn != null) {
				parseMap.put("${relation.joinEntityName}Show", ${relation.joinEntityName}ShowReturn);
			}
			if (del${relation.joinEntityFirstUpper}Return != null) {
				parseMap.put("del${relation.joinEntityFirstUpper}", del${relation.joinEntityFirstUpper}Return);
			}
			#end
			#end
			
			
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error(e);
		}
		return parseMap;
	}

	private Map<String, Object> parseByXml(String command,String reqStr,
			HttpServletRequest request) {
		// TODO Auto-generated method stub
		return null;
	}
}
