package fsk.init;

import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;

import fsk.entity.dev.DevEntity;
import fsk.service.dev.DevService;
import fsk.socket.JTWGNormalTCPSListener;
import fsk.socket.JTWGTCPSListener;
import fsk.socket.ECGStick.ECGStickTCPListener;
import fsk.thread.CreatServiceTaskThread;
import fsk.thread.CreateBackVisitThread;
import fsk.thread.MedNoticeThread;
import fsk.thread.ReadDataThread;
import fsk.thread.ReadMemberStatusThread;
import fsk.thread.UpdateNursingPlanStatusThread;
import fsk.util.FileUtil;

public class SystemInit implements ServletContextListener {
	private static Logger logger = Logger.getLogger(SystemInit.class);
	public static ExecutorService cachedThreadPool = Executors.newCachedThreadPool();
	public static String photourl = "";

	public static String gpskey = "";

	public static String weixinurl = "";

	public static String dataserverurl = "";

	public static String appkey = "";

	public static String appid = "";

	public static String version = "";

	public static String timeout = "";

	public static String readtime = "";

	public static String datatcpurl = "";

	public static String medport = "";

	public static String smskey = "";

	public static String weixinmsgpush = "";

	public static String loginpage = "";

	public static String ecgpage = "";

	public static String bigscreenlogo = "";

	public static String bigscreencoordinateX = "";

	public static String bigscreencoordinateY = "";

	public static String header = "";

	public static String headerImage = "";

	public static String buttondisplayByBusiness = "";

	private static SimpleDateFormat formater = new SimpleDateFormat("yyyyMMddHHmmss");

	public static Map<String, Object> lastQueryMedTimeMap = new HashMap<String, Object>();

	public static Map<String, Object> devInfoMap = new HashMap<String, Object>();

	public static String access_token = null;
	public static String jsapi_ticket = null;


	public static List<HttpSession> onlineList = new ArrayList<HttpSession>();

	// ****呼叫中心参数开始****//
	/**
	 * 服务端IP地址
	 */
	public static String ServerIp = null;
	/**
	 * 端口号
	 */
	public static String lPort = null;
	/**
	 * 本地或外网 0外网 1本地
	 */
	public static String IsLocal = null;

	// ****呼叫中心参数结束****//

	@Override
	public void contextDestroyed(ServletContextEvent arg0) {

	}

	/**
	 * 启动初始化
	 */
	@Override
	public void contextInitialized(ServletContextEvent arg0) {
		readConfig();
		cacheDevInfo();
		// 更新老人健康评估状态线程
		ReadMemberStatusThread readMemberStatusThread = new ReadMemberStatusThread();
		readMemberStatusThread.start();
		// 更新护理计划状态线程
		UpdateNursingPlanStatusThread updateNursingPlanStatusThread = new UpdateNursingPlanStatusThread();
		updateNursingPlanStatusThread.start();
		// 自动生成服务工单线程
		CreatServiceTaskThread creatServiceTaskThread = new CreatServiceTaskThread();
		creatServiceTaskThread.start();

		JTWGTCPSListener jtwgTCPSListener = new JTWGTCPSListener();
		jtwgTCPSListener.start();

		JTWGNormalTCPSListener jtwgNormalTCPSListener = new JTWGNormalTCPSListener();
		jtwgNormalTCPSListener.start();

		ReadDataThread readDataThread = new ReadDataThread();
		readDataThread.start();
		// 服药提醒微信推送线程
		MedNoticeThread MedNoticeThread = new MedNoticeThread();
		MedNoticeThread.start();
		// 自动生成回访记录
		CreateBackVisitThread createBackVisitThread = new CreateBackVisitThread();
		createBackVisitThread.start();
		/* 启动云心电贴数据监听 */
		ECGStickTCPListener ecgStickListener = new ECGStickTCPListener();
		ecgStickListener.start();
	}

	private void readConfig() {
		try {
			String lastTime = formater.format(new Date());
			lastQueryMedTimeMap.put("lastTime", lastTime);
			String path = SystemInit.class.getResource("SystemInit.class").toString();
			String separator = FileUtil.getFileSeparator();
			String projectName = FileUtil.getProjectName();
			if ("file".equals(path.substring(0, 4))) {
				if ("\\".equals(separator))
					path = path.substring(6);
				else {
					path = path.substring(5);
				}
			}
			String localPath = path.substring(0, path.indexOf("webapps")) + "webapps" + separator + projectName + separator + "WEB-INF" + separator + "conf"
			        + separator + "config.properties";
			localPath = URLDecoder.decode(localPath);
			localPath = localPath.replace("/", separator);
			localPath = localPath.replace("\\", separator);
			Properties localProperties = FileUtil.readProperties(localPath);
			photourl = (String) localProperties.get("photo.url");
			logger.info("photourl:" + photourl);

			gpskey = (String) localProperties.get("gps.key");
			logger.info("gpskey:" + gpskey);
			weixinurl = (String) localProperties.get("weixin.pushurl");
			logger.info("weixinurl:" + weixinurl);

			dataserverurl = (String) localProperties.get("dataserver.url");
			appkey = (String) localProperties.get("dataserver.appkey");
			version = (String) localProperties.get("dataserver.version");
			timeout = (String) localProperties.get("dataserver.timeout");
			readtime = (String) localProperties.get("dataserver.readtime");
			datatcpurl = (String) localProperties.get("dataserver.tcp.url");
			medport = (String) localProperties.get("dataserver.med.port");
			appid = (String) localProperties.get("dataserver.appid");
			smskey = (String) localProperties.get("sms.key");
			weixinmsgpush = (String) localProperties.get("weixin.msg.push");
			loginpage = (String) localProperties.get("basic.configuration.loginpage");
			ecgpage = (String) localProperties.get("basic.configuration.ecg");
			bigscreenlogo = (String) localProperties.get("basic.configuration.bigscreenlogo");
			bigscreencoordinateX = (String) localProperties.get("basic.configuration.bigscreencoordinateX");
			bigscreencoordinateY = (String) localProperties.get("basic.configuration.bigscreencoordinateY");
			header = changeHeader((String) localProperties.get("basic.configuration.header"));
			headerImage = (String) localProperties.get("basic.configuration.headerImage");
			buttondisplayByBusiness = (String) localProperties.get("basic.configuration.buttondisplayByBusiness");

			ServerIp = (String) localProperties.get("callCenter.ServerIp");
			lPort = (String) localProperties.get("callCenter.lPort");
			IsLocal = (String) localProperties.get("callCenter.IsLocal");

			logger.info("dataserver.url:" + dataserverurl);
			logger.info("dataserver.appkey:" + appkey);
			logger.info("dataserver.version:" + version);
			logger.info("dataserver.readtime:" + readtime);
			logger.info("dataserver.tcp.url:" + datatcpurl);
			logger.info("dataserver.med.port:" + medport);
			logger.info("dataserver.appid:" + appid);
		} catch (Exception e) {
			logger.error(e.toString());
		}
	}

	/**
	 * 根据不同项目header枚举值匹配名称
	 * 
	 * @return 名称
	 */
	public String changeHeader(String header) {
		String name = "居家服务管理系统";
		if (header.equals("0")) {
			name = "居家服务管理系统";
		} else if (header.equals("1")) {
			name = "惠益养居家服务管理系统";
		} else if (header.equals("2")) {
			name = "丽家照护养老服务管理系统";
		}
		return name;
	}

	/*
	 * 将设备信息表缓存
	 */
	private static void cacheDevInfo() {
		List<DevEntity> list_dev = DevService.getInstance().getListByCondition(null);
		if (list_dev != null && list_dev.size() > 0) {
			for (int index = 0; index < list_dev.size(); index++) {
				DevEntity entity = list_dev.get(index);
				if (entity != null) {
					String key = entity.getCode();
					SystemInit.devInfoMap.put(key, entity);
				}
			}
		} else {
			logger.info("b_dev 内无数据");
		}
	}
}