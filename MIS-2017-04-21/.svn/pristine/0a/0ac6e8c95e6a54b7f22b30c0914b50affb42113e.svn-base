package fsk.service.medPlan;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

import fsk.entity.medNotice.MedNoticeEntity;
import fsk.entity.medPlan.MedPlanEntity;
import fsk.entity.older.OlderEntity;

/**
 * @Title: Service
 * @Description: 服药计划服务类
 * @author feng.gu
 * @date 2016-10-19 16:11:40
 * @version V1.0
 * 
 */
public class MedPlanService {
	private static Logger logger = Logger.getLogger(MedPlanService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static MedPlanService medPlanService;

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static MedPlanService getInstance() {
		if (medPlanService == null) {
			medPlanService = new MedPlanService();
		}
		return medPlanService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(MedPlanEntity medPlan) {
		boolean result = false;
		if (medPlan != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 关联信息保存
				OlderEntity older = medPlan.getOlder();
				if (older != null) {
					dbManager.saveNoTransaction(older);
					medPlan.setOlderId(older.getId());
				}
				if (medPlan.getMedNoticeList() != null
						&& medPlan.getMedNoticeList().size() > 0) {
					// 关联信息保存
					if (medPlan.getId() == null) {
						dbManager.saveNoTransaction(medPlan);
					}
					for (MedNoticeEntity medNoticeEntity : medPlan
							.getMedNoticeList()) {
						medNoticeEntity.setMedPlanId(medPlan.getId());
						dbManager.saveNoTransaction(medNoticeEntity);
					}
				}
				result = dbManager.saveNoTransaction(medPlan);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(List<MedPlanEntity> medPlanList) {
		boolean result = false;
		if (medPlanList != null && medPlanList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (MedPlanEntity medPlan : medPlanList) {
					if (medPlan != null) {
						// 关联信息保存
						OlderEntity older = medPlan.getOlder();
						if (older != null) {
							dbManager.saveNoTransaction(older);
							medPlan.setOlderId(older.getId());
						}
						// 关联信息保存
						if (medPlan.getMedNoticeList() != null
								&& medPlan.getMedNoticeList().size() > 0) {
							if (medPlan.getId() == null) {
								dbManager.saveNoTransaction(medPlan);
							}
							for (MedNoticeEntity medNoticeEntity : medPlan
									.getMedNoticeList()) {
								medNoticeEntity.setMedPlanId(medPlan.getId());
								dbManager.saveNoTransaction(medNoticeEntity);
							}
						}
						result = dbManager.saveNoTransaction(medPlan);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public MedPlanEntity getById(Integer id) {
		MedPlanEntity obj = null;
		if (id != null) {
			obj = (MedPlanEntity) dbManager.getById(id, MedPlanEntity.class);
		}
		return obj;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param olderShow
	 *            是否查询关联信息
	 * @param medNoticeListShow
	 *            是否查询关联信息
	 * @param obj
	 */
	public MedPlanEntity getById(Integer id, Boolean olderShow,
			Boolean medNoticeListShow) {
		MedPlanEntity obj = null;
		if (id != null) {
			obj = (MedPlanEntity) dbManager.getById(id, MedPlanEntity.class);
			// 查询关联内容
			if (olderShow != null && olderShow.booleanValue() && obj != null
					&& obj.getOlderId() != null && obj.getOlderId() > 0) {
				OlderEntity older = (OlderEntity) dbManager.getById(
						obj.getOlderId(), OlderEntity.class);
				obj.setOlder(older);
			}
			// 查询关联内容
			if (medNoticeListShow != null && medNoticeListShow.booleanValue()
					&& obj != null && obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(
						MedNoticeEntity.class, MedNoticeEntity.MED_PLAN_ID,
						String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<MedNoticeEntity> medNoticeList = new ArrayList<MedNoticeEntity>();
					for (Object o : list) {
						medNoticeList.add((MedNoticeEntity) o);
					}
					obj.setMedNoticeList(medNoticeList);
				}
			}
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<MedPlanEntity> getListByCondition(Map<String, Object> queryMap) {
		List<MedPlanEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		list = dbManager.queryByCondition(MedPlanEntity.class, qc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<MedPlanEntity>();
			for (Object obj : list) {
				returnlist.add((MedPlanEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param olderShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param medNoticeListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public List<MedPlanEntity> getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, Boolean olderShow,
			Boolean medNoticeListShow) {
		List<MedPlanEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(MedPlanEntity.class, qc, oc);
		int a = 0;
		if (olderShow != null && olderShow.booleanValue()) {
			a++;
		}
		if (medNoticeListShow != null && medNoticeListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && list != null && list.size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < list.size(); i++) {
				MedPlanEntity obj = (MedPlanEntity) list.get(i);
				// 查询关联内容
				if (olderShow != null && olderShow.booleanValue()
						&& obj != null && obj.getOlderId() != null
						&& obj.getOlderId() > 0) {
					OlderEntity older = (OlderEntity) dbManager.getById(
							obj.getOlderId(), OlderEntity.class);
					obj.setOlder(older);
				}
				// 查询关联内容
				if (medNoticeListShow != null
						&& medNoticeListShow.booleanValue() && obj != null
						&& obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							MedNoticeEntity.class, MedNoticeEntity.MED_PLAN_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<MedNoticeEntity> medNoticeList = new ArrayList<MedNoticeEntity>();
						for (Object o : objList) {
							medNoticeList.add((MedNoticeEntity) o);
						}
						obj.setMedNoticeList(medNoticeList);
					}
				}
				result.add(obj);
			}
			list = result;
		}
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<MedPlanEntity>();
			for (Object obj : list) {
				returnlist.add((MedPlanEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		pagelist = dbManager.queryByCondition(MedPlanEntity.class, qc, pageno,
				pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @param olderShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param medNoticeListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, int pageno, int pagesize,
			Boolean olderShow, Boolean medNoticeListShow) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		// 数据权限
		List<QueryCondition> dataRuleQclist = null;
		List<Map<String, Object>> dataRuleMapList = (List<Map<String, Object>>) queryMap
				.get("dataRuleMapList");
		if (dataRuleMapList != null && dataRuleMapList.size() > 0) {
			dataRuleQclist = new ArrayList<QueryCondition>();
			for (Map<String, Object> dataRuleMap : dataRuleMapList) {
				QueryCondition dataRuleQc = changeMapToQc(dataRuleMap);
				dataRuleQclist.add(dataRuleQc);
			}
		}
		pagelist = dbManager.queryByConditions(MedPlanEntity.class, qc,
				dataRuleQclist, oc, pageno, pagesize);
		int a = 0;
		if (olderShow != null && olderShow.booleanValue()) {
			a++;
		}
		if (medNoticeListShow != null && medNoticeListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && pagelist != null && pagelist.getResultList() != null
				&& pagelist.getResultList().size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < pagelist.getResultList().size(); i++) {
				MedPlanEntity obj = (MedPlanEntity) pagelist.getResultList()
						.get(i);
				// 查询关联内容
				if (olderShow != null && olderShow.booleanValue()
						&& obj != null && obj.getOlderId() != null
						&& obj.getOlderId() > 0) {
					OlderEntity older = (OlderEntity) dbManager.getById(
							obj.getOlderId(), OlderEntity.class);
					obj.setOlder(older);
				}
				// 查询关联内容
				if (medNoticeListShow != null
						&& medNoticeListShow.booleanValue() && obj != null
						&& obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							MedNoticeEntity.class, MedNoticeEntity.MED_PLAN_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<MedNoticeEntity> medNoticeList = new ArrayList<MedNoticeEntity>();
						for (Object o : objList) {
							medNoticeList.add((MedNoticeEntity) o);
						}
						obj.setMedNoticeList(medNoticeList);
					}
				}
				result.add(obj);
			}
			pagelist.setResultList(result);
		}
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id, Boolean delOlder, Boolean delMedNoticeList) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delOlder != null && delOlder.booleanValue()) {
					MedPlanEntity medPlan = (MedPlanEntity) dbManager.getById(
							id, MedPlanEntity.class);
					if (medPlan != null && medPlan.getOlderId() != null) {
						dbManager.delNoTransaction(medPlan.getOlderId(),
								OlderEntity.class);
					}
				}
				// 删除关联信息
				if (delMedNoticeList != null && delMedNoticeList.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							MedNoticeEntity.MED_PLAN_ID, QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(
							MedNoticeEntity.class, qc);
				}
				result = dbManager.delNoTransaction(id, MedPlanEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(MedPlanEntity.ID,
						QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(
						MedPlanEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap, Boolean delOlder,
			Boolean delMedNoticeList) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delOlder != null && delOlder.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(MedPlanEntity.class,
									qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							MedPlanEntity entity = (MedPlanEntity) obj;
							strIds += entity.getOlderId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(OlderEntity.ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								OlderEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delMedNoticeList != null && delMedNoticeList.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(MedPlanEntity.class,
									qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							MedPlanEntity entity = (MedPlanEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								MedNoticeEntity.MED_PLAN_ID, QueryCondition.in,
								strIds);
						dbManager.delByConditionsNoTransaction(
								MedNoticeEntity.class, qc1);
					}

				}
				result = dbManager.delByConditionsNoTransaction(
						MedPlanEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	private QueryCondition changeMapToQc(Map<String, Object> queryMap) {
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object planNum = queryMap.get("planNum");
		Object planNum_like = queryMap.get("planNum_like");
		Object planNum_isNull = queryMap.get("planNum_isNull");
		Object planNum_isNotNull = queryMap.get("planNum_isNotNull");
		Object planNum_in = queryMap.get("planNum_in");
		Object olderId = queryMap.get("olderId");
		Object olderId_gt = queryMap.get("olderId_gt");
		Object olderId_ge = queryMap.get("olderId_ge");
		Object olderId_lt = queryMap.get("olderId_lt");
		Object olderId_le = queryMap.get("olderId_le");
		Object olderId_in = queryMap.get("olderId_in");
		Object olderName = queryMap.get("olderName");
		Object olderName_like = queryMap.get("olderName_like");
		Object olderName_isNull = queryMap.get("olderName_isNull");
		Object olderName_isNotNull = queryMap.get("olderName_isNotNull");
		Object olderName_in = queryMap.get("olderName_in");
		Object status = queryMap.get("status");
		Object status_gt = queryMap.get("status_gt");
		Object status_ge = queryMap.get("status_ge");
		Object status_lt = queryMap.get("status_lt");
		Object status_le = queryMap.get("status_le");
		Object status_in = queryMap.get("status_in");
		Object startime_gt = queryMap.get("startime_gt");
		Object startime_ge = queryMap.get("startime_ge");
		Object startime_lt = queryMap.get("startime_lt");
		Object startime_le = queryMap.get("startime_le");
		Object endtime_gt = queryMap.get("endtime_gt");
		Object endtime_ge = queryMap.get("endtime_ge");
		Object endtime_lt = queryMap.get("endtime_lt");
		Object endtime_le = queryMap.get("endtime_le");
		Object noticeWechat = queryMap.get("noticeWechat");
		Object noticeWechat_like = queryMap.get("noticeWechat_like");
		Object noticeWechat_isNull = queryMap.get("noticeWechat_isNull");
		Object noticeWechat_isNotNull = queryMap.get("noticeWechat_isNotNull");
		Object noticeWechat_in = queryMap.get("noticeWechat_in");
		Object noticeEmployee = queryMap.get("noticeEmployee");
		Object noticeEmployee_like = queryMap.get("noticeEmployee_like");
		Object noticeEmployee_isNull = queryMap.get("noticeEmployee_isNull");
		Object noticeEmployee_isNotNull = queryMap
				.get("noticeEmployee_isNotNull");
		Object noticeEmployee_in = queryMap.get("noticeEmployee_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");
		Object createPerson = queryMap.get("createPerson");
		Object createPerson_like = queryMap.get("createPerson_like");
		Object createPerson_isNull = queryMap.get("createPerson_isNull");
		Object createPerson_isNotNull = queryMap.get("createPerson_isNotNull");
		Object createPerson_in = queryMap.get("createPerson_in");

		QueryCondition qc = new QueryCondition(MedPlanEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.ID,
					QueryCondition.in, id_in));
		}
		if (planNum != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.PLAN_NUM,
					QueryCondition.eq, planNum));
		}
		if (planNum_like != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.PLAN_NUM,
					QueryCondition.like, planNum_like));
		}
		if (planNum_isNull != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.PLAN_NUM,
					QueryCondition.isNull, planNum_isNull));
		}
		if (planNum_isNotNull != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.PLAN_NUM,
					QueryCondition.isNotNull, planNum_isNotNull));
		}
		if (planNum_in != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.PLAN_NUM,
					QueryCondition.in, planNum_in));
		}
		if (olderId != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.OLDER_ID,
					QueryCondition.eq, olderId));
		}
		if (olderId_gt != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.OLDER_ID,
					QueryCondition.gt, olderId_gt));
		}
		if (olderId_ge != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.OLDER_ID,
					QueryCondition.ge, olderId_ge));
		}
		if (olderId_lt != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.OLDER_ID,
					QueryCondition.lt, olderId_lt));
		}
		if (olderId_le != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.OLDER_ID,
					QueryCondition.le, olderId_le));
		}
		if (olderId_in != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.OLDER_ID,
					QueryCondition.in, olderId_in));
		}
		if (olderName != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.OLDER_NAME,
					QueryCondition.eq, olderName));
		}
		if (olderName_like != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.OLDER_NAME,
					QueryCondition.like, olderName_like));
		}
		if (olderName_isNull != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.OLDER_NAME,
					QueryCondition.isNull, olderName_isNull));
		}
		if (olderName_isNotNull != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.OLDER_NAME,
					QueryCondition.isNotNull, olderName_isNotNull));
		}
		if (olderName_in != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.OLDER_NAME,
					QueryCondition.in, olderName_in));
		}
		if (status != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.STATUS,
					QueryCondition.eq, status));
		}
		if (status_gt != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.STATUS,
					QueryCondition.gt, status_gt));
		}
		if (status_ge != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.STATUS,
					QueryCondition.ge, status_ge));
		}
		if (status_lt != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.STATUS,
					QueryCondition.lt, status_lt));
		}
		if (status_le != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.STATUS,
					QueryCondition.le, status_le));
		}
		if (status_in != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.STATUS,
					QueryCondition.in, status_in));
		}
		if (startime_gt != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.STARTIME,
					QueryCondition.gt, startime_gt));
		}
		if (startime_ge != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.STARTIME,
					QueryCondition.ge, startime_ge));
		}
		if (startime_lt != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.STARTIME,
					QueryCondition.lt, startime_lt));
		}
		if (startime_le != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.STARTIME,
					QueryCondition.le, startime_le));
		}
		if (endtime_gt != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.ENDTIME,
					QueryCondition.gt, endtime_gt));
		}
		if (endtime_ge != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.ENDTIME,
					QueryCondition.ge, endtime_ge));
		}
		if (endtime_lt != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.ENDTIME,
					QueryCondition.lt, endtime_lt));
		}
		if (endtime_le != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.ENDTIME,
					QueryCondition.le, endtime_le));
		}
		if (noticeWechat != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.NOTICE_WECHAT,
					QueryCondition.eq, noticeWechat));
		}
		if (noticeWechat_like != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.NOTICE_WECHAT,
					QueryCondition.like, noticeWechat_like));
		}
		if (noticeWechat_isNull != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.NOTICE_WECHAT,
					QueryCondition.isNull, noticeWechat_isNull));
		}
		if (noticeWechat_isNotNull != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.NOTICE_WECHAT,
					QueryCondition.isNotNull, noticeWechat_isNotNull));
		}
		if (noticeWechat_in != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.NOTICE_WECHAT,
					QueryCondition.in, noticeWechat_in));
		}
		if (noticeEmployee != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.NOTICE_EMPLOYEE,
					QueryCondition.eq, noticeEmployee));
		}
		if (noticeEmployee_like != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.NOTICE_EMPLOYEE,
					QueryCondition.like, noticeEmployee_like));
		}
		if (noticeEmployee_isNull != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.NOTICE_EMPLOYEE,
					QueryCondition.isNull, noticeEmployee_isNull));
		}
		if (noticeEmployee_isNotNull != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.NOTICE_EMPLOYEE,
					QueryCondition.isNotNull, noticeEmployee_isNotNull));
		}
		if (noticeEmployee_in != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.NOTICE_EMPLOYEE,
					QueryCondition.in, noticeEmployee_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}
		if (createPerson != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.CREATE_PERSON,
					QueryCondition.eq, createPerson));
		}
		if (createPerson_like != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.CREATE_PERSON,
					QueryCondition.like, createPerson_like));
		}
		if (createPerson_isNull != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.CREATE_PERSON,
					QueryCondition.isNull, createPerson_isNull));
		}
		if (createPerson_isNotNull != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.CREATE_PERSON,
					QueryCondition.isNotNull, createPerson_isNotNull));
		}
		if (createPerson_in != null) {
			qc.andCondition(new QueryCondition(MedPlanEntity.CREATE_PERSON,
					QueryCondition.in, createPerson_in));
		}
		return qc;
	}

}
