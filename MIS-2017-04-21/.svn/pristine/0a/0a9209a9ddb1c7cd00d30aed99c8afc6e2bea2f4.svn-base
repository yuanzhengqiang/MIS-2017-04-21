package fsk.service.olderSite;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

import fsk.entity.olderSite.OlderSiteEntity;

/**
 * @Title: Service
 * @Description: 老人站点关联表服务类
 * @author feng.gu
 * @date 2017-03-06 10:53:04
 * @version V1.0
 * 
 */
public class OlderSiteService {
	private static Logger logger = Logger.getLogger(OlderSiteService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static OlderSiteService olderSiteService;

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static OlderSiteService getInstance() {
		if (olderSiteService == null) {
			olderSiteService = new OlderSiteService();
		}
		return olderSiteService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(OlderSiteEntity olderSite) {
		boolean result = false;
		if (olderSite != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				result = dbManager.saveNoTransaction(olderSite);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(List<OlderSiteEntity> olderSiteList) {
		boolean result = false;
		if (olderSiteList != null && olderSiteList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (OlderSiteEntity olderSite : olderSiteList) {
					if (olderSite != null) {
						result = dbManager.saveNoTransaction(olderSite);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public OlderSiteEntity getById(Integer id) {
		OlderSiteEntity obj = null;
		if (id != null) {
			obj = (OlderSiteEntity) dbManager.getById(id, OlderSiteEntity.class);
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<OlderSiteEntity> getListByCondition(Map<String, Object> queryMap) {
		List<OlderSiteEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		list = dbManager.queryByCondition(OlderSiteEntity.class, qc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<OlderSiteEntity>();
			for (Object obj : list) {
				returnlist.add((OlderSiteEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @return
	 */
	public List<OlderSiteEntity> getListByCondition(Map<String, Object> queryMap, List<OrderVO> orderList) {
		List<OlderSiteEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt, orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(OlderSiteEntity.class, qc, oc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<OlderSiteEntity>();
			for (Object obj : list) {
				returnlist.add((OlderSiteEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap, int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		pagelist = dbManager.queryByCondition(OlderSiteEntity.class, qc, pageno, pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap, List<OrderVO> orderList, int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt, orderType));
					}
				}

			}
		}
		// 数据权限
		List<QueryCondition> dataRuleQclist = null;
		List<Map<String, Object>> dataRuleMapList = (List<Map<String, Object>>) queryMap.get("dataRuleMapList");
		if (dataRuleMapList != null && dataRuleMapList.size() > 0) {
			dataRuleQclist = new ArrayList<QueryCondition>();
			for (Map<String, Object> dataRuleMap : dataRuleMapList) {
				QueryCondition dataRuleQc = changeMapToQc(dataRuleMap);
				dataRuleQclist.add(dataRuleQc);
			}
		}
		pagelist = dbManager.queryByConditions(OlderSiteEntity.class, qc, dataRuleQclist, oc, pageno, pagesize);
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				result = dbManager.delNoTransaction(id, OlderSiteEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(OlderSiteEntity.ID, QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(OlderSiteEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				result = dbManager.delByConditionsNoTransaction(OlderSiteEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	private QueryCondition changeMapToQc(Map<String, Object> queryMap) {
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object olderId = queryMap.get("olderId");
		Object olderId_gt = queryMap.get("olderId_gt");
		Object olderId_ge = queryMap.get("olderId_ge");
		Object olderId_lt = queryMap.get("olderId_lt");
		Object olderId_le = queryMap.get("olderId_le");
		Object olderId_in = queryMap.get("olderId_in");
		Object olderName = queryMap.get("olderName");
		Object olderName_like = queryMap.get("olderName_like");
		Object olderName_isNull = queryMap.get("olderName_isNull");
		Object olderName_isNotNull = queryMap.get("olderName_isNotNull");
		Object olderName_in = queryMap.get("olderName_in");
		Object siteId = queryMap.get("siteId");
		Object siteId_gt = queryMap.get("siteId_gt");
		Object siteId_ge = queryMap.get("siteId_ge");
		Object siteId_lt = queryMap.get("siteId_lt");
		Object siteId_le = queryMap.get("siteId_le");
		Object siteId_in = queryMap.get("siteId_in");
		Object siteName = queryMap.get("siteName");
		Object siteName_like = queryMap.get("siteName_like");
		Object siteName_isNull = queryMap.get("siteName_isNull");
		Object siteName_isNotNull = queryMap.get("siteName_isNotNull");
		Object siteName_in = queryMap.get("siteName_in");

		QueryCondition qc = new QueryCondition(OlderSiteEntity.ID, QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.ID, QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.ID, QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.ID, QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.ID, QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.ID, QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.ID, QueryCondition.in, id_in));
		}
		if (olderId != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.OLDER_ID, QueryCondition.eq, olderId));
		}
		if (olderId_gt != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.OLDER_ID, QueryCondition.gt, olderId_gt));
		}
		if (olderId_ge != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.OLDER_ID, QueryCondition.ge, olderId_ge));
		}
		if (olderId_lt != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.OLDER_ID, QueryCondition.lt, olderId_lt));
		}
		if (olderId_le != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.OLDER_ID, QueryCondition.le, olderId_le));
		}
		if (olderId_in != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.OLDER_ID, QueryCondition.in, olderId_in));
		}
		if (olderName != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.OLDER_NAME, QueryCondition.eq, olderName));
		}
		if (olderName_like != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.OLDER_NAME, QueryCondition.like, olderName_like));
		}
		if (olderName_isNull != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.OLDER_NAME, QueryCondition.isNull, olderName_isNull));
		}
		if (olderName_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.OLDER_NAME, QueryCondition.isNotNull,
			        olderName_isNotNull));
		}
		if (olderName_in != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.OLDER_NAME, QueryCondition.in, olderName_in));
		}
		if (siteId != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.SITE_ID, QueryCondition.eq, siteId));
		}
		if (siteId_gt != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.SITE_ID, QueryCondition.gt, siteId_gt));
		}
		if (siteId_ge != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.SITE_ID, QueryCondition.ge, siteId_ge));
		}
		if (siteId_lt != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.SITE_ID, QueryCondition.lt, siteId_lt));
		}
		if (siteId_le != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.SITE_ID, QueryCondition.le, siteId_le));
		}
		if (siteId_in != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.SITE_ID, QueryCondition.in, siteId_in));
		}
		if (siteName != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.SITE_NAME, QueryCondition.eq, siteName));
		}
		if (siteName_like != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.SITE_NAME, QueryCondition.like, siteName_like));
		}
		if (siteName_isNull != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.SITE_NAME, QueryCondition.isNull, siteName_isNull));
		}
		if (siteName_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.SITE_NAME, QueryCondition.isNotNull, siteName_isNotNull));
		}
		if (siteName_in != null) {
			qc.andCondition(new QueryCondition(OlderSiteEntity.SITE_NAME, QueryCondition.in, siteName_in));
		}
		return qc;
	}

}
