package fsk.service;

import java.util.ArrayList;
import java.util.List;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.PutMethod;
import org.apache.log4j.Logger;

import com.framework.system.db.query.PageList;

import fsk.entity.older.OlderEntity;
import fsk.entity.olderContact.OlderContactEntity;
import fsk.service.older.OlderService;

public class UpdateOlder {
	private static Logger logger = Logger.getLogger(UpdateOlder.class);
	
	private static String user = "fsk001";
	//87654321
	private static String password = "5e8667a439c68f5145dd2fcbecf02209";
	
	private static String guardianId="";
	
	private static String token="";
	
	private static String serverurl="http://api.yymedic.com/gateway";
			
	
	public static void main(String[] sage){
		OlderService olderServvice = OlderService.getInstance();
		PageList pagelist = olderServvice.getListByCondition(null, null, 1, 10000, null, null, null, true, null, null, null);
		UpdateOlder.sendOlder(pagelist.getResultList());
	}
	
	
	
	public static boolean sendOlder(List<Object> olderList){
		boolean result = true;
		try {
			if(olderList!=null&&olderList.size()>0){
				int olderlen=olderList.size();
				logger.debug("发送老人信息，长度："+olderlen);
				//每次最多发50个老人信息
				//取值起始位置
				int fromIndex=0;
				//取值结束位置
				int toIndex=0;
				while(olderlen>0){
					olderlen = olderlen-50;
					if(olderlen>0){				
						toIndex = fromIndex+50;
					}else{		
						toIndex = fromIndex+50+olderlen;
					}
					List<OlderEntity> olderListTemp = new ArrayList<OlderEntity>();
					for(int i = fromIndex;i<toIndex;i++){
						olderListTemp.add((OlderEntity)olderList.get(i));
					}
					//拼装消息体
					String sendContent = createContent(olderListTemp);
					result = sendOlderMessage(sendContent);
					if(!result){
						result = false;
						break;
					}
					fromIndex = toIndex;
				}
			}	
		} catch (Exception e) {
			logger.error(e);
		}
			
		return result;
	}
	/**
	 * 获取token
	 * @param url
	 * @param content
	 * @return
	 */
	private static boolean doGetToken(){
		boolean result= false;
		try {
			String content="{\"name\":\""+user+"\", \"password\":\""+password+"\"}";
			String url=serverurl+"/sessions";
		    logger.debug("POST地址：" + url);
		    logger.debug("POST内容：" + content);
		    HttpClient client = new HttpClient(); 
			PostMethod method = new PostMethod(url); 			
			client.getParams().setContentCharset("UTF-8");
			method.setRequestHeader("ContentType","application/json;charset=UTF-8");
			method.setRequestBody(content);
			
			client.executeMethod(method);	
			String resultStr = method.getResponseBodyAsString();
			logger.debug("HTTP返回码：" + method.getStatusCode());
			//{"guardianId": "57a463d80e7f2b0001002e9c", "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJib2R5Ijp7Imd1YXJkaWFuSWQiOiI1N2E0NjNkODBlN2YyYjAwMDEwMDJlOWMifSwiZXhwIjoxNDgzNTIyOTkxfQ.dmHAFqqUaZwBDhdkiVLKEM7pMGywd9wseUl6ceMHwSs", "type": "org"}
		    logger.debug("POST消息返回：" + resultStr);
		    if(resultStr!=null&&!"".equals(resultStr)){
		    	JSONObject obj = JSONObject.fromObject(resultStr);
		    	if(obj!=null){
		    		guardianId = obj.getString("guardianId");
		    		token = obj.getString("token");
		    		if(guardianId!=null&&!"".equals(guardianId)&&token!=null&&!"".equals(token)){
		    			//有返回值则表示获取成功
		    			result = true;
		    		}
		    	}		    	
		    }
		} catch (Exception e) {
			logger.error(e);
		}
		return result;
	}
	
	/**
	 * 发送老人更新信息
	 * @param sendContent
	 */    
	private static boolean sendOlderMessage(String content){
		boolean result=false;
		try {
			//重新获取token
			boolean getToken = false;			
			if(guardianId!=null&&!"".equals(guardianId)&&token!=null&&!"".equals(token)){
				String url=serverurl+"/guardians/"+guardianId+"/bulk/users";
			    logger.debug("PUT地址：" + url);
			    logger.debug("PUT内容：" + content);
			    HttpClient client = new HttpClient(); 
				PutMethod method = new PutMethod(url); 			
				client.getParams().setContentCharset("UTF-8");
				method.setRequestHeader("ContentType","application/json;charset=UTF-8");
				method.setRequestHeader("Authorization","bearer " + token);
				method.setRequestBody(content);
				
				client.executeMethod(method);	
				String resultStr = method.getResponseBodyAsString();
				logger.debug("HTTP返回码：" + method.getStatusCode());
			    logger.debug("PUT消息返回：" + resultStr);
			    if(method.getStatusCode()==200){
			    	//发送成功
			    	result = true;
			    }
//			    else{
//			    	//获取token
//					getToken = true;		
//			    }
			}else{
				//获取token
				getToken = true;				
			}
			if(getToken){
				boolean temp = doGetToken();
				if(temp){
					//重新发送老人
					result = sendOlderMessage(content);
				}
			}
			
		} catch (Exception e) {
			logger.error(e);
		}
		return result;
	}

	/**
     * 拼装发送消息体
     * @param olderListTemp
     * @return
     */
	private static String createContent(List<OlderEntity> olderListTemp) {
		String result = null;
		//"{\"users\":[{\"name\": \"mordo_test\",\"birthday\": \"1947-09-04\",\"sex\": \"female\",\"cardType\": \"custom\",\"cardId\": \"FSK-58099899afb95a0001032ab0\",\"contact\": [{\"name\": \"张三\", \"mobile\": \"13098765431\"}]}]}";
		if(olderListTemp!=null&&olderListTemp.size()>0){
			JSONObject content = new JSONObject();
			JSONArray users = new JSONArray();
			for(int i=0;i<olderListTemp.size();i++){
				OlderEntity older =olderListTemp.get(i);
				JSONObject olderjson = new JSONObject();				
				olderjson.put("name", older.getName()!=null?older.getName():"");
				olderjson.put("birthday", older.getBirthdate()!=null?older.getBirthdate():"");
				if(older.getBirthdate()!=null){
					String birthdate = older.getBirthdate();
					if(birthdate.length()==8){
						birthdate = birthdate.substring(0,4)+"-"+birthdate.substring(4,6)+"-"+birthdate.substring(6,8);
						olderjson.put("birthday", birthdate);
					}else{
						olderjson.put("birthday", "");
					}
				}else{
					olderjson.put("birthday", "");
				}
				if(older.getGender()!=null){
					if("男".equals(older.getGender().trim())){
						olderjson.put("sex", "male");
					}else if("女".equals(older.getGender().trim())){
						olderjson.put("sex", "female");
					}else{
						olderjson.put("sex", "");
					}
				}else{
					olderjson.put("sex", "");
				}
				olderjson.put("cardType", "idCard");
				olderjson.put("cardId", older.getIdnumber()!=null?older.getIdnumber():"");
				
				//老人联系人
				JSONArray contact = new JSONArray();
				List<OlderContactEntity> olderContactList = older.getOlderContactList();
				if(olderContactList!=null&&olderContactList.size()>0){
					for(int j=0;j<olderContactList.size();j++){
						OlderContactEntity olderContact = olderContactList.get(j);
						JSONObject olderContactjson = new JSONObject();
						olderContactjson.put("name", olderContact.getContactName()!=null?olderContact.getContactName():"");						
						olderContactjson.put("mobile", olderContact.getTel()!=null?olderContact.getTel():"");
						contact.add(olderContactjson);
					}					
				}				
				olderjson.put("contact", contact);
				users.add(olderjson);
			}
			content.put("users", users);
			result = content.toString();
		}
		
		
		return result;
	}

}
