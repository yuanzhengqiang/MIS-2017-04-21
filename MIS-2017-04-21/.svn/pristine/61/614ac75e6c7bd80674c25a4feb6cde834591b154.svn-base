package fsk.service.service;

import java.io.File;
import java.math.BigDecimal;
import java.net.URLDecoder;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import javax.imageio.stream.FileImageOutputStream;

import org.apache.log4j.Logger;

import com.framework.system.common.entity.dataDic.DataDicEntity;
import fsk.entity.serviceChild.ServiceChildEntity;
import fsk.entity.servicePhoto.ServicePhotoEntity;

import fsk.entity.service.ServiceEntity;
import fsk.handler.healthAssessment.HealthAssessmentHandler;
import fsk.init.SystemInit;
import fsk.service.serviceChild.ServiceChildService;
import fsk.service.servicePhoto.ServicePhotoService;
import fsk.util.Base64Utils;
import fsk.util.FileUtil;

import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

/**
 * @Title: Service
 * @Description: 服务项目服务类
 * @author feng.gu
 * @date 2016-07-26 09:30:37
 * @version V1.0
 * 
 */
public class ServiceService {
	private static Logger logger = Logger.getLogger(ServiceService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static ServiceService serviceService;
	 private static ServicePhotoService servicePhotoService=ServicePhotoService.getInstance();
	 private static ServiceChildService serviceChildService=ServiceChildService.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static ServiceService getInstance() {
		if (serviceService == null) {
			serviceService = new ServiceService();
		}
		return serviceService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(ServiceEntity service) {
		boolean result = false;
		if (service != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 关联信息保存
				DataDicEntity type = service.getType();
				if (type != null) {
					dbManager.saveNoTransaction(type);
					service.setTypeId(type.getId());
				}
				if (service.getServiceChildList() != null
						&& service.getServiceChildList().size() > 0) {
					// 关联信息保存
					if (service.getId() == null) {
						dbManager.saveNoTransaction(service);
					}
					for (ServiceChildEntity serviceChildEntity : service
							.getServiceChildList()) {
						serviceChildEntity.setServiceId(service.getId());
						dbManager.saveNoTransaction(serviceChildEntity);
					}
				}
				if (service.getServicePhotoList() != null
						&& service.getServicePhotoList().size() > 0) {
					// 关联信息保存
					if (service.getId() == null) {
						dbManager.saveNoTransaction(service);
					}
					/*保存照片pei*/
					ArrayList number = new ArrayList();
					number.add(0, 1);number.add(1, 2);number.add(2, 3);number.add(3, 4);
					number.add(4, 5);number.add(5, 6);number.add(6, 7);
					int n = 0;
					for (ServicePhotoEntity servicePhotoEntity : service.getServicePhotoList()) {
						String photoUrl = servicePhotoEntity.getPhotoUrl();
						if (photoUrl.startsWith("http")) {
							int index = -1;
							String str = photoUrl.substring(
									photoUrl.length() - 5,
									photoUrl.length() - 4);
							int numberindex = Integer.parseInt(str);
							index = number.indexOf(numberindex);
							if (index != -1) {
								number.remove(index);
							}
						}
					}
					for (ServicePhotoEntity servicePhotoEntity : service.getServicePhotoList()) {
						String photoUrl = servicePhotoEntity.getPhotoUrl();
						Integer showIndex = (Integer) servicePhotoEntity.getShowIndex();
						if(!photoUrl.startsWith("http")){
							String fileName = "servicePhoto_"+ service.getId() + "_"+ number.get(n) + ".jpg";
							photoUrl = savePhoto(photoUrl, fileName);
							n++;
						}
						ServicePhotoEntity servicePhoto = new ServicePhotoEntity();
						servicePhoto.setServiceId(service.getId());
						servicePhoto.setPhotoUrl(photoUrl);
						servicePhoto.setShowIndex(showIndex);
						dbManager.saveNoTransaction(servicePhoto);
					}
					///
				}
				result = dbManager.saveNoTransaction(service);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(List<ServiceEntity> serviceList) {
		boolean result = false;
		if (serviceList != null && serviceList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (ServiceEntity service : serviceList) {
					if (service != null) {
						// 关联信息保存
						DataDicEntity type = service.getType();
						if (type != null) {
							dbManager.saveNoTransaction(type);
							service.setTypeId(type.getId());
						}
						// 关联信息保存
						if (service.getServiceChildList() != null
								&& service.getServiceChildList().size() > 0) {
							if (service.getId() == null) {
								dbManager.saveNoTransaction(service);
							}
							for (ServiceChildEntity serviceChildEntity : service
									.getServiceChildList()) {
								serviceChildEntity
										.setServiceId(service.getId());
								dbManager.saveNoTransaction(serviceChildEntity);
							}
						}
						// 关联信息保存
						if (service.getServicePhotoList() != null&& service.getServicePhotoList().size() > 0) {
							if (service.getId() == null) {
								dbManager.saveNoTransaction(service);
							}
	
						}
						result = dbManager.saveNoTransaction(service);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public ServiceEntity getById(Integer id) {
		ServiceEntity obj = null;
		if (id != null) {
			obj = (ServiceEntity) dbManager.getById(id, ServiceEntity.class);
		}
		return obj;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param typeShow
	 *            是否查询关联信息
	 * @param serviceChildListShow
	 *            是否查询关联信息
	 * @param servicePhotoListShow
	 *            是否查询关联信息
	 * @param obj
	 */
	public ServiceEntity getById(Integer id, Boolean typeShow,
			Boolean serviceChildListShow, Boolean servicePhotoListShow) {
		ServiceEntity obj = null;
		if (id != null) {
			obj = (ServiceEntity) dbManager.getById(id, ServiceEntity.class);
			// 查询关联内容
			if (typeShow != null && typeShow.booleanValue() && obj != null
					&& obj.getTypeId() != null && obj.getTypeId() > 0) {
				DataDicEntity type = (DataDicEntity) dbManager.getById(
						obj.getTypeId(), DataDicEntity.class);
				obj.setType(type);
			}
			// 查询关联内容
			if (serviceChildListShow != null
					&& serviceChildListShow.booleanValue() && obj != null
					&& obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(
						ServiceChildEntity.class,
						ServiceChildEntity.SERVICE_ID, String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<ServiceChildEntity> serviceChildList = new ArrayList<ServiceChildEntity>();
					for (Object o : list) {
						serviceChildList.add((ServiceChildEntity) o);
					}
					obj.setServiceChildList(serviceChildList);
				}
			}
			// 查询关联内容
			if (servicePhotoListShow != null
					&& servicePhotoListShow.booleanValue() && obj != null
					&& obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(
						ServicePhotoEntity.class,
						ServicePhotoEntity.SERVICE_ID, String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<ServicePhotoEntity> servicePhotoList = new ArrayList<ServicePhotoEntity>();
					for (Object o : list) {
						servicePhotoList.add((ServicePhotoEntity) o);
					}
					obj.setServicePhotoList(servicePhotoList);
				}
			}
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<ServiceEntity> getListByCondition(Map<String, Object> queryMap) {
		List<ServiceEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object name = queryMap.get("name");
		Object name_like = queryMap.get("name_like");
		Object name_isNull = queryMap.get("name_isNull");
		Object name_isNotNull = queryMap.get("name_isNotNull");
		Object name_in = queryMap.get("name_in");
		Object code = queryMap.get("code");
		Object code_like = queryMap.get("code_like");
		Object code_isNull = queryMap.get("code_isNull");
		Object code_isNotNull = queryMap.get("code_isNotNull");
		Object code_in = queryMap.get("code_in");
		Object typeId = queryMap.get("typeId");
		Object typeId_gt = queryMap.get("typeId_gt");
		Object typeId_ge = queryMap.get("typeId_ge");
		Object typeId_lt = queryMap.get("typeId_lt");
		Object typeId_le = queryMap.get("typeId_le");
		Object typeId_in = queryMap.get("typeId_in");
		Object status = queryMap.get("status");
		Object status_gt = queryMap.get("status_gt");
		Object status_ge = queryMap.get("status_ge");
		Object status_lt = queryMap.get("status_lt");
		Object status_le = queryMap.get("status_le");
		Object status_in = queryMap.get("status_in");
		Object marketPrice = queryMap.get("marketPrice");
		Object marketPrice_gt = queryMap.get("marketPrice_gt");
		Object marketPrice_ge = queryMap.get("marketPrice_ge");
		Object marketPrice_lt = queryMap.get("marketPrice_lt");
		Object marketPrice_le = queryMap.get("marketPrice_le");
		Object marketPrice_in = queryMap.get("marketPrice_in");
		Object medicalPrice = queryMap.get("medicalPrice");
		Object medicalPrice_gt = queryMap.get("medicalPrice_gt");
		Object medicalPrice_ge = queryMap.get("medicalPrice_ge");
		Object medicalPrice_lt = queryMap.get("medicalPrice_lt");
		Object medicalPrice_le = queryMap.get("medicalPrice_le");
		Object medicalPrice_in = queryMap.get("medicalPrice_in");
		Object unit = queryMap.get("unit");
		Object unit_like = queryMap.get("unit_like");
		Object unit_isNull = queryMap.get("unit_isNull");
		Object unit_isNotNull = queryMap.get("unit_isNotNull");
		Object unit_in = queryMap.get("unit_in");
		Object goDoor = queryMap.get("goDoor");
		Object goDoor_gt = queryMap.get("goDoor_gt");
		Object goDoor_ge = queryMap.get("goDoor_ge");
		Object goDoor_lt = queryMap.get("goDoor_lt");
		Object goDoor_le = queryMap.get("goDoor_le");
		Object goDoor_in = queryMap.get("goDoor_in");
		Object serviceTimes_gt = queryMap.get("serviceTimes_gt");
		Object serviceTimes_ge = queryMap.get("serviceTimes_ge");
		Object serviceTimes_lt = queryMap.get("serviceTimes_lt");
		Object serviceTimes_le = queryMap.get("serviceTimes_le");
		Object needPerosn = queryMap.get("needPerosn");
		Object needPerosn_like = queryMap.get("needPerosn_like");
		Object needPerosn_isNull = queryMap.get("needPerosn_isNull");
		Object needPerosn_isNotNull = queryMap.get("needPerosn_isNotNull");
		Object needPerosn_in = queryMap.get("needPerosn_in");
		Object des = queryMap.get("des");
		Object des_like = queryMap.get("des_like");
		Object des_isNull = queryMap.get("des_isNull");
		Object des_isNotNull = queryMap.get("des_isNotNull");
		Object des_in = queryMap.get("des_in");
		Object profile = queryMap.get("profile");
		Object profile_like = queryMap.get("profile_like");
		Object profile_isNull = queryMap.get("profile_isNull");
		Object profile_isNotNull = queryMap.get("profile_isNotNull");
		Object profile_in = queryMap.get("profile_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");

		QueryCondition qc = new QueryCondition(ServiceEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.in, id_in));
		}
		if (name != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.eq, name));
		}
		if (name_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.like, name_like));
		}
		if (name_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.isNull, name_isNull));
		}
		if (name_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.isNotNull, name_isNotNull));
		}
		if (name_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.in, name_in));
		}
		if (code != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.eq, code));
		}
		if (code_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.like, code_like));
		}
		if (code_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.isNull, code_isNull));
		}
		if (code_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.isNotNull, code_isNotNull));
		}
		if (code_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.in, code_in));
		}
		if (typeId != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.eq, typeId));
		}
		if (typeId_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.gt, typeId_gt));
		}
		if (typeId_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.ge, typeId_ge));
		}
		if (typeId_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.lt, typeId_lt));
		}
		if (typeId_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.le, typeId_le));
		}
		if (typeId_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.in, typeId_in));
		}
		if (status != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.eq, status));
		}
		if (status_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.gt, status_gt));
		}
		if (status_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.ge, status_ge));
		}
		if (status_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.lt, status_lt));
		}
		if (status_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.le, status_le));
		}
		if (status_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.in, status_in));
		}
		if (marketPrice != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.eq, marketPrice));
		}
		if (marketPrice_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.gt, marketPrice_gt));
		}
		if (marketPrice_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.ge, marketPrice_ge));
		}
		if (marketPrice_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.lt, marketPrice_lt));
		}
		if (marketPrice_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.le, marketPrice_le));
		}
		if (marketPrice_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.in, marketPrice_in));
		}
		if (medicalPrice != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.eq, medicalPrice));
		}
		if (medicalPrice_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.gt, medicalPrice_gt));
		}
		if (medicalPrice_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.ge, medicalPrice_ge));
		}
		if (medicalPrice_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.lt, medicalPrice_lt));
		}
		if (medicalPrice_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.le, medicalPrice_le));
		}
		if (medicalPrice_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.in, medicalPrice_in));
		}
		if (unit != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.eq, unit));
		}
		if (unit_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.like, unit_like));
		}
		if (unit_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.isNull, unit_isNull));
		}
		if (unit_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.isNotNull, unit_isNotNull));
		}
		if (unit_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.in, unit_in));
		}
		if (goDoor != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.eq, goDoor));
		}
		if (goDoor_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.gt, goDoor_gt));
		}
		if (goDoor_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.ge, goDoor_ge));
		}
		if (goDoor_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.lt, goDoor_lt));
		}
		if (goDoor_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.le, goDoor_le));
		}
		if (goDoor_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.in, goDoor_in));
		}
		if (serviceTimes_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.gt, serviceTimes_gt));
		}
		if (serviceTimes_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.ge, serviceTimes_ge));
		}
		if (serviceTimes_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.lt, serviceTimes_lt));
		}
		if (serviceTimes_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.le, serviceTimes_le));
		}
		if (needPerosn != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.eq, needPerosn));
		}
		if (needPerosn_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.like, needPerosn_like));
		}
		if (needPerosn_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.isNull, needPerosn_isNull));
		}
		if (needPerosn_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.isNotNull, needPerosn_isNotNull));
		}
		if (needPerosn_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.in, needPerosn_in));
		}
		if (des != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.eq, des));
		}
		if (des_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.like, des_like));
		}
		if (des_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.isNull, des_isNull));
		}
		if (des_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.isNotNull, des_isNotNull));
		}
		if (des_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.in, des_in));
		}
		if (profile != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.eq, profile));
		}
		if (profile_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.like, profile_like));
		}
		if (profile_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.isNull, profile_isNull));
		}
		if (profile_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.isNotNull, profile_isNotNull));
		}
		if (profile_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.in, profile_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}

		list = dbManager.queryByCondition(ServiceEntity.class, qc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<ServiceEntity>();
			for (Object obj : list) {
				returnlist.add((ServiceEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param typeShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param serviceChildListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param servicePhotoListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public List<ServiceEntity> getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, Boolean typeShow,
			Boolean serviceChildListShow, Boolean servicePhotoListShow) {
		List<ServiceEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object name = queryMap.get("name");
		Object name_like = queryMap.get("name_like");
		Object name_isNull = queryMap.get("name_isNull");
		Object name_isNotNull = queryMap.get("name_isNotNull");
		Object name_in = queryMap.get("name_in");
		Object code = queryMap.get("code");
		Object code_like = queryMap.get("code_like");
		Object code_isNull = queryMap.get("code_isNull");
		Object code_isNotNull = queryMap.get("code_isNotNull");
		Object code_in = queryMap.get("code_in");
		Object typeId = queryMap.get("typeId");
		Object typeId_gt = queryMap.get("typeId_gt");
		Object typeId_ge = queryMap.get("typeId_ge");
		Object typeId_lt = queryMap.get("typeId_lt");
		Object typeId_le = queryMap.get("typeId_le");
		Object typeId_in = queryMap.get("typeId_in");
		Object status = queryMap.get("status");
		Object status_gt = queryMap.get("status_gt");
		Object status_ge = queryMap.get("status_ge");
		Object status_lt = queryMap.get("status_lt");
		Object status_le = queryMap.get("status_le");
		Object status_in = queryMap.get("status_in");
		Object marketPrice = queryMap.get("marketPrice");
		Object marketPrice_gt = queryMap.get("marketPrice_gt");
		Object marketPrice_ge = queryMap.get("marketPrice_ge");
		Object marketPrice_lt = queryMap.get("marketPrice_lt");
		Object marketPrice_le = queryMap.get("marketPrice_le");
		Object marketPrice_in = queryMap.get("marketPrice_in");
		Object medicalPrice = queryMap.get("medicalPrice");
		Object medicalPrice_gt = queryMap.get("medicalPrice_gt");
		Object medicalPrice_ge = queryMap.get("medicalPrice_ge");
		Object medicalPrice_lt = queryMap.get("medicalPrice_lt");
		Object medicalPrice_le = queryMap.get("medicalPrice_le");
		Object medicalPrice_in = queryMap.get("medicalPrice_in");
		Object unit = queryMap.get("unit");
		Object unit_like = queryMap.get("unit_like");
		Object unit_isNull = queryMap.get("unit_isNull");
		Object unit_isNotNull = queryMap.get("unit_isNotNull");
		Object unit_in = queryMap.get("unit_in");
		Object goDoor = queryMap.get("goDoor");
		Object goDoor_gt = queryMap.get("goDoor_gt");
		Object goDoor_ge = queryMap.get("goDoor_ge");
		Object goDoor_lt = queryMap.get("goDoor_lt");
		Object goDoor_le = queryMap.get("goDoor_le");
		Object goDoor_in = queryMap.get("goDoor_in");
		Object serviceTimes_gt = queryMap.get("serviceTimes_gt");
		Object serviceTimes_ge = queryMap.get("serviceTimes_ge");
		Object serviceTimes_lt = queryMap.get("serviceTimes_lt");
		Object serviceTimes_le = queryMap.get("serviceTimes_le");
		Object needPerosn = queryMap.get("needPerosn");
		Object needPerosn_like = queryMap.get("needPerosn_like");
		Object needPerosn_isNull = queryMap.get("needPerosn_isNull");
		Object needPerosn_isNotNull = queryMap.get("needPerosn_isNotNull");
		Object needPerosn_in = queryMap.get("needPerosn_in");
		Object des = queryMap.get("des");
		Object des_like = queryMap.get("des_like");
		Object des_isNull = queryMap.get("des_isNull");
		Object des_isNotNull = queryMap.get("des_isNotNull");
		Object des_in = queryMap.get("des_in");
		Object profile = queryMap.get("profile");
		Object profile_like = queryMap.get("profile_like");
		Object profile_isNull = queryMap.get("profile_isNull");
		Object profile_isNotNull = queryMap.get("profile_isNotNull");
		Object profile_in = queryMap.get("profile_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");

		QueryCondition qc = new QueryCondition(ServiceEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.in, id_in));
		}
		if (name != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.eq, name));
		}
		if (name_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.like, name_like));
		}
		if (name_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.isNull, name_isNull));
		}
		if (name_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.isNotNull, name_isNotNull));
		}
		if (name_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.in, name_in));
		}
		if (code != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.eq, code));
		}
		if (code_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.like, code_like));
		}
		if (code_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.isNull, code_isNull));
		}
		if (code_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.isNotNull, code_isNotNull));
		}
		if (code_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.in, code_in));
		}
		if (typeId != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.eq, typeId));
		}
		if (typeId_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.gt, typeId_gt));
		}
		if (typeId_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.ge, typeId_ge));
		}
		if (typeId_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.lt, typeId_lt));
		}
		if (typeId_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.le, typeId_le));
		}
		if (typeId_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.in, typeId_in));
		}
		if (status != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.eq, status));
		}
		if (status_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.gt, status_gt));
		}
		if (status_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.ge, status_ge));
		}
		if (status_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.lt, status_lt));
		}
		if (status_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.le, status_le));
		}
		if (status_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.in, status_in));
		}
		if (marketPrice != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.eq, marketPrice));
		}
		if (marketPrice_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.gt, marketPrice_gt));
		}
		if (marketPrice_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.ge, marketPrice_ge));
		}
		if (marketPrice_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.lt, marketPrice_lt));
		}
		if (marketPrice_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.le, marketPrice_le));
		}
		if (marketPrice_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.in, marketPrice_in));
		}
		if (medicalPrice != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.eq, medicalPrice));
		}
		if (medicalPrice_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.gt, medicalPrice_gt));
		}
		if (medicalPrice_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.ge, medicalPrice_ge));
		}
		if (medicalPrice_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.lt, medicalPrice_lt));
		}
		if (medicalPrice_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.le, medicalPrice_le));
		}
		if (medicalPrice_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.in, medicalPrice_in));
		}
		if (unit != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.eq, unit));
		}
		if (unit_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.like, unit_like));
		}
		if (unit_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.isNull, unit_isNull));
		}
		if (unit_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.isNotNull, unit_isNotNull));
		}
		if (unit_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.in, unit_in));
		}
		if (goDoor != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.eq, goDoor));
		}
		if (goDoor_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.gt, goDoor_gt));
		}
		if (goDoor_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.ge, goDoor_ge));
		}
		if (goDoor_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.lt, goDoor_lt));
		}
		if (goDoor_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.le, goDoor_le));
		}
		if (goDoor_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.in, goDoor_in));
		}
		if (serviceTimes_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.gt, serviceTimes_gt));
		}
		if (serviceTimes_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.ge, serviceTimes_ge));
		}
		if (serviceTimes_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.lt, serviceTimes_lt));
		}
		if (serviceTimes_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.le, serviceTimes_le));
		}
		if (needPerosn != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.eq, needPerosn));
		}
		if (needPerosn_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.like, needPerosn_like));
		}
		if (needPerosn_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.isNull, needPerosn_isNull));
		}
		if (needPerosn_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.isNotNull, needPerosn_isNotNull));
		}
		if (needPerosn_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.in, needPerosn_in));
		}
		if (des != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.eq, des));
		}
		if (des_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.like, des_like));
		}
		if (des_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.isNull, des_isNull));
		}
		if (des_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.isNotNull, des_isNotNull));
		}
		if (des_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.in, des_in));
		}
		if (profile != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.eq, profile));
		}
		if (profile_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.like, profile_like));
		}
		if (profile_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.isNull, profile_isNull));
		}
		if (profile_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.isNotNull, profile_isNotNull));
		}
		if (profile_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.in, profile_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}

		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(ServiceEntity.class, qc, oc);
		int a = 0;
		if (typeShow != null && typeShow.booleanValue()) {
			a++;
		}
		if (serviceChildListShow != null && serviceChildListShow.booleanValue()) {
			a++;
		}
		if (servicePhotoListShow != null && servicePhotoListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && list != null && list.size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < list.size(); i++) {
				ServiceEntity obj = (ServiceEntity) list.get(i);
				// 查询关联内容
				if (typeShow != null && typeShow.booleanValue() && obj != null
						&& obj.getTypeId() != null && obj.getTypeId() > 0) {
					DataDicEntity type = (DataDicEntity) dbManager.getById(
							obj.getTypeId(), DataDicEntity.class);
					obj.setType(type);
				}
				// 查询关联内容
				if (serviceChildListShow != null
						&& serviceChildListShow.booleanValue() && obj != null
						&& obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							ServiceChildEntity.class,
							ServiceChildEntity.SERVICE_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<ServiceChildEntity> serviceChildList = new ArrayList<ServiceChildEntity>();
						for (Object o : objList) {
							serviceChildList.add((ServiceChildEntity) o);
						}
						obj.setServiceChildList(serviceChildList);
					}
				}
				// 查询关联内容
				if (servicePhotoListShow != null
						&& servicePhotoListShow.booleanValue() && obj != null
						&& obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							ServicePhotoEntity.class,
							ServicePhotoEntity.SERVICE_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<ServicePhotoEntity> servicePhotoList = new ArrayList<ServicePhotoEntity>();
						for (Object o : objList) {
							servicePhotoList.add((ServicePhotoEntity) o);
						}
						obj.setServicePhotoList(servicePhotoList);
					}
				}
				result.add(obj);
			}
			list = result;
		}
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<ServiceEntity>();
			for (Object obj : list) {
				returnlist.add((ServiceEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object name = queryMap.get("name");
		Object name_like = queryMap.get("name_like");
		Object name_isNull = queryMap.get("name_isNull");
		Object name_isNotNull = queryMap.get("name_isNotNull");
		Object name_in = queryMap.get("name_in");
		Object code = queryMap.get("code");
		Object code_like = queryMap.get("code_like");
		Object code_isNull = queryMap.get("code_isNull");
		Object code_isNotNull = queryMap.get("code_isNotNull");
		Object code_in = queryMap.get("code_in");
		Object typeId = queryMap.get("typeId");
		Object typeId_gt = queryMap.get("typeId_gt");
		Object typeId_ge = queryMap.get("typeId_ge");
		Object typeId_lt = queryMap.get("typeId_lt");
		Object typeId_le = queryMap.get("typeId_le");
		Object typeId_in = queryMap.get("typeId_in");
		Object status = queryMap.get("status");
		Object status_gt = queryMap.get("status_gt");
		Object status_ge = queryMap.get("status_ge");
		Object status_lt = queryMap.get("status_lt");
		Object status_le = queryMap.get("status_le");
		Object status_in = queryMap.get("status_in");
		Object marketPrice = queryMap.get("marketPrice");
		Object marketPrice_gt = queryMap.get("marketPrice_gt");
		Object marketPrice_ge = queryMap.get("marketPrice_ge");
		Object marketPrice_lt = queryMap.get("marketPrice_lt");
		Object marketPrice_le = queryMap.get("marketPrice_le");
		Object marketPrice_in = queryMap.get("marketPrice_in");
		Object medicalPrice = queryMap.get("medicalPrice");
		Object medicalPrice_gt = queryMap.get("medicalPrice_gt");
		Object medicalPrice_ge = queryMap.get("medicalPrice_ge");
		Object medicalPrice_lt = queryMap.get("medicalPrice_lt");
		Object medicalPrice_le = queryMap.get("medicalPrice_le");
		Object medicalPrice_in = queryMap.get("medicalPrice_in");
		Object unit = queryMap.get("unit");
		Object unit_like = queryMap.get("unit_like");
		Object unit_isNull = queryMap.get("unit_isNull");
		Object unit_isNotNull = queryMap.get("unit_isNotNull");
		Object unit_in = queryMap.get("unit_in");
		Object goDoor = queryMap.get("goDoor");
		Object goDoor_gt = queryMap.get("goDoor_gt");
		Object goDoor_ge = queryMap.get("goDoor_ge");
		Object goDoor_lt = queryMap.get("goDoor_lt");
		Object goDoor_le = queryMap.get("goDoor_le");
		Object goDoor_in = queryMap.get("goDoor_in");
		Object serviceTimes_gt = queryMap.get("serviceTimes_gt");
		Object serviceTimes_ge = queryMap.get("serviceTimes_ge");
		Object serviceTimes_lt = queryMap.get("serviceTimes_lt");
		Object serviceTimes_le = queryMap.get("serviceTimes_le");
		Object needPerosn = queryMap.get("needPerosn");
		Object needPerosn_like = queryMap.get("needPerosn_like");
		Object needPerosn_isNull = queryMap.get("needPerosn_isNull");
		Object needPerosn_isNotNull = queryMap.get("needPerosn_isNotNull");
		Object needPerosn_in = queryMap.get("needPerosn_in");
		Object des = queryMap.get("des");
		Object des_like = queryMap.get("des_like");
		Object des_isNull = queryMap.get("des_isNull");
		Object des_isNotNull = queryMap.get("des_isNotNull");
		Object des_in = queryMap.get("des_in");
		Object profile = queryMap.get("profile");
		Object profile_like = queryMap.get("profile_like");
		Object profile_isNull = queryMap.get("profile_isNull");
		Object profile_isNotNull = queryMap.get("profile_isNotNull");
		Object profile_in = queryMap.get("profile_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");

		QueryCondition qc = new QueryCondition(ServiceEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.in, id_in));
		}
		if (name != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.eq, name));
		}
		if (name_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.like, name_like));
		}
		if (name_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.isNull, name_isNull));
		}
		if (name_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.isNotNull, name_isNotNull));
		}
		if (name_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.in, name_in));
		}
		if (code != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.eq, code));
		}
		if (code_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.like, code_like));
		}
		if (code_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.isNull, code_isNull));
		}
		if (code_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.isNotNull, code_isNotNull));
		}
		if (code_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.in, code_in));
		}
		if (typeId != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.eq, typeId));
		}
		if (typeId_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.gt, typeId_gt));
		}
		if (typeId_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.ge, typeId_ge));
		}
		if (typeId_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.lt, typeId_lt));
		}
		if (typeId_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.le, typeId_le));
		}
		if (typeId_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.in, typeId_in));
		}
		if (status != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.eq, status));
		}
		if (status_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.gt, status_gt));
		}
		if (status_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.ge, status_ge));
		}
		if (status_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.lt, status_lt));
		}
		if (status_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.le, status_le));
		}
		if (status_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.in, status_in));
		}
		if (marketPrice != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.eq, marketPrice));
		}
		if (marketPrice_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.gt, marketPrice_gt));
		}
		if (marketPrice_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.ge, marketPrice_ge));
		}
		if (marketPrice_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.lt, marketPrice_lt));
		}
		if (marketPrice_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.le, marketPrice_le));
		}
		if (marketPrice_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.in, marketPrice_in));
		}
		if (medicalPrice != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.eq, medicalPrice));
		}
		if (medicalPrice_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.gt, medicalPrice_gt));
		}
		if (medicalPrice_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.ge, medicalPrice_ge));
		}
		if (medicalPrice_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.lt, medicalPrice_lt));
		}
		if (medicalPrice_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.le, medicalPrice_le));
		}
		if (medicalPrice_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.in, medicalPrice_in));
		}
		if (unit != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.eq, unit));
		}
		if (unit_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.like, unit_like));
		}
		if (unit_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.isNull, unit_isNull));
		}
		if (unit_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.isNotNull, unit_isNotNull));
		}
		if (unit_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.in, unit_in));
		}
		if (goDoor != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.eq, goDoor));
		}
		if (goDoor_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.gt, goDoor_gt));
		}
		if (goDoor_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.ge, goDoor_ge));
		}
		if (goDoor_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.lt, goDoor_lt));
		}
		if (goDoor_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.le, goDoor_le));
		}
		if (goDoor_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.in, goDoor_in));
		}
		if (serviceTimes_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.gt, serviceTimes_gt));
		}
		if (serviceTimes_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.ge, serviceTimes_ge));
		}
		if (serviceTimes_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.lt, serviceTimes_lt));
		}
		if (serviceTimes_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.le, serviceTimes_le));
		}
		if (needPerosn != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.eq, needPerosn));
		}
		if (needPerosn_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.like, needPerosn_like));
		}
		if (needPerosn_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.isNull, needPerosn_isNull));
		}
		if (needPerosn_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.isNotNull, needPerosn_isNotNull));
		}
		if (needPerosn_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.in, needPerosn_in));
		}
		if (des != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.eq, des));
		}
		if (des_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.like, des_like));
		}
		if (des_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.isNull, des_isNull));
		}
		if (des_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.isNotNull, des_isNotNull));
		}
		if (des_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.in, des_in));
		}
		if (profile != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.eq, profile));
		}
		if (profile_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.like, profile_like));
		}
		if (profile_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.isNull, profile_isNull));
		}
		if (profile_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.isNotNull, profile_isNotNull));
		}
		if (profile_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.in, profile_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}

		pagelist = dbManager.queryByCondition(ServiceEntity.class, qc, pageno,
				pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @param typeShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param serviceChildListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param servicePhotoListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, int pageno, int pagesize,
			Boolean typeShow, Boolean serviceChildListShow,
			Boolean servicePhotoListShow) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object name = queryMap.get("name");
		Object name_like = queryMap.get("name_like");
		Object name_isNull = queryMap.get("name_isNull");
		Object name_isNotNull = queryMap.get("name_isNotNull");
		Object name_in = queryMap.get("name_in");
		Object code = queryMap.get("code");
		Object code_like = queryMap.get("code_like");
		Object code_isNull = queryMap.get("code_isNull");
		Object code_isNotNull = queryMap.get("code_isNotNull");
		Object code_in = queryMap.get("code_in");
		Object typeId = queryMap.get("typeId");
		Object typeId_gt = queryMap.get("typeId_gt");
		Object typeId_ge = queryMap.get("typeId_ge");
		Object typeId_lt = queryMap.get("typeId_lt");
		Object typeId_le = queryMap.get("typeId_le");
		Object typeId_in = queryMap.get("typeId_in");
		Object status = queryMap.get("status");
		Object status_gt = queryMap.get("status_gt");
		Object status_ge = queryMap.get("status_ge");
		Object status_lt = queryMap.get("status_lt");
		Object status_le = queryMap.get("status_le");
		Object status_in = queryMap.get("status_in");
		Object marketPrice = queryMap.get("marketPrice");
		Object marketPrice_gt = queryMap.get("marketPrice_gt");
		Object marketPrice_ge = queryMap.get("marketPrice_ge");
		Object marketPrice_lt = queryMap.get("marketPrice_lt");
		Object marketPrice_le = queryMap.get("marketPrice_le");
		Object marketPrice_in = queryMap.get("marketPrice_in");
		Object medicalPrice = queryMap.get("medicalPrice");
		Object medicalPrice_gt = queryMap.get("medicalPrice_gt");
		Object medicalPrice_ge = queryMap.get("medicalPrice_ge");
		Object medicalPrice_lt = queryMap.get("medicalPrice_lt");
		Object medicalPrice_le = queryMap.get("medicalPrice_le");
		Object medicalPrice_in = queryMap.get("medicalPrice_in");
		Object unit = queryMap.get("unit");
		Object unit_like = queryMap.get("unit_like");
		Object unit_isNull = queryMap.get("unit_isNull");
		Object unit_isNotNull = queryMap.get("unit_isNotNull");
		Object unit_in = queryMap.get("unit_in");
		Object goDoor = queryMap.get("goDoor");
		Object goDoor_gt = queryMap.get("goDoor_gt");
		Object goDoor_ge = queryMap.get("goDoor_ge");
		Object goDoor_lt = queryMap.get("goDoor_lt");
		Object goDoor_le = queryMap.get("goDoor_le");
		Object goDoor_in = queryMap.get("goDoor_in");
		Object serviceTimes_gt = queryMap.get("serviceTimes_gt");
		Object serviceTimes_ge = queryMap.get("serviceTimes_ge");
		Object serviceTimes_lt = queryMap.get("serviceTimes_lt");
		Object serviceTimes_le = queryMap.get("serviceTimes_le");
		Object needPerosn = queryMap.get("needPerosn");
		Object needPerosn_like = queryMap.get("needPerosn_like");
		Object needPerosn_isNull = queryMap.get("needPerosn_isNull");
		Object needPerosn_isNotNull = queryMap.get("needPerosn_isNotNull");
		Object needPerosn_in = queryMap.get("needPerosn_in");
		Object des = queryMap.get("des");
		Object des_like = queryMap.get("des_like");
		Object des_isNull = queryMap.get("des_isNull");
		Object des_isNotNull = queryMap.get("des_isNotNull");
		Object des_in = queryMap.get("des_in");
		Object profile = queryMap.get("profile");
		Object profile_like = queryMap.get("profile_like");
		Object profile_isNull = queryMap.get("profile_isNull");
		Object profile_isNotNull = queryMap.get("profile_isNotNull");
		Object profile_in = queryMap.get("profile_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");

		QueryCondition qc = new QueryCondition(ServiceEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.in, id_in));
		}
		if (name != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.eq, name));
		}
		if (name_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.like, name_like));
		}
		if (name_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.isNull, name_isNull));
		}
		if (name_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.isNotNull, name_isNotNull));
		}
		if (name_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.in, name_in));
		}
		if (code != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.eq, code));
		}
		if (code_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.like, code_like));
		}
		if (code_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.isNull, code_isNull));
		}
		if (code_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.isNotNull, code_isNotNull));
		}
		if (code_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.in, code_in));
		}
		if (typeId != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.eq, typeId));
		}
		if (typeId_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.gt, typeId_gt));
		}
		if (typeId_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.ge, typeId_ge));
		}
		if (typeId_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.lt, typeId_lt));
		}
		if (typeId_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.le, typeId_le));
		}
		if (typeId_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.in, typeId_in));
		}
		if (status != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.eq, status));
		}
		if (status_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.gt, status_gt));
		}
		if (status_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.ge, status_ge));
		}
		if (status_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.lt, status_lt));
		}
		if (status_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.le, status_le));
		}
		if (status_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.in, status_in));
		}
		if (marketPrice != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.eq, marketPrice));
		}
		if (marketPrice_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.gt, marketPrice_gt));
		}
		if (marketPrice_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.ge, marketPrice_ge));
		}
		if (marketPrice_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.lt, marketPrice_lt));
		}
		if (marketPrice_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.le, marketPrice_le));
		}
		if (marketPrice_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.in, marketPrice_in));
		}
		if (medicalPrice != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.eq, medicalPrice));
		}
		if (medicalPrice_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.gt, medicalPrice_gt));
		}
		if (medicalPrice_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.ge, medicalPrice_ge));
		}
		if (medicalPrice_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.lt, medicalPrice_lt));
		}
		if (medicalPrice_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.le, medicalPrice_le));
		}
		if (medicalPrice_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.in, medicalPrice_in));
		}
		if (unit != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.eq, unit));
		}
		if (unit_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.like, unit_like));
		}
		if (unit_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.isNull, unit_isNull));
		}
		if (unit_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.isNotNull, unit_isNotNull));
		}
		if (unit_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.in, unit_in));
		}
		if (goDoor != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.eq, goDoor));
		}
		if (goDoor_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.gt, goDoor_gt));
		}
		if (goDoor_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.ge, goDoor_ge));
		}
		if (goDoor_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.lt, goDoor_lt));
		}
		if (goDoor_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.le, goDoor_le));
		}
		if (goDoor_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.in, goDoor_in));
		}
		if (serviceTimes_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.gt, serviceTimes_gt));
		}
		if (serviceTimes_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.ge, serviceTimes_ge));
		}
		if (serviceTimes_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.lt, serviceTimes_lt));
		}
		if (serviceTimes_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.le, serviceTimes_le));
		}
		if (needPerosn != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.eq, needPerosn));
		}
		if (needPerosn_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.like, needPerosn_like));
		}
		if (needPerosn_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.isNull, needPerosn_isNull));
		}
		if (needPerosn_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.isNotNull, needPerosn_isNotNull));
		}
		if (needPerosn_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.in, needPerosn_in));
		}
		if (des != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.eq, des));
		}
		if (des_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.like, des_like));
		}
		if (des_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.isNull, des_isNull));
		}
		if (des_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.isNotNull, des_isNotNull));
		}
		if (des_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.in, des_in));
		}
		if (profile != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.eq, profile));
		}
		if (profile_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.like, profile_like));
		}
		if (profile_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.isNull, profile_isNull));
		}
		if (profile_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.isNotNull, profile_isNotNull));
		}
		if (profile_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.in, profile_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}

		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		pagelist = dbManager.queryByConditions(ServiceEntity.class, qc, oc,
				pageno, pagesize);
		int a = 0;
		if (typeShow != null && typeShow.booleanValue()) {
			a++;
		}
		if (serviceChildListShow != null && serviceChildListShow.booleanValue()) {
			a++;
		}
		if (servicePhotoListShow != null && servicePhotoListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && pagelist != null && pagelist.getResultList() != null
				&& pagelist.getResultList().size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < pagelist.getResultList().size(); i++) {
				ServiceEntity obj = (ServiceEntity) pagelist.getResultList()
						.get(i);
				// 查询关联内容
				if (typeShow != null && typeShow.booleanValue() && obj != null
						&& obj.getTypeId() != null && obj.getTypeId() > 0) {
					DataDicEntity type = (DataDicEntity) dbManager.getById(
							obj.getTypeId(), DataDicEntity.class);
					obj.setType(type);
				}
				// 查询关联内容
				if (serviceChildListShow != null
						&& serviceChildListShow.booleanValue() && obj != null
						&& obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							ServiceChildEntity.class,
							ServiceChildEntity.SERVICE_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<ServiceChildEntity> serviceChildList = new ArrayList<ServiceChildEntity>();
						for (Object o : objList) {
							serviceChildList.add((ServiceChildEntity) o);
						}
						obj.setServiceChildList(serviceChildList);
					}
				}
				// 查询关联内容
				if (servicePhotoListShow != null
						&& servicePhotoListShow.booleanValue() && obj != null
						&& obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							ServicePhotoEntity.class,
							ServicePhotoEntity.SERVICE_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<ServicePhotoEntity> servicePhotoList = new ArrayList<ServicePhotoEntity>();
						for (Object o : objList) {
							servicePhotoList.add((ServicePhotoEntity) o);
						}
						obj.setServicePhotoList(servicePhotoList);
					}
				}
				result.add(obj);
			}
			pagelist.setResultList(result);
		}
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id, Boolean delType,
			Boolean delServiceChildList, Boolean delServicePhotoList) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delType != null && delType.booleanValue()) {
					ServiceEntity service = (ServiceEntity) dbManager.getById(
							id, ServiceEntity.class);
					if (service != null && service.getTypeId() != null) {
						dbManager.delNoTransaction(service.getTypeId(),
								DataDicEntity.class);
					}
				}
				// 删除关联信息
				if (delServiceChildList != null
						&& delServiceChildList.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							ServiceChildEntity.SERVICE_ID, QueryCondition.eq,
							id);
					dbManager.delByConditionsNoTransaction(
							ServiceChildEntity.class, qc);
				}
				// 删除关联信息
				if (delServicePhotoList != null
						&& delServicePhotoList.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							ServicePhotoEntity.SERVICE_ID, QueryCondition.eq,
							id);
					dbManager.delByConditionsNoTransaction(
							ServicePhotoEntity.class, qc);
				}
				result = dbManager.delNoTransaction(id, ServiceEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(ServiceEntity.ID,
						QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(
						ServiceEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		Map<String, Object> queryMapPhoto = new HashMap<String, Object>();
		queryMapPhoto.put("serviceId_in",ids);
		List<ServicePhotoEntity>  serphotoList = servicePhotoService.getListByCondition(queryMapPhoto);
		if(serphotoList!=null&&serphotoList.size()>0){
			for(ServicePhotoEntity entutir:serphotoList){
				Integer id = entutir.getId();
				dbManager.del(id, ServicePhotoEntity.class);
			}
		}
		
		Map<String, Object> queryMapchild = new HashMap<String, Object>();
		queryMapchild.put("serviceId_in",ids);
		List<ServiceChildEntity>  sdhildervList = serviceChildService.getListByCondition(queryMapchild);
		if(sdhildervList!=null&&sdhildervList.size()>0){
			for(ServiceChildEntity entutir:sdhildervList){
				Integer id = entutir.getId();
				dbManager.del(id, ServiceChildEntity.class);
			}
		}
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap, Boolean delType,
			Boolean delServiceChildList, Boolean delServicePhotoList) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object name = queryMap.get("name");
		Object name_like = queryMap.get("name_like");
		Object name_isNull = queryMap.get("name_isNull");
		Object name_isNotNull = queryMap.get("name_isNotNull");
		Object name_in = queryMap.get("name_in");
		Object code = queryMap.get("code");
		Object code_like = queryMap.get("code_like");
		Object code_isNull = queryMap.get("code_isNull");
		Object code_isNotNull = queryMap.get("code_isNotNull");
		Object code_in = queryMap.get("code_in");
		Object typeId = queryMap.get("typeId");
		Object typeId_gt = queryMap.get("typeId_gt");
		Object typeId_ge = queryMap.get("typeId_ge");
		Object typeId_lt = queryMap.get("typeId_lt");
		Object typeId_le = queryMap.get("typeId_le");
		Object typeId_in = queryMap.get("typeId_in");
		Object status = queryMap.get("status");
		Object status_gt = queryMap.get("status_gt");
		Object status_ge = queryMap.get("status_ge");
		Object status_lt = queryMap.get("status_lt");
		Object status_le = queryMap.get("status_le");
		Object status_in = queryMap.get("status_in");
		Object marketPrice = queryMap.get("marketPrice");
		Object marketPrice_gt = queryMap.get("marketPrice_gt");
		Object marketPrice_ge = queryMap.get("marketPrice_ge");
		Object marketPrice_lt = queryMap.get("marketPrice_lt");
		Object marketPrice_le = queryMap.get("marketPrice_le");
		Object marketPrice_in = queryMap.get("marketPrice_in");
		Object medicalPrice = queryMap.get("medicalPrice");
		Object medicalPrice_gt = queryMap.get("medicalPrice_gt");
		Object medicalPrice_ge = queryMap.get("medicalPrice_ge");
		Object medicalPrice_lt = queryMap.get("medicalPrice_lt");
		Object medicalPrice_le = queryMap.get("medicalPrice_le");
		Object medicalPrice_in = queryMap.get("medicalPrice_in");
		Object unit = queryMap.get("unit");
		Object unit_like = queryMap.get("unit_like");
		Object unit_isNull = queryMap.get("unit_isNull");
		Object unit_isNotNull = queryMap.get("unit_isNotNull");
		Object unit_in = queryMap.get("unit_in");
		Object goDoor = queryMap.get("goDoor");
		Object goDoor_gt = queryMap.get("goDoor_gt");
		Object goDoor_ge = queryMap.get("goDoor_ge");
		Object goDoor_lt = queryMap.get("goDoor_lt");
		Object goDoor_le = queryMap.get("goDoor_le");
		Object goDoor_in = queryMap.get("goDoor_in");
		Object serviceTimes_gt = queryMap.get("serviceTimes_gt");
		Object serviceTimes_ge = queryMap.get("serviceTimes_ge");
		Object serviceTimes_lt = queryMap.get("serviceTimes_lt");
		Object serviceTimes_le = queryMap.get("serviceTimes_le");
		Object needPerosn = queryMap.get("needPerosn");
		Object needPerosn_like = queryMap.get("needPerosn_like");
		Object needPerosn_isNull = queryMap.get("needPerosn_isNull");
		Object needPerosn_isNotNull = queryMap.get("needPerosn_isNotNull");
		Object needPerosn_in = queryMap.get("needPerosn_in");
		Object des = queryMap.get("des");
		Object des_like = queryMap.get("des_like");
		Object des_isNull = queryMap.get("des_isNull");
		Object des_isNotNull = queryMap.get("des_isNotNull");
		Object des_in = queryMap.get("des_in");
		Object profile = queryMap.get("profile");
		Object profile_like = queryMap.get("profile_like");
		Object profile_isNull = queryMap.get("profile_isNull");
		Object profile_isNotNull = queryMap.get("profile_isNotNull");
		Object profile_in = queryMap.get("profile_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");

		QueryCondition qc = new QueryCondition(ServiceEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.ID,
					QueryCondition.in, id_in));
		}
		if (name != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.eq, name));
		}
		if (name_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.like, name_like));
		}
		if (name_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.isNull, name_isNull));
		}
		if (name_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.isNotNull, name_isNotNull));
		}
		if (name_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NAME,
					QueryCondition.in, name_in));
		}
		if (code != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.eq, code));
		}
		if (code_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.like, code_like));
		}
		if (code_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.isNull, code_isNull));
		}
		if (code_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.isNotNull, code_isNotNull));
		}
		if (code_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CODE,
					QueryCondition.in, code_in));
		}
		if (typeId != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.eq, typeId));
		}
		if (typeId_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.gt, typeId_gt));
		}
		if (typeId_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.ge, typeId_ge));
		}
		if (typeId_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.lt, typeId_lt));
		}
		if (typeId_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.le, typeId_le));
		}
		if (typeId_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.TYPE_ID,
					QueryCondition.in, typeId_in));
		}
		if (status != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.eq, status));
		}
		if (status_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.gt, status_gt));
		}
		if (status_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.ge, status_ge));
		}
		if (status_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.lt, status_lt));
		}
		if (status_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.le, status_le));
		}
		if (status_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.STATUS,
					QueryCondition.in, status_in));
		}
		if (marketPrice != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.eq, marketPrice));
		}
		if (marketPrice_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.gt, marketPrice_gt));
		}
		if (marketPrice_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.ge, marketPrice_ge));
		}
		if (marketPrice_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.lt, marketPrice_lt));
		}
		if (marketPrice_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.le, marketPrice_le));
		}
		if (marketPrice_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MARKET_PRICE,
					QueryCondition.in, marketPrice_in));
		}
		if (medicalPrice != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.eq, medicalPrice));
		}
		if (medicalPrice_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.gt, medicalPrice_gt));
		}
		if (medicalPrice_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.ge, medicalPrice_ge));
		}
		if (medicalPrice_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.lt, medicalPrice_lt));
		}
		if (medicalPrice_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.le, medicalPrice_le));
		}
		if (medicalPrice_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.MEDICAL_PRICE,
					QueryCondition.in, medicalPrice_in));
		}
		if (unit != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.eq, unit));
		}
		if (unit_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.like, unit_like));
		}
		if (unit_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.isNull, unit_isNull));
		}
		if (unit_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.isNotNull, unit_isNotNull));
		}
		if (unit_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.UNIT,
					QueryCondition.in, unit_in));
		}
		if (goDoor != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.eq, goDoor));
		}
		if (goDoor_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.gt, goDoor_gt));
		}
		if (goDoor_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.ge, goDoor_ge));
		}
		if (goDoor_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.lt, goDoor_lt));
		}
		if (goDoor_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.le, goDoor_le));
		}
		if (goDoor_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.GO_DOOR,
					QueryCondition.in, goDoor_in));
		}
		if (serviceTimes_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.gt, serviceTimes_gt));
		}
		if (serviceTimes_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.ge, serviceTimes_ge));
		}
		if (serviceTimes_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.lt, serviceTimes_lt));
		}
		if (serviceTimes_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.SERVICE_TIMES,
					QueryCondition.le, serviceTimes_le));
		}
		if (needPerosn != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.eq, needPerosn));
		}
		if (needPerosn_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.like, needPerosn_like));
		}
		if (needPerosn_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.isNull, needPerosn_isNull));
		}
		if (needPerosn_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.isNotNull, needPerosn_isNotNull));
		}
		if (needPerosn_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.NEED_PEROSN,
					QueryCondition.in, needPerosn_in));
		}
		if (des != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.eq, des));
		}
		if (des_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.like, des_like));
		}
		if (des_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.isNull, des_isNull));
		}
		if (des_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.isNotNull, des_isNotNull));
		}
		if (des_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.DES,
					QueryCondition.in, des_in));
		}
		if (profile != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.eq, profile));
		}
		if (profile_like != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.like, profile_like));
		}
		if (profile_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.isNull, profile_isNull));
		}
		if (profile_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.isNotNull, profile_isNotNull));
		}
		if (profile_in != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.PROFILE,
					QueryCondition.in, profile_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(ServiceEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}

		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delType != null && delType.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(ServiceEntity.class,
									qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ServiceEntity entity = (ServiceEntity) obj;
							strIds += entity.getTypeId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								DataDicEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								DataDicEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delServiceChildList != null
						&& delServiceChildList.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(ServiceEntity.class,
									qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ServiceEntity entity = (ServiceEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								ServiceChildEntity.SERVICE_ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								ServiceChildEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delServicePhotoList != null
						&& delServicePhotoList.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(ServiceEntity.class,
									qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ServiceEntity entity = (ServiceEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								ServicePhotoEntity.SERVICE_ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								ServicePhotoEntity.class, qc1);
					}

				}
				result = dbManager.delByConditionsNoTransaction(
						ServiceEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}
	/*pei*/
	  public static String savePhoto(String photo, String fileName)
	  {
	    String returnPath = null;
	    try {
	      photo = photo.replaceAll("\n", "");
	      byte[] photobyte = Base64Utils.decode(photo);

	      String path = HealthAssessmentHandler.class.getResource("HealthAssessmentHandler.class").toString();
	      String separator = FileUtil.getFileSeparator();
	      if ("file".equals(path.substring(0, 4))) {
	        if ("\\".equals(separator))
	          path = path.substring(6);
	        else {
	          path = path.substring(5);
	        }
	      }
	      String localPath = path.substring(0, path.indexOf("WEB-INF")) + "photos" + separator + "serviceXMPhotos" + separator+ fileName;
	      localPath = URLDecoder.decode(localPath);
	      localPath = localPath.replace("/", separator);
	      localPath = localPath.replace("\\", separator);

	      returnPath = SystemInit.photourl + "/photos/" + "serviceXMPhotos/"+fileName;

	      byte2image(photobyte, localPath);
	    }
	    catch (Exception e) {
	      logger.error(e.toString());
	    }
	    return returnPath;
	  }
	  public static void byte2image(byte[] data, String path)
	  {
	    if ((data.length < 3) || (path.equals(""))) return; try
	    {
	      FileImageOutputStream imageOutput = new FileImageOutputStream(new File(path));
	      imageOutput.write(data, 0, data.length);
	      imageOutput.close();
	      System.out.println("Make Picture success,Please find image in " + path);
	    } catch (Exception ex) {
	      System.out.println("Exception: " + ex);
	      ex.printStackTrace();
	    }
	  }
}
