package fsk.service.dev;

import java.math.BigDecimal;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import org.apache.log4j.Logger;

import fsk.entity.older.OlderEntity;

import fsk.entity.dev.DevEntity;
import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

/**
 * @Title: Service
 * @Description: 设备信息表服务类
 * @author feng.gu
 * @date 2016-09-22 11:12:57
 * @version V1.0
 * 
 */
public class DevService {
	private static Logger logger = Logger.getLogger(DevService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static DevService devService;

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static DevService getInstance() {
		if (devService == null) {
			devService = new DevService();
		}
		return devService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(DevEntity dev) {
		boolean result = false;
		if (dev != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 关联信息保存
				OlderEntity older = dev.getOlder();
				if (older != null) {
					dbManager.saveNoTransaction(older);
					dev.setOlderId(older.getId());
				}
				result = dbManager.saveNoTransaction(dev);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(List<DevEntity> devList) {
		boolean result = false;
		if (devList != null && devList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (DevEntity dev : devList) {
					if (dev != null) {
						// 关联信息保存
						OlderEntity older = dev.getOlder();
						if (older != null) {
							dbManager.saveNoTransaction(older);
							dev.setOlderId(older.getId());
						}
						result = dbManager.saveNoTransaction(dev);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public DevEntity getById(Integer id) {
		DevEntity obj = null;
		if (id != null) {
			obj = (DevEntity) dbManager.getById(id, DevEntity.class);
		}
		return obj;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param olderShow
	 *            是否查询关联信息
	 * @param obj
	 */
	public DevEntity getById(Integer id, Boolean olderShow) {
		DevEntity obj = null;
		if (id != null) {
			obj = (DevEntity) dbManager.getById(id, DevEntity.class);
			// 查询关联内容
			if (olderShow != null && olderShow.booleanValue() && obj != null
					&& obj.getOlderId() != null && obj.getOlderId() > 0) {
				OlderEntity older = (OlderEntity) dbManager.getById(
						obj.getOlderId(), OlderEntity.class);
				obj.setOlder(older);
			}
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<DevEntity> getListByCondition(Map<String, Object> queryMap) {
		List<DevEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		list = dbManager.queryByCondition(DevEntity.class, qc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<DevEntity>();
			for (Object obj : list) {
				returnlist.add((DevEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param olderShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public List<DevEntity> getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, Boolean olderShow) {
		List<DevEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(DevEntity.class, qc, oc);
		int a = 0;
		if (olderShow != null && olderShow.booleanValue()) {
			a++;
		}
		if (a > 0 && list != null && list.size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < list.size(); i++) {
				DevEntity obj = (DevEntity) list.get(i);
				// 查询关联内容
				if (olderShow != null && olderShow.booleanValue()
						&& obj != null && obj.getOlderId() != null
						&& obj.getOlderId() > 0) {
					OlderEntity older = (OlderEntity) dbManager.getById(
							obj.getOlderId(), OlderEntity.class);
					obj.setOlder(older);
				}
				result.add(obj);
			}
			list = result;
		}
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<DevEntity>();
			for (Object obj : list) {
				returnlist.add((DevEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		pagelist = dbManager.queryByCondition(DevEntity.class, qc, pageno,
				pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @param olderShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, int pageno, int pagesize, Boolean olderShow) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		// 数据权限
		List<QueryCondition> dataRuleQclist = null;
		List<Map<String, Object>> dataRuleMapList = (List<Map<String, Object>>) queryMap
				.get("dataRuleMapList");
		if (dataRuleMapList != null && dataRuleMapList.size() > 0) {
			dataRuleQclist = new ArrayList<QueryCondition>();
			for (Map<String, Object> dataRuleMap : dataRuleMapList) {
				QueryCondition dataRuleQc = changeMapToQc(dataRuleMap);
				dataRuleQclist.add(dataRuleQc);
			}
		}
		pagelist = dbManager.queryByConditions(DevEntity.class, qc,
				dataRuleQclist, oc, pageno, pagesize);
		int a = 0;
		if (olderShow != null && olderShow.booleanValue()) {
			a++;
		}
		if (a > 0 && pagelist != null && pagelist.getResultList() != null
				&& pagelist.getResultList().size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < pagelist.getResultList().size(); i++) {
				DevEntity obj = (DevEntity) pagelist.getResultList().get(i);
				// 查询关联内容
				if (olderShow != null && olderShow.booleanValue()
						&& obj != null && obj.getOlderId() != null
						&& obj.getOlderId() > 0) {
					OlderEntity older = (OlderEntity) dbManager.getById(
							obj.getOlderId(), OlderEntity.class);
					obj.setOlder(older);
				}
				result.add(obj);
			}
			pagelist.setResultList(result);
		}
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id, Boolean delOlder) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delOlder != null && delOlder.booleanValue()) {
					DevEntity dev = (DevEntity) dbManager.getById(id,
							DevEntity.class);
					if (dev != null && dev.getOlderId() != null) {
						dbManager.delNoTransaction(dev.getOlderId(),
								OlderEntity.class);
					}
				}
				result = dbManager.delNoTransaction(id, DevEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(DevEntity.ID,
						QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(
						DevEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap, Boolean delOlder) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delOlder != null && delOlder.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(DevEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							DevEntity entity = (DevEntity) obj;
							strIds += entity.getOlderId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(OlderEntity.ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								OlderEntity.class, qc1);
					}

				}
				result = dbManager.delByConditionsNoTransaction(
						DevEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	private QueryCondition changeMapToQc(Map<String, Object> queryMap) {
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object code = queryMap.get("code");
		Object code_like = queryMap.get("code_like");
		Object code_isNull = queryMap.get("code_isNull");
		Object code_isNotNull = queryMap.get("code_isNotNull");
		Object code_in = queryMap.get("code_in");
		Object name = queryMap.get("name");
		Object name_like = queryMap.get("name_like");
		Object name_isNull = queryMap.get("name_isNull");
		Object name_isNotNull = queryMap.get("name_isNotNull");
		Object name_in = queryMap.get("name_in");
		Object olderId = queryMap.get("olderId");
		Object olderId_gt = queryMap.get("olderId_gt");
		Object olderId_ge = queryMap.get("olderId_ge");
		Object olderId_lt = queryMap.get("olderId_lt");
		Object olderId_le = queryMap.get("olderId_le");
		Object olderId_in = queryMap.get("olderId_in");
		Object type = queryMap.get("type");
		Object type_gt = queryMap.get("type_gt");
		Object type_ge = queryMap.get("type_ge");
		Object type_lt = queryMap.get("type_lt");
		Object type_le = queryMap.get("type_le");
		Object type_in = queryMap.get("type_in");
		Object status = queryMap.get("status");
		Object status_like = queryMap.get("status_like");
		Object status_isNull = queryMap.get("status_isNull");
		Object status_isNotNull = queryMap.get("status_isNotNull");
		Object status_in = queryMap.get("status_in");
		Object address = queryMap.get("address");
		Object address_like = queryMap.get("address_like");
		Object address_isNull = queryMap.get("address_isNull");
		Object address_isNotNull = queryMap.get("address_isNotNull");
		Object address_in = queryMap.get("address_in");
		Object addTime_gt = queryMap.get("addTime_gt");
		Object addTime_ge = queryMap.get("addTime_ge");
		Object addTime_lt = queryMap.get("addTime_lt");
		Object addTime_le = queryMap.get("addTime_le");
		Object flat = queryMap.get("flat");
		Object flat_gt = queryMap.get("flat_gt");
		Object flat_ge = queryMap.get("flat_ge");
		Object flat_lt = queryMap.get("flat_lt");
		Object flat_le = queryMap.get("flat_le");
		Object flat_in = queryMap.get("flat_in");
		Object flong = queryMap.get("flong");
		Object flong_gt = queryMap.get("flong_gt");
		Object flong_ge = queryMap.get("flong_ge");
		Object flong_lt = queryMap.get("flong_lt");
		Object flong_le = queryMap.get("flong_le");
		Object flong_in = queryMap.get("flong_in");
		Object fradius = queryMap.get("fradius");
		Object fradius_gt = queryMap.get("fradius_gt");
		Object fradius_ge = queryMap.get("fradius_ge");
		Object fradius_lt = queryMap.get("fradius_lt");
		Object fradius_le = queryMap.get("fradius_le");
		Object fradius_in = queryMap.get("fradius_in");
		Object posLat = queryMap.get("posLat");
		Object posLat_gt = queryMap.get("posLat_gt");
		Object posLat_ge = queryMap.get("posLat_ge");
		Object posLat_lt = queryMap.get("posLat_lt");
		Object posLat_le = queryMap.get("posLat_le");
		Object posLat_in = queryMap.get("posLat_in");
		Object posLong = queryMap.get("posLong");
		Object posLong_gt = queryMap.get("posLong_gt");
		Object posLong_ge = queryMap.get("posLong_ge");
		Object posLong_lt = queryMap.get("posLong_lt");
		Object posLong_le = queryMap.get("posLong_le");
		Object posLong_in = queryMap.get("posLong_in");
		Object photo = queryMap.get("photo");
		Object photo_like = queryMap.get("photo_like");
		Object photo_isNull = queryMap.get("photo_isNull");
		Object photo_isNotNull = queryMap.get("photo_isNotNull");
		Object photo_in = queryMap.get("photo_in");
		Object devPhone = queryMap.get("devPhone");
		Object devPhone_like = queryMap.get("devPhone_like");
		Object devPhone_isNull = queryMap.get("devPhone_isNull");
		Object devPhone_isNotNull = queryMap.get("devPhone_isNotNull");
		Object devPhone_in = queryMap.get("devPhone_in");
		Object doorCode = queryMap.get("doorCode");
		Object doorCode_like = queryMap.get("doorCode_like");
		Object doorCode_isNull = queryMap.get("doorCode_isNull");
		Object doorCode_isNotNull = queryMap.get("doorCode_isNotNull");
		Object doorCode_in = queryMap.get("doorCode_in");
		Object doorAlarmDelay = queryMap.get("doorAlarmDelay");
		Object doorAlarmDelay_like = queryMap.get("doorAlarmDelay_like");
		Object doorAlarmDelay_isNull = queryMap.get("doorAlarmDelay_isNull");
		Object doorAlarmDelay_isNotNull = queryMap
				.get("doorAlarmDelay_isNotNull");
		Object doorAlarmDelay_in = queryMap.get("doorAlarmDelay_in");
		Object doorAlarmStart = queryMap.get("doorAlarmStart");
		Object doorAlarmStart_like = queryMap.get("doorAlarmStart_like");
		Object doorAlarmStart_isNull = queryMap.get("doorAlarmStart_isNull");
		Object doorAlarmStart_isNotNull = queryMap
				.get("doorAlarmStart_isNotNull");
		Object doorAlarmStart_in = queryMap.get("doorAlarmStart_in");
		Object doorAlarmEnd = queryMap.get("doorAlarmEnd");
		Object doorAlarmEnd_like = queryMap.get("doorAlarmEnd_like");
		Object doorAlarmEnd_isNull = queryMap.get("doorAlarmEnd_isNull");
		Object doorAlarmEnd_isNotNull = queryMap.get("doorAlarmEnd_isNotNull");
		Object doorAlarmEnd_in = queryMap.get("doorAlarmEnd_in");
		Object irCode = queryMap.get("irCode");
		Object irCode_like = queryMap.get("irCode_like");
		Object irCode_isNull = queryMap.get("irCode_isNull");
		Object irCode_isNotNull = queryMap.get("irCode_isNotNull");
		Object irCode_in = queryMap.get("irCode_in");
		Object irAlarmDelay = queryMap.get("irAlarmDelay");
		Object irAlarmDelay_like = queryMap.get("irAlarmDelay_like");
		Object irAlarmDelay_isNull = queryMap.get("irAlarmDelay_isNull");
		Object irAlarmDelay_isNotNull = queryMap.get("irAlarmDelay_isNotNull");
		Object irAlarmDelay_in = queryMap.get("irAlarmDelay_in");
		Object irAlarmStart = queryMap.get("irAlarmStart");
		Object irAlarmStart_like = queryMap.get("irAlarmStart_like");
		Object irAlarmStart_isNull = queryMap.get("irAlarmStart_isNull");
		Object irAlarmStart_isNotNull = queryMap.get("irAlarmStart_isNotNull");
		Object irAlarmStart_in = queryMap.get("irAlarmStart_in");
		Object irAlarmEnd = queryMap.get("irAlarmEnd");
		Object irAlarmEnd_like = queryMap.get("irAlarmEnd_like");
		Object irAlarmEnd_isNull = queryMap.get("irAlarmEnd_isNull");
		Object irAlarmEnd_isNotNull = queryMap.get("irAlarmEnd_isNotNull");
		Object irAlarmEnd_in = queryMap.get("irAlarmEnd_in");
		Object locationStatus = queryMap.get("locationStatus");
		Object locationStatus_gt = queryMap.get("locationStatus_gt");
		Object locationStatus_ge = queryMap.get("locationStatus_ge");
		Object locationStatus_lt = queryMap.get("locationStatus_lt");
		Object locationStatus_le = queryMap.get("locationStatus_le");
		Object locationStatus_in = queryMap.get("locationStatus_in");
		Object deviation = queryMap.get("deviation");
		Object deviation_gt = queryMap.get("deviation_gt");
		Object deviation_ge = queryMap.get("deviation_ge");
		Object deviation_lt = queryMap.get("deviation_lt");
		Object deviation_le = queryMap.get("deviation_le");
		Object deviation_in = queryMap.get("deviation_in");

		QueryCondition qc = new QueryCondition(DevEntity.ID, QueryCondition.gt,
				"0");
		if (id != null) {
			qc.andCondition(new QueryCondition(DevEntity.ID, QueryCondition.eq,
					id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(DevEntity.ID, QueryCondition.gt,
					id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(DevEntity.ID, QueryCondition.ge,
					id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(DevEntity.ID, QueryCondition.lt,
					id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(DevEntity.ID, QueryCondition.le,
					id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.ID, QueryCondition.in,
					id_in));
		}
		if (code != null) {
			qc.andCondition(new QueryCondition(DevEntity.CODE,
					QueryCondition.eq, code));
		}
		if (code_like != null) {
			qc.andCondition(new QueryCondition(DevEntity.CODE,
					QueryCondition.like, code_like));
		}
		if (code_isNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.CODE,
					QueryCondition.isNull, code_isNull));
		}
		if (code_isNotNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.CODE,
					QueryCondition.isNotNull, code_isNotNull));
		}
		if (code_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.CODE,
					QueryCondition.in, code_in));
		}
		if (name != null) {
			qc.andCondition(new QueryCondition(DevEntity.NAME,
					QueryCondition.eq, name));
		}
		if (name_like != null) {
			qc.andCondition(new QueryCondition(DevEntity.NAME,
					QueryCondition.like, name_like));
		}
		if (name_isNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.NAME,
					QueryCondition.isNull, name_isNull));
		}
		if (name_isNotNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.NAME,
					QueryCondition.isNotNull, name_isNotNull));
		}
		if (name_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.NAME,
					QueryCondition.in, name_in));
		}
		if (olderId != null) {
			qc.andCondition(new QueryCondition(DevEntity.OLDER_ID,
					QueryCondition.eq, olderId));
		}
		if (olderId_gt != null) {
			qc.andCondition(new QueryCondition(DevEntity.OLDER_ID,
					QueryCondition.gt, olderId_gt));
		}
		if (olderId_ge != null) {
			qc.andCondition(new QueryCondition(DevEntity.OLDER_ID,
					QueryCondition.ge, olderId_ge));
		}
		if (olderId_lt != null) {
			qc.andCondition(new QueryCondition(DevEntity.OLDER_ID,
					QueryCondition.lt, olderId_lt));
		}
		if (olderId_le != null) {
			qc.andCondition(new QueryCondition(DevEntity.OLDER_ID,
					QueryCondition.le, olderId_le));
		}
		if (olderId_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.OLDER_ID,
					QueryCondition.in, olderId_in));
		}
		if (type != null) {
			qc.andCondition(new QueryCondition(DevEntity.TYPE,
					QueryCondition.eq, type));
		}
		if (type_gt != null) {
			qc.andCondition(new QueryCondition(DevEntity.TYPE,
					QueryCondition.gt, type_gt));
		}
		if (type_ge != null) {
			qc.andCondition(new QueryCondition(DevEntity.TYPE,
					QueryCondition.ge, type_ge));
		}
		if (type_lt != null) {
			qc.andCondition(new QueryCondition(DevEntity.TYPE,
					QueryCondition.lt, type_lt));
		}
		if (type_le != null) {
			qc.andCondition(new QueryCondition(DevEntity.TYPE,
					QueryCondition.le, type_le));
		}
		if (type_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.TYPE,
					QueryCondition.in, type_in));
		}
		if (status != null) {
			qc.andCondition(new QueryCondition(DevEntity.STATUS,
					QueryCondition.eq, status));
		}
		if (status_like != null) {
			qc.andCondition(new QueryCondition(DevEntity.STATUS,
					QueryCondition.like, status_like));
		}
		if (status_isNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.STATUS,
					QueryCondition.isNull, status_isNull));
		}
		if (status_isNotNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.STATUS,
					QueryCondition.isNotNull, status_isNotNull));
		}
		if (status_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.STATUS,
					QueryCondition.in, status_in));
		}
		if (address != null) {
			qc.andCondition(new QueryCondition(DevEntity.ADDRESS,
					QueryCondition.eq, address));
		}
		if (address_like != null) {
			qc.andCondition(new QueryCondition(DevEntity.ADDRESS,
					QueryCondition.like, address_like));
		}
		if (address_isNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.ADDRESS,
					QueryCondition.isNull, address_isNull));
		}
		if (address_isNotNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.ADDRESS,
					QueryCondition.isNotNull, address_isNotNull));
		}
		if (address_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.ADDRESS,
					QueryCondition.in, address_in));
		}
		if (addTime_gt != null) {
			qc.andCondition(new QueryCondition(DevEntity.ADD_TIME,
					QueryCondition.gt, addTime_gt));
		}
		if (addTime_ge != null) {
			qc.andCondition(new QueryCondition(DevEntity.ADD_TIME,
					QueryCondition.ge, addTime_ge));
		}
		if (addTime_lt != null) {
			qc.andCondition(new QueryCondition(DevEntity.ADD_TIME,
					QueryCondition.lt, addTime_lt));
		}
		if (addTime_le != null) {
			qc.andCondition(new QueryCondition(DevEntity.ADD_TIME,
					QueryCondition.le, addTime_le));
		}
		if (flat != null) {
			qc.andCondition(new QueryCondition(DevEntity.FLAT,
					QueryCondition.eq, flat));
		}
		if (flat_gt != null) {
			qc.andCondition(new QueryCondition(DevEntity.FLAT,
					QueryCondition.gt, flat_gt));
		}
		if (flat_ge != null) {
			qc.andCondition(new QueryCondition(DevEntity.FLAT,
					QueryCondition.ge, flat_ge));
		}
		if (flat_lt != null) {
			qc.andCondition(new QueryCondition(DevEntity.FLAT,
					QueryCondition.lt, flat_lt));
		}
		if (flat_le != null) {
			qc.andCondition(new QueryCondition(DevEntity.FLAT,
					QueryCondition.le, flat_le));
		}
		if (flat_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.FLAT,
					QueryCondition.in, flat_in));
		}
		if (flong != null) {
			qc.andCondition(new QueryCondition(DevEntity.FLONG,
					QueryCondition.eq, flong));
		}
		if (flong_gt != null) {
			qc.andCondition(new QueryCondition(DevEntity.FLONG,
					QueryCondition.gt, flong_gt));
		}
		if (flong_ge != null) {
			qc.andCondition(new QueryCondition(DevEntity.FLONG,
					QueryCondition.ge, flong_ge));
		}
		if (flong_lt != null) {
			qc.andCondition(new QueryCondition(DevEntity.FLONG,
					QueryCondition.lt, flong_lt));
		}
		if (flong_le != null) {
			qc.andCondition(new QueryCondition(DevEntity.FLONG,
					QueryCondition.le, flong_le));
		}
		if (flong_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.FLONG,
					QueryCondition.in, flong_in));
		}
		if (fradius != null) {
			qc.andCondition(new QueryCondition(DevEntity.FRADIUS,
					QueryCondition.eq, fradius));
		}
		if (fradius_gt != null) {
			qc.andCondition(new QueryCondition(DevEntity.FRADIUS,
					QueryCondition.gt, fradius_gt));
		}
		if (fradius_ge != null) {
			qc.andCondition(new QueryCondition(DevEntity.FRADIUS,
					QueryCondition.ge, fradius_ge));
		}
		if (fradius_lt != null) {
			qc.andCondition(new QueryCondition(DevEntity.FRADIUS,
					QueryCondition.lt, fradius_lt));
		}
		if (fradius_le != null) {
			qc.andCondition(new QueryCondition(DevEntity.FRADIUS,
					QueryCondition.le, fradius_le));
		}
		if (fradius_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.FRADIUS,
					QueryCondition.in, fradius_in));
		}
		if (posLat != null) {
			qc.andCondition(new QueryCondition(DevEntity.POS_LAT,
					QueryCondition.eq, posLat));
		}
		if (posLat_gt != null) {
			qc.andCondition(new QueryCondition(DevEntity.POS_LAT,
					QueryCondition.gt, posLat_gt));
		}
		if (posLat_ge != null) {
			qc.andCondition(new QueryCondition(DevEntity.POS_LAT,
					QueryCondition.ge, posLat_ge));
		}
		if (posLat_lt != null) {
			qc.andCondition(new QueryCondition(DevEntity.POS_LAT,
					QueryCondition.lt, posLat_lt));
		}
		if (posLat_le != null) {
			qc.andCondition(new QueryCondition(DevEntity.POS_LAT,
					QueryCondition.le, posLat_le));
		}
		if (posLat_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.POS_LAT,
					QueryCondition.in, posLat_in));
		}
		if (posLong != null) {
			qc.andCondition(new QueryCondition(DevEntity.POS_LONG,
					QueryCondition.eq, posLong));
		}
		if (posLong_gt != null) {
			qc.andCondition(new QueryCondition(DevEntity.POS_LONG,
					QueryCondition.gt, posLong_gt));
		}
		if (posLong_ge != null) {
			qc.andCondition(new QueryCondition(DevEntity.POS_LONG,
					QueryCondition.ge, posLong_ge));
		}
		if (posLong_lt != null) {
			qc.andCondition(new QueryCondition(DevEntity.POS_LONG,
					QueryCondition.lt, posLong_lt));
		}
		if (posLong_le != null) {
			qc.andCondition(new QueryCondition(DevEntity.POS_LONG,
					QueryCondition.le, posLong_le));
		}
		if (posLong_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.POS_LONG,
					QueryCondition.in, posLong_in));
		}
		if (photo != null) {
			qc.andCondition(new QueryCondition(DevEntity.PHOTO,
					QueryCondition.eq, photo));
		}
		if (photo_like != null) {
			qc.andCondition(new QueryCondition(DevEntity.PHOTO,
					QueryCondition.like, photo_like));
		}
		if (photo_isNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.PHOTO,
					QueryCondition.isNull, photo_isNull));
		}
		if (photo_isNotNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.PHOTO,
					QueryCondition.isNotNull, photo_isNotNull));
		}
		if (photo_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.PHOTO,
					QueryCondition.in, photo_in));
		}
		if (devPhone != null) {
			qc.andCondition(new QueryCondition(DevEntity.DEV_PHONE,
					QueryCondition.eq, devPhone));
		}
		if (devPhone_like != null) {
			qc.andCondition(new QueryCondition(DevEntity.DEV_PHONE,
					QueryCondition.like, devPhone_like));
		}
		if (devPhone_isNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.DEV_PHONE,
					QueryCondition.isNull, devPhone_isNull));
		}
		if (devPhone_isNotNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.DEV_PHONE,
					QueryCondition.isNotNull, devPhone_isNotNull));
		}
		if (devPhone_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.DEV_PHONE,
					QueryCondition.in, devPhone_in));
		}
		if (doorCode != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_CODE,
					QueryCondition.eq, doorCode));
		}
		if (doorCode_like != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_CODE,
					QueryCondition.like, doorCode_like));
		}
		if (doorCode_isNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_CODE,
					QueryCondition.isNull, doorCode_isNull));
		}
		if (doorCode_isNotNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_CODE,
					QueryCondition.isNotNull, doorCode_isNotNull));
		}
		if (doorCode_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_CODE,
					QueryCondition.in, doorCode_in));
		}
		if (doorAlarmDelay != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_ALARM_DELAY,
					QueryCondition.eq, doorAlarmDelay));
		}
		if (doorAlarmDelay_like != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_ALARM_DELAY,
					QueryCondition.like, doorAlarmDelay_like));
		}
		if (doorAlarmDelay_isNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_ALARM_DELAY,
					QueryCondition.isNull, doorAlarmDelay_isNull));
		}
		if (doorAlarmDelay_isNotNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_ALARM_DELAY,
					QueryCondition.isNotNull, doorAlarmDelay_isNotNull));
		}
		if (doorAlarmDelay_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_ALARM_DELAY,
					QueryCondition.in, doorAlarmDelay_in));
		}
		if (doorAlarmStart != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_ALARM_START,
					QueryCondition.eq, doorAlarmStart));
		}
		if (doorAlarmStart_like != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_ALARM_START,
					QueryCondition.like, doorAlarmStart_like));
		}
		if (doorAlarmStart_isNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_ALARM_START,
					QueryCondition.isNull, doorAlarmStart_isNull));
		}
		if (doorAlarmStart_isNotNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_ALARM_START,
					QueryCondition.isNotNull, doorAlarmStart_isNotNull));
		}
		if (doorAlarmStart_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_ALARM_START,
					QueryCondition.in, doorAlarmStart_in));
		}
		if (doorAlarmEnd != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_ALARM_END,
					QueryCondition.eq, doorAlarmEnd));
		}
		if (doorAlarmEnd_like != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_ALARM_END,
					QueryCondition.like, doorAlarmEnd_like));
		}
		if (doorAlarmEnd_isNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_ALARM_END,
					QueryCondition.isNull, doorAlarmEnd_isNull));
		}
		if (doorAlarmEnd_isNotNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_ALARM_END,
					QueryCondition.isNotNull, doorAlarmEnd_isNotNull));
		}
		if (doorAlarmEnd_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.DOOR_ALARM_END,
					QueryCondition.in, doorAlarmEnd_in));
		}
		if (irCode != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_CODE,
					QueryCondition.eq, irCode));
		}
		if (irCode_like != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_CODE,
					QueryCondition.like, irCode_like));
		}
		if (irCode_isNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_CODE,
					QueryCondition.isNull, irCode_isNull));
		}
		if (irCode_isNotNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_CODE,
					QueryCondition.isNotNull, irCode_isNotNull));
		}
		if (irCode_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_CODE,
					QueryCondition.in, irCode_in));
		}
		if (irAlarmDelay != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_ALARM_DELAY,
					QueryCondition.eq, irAlarmDelay));
		}
		if (irAlarmDelay_like != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_ALARM_DELAY,
					QueryCondition.like, irAlarmDelay_like));
		}
		if (irAlarmDelay_isNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_ALARM_DELAY,
					QueryCondition.isNull, irAlarmDelay_isNull));
		}
		if (irAlarmDelay_isNotNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_ALARM_DELAY,
					QueryCondition.isNotNull, irAlarmDelay_isNotNull));
		}
		if (irAlarmDelay_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_ALARM_DELAY,
					QueryCondition.in, irAlarmDelay_in));
		}
		if (irAlarmStart != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_ALARM_START,
					QueryCondition.eq, irAlarmStart));
		}
		if (irAlarmStart_like != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_ALARM_START,
					QueryCondition.like, irAlarmStart_like));
		}
		if (irAlarmStart_isNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_ALARM_START,
					QueryCondition.isNull, irAlarmStart_isNull));
		}
		if (irAlarmStart_isNotNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_ALARM_START,
					QueryCondition.isNotNull, irAlarmStart_isNotNull));
		}
		if (irAlarmStart_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_ALARM_START,
					QueryCondition.in, irAlarmStart_in));
		}
		if (irAlarmEnd != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_ALARM_END,
					QueryCondition.eq, irAlarmEnd));
		}
		if (irAlarmEnd_like != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_ALARM_END,
					QueryCondition.like, irAlarmEnd_like));
		}
		if (irAlarmEnd_isNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_ALARM_END,
					QueryCondition.isNull, irAlarmEnd_isNull));
		}
		if (irAlarmEnd_isNotNull != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_ALARM_END,
					QueryCondition.isNotNull, irAlarmEnd_isNotNull));
		}
		if (irAlarmEnd_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.IR_ALARM_END,
					QueryCondition.in, irAlarmEnd_in));
		}
		if (locationStatus != null) {
			qc.andCondition(new QueryCondition(DevEntity.LOCATION_STATUS,
					QueryCondition.eq, locationStatus));
		}
		if (locationStatus_gt != null) {
			qc.andCondition(new QueryCondition(DevEntity.LOCATION_STATUS,
					QueryCondition.gt, locationStatus_gt));
		}
		if (locationStatus_ge != null) {
			qc.andCondition(new QueryCondition(DevEntity.LOCATION_STATUS,
					QueryCondition.ge, locationStatus_ge));
		}
		if (locationStatus_lt != null) {
			qc.andCondition(new QueryCondition(DevEntity.LOCATION_STATUS,
					QueryCondition.lt, locationStatus_lt));
		}
		if (locationStatus_le != null) {
			qc.andCondition(new QueryCondition(DevEntity.LOCATION_STATUS,
					QueryCondition.le, locationStatus_le));
		}
		if (locationStatus_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.LOCATION_STATUS,
					QueryCondition.in, locationStatus_in));
		}
		if (deviation != null) {
			qc.andCondition(new QueryCondition(DevEntity.DEVIATION,
					QueryCondition.eq, deviation));
		}
		if (deviation_gt != null) {
			qc.andCondition(new QueryCondition(DevEntity.DEVIATION,
					QueryCondition.gt, deviation_gt));
		}
		if (deviation_ge != null) {
			qc.andCondition(new QueryCondition(DevEntity.DEVIATION,
					QueryCondition.ge, deviation_ge));
		}
		if (deviation_lt != null) {
			qc.andCondition(new QueryCondition(DevEntity.DEVIATION,
					QueryCondition.lt, deviation_lt));
		}
		if (deviation_le != null) {
			qc.andCondition(new QueryCondition(DevEntity.DEVIATION,
					QueryCondition.le, deviation_le));
		}
		if (deviation_in != null) {
			qc.andCondition(new QueryCondition(DevEntity.DEVIATION,
					QueryCondition.in, deviation_in));
		}
		return qc;
	}

}
