package fsk.handler.healthAssessment;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.business.handler.BaseHandler;
import com.framework.system.common.service.SystemService;
import com.framework.system.db.query.OrderVO;

import fsk.entity.assessmentTask.AssessmentTaskEntity;
import fsk.entity.employee.EmployeeEntity;
import fsk.entity.healthAssessment.HealthAssessmentEntity;
import fsk.entity.healthReportPhoto.HealthReportPhotoEntity;
import fsk.entity.older.OlderEntity;
import fsk.entity.skinLesions.SkinLesionsEntity;
import fsk.pack.healthAssessment.HealthAssessmentPack;
import fsk.parse.healthAssessment.HealthAssessmentParse;
import fsk.service.assessmentTask.AssessmentTaskService;
import fsk.service.employee.EmployeeService;
import fsk.service.healthAssessment.HealthAssessmentService;
import fsk.service.healthReportPhoto.HealthReportPhotoService;
import fsk.service.older.OlderService;
import fsk.service.skinLesions.SkinLesionsService;

/**
 * @Title: Handler
 * @Description: 健康评估业务处理器
 * @author feng.gu
 * @date 2016-08-11 17:31:29
 * @version V1.0
 * 
 */
public class HealthAssessmentHandler extends BaseHandler {
	private static Logger logger = Logger.getLogger(HealthAssessmentService.class);
	/**
	 * 解析器
	 */
	private HealthAssessmentParse healthAssessmentParse = HealthAssessmentParse.getInstance();
	/**
	 * 业务处理器
	 */
	private HealthAssessmentService healthAssessmentService = HealthAssessmentService.getInstance();
	/**
	 * 封装器
	 */
	private HealthAssessmentPack healthAssessmentPack = HealthAssessmentPack.getInstance();

	private static HealthAssessmentHandler healthAssessmentHandler;

	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();
	private static EmployeeService employeeService = EmployeeService.getInstance();
	private static OlderService olderService = OlderService.getInstance();
	private static SkinLesionsService skinLesionsServic = SkinLesionsService.getInstance();
	private static HealthReportPhotoService healthReportPhotoService = HealthReportPhotoService.getInstance();
	private static AssessmentTaskService assessmentTaskService = AssessmentTaskService.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static HealthAssessmentHandler getInstance() {
		if (healthAssessmentHandler == null) {
			healthAssessmentHandler = new HealthAssessmentHandler();
		}
		return healthAssessmentHandler;
	}

	/**
	 * 
	 * @param type
	 *            1-json 2-xml
	 * @param entityName
	 * @param command
	 * @param reqStr
	 * @param request
	 * @param response
	 */
	public String doHandler(int type, String command, String reqStr, HttpServletRequest request, HttpServletResponse response) {
		logger.debug("请求消息：" + reqStr);
		String resultStr = "";
		try {
			// 解析
			Map<String, Object> parseMap = healthAssessmentParse.parse(type, command, reqStr, request);
			String action = (String) parseMap.get("action");
			HealthAssessmentEntity healthAssessment = (HealthAssessmentEntity) parseMap.get("healthAssessment");
			List<HealthAssessmentEntity> healthAssessmentList = (List<HealthAssessmentEntity>) parseMap.get("healthAssessmentList");
			Integer id = (Integer) parseMap.get("id");
			Map<String, Object> queryMap = (Map<String, Object>) parseMap.get("queryMap");
			int pageno = (Integer) parseMap.get("pageno");
			int pagesize = (Integer) parseMap.get("pagesize");
			List<OrderVO> orderList = (List<OrderVO>) parseMap.get("orderList");

			Boolean employeeShow = (Boolean) parseMap.get("employeeShow");
			Boolean delEmployee = (Boolean) parseMap.get("delEmployee");
			Boolean olderShow = (Boolean) parseMap.get("olderShow");
			Boolean delOlder = (Boolean) parseMap.get("delOlder");
			Boolean healthReportShow = (Boolean) parseMap.get("healthReportShow");
			Boolean delHealthReport = (Boolean) parseMap.get("delHealthReport");
			Boolean recoveryShow = (Boolean) parseMap.get("recoveryShow");
			Boolean delRecovery = (Boolean) parseMap.get("delRecovery");
			Boolean adlShow = (Boolean) parseMap.get("adlShow");
			Boolean delAdl = (Boolean) parseMap.get("delAdl");
			Boolean nutritionShow = (Boolean) parseMap.get("nutritionShow");
			Boolean delNutrition = (Boolean) parseMap.get("delNutrition");
			Boolean fallShow = (Boolean) parseMap.get("fallShow");
			Boolean delFall = (Boolean) parseMap.get("delFall");
			Boolean soreShow = (Boolean) parseMap.get("soreShow");
			Boolean delSore = (Boolean) parseMap.get("delSore");
			Boolean mmseShow = (Boolean) parseMap.get("mmseShow");
			Boolean delMmse = (Boolean) parseMap.get("delMmse");
			Boolean masShow = (Boolean) parseMap.get("masShow");
			Boolean delMas = (Boolean) parseMap.get("delMas");
			Boolean barthelShow = (Boolean) parseMap.get("barthelShow");
			Boolean delBarthel = (Boolean) parseMap.get("delBarthel");
			Boolean fcaShow = (Boolean) parseMap.get("fcaShow");
			Boolean delFca = (Boolean) parseMap.get("delFca");
			/*
			 * 查询条件 peihouxuan
			 */
			JSONObject reqStrjson = JSONObject.fromObject(reqStr);
			JSONObject contentjson = (JSONObject) reqStrjson.get("content");
			String employeeName = (String) contentjson.get("employeeName");
			String olderCount = (String) contentjson.get("olderCount");
			// 业务处理
			Object result = null;
			if ("save".equals(action)) {
				// 删除skin
				boolean delskin = false;
				if (healthAssessment.getRecovery() != null) {
					if (healthAssessment.getRecovery().getId() != null) {
						if (healthAssessment.getRecovery().getSkinLesionsList() != null && healthAssessment.getRecovery().getSkinLesionsList().size() > 0) {
							SkinLesionsEntity skinLesionsEntity = healthAssessment.getRecovery().getSkinLesionsList().get(0);
							if (skinLesionsEntity.getId() != null && skinLesionsEntity.getId().intValue() == -1) {
								// 不操作
								healthAssessment.getRecovery().setSkinLesionsList(null);
							} else {
								// 无值要删
								delskin = true;
							}
						} else {
							// 不传删
							delskin = true;
						}
					}
				}
				if (delskin) {
					Map<String, Object> delMap = new HashMap<String, Object>();
					delMap.put("recoveryId", healthAssessment.getRecovery().getId());
					skinLesionsServic.delList(delMap, false);
				}
				// 删除photo
				boolean delphoto = false;
				if (healthAssessment.getHealthReport() != null) {
					if (healthAssessment.getHealthReport().getId() != null) {
						if (healthAssessment.getHealthReport().getHealthReportPhotoList() != null
								&& healthAssessment.getHealthReport().getHealthReportPhotoList().size() > 0) {
							HealthReportPhotoEntity entitytemp = healthAssessment.getHealthReport().getHealthReportPhotoList().get(0);
							if (entitytemp.getId() != null && entitytemp.getId().intValue() == -1) {
								// 不操作
								healthAssessment.getHealthReport().setHealthReportPhotoList(null);
							} else {
								// 无值要删
								delphoto = true;
							}
						} else {
							// 不传删
							delphoto = true;
						}
					}
				}
				if (delphoto) {
					Map<String, Object> delMap = new HashMap<String, Object>();
					delMap.put("healthReportId", healthAssessment.getHealthReport().getId());
					healthReportPhotoService.delList(delMap, false);
				}
				/* 更新task表的状态pei */
				if (healthAssessment.getId() != null) {
					Map<String, Object> queryMaptask = new HashMap<String, Object>();
					queryMaptask.put("healthAssessmentId", healthAssessment.getId());
					List<AssessmentTaskEntity> entityList = assessmentTaskService.getListByCondition(queryMaptask);
					if (entityList != null && entityList.size() > 0) {
						AssessmentTaskEntity entitytask = entityList.get(0);
						Integer taskStatus = null;
						try {
							taskStatus = (Integer) contentjson.get("taskStatus");
						} catch (Exception e) {
						}
						Integer Status = null;
						try {
							Status = (Integer) contentjson.get("status");
						} catch (Exception e) {
						}
						if (taskStatus != null) {
							entitytask.setTaskStatus(taskStatus);
						}
						if (Status != null) {
							entitytask.setHealthAssessmentStatus(Status);
						}
						assessmentTaskService.save(entitytask);
					}
				}

				result = healthAssessmentService.save(healthAssessment);
			} else if ("saveList".equals(action)) {
				result = healthAssessmentService.saveList(healthAssessmentList);
			} else if ("getById".equals(action)) {
				result = healthAssessmentService.getById(id, employeeShow, olderShow, healthReportShow, recoveryShow, adlShow, nutritionShow, fallShow,
						soreShow, mmseShow, masShow, barthelShow, fcaShow);
			} else if ("getListByCondition".equals(action)) {
				// 根据数据权限 增加查询条件
				// 条件查询 pei
				boolean flag1 = false;
				boolean flag2 = false;
				String oldids = "";
				String empids = "";
				String ids = "";
				if (employeeName != null) {
					flag1 = true;
					Map<String, Object> queryMapEmp = new HashMap<String, Object>();
					queryMapEmp.put("name_like", employeeName);
					List<EmployeeEntity> empList = employeeService.getListByCondition(queryMapEmp);
					if (empList != null && empList.size() > 0) {
						for (int i = 0; i < empList.size(); i++) {
							EmployeeEntity entity = empList.get(i);
							if (i < empList.size() - 1) {
								empids = empids + entity.getId() + ",";
							} else {
								empids = empids + entity.getId();
							}
						}
					} else {
						empids = "0";
					}
				}
				if (olderCount != null) {
					flag2 = true;
					Map<String, Object> queryMapOld = new HashMap<String, Object>();
					queryMapOld.put("memberNum_in", olderCount);
					List<OlderEntity> oldEntityList = olderService.getListByCondition(queryMapOld);
					if (oldEntityList != null && oldEntityList.size() > 0) {
						for (int i = 0; i < oldEntityList.size(); i++) {
							OlderEntity entity = oldEntityList.get(i);
							if (i < oldEntityList.size() - 1) {
								oldids = oldids + entity.getId() + ",";
							} else {
								oldids = oldids + entity.getId();
							}
						}
					} else {
						oldids = "0";
					}

				}
				if (flag1 || flag2) {
					Map<String, Object> queryMapNew = new HashMap<String, Object>();
					if (flag1) {
						queryMapNew.put("employeeId_in", empids);
					}
					if (flag2) {
						queryMapNew.put("olderId_in", oldids);
					}
					List<HealthAssessmentEntity> healEntityList = healthAssessmentService.getListByCondition(queryMapNew);
					if (healEntityList != null && healEntityList.size() > 0) {
						for (HealthAssessmentEntity entity : healEntityList) {
							ids = ids + entity.getId() + ",";
						}
					}
					if (!"".equals(ids)) {
						ids = ids.replaceAll(",,", ",");
						ids = ids.substring(0, ids.length() - 1);
					} else {
						ids = "0";
					}
					queryMap.put("id_in", ids);
				}
				queryMap = systemService.addDataRuleByRoles("HealthAssessmentEntity", queryMap, request);
				result = healthAssessmentService.getListByCondition(queryMap, orderList, pageno, pagesize, employeeShow, olderShow, healthReportShow,
						recoveryShow, adlShow, nutritionShow, fallShow, soreShow, mmseShow, masShow, barthelShow, fcaShow);
			} else if ("del".equals(action)) {
				result = healthAssessmentService.del(id, delEmployee, delOlder, delHealthReport, delRecovery, delAdl, delNutrition, delFall, delSore, delMmse,
						delMas, delBarthel, delFca);
			} else if ("delList".equals(action)) {
				result = healthAssessmentService.delList(queryMap, delEmployee, delOlder, delHealthReport, delRecovery, delAdl, delNutrition, delFall, delSore,
						delMmse, delMas, delBarthel, delFca);
			}
			// 封装
			Map<String, Object> packMap = healthAssessmentPack.pack(type, action, result, healthAssessment);
			String actionBack = (String) packMap.get("action");
			String resultBack = (String) packMap.get("result");
			String desBack = (String) packMap.get("des");
			JSONObject pageBack = (JSONObject) packMap.get("page");
			JSONObject contentBack = (JSONObject) packMap.get("content");

			JSONObject repJson = new JSONObject();
			if (actionBack != null && !"".equals(actionBack)) {
				repJson.put("action", actionBack);
			}
			if (resultBack != null && !"".equals(resultBack)) {
				repJson.put("result", resultBack);
			}
			if (desBack != null && !"".equals(desBack)) {
				repJson.put("des", desBack);
			}
			if (pageBack != null) {
				repJson.put("page", pageBack);
			}
			if (contentBack != null && !"".equals(contentBack)) {
				repJson.put("content", contentBack);
			}
			logger.debug("返回消息：" + repJson.toString());
			resultStr = repJson.toString();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error(e);
		}
		return resultStr;
	}
}
