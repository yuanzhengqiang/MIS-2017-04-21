package fsk.controller.site;

import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.framework.system.common.entity.module.ModuleEntity;
import com.framework.system.common.service.SystemService;
import com.framework.system.util.JsonUtil;

import fsk.controller.older.OlderController;
import fsk.entity.employee.EmployeeEntity;
import fsk.entity.older.OlderEntity;
import fsk.entity.siteServiceArea.SiteServiceAreaEntity;
import fsk.handler.site.SiteHandler;
import fsk.service.employee.EmployeeService;
import fsk.service.older.OlderService;
import fsk.service.siteServiceArea.SiteServiceAreaService;

@RequestMapping("/daeSite")
@Controller
public class DetailsAndEditSiteController {
	private static Logger logger = Logger.getLogger(OlderController.class);
	/**
	 * 处理器
	 */
	private SiteHandler siteHandler = SiteHandler.getInstance();
	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();
	/**
	 * 服务类
	 */
	private EmployeeService employeeService = EmployeeService.getInstance();
	private OlderService olderService = OlderService.getInstance();
	private SiteServiceAreaService siteServiceAreaService = SiteServiceAreaService.getInstance();

	/**
	 * 列表页
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "main")
	public ModelAndView center(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/site/DetailsAndEditSite");
		Integer userId = (Integer) request.getSession().getAttribute("userId");// 登录用户ID
		String siteId = request.getParameter("siteId");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds, htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("userId", userId);
		mav.addObject("siteId", siteId);
		return mav;
	}

	/**
	 * 基本信息页
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "mainJB")
	public ModelAndView centerJB(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/site/DetailsAndEditSiteJB");
		String siteId = request.getParameter("siteId");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds, htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("siteId", siteId);
		return mav;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handler")
	@ResponseBody
	public String query(HttpServletRequest request, HttpServletResponse response) {

		String msg = "";
		try {
			String reqmsg = request.getParameter("reqmsg");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return msg;
			}
			String action = (String) reqParams.get("action");
			String rep = siteHandler.doHandler(1, action, reqmsg, request, response);
			msg = new String(rep.getBytes("utf-8"), "iso-8859-1");
		} catch (Exception e) {
			logger.error(e.toString());
		}

		return msg;
	}

	/**
	 * 根据角色名获取对应角色所有账号ID
	 */
	@RequestMapping(params = "getUserIdsByRoleName")
	@ResponseBody
	public String getUserIdsByRoleName(String RoleName) {
		String name = "";
		String id = "";
		String userIds = systemService.getUserIdsByRoleName(RoleName);
		Map<String, Object> query = new HashMap<String, Object>();
		query.put("userId_in", userIds);
		List<EmployeeEntity> employeeEntity = employeeService.getListByCondition(query);
		if (employeeEntity != null && employeeEntity.size() > 0) {
			for (EmployeeEntity employee : employeeEntity) {
				name = name + employee.getName() + ",";
				name = name.replaceAll(",,", ",");
				id = id + employee.getId() + ",";
				id = id.replaceAll(",,", ",");
			}
			if (name.length() > 0) {
				name = name.substring(0, name.length() - 1);
			}
			if (id.length() > 0) {
				id = id.substring(0, id.length() - 1);
			}
		}

		JSONObject jsonResult = new JSONObject();
		jsonResult.put("id", id);
		jsonResult.put("name", name);
		jsonResult.put("des", "success");
		String json2return = jsonResult.toString();

		try {
			json2return = new String(json2return.getBytes("utf-8"), "iso-8859-1");
		} catch (UnsupportedEncodingException e) {

		}
		return json2return;
	}

	/**
	 * 根据站点ID统计员工和老人数量
	 */
	@RequestMapping(params = "getyuangongAndLaoren")
	@ResponseBody
	public String getyuangongAndLaoren(int siteId) {
		int ygNum = 0;
		int oldNum = 0;
		Map<String, Object> query = new HashMap<String, Object>();
		query.put("siteId", siteId);
		List<EmployeeEntity> employeeEntity = employeeService.getListByCondition(query);
		if (employeeEntity != null && employeeEntity.size() > 0) {
			for (EmployeeEntity employee : employeeEntity) {
				ygNum++;
			}
		}

		String ids = "";
		List<SiteServiceAreaEntity> siteServiceAreaEntity = siteServiceAreaService.getListByCondition(query);
		if (siteServiceAreaEntity != null && siteServiceAreaEntity.size() > 0) {
			for (SiteServiceAreaEntity ssa : siteServiceAreaEntity) {
				ids = ids + ssa.getServiceStreetId() + ",";
				ids = ids.replaceAll(",,", ",");
			}
			if (ids.length() > 0) {
				ids = ids.substring(0, ids.length() - 1);
			}

		}
		Map<String, Object> query2 = new HashMap<String, Object>();
		query2.put("serviceStreetId_in", ids);
		List<OlderEntity> olderEntity = olderService.getListByCondition(query2);
		if (olderEntity != null && olderEntity.size() > 0) {
			for (OlderEntity older : olderEntity) {
				oldNum++;
			}
		}
		JSONObject jsonResult = new JSONObject();
		jsonResult.put("ygNum", ygNum);
		jsonResult.put("oldNum", oldNum);
		jsonResult.put("des", "success");
		String json2return = jsonResult.toString();

		try {
			json2return = new String(json2return.getBytes("utf-8"), "iso-8859-1");
		} catch (UnsupportedEncodingException e) {

		}
		return json2return;
	}

	/**
	 * 根据站点ID获取站点服务区域ID
	 */
	@RequestMapping(params = "getSiteServicesAreas")
	@ResponseBody
	public String getSiteServicesAreas(int siteId) {
		String ids = "";
		Map<String, Object> query = new HashMap<String, Object>();
		query.put("siteId", siteId);
		List<SiteServiceAreaEntity> siteServiceAreaEntity = siteServiceAreaService.getListByCondition(query);
		if (siteServiceAreaEntity != null && siteServiceAreaEntity.size() > 0) {
			for (SiteServiceAreaEntity ssa : siteServiceAreaEntity) {
				ids = ids + ssa.getServiceStreetId() + ",";
				ids = ids.replaceAll(",,", ",");
			}
			if (ids.length() > 0) {
				ids = ids.substring(0, ids.length() - 1);
			}

		}
		JSONObject jsonResult = new JSONObject();
		jsonResult.put("ids", ids);
		jsonResult.put("des", "success");
		String json2return = jsonResult.toString();

		try {
			json2return = new String(json2return.getBytes("utf-8"), "iso-8859-1");
		} catch (UnsupportedEncodingException e) {

		}
		return json2return;
	}

	/**
	 * 获取所有站点ID
	 */
	// @RequestMapping(params = "getSites")
	// @ResponseBody
	// public String getSites(String siteId) {
	// String siteIds="";
	// Map<String, Object> query=new HashMap<String, Object>();
	// List<SiteEntity> siteEntity=siteService.getListByCondition(query);
	// JSONObject jsonResult = new JSONObject();
	// if(siteEntity!=null && siteEntity.size()>0){
	// for(SiteEntity obj:siteEntity){
	// if(!(obj.getId()+"").equals(siteId)){
	// siteIds= siteIds+obj.getId()+",";
	// siteIds = siteIds.replaceAll(",,", ",");
	// }
	// }
	// if (siteIds.length() > 0) {
	// siteIds = siteIds.substring(0, siteIds.length() - 1);
	// }
	// jsonResult.put("siteIds", siteIds);
	// jsonResult.put("des", "success");
	// }else{
	// jsonResult.put("des", "failure");
	// }
	// String json2return = jsonResult.toString();
	//
	// try {
	// json2return = new String(json2return.getBytes("utf-8"),
	// "iso-8859-1");
	// } catch (UnsupportedEncodingException e) {
	//
	// }
	// return json2return;
	// }
	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handlercontent")
	public void queryApp(HttpServletRequest request, HttpServletResponse response) {
		try {
			InputStream is = request.getInputStream();
			byte[] bis = IOUtils.toByteArray(is);
			String reqmsg = new String(bis, "UTF-8");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return;
			}
			String action = (String) reqParams.get("action");
			String rep = siteHandler.doHandler(1, action, reqmsg, request, response);
			OutputStream os = response.getOutputStream();
			os.write(rep.toString().getBytes("UTF-8"));
		} catch (Exception e) {
			logger.error(e.toString());
		}
	}
}
