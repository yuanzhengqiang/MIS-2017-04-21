package fsk.pack.olderWechat;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.db.query.PageList;

import fsk.entity.older.OlderEntity;
import fsk.entity.olderWechat.OlderWechatEntity;
import fsk.entity.site.SiteEntity;
import fsk.entity.siteServiceArea.SiteServiceAreaEntity;
import fsk.service.older.OlderService;
import fsk.service.site.SiteService;
import fsk.service.siteServiceArea.SiteServiceAreaService;

/**
 * @Title: Pack
 * @Description: 老人微信关联表封装器
 * @author feng.gu
 * @date 2016-09-08 13:47:47
 * @version V1.0
 * 
 */
public class OlderWechatPack {
	private static Logger logger = Logger.getLogger(OlderWechatPack.class);
	private static OlderWechatPack olderWechatPack;
	private static OlderService olderService = OlderService.getInstance();
	private static SiteServiceAreaService siteServiceAreaService = SiteServiceAreaService.getInstance();
	private static SiteService siteService = SiteService.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static OlderWechatPack getInstance() {
		if (olderWechatPack == null) {
			olderWechatPack = new OlderWechatPack();
		}
		return olderWechatPack;
	}

	public Map<String, Object> pack(int type, String action, Object request, Object entity) {
		// 定义返回参数
		Map<String, Object> packMap = new HashMap<String, Object>();
		if (type == 1) {
			// json
			packMap = this.packByJson(action, request, entity);
		} else if (type == 2) {
			// xml
			packMap = this.packByXml(action, request, entity);
		}
		return packMap;
	}

	private Map<String, Object> packByJson(String action, Object request, Object entity) {
		// 定义返回参数
		Map<String, Object> packMap = new HashMap<String, Object>();
		String actionBack = null;
		String resultBack = null;
		String desBack = null;
		JSONObject pageBack = null;
		JSONObject contentBack = null;
		try {
			if ("save".equals(action)) {
				actionBack = "ADD_OLDER_WECHAT_INFO_RESPONSE";
				if (request.equals(true)) {
					resultBack = "100";
					desBack = "success";
				} else if (request.equals(false)) {
					resultBack = "200";
					desBack = "failure";
				}
				OlderWechatEntity olderWechat = (OlderWechatEntity) entity;
				if (olderWechat != null) {
					contentBack = new JSONObject();
					contentBack.put("id", olderWechat.getId());

					if (olderWechat.getOlder() != null) {
						contentBack.put("olderId", olderWechat.getOlder().getId());
					}
					if (olderWechat.getWechat() != null) {
						contentBack.put("wechatId", olderWechat.getWechat().getId());
					}
				}
			} else if ("getById".equals(action)) {
				actionBack = "QUERY_OLDER_WECHAT_INFO_RESPONSE";
				resultBack = "100";
				desBack = "success";
				OlderWechatEntity olderWechat = (OlderWechatEntity) request;
				if (olderWechat != null) {
					contentBack = JSONObject.fromObject(olderWechat);
					if (olderWechat.getOlder() != null) {
						contentBack.put("older", JSONObject.fromObject(olderWechat.getOlder()));
					}
					if (olderWechat.getWechat() != null) {
						contentBack.put("wechat", JSONObject.fromObject(olderWechat.getWechat()));
					}
				}
			} else if ("getListByCondition".equals(action)) {
				actionBack = "QUERY_OLDER_WECHAT_LIST_RESPONSE";
				resultBack = "100";
				desBack = "success";
				PageList pageList = (PageList) request;
				if (pageList != null && pageList.getResultList() != null && pageList.getResultList().size() > 0) {
					contentBack = new JSONObject();
					pageBack = new JSONObject();
					JSONArray list = JSONArray.fromObject(pageList.getResultList());
					JSONArray newList = new JSONArray();
					for (int i = 0; i < list.size(); i++) {
						JSONObject josn = list.getJSONObject(i);
						Integer olderId = (Integer) josn.get("olderId");
						if (olderId != null) {
							OlderEntity older = olderService.getById(olderId);
							if (older != null) {
								// 增加站点名 pei
								String siteName = "";
								Integer streetId = older.getServiceStreetId();
								if (streetId != null) {
									Map<String, Object> queryMapsite = new HashMap<String, Object>();
									queryMapsite.put("serviceStreetId", streetId);
									List<SiteServiceAreaEntity> sitelist = siteServiceAreaService.getListByCondition(queryMapsite);
									if (sitelist != null && sitelist.size() > 0) {
										for (int j = 0; j < sitelist.size(); j++) {
											SiteServiceAreaEntity entitytemp = sitelist.get(j);
											Integer idt = entitytemp.getSiteId();
											SiteEntity entitySite = siteService.getById(idt);
											if (entitySite != null) {
												siteName = siteName + entitySite.getName() + ",";
											}
										}
									}
									if (!"".equals(siteName)) {
										siteName = siteName.replaceAll(",,", ",");
										siteName = siteName.substring(0, siteName.length() - 1);
									}
								}
								josn.put("siteName", siteName);
							}

						}
						newList.add(josn);
					}
					contentBack.put("olderWechatList", newList);
					pageBack.put("pageno", pageList.getPageno());
					pageBack.put("pagesize", pageList.getPagesize());
					pageBack.put("recordCount", pageList.getRecordCount());
					pageBack.put("pageCount", pageList.getPageCount());

				}
			} else if ("del".equals(action)) {
				actionBack = "DEL_OLDER_WECHAT_INFO_REQUEST";
				if (request.equals(true)) {
					resultBack = "100";
					desBack = "success";
				} else if (request.equals(false)) {
					resultBack = "200";
					desBack = "failure";
				}
			} else if ("delList".equals(action)) {
				actionBack = "DEL_OLDER_WECHAT_LIST_REQUEST";
				if (request.equals(true)) {
					resultBack = "100";
					desBack = "success";
				} else if (request.equals(false)) {
					resultBack = "200";
					desBack = "failure";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error(e);
		}
		if (actionBack != null && !"".equals(actionBack)) {
			packMap.put("action", actionBack);
		}
		if (resultBack != null && !"".equals(resultBack)) {
			packMap.put("result", resultBack);
		}
		if (desBack != null && !"".equals(desBack)) {
			packMap.put("des", desBack);
		}
		if (pageBack != null) {
			packMap.put("page", pageBack);
		}
		if (contentBack != null) {
			packMap.put("content", contentBack);
		}
		return packMap;
	}

	private Map<String, Object> packByXml(String action, Object request, Object entity) {
		Map<String, Object> packMap = new HashMap<String, Object>();
		return packMap;
	}

}
