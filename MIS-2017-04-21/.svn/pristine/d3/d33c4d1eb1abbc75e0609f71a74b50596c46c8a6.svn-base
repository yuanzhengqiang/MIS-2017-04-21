package com.framework.system.common.service.role;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.framework.system.common.entity.privilege.PrivilegeEntity;
import com.framework.system.common.entity.role.RoleEntity;
import com.framework.system.common.entity.user.UserEntity;
import com.framework.system.common.entity.userRole.UserRoleEntity;
import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

/**
 * @Title: Service
 * @Description: 系统角色服务类
 * @author feng.gu
 * @date 2015-12-03 17:36:52
 * @version V1.0
 * 
 */
public class RoleService {
	private static Logger logger = Logger.getLogger(RoleService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static RoleService roleService;

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static RoleService getInstance() {
		if (roleService == null) {
			roleService = new RoleService();
		}
		return roleService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(RoleEntity role) {
		boolean result = false;
		if (role != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 关联信息保存
				RoleEntity parentRole = role.getParentRole();
				if (parentRole != null) {
					dbManager.saveNoTransaction(parentRole);
					role.setParentId(parentRole.getId());
				}
				// 关联信息保存
				if (role.getChildRoleList() != null
						&& role.getChildRoleList().size() > 0) {
					for (RoleEntity roleEntity : role.getChildRoleList()) {
						dbManager.saveNoTransaction(roleEntity);
					}
				}
				// 关联信息保存
				UserEntity createUser = role.getCreateUser();
				if (createUser != null) {
					dbManager.saveNoTransaction(createUser);
					role.setCreateUserId(createUser.getId());
				}
				// 关联信息保存
				UserEntity updateUser = role.getUpdateUser();
				if (updateUser != null) {
					dbManager.saveNoTransaction(updateUser);
					role.setUpdateUserId(updateUser.getId());
				}
				result = dbManager.saveNoTransaction(role);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(List<RoleEntity> roleList) {
		boolean result = false;
		if (roleList != null && roleList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (RoleEntity role : roleList) {
					if (role != null) {
						// 关联信息保存
						RoleEntity parentRole = role.getParentRole();
						if (parentRole != null) {
							dbManager.saveNoTransaction(parentRole);
							role.setParentId(parentRole.getId());
						}
						// 关联信息保存
						if (role.getChildRoleList() != null
								&& role.getChildRoleList().size() > 0) {
							for (RoleEntity roleEntity : role
									.getChildRoleList()) {
								dbManager.saveNoTransaction(roleEntity);
							}
						}
						// 关联信息保存
						UserEntity createUser = role.getCreateUser();
						if (createUser != null) {
							dbManager.saveNoTransaction(createUser);
							role.setCreateUserId(createUser.getId());
						}
						// 关联信息保存
						UserEntity updateUser = role.getUpdateUser();
						if (updateUser != null) {
							dbManager.saveNoTransaction(updateUser);
							role.setUpdateUserId(updateUser.getId());
						}
						result = dbManager.saveNoTransaction(role);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public RoleEntity getById(Integer id) {
		RoleEntity obj = null;
		if (id != null) {
			obj = (RoleEntity) dbManager.getById(id, RoleEntity.class);
		}
		return obj;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param parentRoleShow
	 *            是否查询关联信息
	 * @param childRoleListShow
	 *            是否查询关联信息
	 * @param createUserShow
	 *            是否查询关联信息
	 * @param updateUserShow
	 *            是否查询关联信息
	 * @param obj
	 */
	public RoleEntity getById(Integer id, Boolean parentRoleShow,
			Boolean childRoleListShow, Boolean createUserShow,
			Boolean updateUserShow) {
		RoleEntity obj = null;
		if (id != null) {
			obj = (RoleEntity) dbManager.getById(id, RoleEntity.class);
			// 查询关联内容
			if (parentRoleShow != null && parentRoleShow.booleanValue()
					&& obj != null && obj.getParentId() > 0) {
				RoleEntity role = (RoleEntity) dbManager.getById(
						obj.getParentId(), RoleEntity.class);
				obj.setParentRole(role);
			}
			// 查询关联内容
			if (childRoleListShow != null && childRoleListShow.booleanValue()
					&& obj != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(
						RoleEntity.class, RoleEntity.PARENT_ID,
						String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<RoleEntity> childRoleList = new ArrayList<RoleEntity>();
					for (Object o : list) {
						childRoleList.add((RoleEntity) o);
					}
					obj.setChildRoleList(childRoleList);
				}
			}
			// 查询关联内容
			if (createUserShow != null && createUserShow.booleanValue()
					&& obj != null && obj.getCreateUserId() > 0) {
				UserEntity createUser = (UserEntity) dbManager.getById(
						obj.getCreateUserId(), UserEntity.class);
				obj.setCreateUser(createUser);
			}
			// 查询关联内容
			if (updateUserShow != null && updateUserShow.booleanValue()
					&& obj != null && obj.getUpdateUserId() > 0) {
				UserEntity updateUser = (UserEntity) dbManager.getById(
						obj.getUpdateUserId(), UserEntity.class);
				obj.setUpdateUser(updateUser);
			}
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<Object> getListByCondition(Map<String, Object> queryMap) {
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object name = queryMap.get("name");
		Object name_like = queryMap.get("name_like");
		Object name_isNull = queryMap.get("name_isNull");
		Object name_isNotNull = queryMap.get("name_isNotNull");
		Object name_in = queryMap.get("name_in");
		Object des = queryMap.get("des");
		Object des_like = queryMap.get("des_like");
		Object des_isNull = queryMap.get("des_isNull");
		Object des_isNotNull = queryMap.get("des_isNotNull");
		Object des_in = queryMap.get("des_in");
		Object parentId = queryMap.get("parentId");
		Object parentId_gt = queryMap.get("parentId_gt");
		Object parentId_ge = queryMap.get("parentId_ge");
		Object parentId_lt = queryMap.get("parentId_lt");
		Object parentId_le = queryMap.get("parentId_le");
		Object parentId_in = queryMap.get("parentId_in");
		Object createUserId = queryMap.get("createUserId");
		Object createUserId_gt = queryMap.get("createUserId_gt");
		Object createUserId_ge = queryMap.get("createUserId_ge");
		Object createUserId_lt = queryMap.get("createUserId_lt");
		Object createUserId_le = queryMap.get("createUserId_le");
		Object createUserId_in = queryMap.get("createUserId_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");
		Object updateUserId = queryMap.get("updateUserId");
		Object updateUserId_gt = queryMap.get("updateUserId_gt");
		Object updateUserId_ge = queryMap.get("updateUserId_ge");
		Object updateUserId_lt = queryMap.get("updateUserId_lt");
		Object updateUserId_le = queryMap.get("updateUserId_le");
		Object updateUserId_in = queryMap.get("updateUserId_in");
		Object updateTime_gt = queryMap.get("updateTime_gt");
		Object updateTime_ge = queryMap.get("updateTime_ge");
		Object updateTime_lt = queryMap.get("updateTime_lt");
		Object updateTime_le = queryMap.get("updateTime_le");

		QueryCondition qc = new QueryCondition(RoleEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.in, id_in));
		}
		if (name != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.eq, name));
		}
		if (name_like != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.like, name_like));
		}
		if (name_isNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.isNull, name_isNull));
		}
		if (name_isNotNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.isNotNull, name_isNotNull));
		}
		if (name_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.in, name_in));
		}
		if (des != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.eq, des));
		}
		if (des_like != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.like, des_like));
		}
		if (des_isNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.isNull, des_isNull));
		}
		if (des_isNotNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.isNotNull, des_isNotNull));
		}
		if (des_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.in, des_in));
		}
		if (parentId != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.eq, parentId));
		}
		if (parentId_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.gt, parentId_gt));
		}
		if (parentId_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.ge, parentId_ge));
		}
		if (parentId_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.lt, parentId_lt));
		}
		if (parentId_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.le, parentId_le));
		}
		if (parentId_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.in, parentId_in));
		}
		if (createUserId != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.eq, createUserId));
		}
		if (createUserId_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.gt, createUserId_gt));
		}
		if (createUserId_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.ge, createUserId_ge));
		}
		if (createUserId_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.lt, createUserId_lt));
		}
		if (createUserId_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.le, createUserId_le));
		}
		if (createUserId_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.in, createUserId_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}
		if (updateUserId != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.eq, updateUserId));
		}
		if (updateUserId_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.gt, updateUserId_gt));
		}
		if (updateUserId_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.ge, updateUserId_ge));
		}
		if (updateUserId_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.lt, updateUserId_lt));
		}
		if (updateUserId_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.le, updateUserId_le));
		}
		if (updateUserId_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.in, updateUserId_in));
		}
		if (updateTime_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.gt, updateTime_gt));
		}
		if (updateTime_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.ge, updateTime_ge));
		}
		if (updateTime_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.lt, updateTime_lt));
		}
		if (updateTime_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.le, updateTime_le));
		}

		list = dbManager.queryByCondition(RoleEntity.class, qc);
		return list;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param parentRoleShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param childRoleListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param createUserShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param updateUserShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public List<Object> getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, Boolean parentRoleShow,
			Boolean childRoleListShow, Boolean createUserShow,
			Boolean updateUserShow) {
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object name = queryMap.get("name");
		Object name_like = queryMap.get("name_like");
		Object name_isNull = queryMap.get("name_isNull");
		Object name_isNotNull = queryMap.get("name_isNotNull");
		Object name_in = queryMap.get("name_in");
		Object des = queryMap.get("des");
		Object des_like = queryMap.get("des_like");
		Object des_isNull = queryMap.get("des_isNull");
		Object des_isNotNull = queryMap.get("des_isNotNull");
		Object des_in = queryMap.get("des_in");
		Object parentId = queryMap.get("parentId");
		Object parentId_gt = queryMap.get("parentId_gt");
		Object parentId_ge = queryMap.get("parentId_ge");
		Object parentId_lt = queryMap.get("parentId_lt");
		Object parentId_le = queryMap.get("parentId_le");
		Object parentId_in = queryMap.get("parentId_in");
		Object createUserId = queryMap.get("createUserId");
		Object createUserId_gt = queryMap.get("createUserId_gt");
		Object createUserId_ge = queryMap.get("createUserId_ge");
		Object createUserId_lt = queryMap.get("createUserId_lt");
		Object createUserId_le = queryMap.get("createUserId_le");
		Object createUserId_in = queryMap.get("createUserId_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");
		Object updateUserId = queryMap.get("updateUserId");
		Object updateUserId_gt = queryMap.get("updateUserId_gt");
		Object updateUserId_ge = queryMap.get("updateUserId_ge");
		Object updateUserId_lt = queryMap.get("updateUserId_lt");
		Object updateUserId_le = queryMap.get("updateUserId_le");
		Object updateUserId_in = queryMap.get("updateUserId_in");
		Object updateTime_gt = queryMap.get("updateTime_gt");
		Object updateTime_ge = queryMap.get("updateTime_ge");
		Object updateTime_lt = queryMap.get("updateTime_lt");
		Object updateTime_le = queryMap.get("updateTime_le");

		QueryCondition qc = new QueryCondition(RoleEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.in, id_in));
		}
		if (name != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.eq, name));
		}
		if (name_like != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.like, name_like));
		}
		if (name_isNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.isNull, name_isNull));
		}
		if (name_isNotNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.isNotNull, name_isNotNull));
		}
		if (name_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.in, name_in));
		}
		if (des != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.eq, des));
		}
		if (des_like != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.like, des_like));
		}
		if (des_isNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.isNull, des_isNull));
		}
		if (des_isNotNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.isNotNull, des_isNotNull));
		}
		if (des_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.in, des_in));
		}
		if (parentId != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.eq, parentId));
		}
		if (parentId_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.gt, parentId_gt));
		}
		if (parentId_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.ge, parentId_ge));
		}
		if (parentId_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.lt, parentId_lt));
		}
		if (parentId_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.le, parentId_le));
		}
		if (parentId_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.in, parentId_in));
		}
		if (createUserId != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.eq, createUserId));
		}
		if (createUserId_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.gt, createUserId_gt));
		}
		if (createUserId_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.ge, createUserId_ge));
		}
		if (createUserId_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.lt, createUserId_lt));
		}
		if (createUserId_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.le, createUserId_le));
		}
		if (createUserId_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.in, createUserId_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}
		if (updateUserId != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.eq, updateUserId));
		}
		if (updateUserId_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.gt, updateUserId_gt));
		}
		if (updateUserId_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.ge, updateUserId_ge));
		}
		if (updateUserId_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.lt, updateUserId_lt));
		}
		if (updateUserId_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.le, updateUserId_le));
		}
		if (updateUserId_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.in, updateUserId_in));
		}
		if (updateTime_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.gt, updateTime_gt));
		}
		if (updateTime_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.ge, updateTime_ge));
		}
		if (updateTime_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.lt, updateTime_lt));
		}
		if (updateTime_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.le, updateTime_le));
		}

		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(RoleEntity.class, qc, oc);
		int a = 0;
		if (parentRoleShow != null && parentRoleShow.booleanValue()) {
			a++;
		}
		if (childRoleListShow != null && childRoleListShow.booleanValue()) {
			a++;
		}
		if (createUserShow != null && createUserShow.booleanValue()) {
			a++;
		}
		if (updateUserShow != null && updateUserShow.booleanValue()) {
			a++;
		}
		if (a > 0 && list != null && list.size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < list.size(); i++) {
				RoleEntity obj = (RoleEntity) list.get(i);
				// 查询关联内容
				if (parentRoleShow != null && parentRoleShow.booleanValue()
						&& obj != null && obj.getParentId() > 0) {
					RoleEntity role = (RoleEntity) dbManager.getById(
							obj.getParentId(), RoleEntity.class);
					obj.setParentRole(role);
				}
				// 查询关联内容
				if (childRoleListShow != null
						&& childRoleListShow.booleanValue() && obj != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							RoleEntity.class, RoleEntity.PARENT_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<RoleEntity> childRoleList = new ArrayList<RoleEntity>();
						for (Object o : objList) {
							childRoleList.add((RoleEntity) o);
						}
						obj.setChildRoleList(childRoleList);
					}
				}
				// 查询关联内容
				if (createUserShow != null && createUserShow.booleanValue()
						&& obj != null && obj.getCreateUserId() > 0) {
					UserEntity createUser = (UserEntity) dbManager.getById(
							obj.getCreateUserId(), UserEntity.class);
					obj.setCreateUser(createUser);
				}
				// 查询关联内容
				if (updateUserShow != null && updateUserShow.booleanValue()
						&& obj != null && obj.getUpdateUserId() > 0) {
					UserEntity updateUser = (UserEntity) dbManager.getById(
							obj.getUpdateUserId(), UserEntity.class);
					obj.setUpdateUser(updateUser);
				}
				result.add(obj);
			}
			list = result;
		}
		return list;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object name = queryMap.get("name");
		Object name_like = queryMap.get("name_like");
		Object name_isNull = queryMap.get("name_isNull");
		Object name_isNotNull = queryMap.get("name_isNotNull");
		Object name_in = queryMap.get("name_in");
		Object des = queryMap.get("des");
		Object des_like = queryMap.get("des_like");
		Object des_isNull = queryMap.get("des_isNull");
		Object des_isNotNull = queryMap.get("des_isNotNull");
		Object des_in = queryMap.get("des_in");
		Object parentId = queryMap.get("parentId");
		Object parentId_gt = queryMap.get("parentId_gt");
		Object parentId_ge = queryMap.get("parentId_ge");
		Object parentId_lt = queryMap.get("parentId_lt");
		Object parentId_le = queryMap.get("parentId_le");
		Object parentId_in = queryMap.get("parentId_in");
		Object createUserId = queryMap.get("createUserId");
		Object createUserId_gt = queryMap.get("createUserId_gt");
		Object createUserId_ge = queryMap.get("createUserId_ge");
		Object createUserId_lt = queryMap.get("createUserId_lt");
		Object createUserId_le = queryMap.get("createUserId_le");
		Object createUserId_in = queryMap.get("createUserId_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");
		Object updateUserId = queryMap.get("updateUserId");
		Object updateUserId_gt = queryMap.get("updateUserId_gt");
		Object updateUserId_ge = queryMap.get("updateUserId_ge");
		Object updateUserId_lt = queryMap.get("updateUserId_lt");
		Object updateUserId_le = queryMap.get("updateUserId_le");
		Object updateUserId_in = queryMap.get("updateUserId_in");
		Object updateTime_gt = queryMap.get("updateTime_gt");
		Object updateTime_ge = queryMap.get("updateTime_ge");
		Object updateTime_lt = queryMap.get("updateTime_lt");
		Object updateTime_le = queryMap.get("updateTime_le");

		QueryCondition qc = new QueryCondition(RoleEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.in, id_in));
		}
		if (name != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.eq, name));
		}
		if (name_like != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.like, name_like));
		}
		if (name_isNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.isNull, name_isNull));
		}
		if (name_isNotNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.isNotNull, name_isNotNull));
		}
		if (name_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.in, name_in));
		}
		if (des != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.eq, des));
		}
		if (des_like != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.like, des_like));
		}
		if (des_isNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.isNull, des_isNull));
		}
		if (des_isNotNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.isNotNull, des_isNotNull));
		}
		if (des_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.in, des_in));
		}
		if (parentId != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.eq, parentId));
		}
		if (parentId_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.gt, parentId_gt));
		}
		if (parentId_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.ge, parentId_ge));
		}
		if (parentId_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.lt, parentId_lt));
		}
		if (parentId_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.le, parentId_le));
		}
		if (parentId_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.in, parentId_in));
		}
		if (createUserId != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.eq, createUserId));
		}
		if (createUserId_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.gt, createUserId_gt));
		}
		if (createUserId_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.ge, createUserId_ge));
		}
		if (createUserId_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.lt, createUserId_lt));
		}
		if (createUserId_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.le, createUserId_le));
		}
		if (createUserId_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.in, createUserId_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}
		if (updateUserId != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.eq, updateUserId));
		}
		if (updateUserId_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.gt, updateUserId_gt));
		}
		if (updateUserId_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.ge, updateUserId_ge));
		}
		if (updateUserId_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.lt, updateUserId_lt));
		}
		if (updateUserId_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.le, updateUserId_le));
		}
		if (updateUserId_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.in, updateUserId_in));
		}
		if (updateTime_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.gt, updateTime_gt));
		}
		if (updateTime_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.ge, updateTime_ge));
		}
		if (updateTime_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.lt, updateTime_lt));
		}
		if (updateTime_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.le, updateTime_le));
		}

		pagelist = dbManager.queryByCondition(RoleEntity.class, qc, pageno,
				pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @param parentRoleShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param childRoleListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param createUserShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param updateUserShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, int pageno, int pagesize,
			Boolean parentRoleShow, Boolean childRoleListShow,
			Boolean createUserShow, Boolean updateUserShow) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object name = queryMap.get("name");
		Object name_like = queryMap.get("name_like");
		Object name_isNull = queryMap.get("name_isNull");
		Object name_isNotNull = queryMap.get("name_isNotNull");
		Object name_in = queryMap.get("name_in");
		Object des = queryMap.get("des");
		Object des_like = queryMap.get("des_like");
		Object des_isNull = queryMap.get("des_isNull");
		Object des_isNotNull = queryMap.get("des_isNotNull");
		Object des_in = queryMap.get("des_in");
		Object parentId = queryMap.get("parentId");
		Object parentId_gt = queryMap.get("parentId_gt");
		Object parentId_ge = queryMap.get("parentId_ge");
		Object parentId_lt = queryMap.get("parentId_lt");
		Object parentId_le = queryMap.get("parentId_le");
		Object parentId_in = queryMap.get("parentId_in");
		Object createUserId = queryMap.get("createUserId");
		Object createUserId_gt = queryMap.get("createUserId_gt");
		Object createUserId_ge = queryMap.get("createUserId_ge");
		Object createUserId_lt = queryMap.get("createUserId_lt");
		Object createUserId_le = queryMap.get("createUserId_le");
		Object createUserId_in = queryMap.get("createUserId_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");
		Object updateUserId = queryMap.get("updateUserId");
		Object updateUserId_gt = queryMap.get("updateUserId_gt");
		Object updateUserId_ge = queryMap.get("updateUserId_ge");
		Object updateUserId_lt = queryMap.get("updateUserId_lt");
		Object updateUserId_le = queryMap.get("updateUserId_le");
		Object updateUserId_in = queryMap.get("updateUserId_in");
		Object updateTime_gt = queryMap.get("updateTime_gt");
		Object updateTime_ge = queryMap.get("updateTime_ge");
		Object updateTime_lt = queryMap.get("updateTime_lt");
		Object updateTime_le = queryMap.get("updateTime_le");

		QueryCondition qc = new QueryCondition(RoleEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.in, id_in));
		}
		if (name != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.eq, name));
		}
		if (name_like != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.like, name_like));
		}
		if (name_isNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.isNull, name_isNull));
		}
		if (name_isNotNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.isNotNull, name_isNotNull));
		}
		if (name_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.in, name_in));
		}
		if (des != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.eq, des));
		}
		if (des_like != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.like, des_like));
		}
		if (des_isNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.isNull, des_isNull));
		}
		if (des_isNotNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.isNotNull, des_isNotNull));
		}
		if (des_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.in, des_in));
		}
		if (parentId != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.eq, parentId));
		}
		if (parentId_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.gt, parentId_gt));
		}
		if (parentId_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.ge, parentId_ge));
		}
		if (parentId_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.lt, parentId_lt));
		}
		if (parentId_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.le, parentId_le));
		}
		if (parentId_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.in, parentId_in));
		}
		if (createUserId != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.eq, createUserId));
		}
		if (createUserId_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.gt, createUserId_gt));
		}
		if (createUserId_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.ge, createUserId_ge));
		}
		if (createUserId_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.lt, createUserId_lt));
		}
		if (createUserId_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.le, createUserId_le));
		}
		if (createUserId_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.in, createUserId_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}
		if (updateUserId != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.eq, updateUserId));
		}
		if (updateUserId_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.gt, updateUserId_gt));
		}
		if (updateUserId_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.ge, updateUserId_ge));
		}
		if (updateUserId_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.lt, updateUserId_lt));
		}
		if (updateUserId_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.le, updateUserId_le));
		}
		if (updateUserId_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.in, updateUserId_in));
		}
		if (updateTime_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.gt, updateTime_gt));
		}
		if (updateTime_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.ge, updateTime_ge));
		}
		if (updateTime_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.lt, updateTime_lt));
		}
		if (updateTime_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.le, updateTime_le));
		}

		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		pagelist = dbManager.queryByConditions(RoleEntity.class, qc, oc,
				pageno, pagesize);
		int a = 0;
		if (parentRoleShow != null && parentRoleShow.booleanValue()) {
			a++;
		}
		if (childRoleListShow != null && childRoleListShow.booleanValue()) {
			a++;
		}
		if (createUserShow != null && createUserShow.booleanValue()) {
			a++;
		}
		if (updateUserShow != null && updateUserShow.booleanValue()) {
			a++;
		}
		if (a > 0 && pagelist != null && pagelist.getResultList() != null
				&& pagelist.getResultList().size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < pagelist.getResultList().size(); i++) {
				RoleEntity obj = (RoleEntity) pagelist.getResultList().get(i);
				// 查询关联内容
				if (parentRoleShow != null && parentRoleShow.booleanValue()
						&& obj != null && obj.getParentId() > 0) {
					RoleEntity role = (RoleEntity) dbManager.getById(
							obj.getParentId(), RoleEntity.class);
					obj.setParentRole(role);
				}
				// 查询关联内容
				if (childRoleListShow != null
						&& childRoleListShow.booleanValue() && obj != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							RoleEntity.class, RoleEntity.PARENT_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<RoleEntity> childRoleList = new ArrayList<RoleEntity>();
						for (Object o : objList) {
							childRoleList.add((RoleEntity) o);
						}
						obj.setChildRoleList(childRoleList);
					}
				}
				// 查询关联内容
				if (createUserShow != null && createUserShow.booleanValue()
						&& obj != null && obj.getCreateUserId() > 0) {
					UserEntity createUser = (UserEntity) dbManager.getById(
							obj.getCreateUserId(), UserEntity.class);
					obj.setCreateUser(createUser);
				}
				// 查询关联内容
				if (updateUserShow != null && updateUserShow.booleanValue()
						&& obj != null && obj.getUpdateUserId() > 0) {
					UserEntity updateUser = (UserEntity) dbManager.getById(
							obj.getUpdateUserId(), UserEntity.class);
					obj.setUpdateUser(updateUser);
				}
				result.add(obj);
			}
			pagelist.setResultList(result);
		}
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id, Boolean delParentRole,
			Boolean delChildRoleList, Boolean delCreateUser,
			Boolean delUpdateUser) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delParentRole != null && delParentRole.booleanValue()) {
					RoleEntity role = (RoleEntity) dbManager.getById(id,
							RoleEntity.class);
					if (role.getParentId() != null) {
						dbManager.delNoTransaction(role.getParentId(),
								RoleEntity.class);
					}
				}
				// 删除关联信息
				if (delChildRoleList != null && delChildRoleList.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							RoleEntity.PARENT_ID, QueryCondition.eq, id);
					dbManager
							.delByConditionsNoTransaction(RoleEntity.class, qc);
				}
				// 删除关联信息
				if (delCreateUser != null && delCreateUser.booleanValue()) {
					RoleEntity role = (RoleEntity) dbManager.getById(id,
							RoleEntity.class);
					if (role != null && role.getCreateUserId() != null) {
						dbManager.delNoTransaction(role.getCreateUserId(),
								UserEntity.class);
					}
				}
				// 删除关联信息
				if (delUpdateUser != null && delUpdateUser.booleanValue()) {
					RoleEntity role = (RoleEntity) dbManager.getById(id,
							RoleEntity.class);
					if (role != null && role.getUpdateUserId() != null) {
						dbManager.delNoTransaction(role.getUpdateUserId(),
								UserEntity.class);
					}
				}
				result = dbManager.delNoTransaction(id, RoleEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(RoleEntity.ID,
						QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(
						RoleEntity.class, qc);
				QueryCondition qc1 = new QueryCondition(UserRoleEntity.ROLE_ID, QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(UserRoleEntity.class, qc1);
				QueryCondition qc2 = new QueryCondition(PrivilegeEntity.ROLE_ID, QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(PrivilegeEntity.class, qc2);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap,
			Boolean delParentRoleList, Boolean delChildRoleList,
			Boolean delCreateUser, Boolean delUpdateUser) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object name = queryMap.get("name");
		Object name_like = queryMap.get("name_like");
		Object name_isNull = queryMap.get("name_isNull");
		Object name_isNotNull = queryMap.get("name_isNotNull");
		Object name_in = queryMap.get("name_in");
		Object des = queryMap.get("des");
		Object des_like = queryMap.get("des_like");
		Object des_isNull = queryMap.get("des_isNull");
		Object des_isNotNull = queryMap.get("des_isNotNull");
		Object des_in = queryMap.get("des_in");
		Object parentId = queryMap.get("parentId");
		Object parentId_gt = queryMap.get("parentId_gt");
		Object parentId_ge = queryMap.get("parentId_ge");
		Object parentId_lt = queryMap.get("parentId_lt");
		Object parentId_le = queryMap.get("parentId_le");
		Object parentId_in = queryMap.get("parentId_in");
		Object createUserId = queryMap.get("createUserId");
		Object createUserId_gt = queryMap.get("createUserId_gt");
		Object createUserId_ge = queryMap.get("createUserId_ge");
		Object createUserId_lt = queryMap.get("createUserId_lt");
		Object createUserId_le = queryMap.get("createUserId_le");
		Object createUserId_in = queryMap.get("createUserId_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");
		Object updateUserId = queryMap.get("updateUserId");
		Object updateUserId_gt = queryMap.get("updateUserId_gt");
		Object updateUserId_ge = queryMap.get("updateUserId_ge");
		Object updateUserId_lt = queryMap.get("updateUserId_lt");
		Object updateUserId_le = queryMap.get("updateUserId_le");
		Object updateUserId_in = queryMap.get("updateUserId_in");
		Object updateTime_gt = queryMap.get("updateTime_gt");
		Object updateTime_ge = queryMap.get("updateTime_ge");
		Object updateTime_lt = queryMap.get("updateTime_lt");
		Object updateTime_le = queryMap.get("updateTime_le");

		QueryCondition qc = new QueryCondition(RoleEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.ID,
					QueryCondition.in, id_in));
		}
		if (name != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.eq, name));
		}
		if (name_like != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.like, name_like));
		}
		if (name_isNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.isNull, name_isNull));
		}
		if (name_isNotNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.isNotNull, name_isNotNull));
		}
		if (name_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.NAME,
					QueryCondition.in, name_in));
		}
		if (des != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.eq, des));
		}
		if (des_like != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.like, des_like));
		}
		if (des_isNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.isNull, des_isNull));
		}
		if (des_isNotNull != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.isNotNull, des_isNotNull));
		}
		if (des_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.DES,
					QueryCondition.in, des_in));
		}
		if (parentId != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.eq, parentId));
		}
		if (parentId_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.gt, parentId_gt));
		}
		if (parentId_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.ge, parentId_ge));
		}
		if (parentId_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.lt, parentId_lt));
		}
		if (parentId_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.le, parentId_le));
		}
		if (parentId_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.PARENT_ID,
					QueryCondition.in, parentId_in));
		}
		if (createUserId != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.eq, createUserId));
		}
		if (createUserId_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.gt, createUserId_gt));
		}
		if (createUserId_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.ge, createUserId_ge));
		}
		if (createUserId_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.lt, createUserId_lt));
		}
		if (createUserId_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.le, createUserId_le));
		}
		if (createUserId_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_USER_ID,
					QueryCondition.in, createUserId_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}
		if (updateUserId != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.eq, updateUserId));
		}
		if (updateUserId_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.gt, updateUserId_gt));
		}
		if (updateUserId_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.ge, updateUserId_ge));
		}
		if (updateUserId_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.lt, updateUserId_lt));
		}
		if (updateUserId_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.le, updateUserId_le));
		}
		if (updateUserId_in != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_USER_ID,
					QueryCondition.in, updateUserId_in));
		}
		if (updateTime_gt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.gt, updateTime_gt));
		}
		if (updateTime_ge != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.ge, updateTime_ge));
		}
		if (updateTime_lt != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.lt, updateTime_lt));
		}
		if (updateTime_le != null) {
			qc.andCondition(new QueryCondition(RoleEntity.UPDATE_TIME,
					QueryCondition.le, updateTime_le));
		}

		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delParentRoleList != null
						&& delParentRoleList.booleanValue()) {
					List<Object> list = dbManager.queryByCondition(
							RoleEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							RoleEntity entity = (RoleEntity) obj;
							strIds += entity.getParentId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(RoleEntity.ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								RoleEntity.class, qc1);
					}
				}
				// 删除关联信息
				if (delChildRoleList != null && delChildRoleList.booleanValue()) {
					List<Object> list = dbManager.queryByCondition(
							RoleEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							RoleEntity entity = (RoleEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								RoleEntity.PARENT_ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								RoleEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delCreateUser != null && delCreateUser.booleanValue()) {
					List<Object> list = dbManager.queryByCondition(
							RoleEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							RoleEntity entity = (RoleEntity) obj;
							strIds += entity.getCreateUserId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(UserEntity.ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								UserEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delUpdateUser != null && delUpdateUser.booleanValue()) {
					List<Object> list = dbManager.queryByCondition(
							RoleEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							RoleEntity entity = (RoleEntity) obj;
							strIds += entity.getUpdateUserId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(UserEntity.ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								UserEntity.class, qc1);
					}

				}
				result = dbManager.delByConditionsNoTransaction(
						RoleEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

}
