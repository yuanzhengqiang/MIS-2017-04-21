package fsk.controller.examinationRecord;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;
import org.springframework.web.servlet.ModelAndView;

import com.framework.system.common.entity.json.AjaxJson;
import com.framework.system.common.entity.module.ModuleEntity;
import com.framework.system.common.service.SystemService;
import com.framework.system.util.JsonUtil;

import fsk.entity.examinationData.ExaminationDataEntity;
import fsk.entity.examinationDataFile.ExaminationDataFileEntity;
import fsk.entity.examinationRecordFile.ExaminationRecordFileEntity;
import fsk.handler.examinationRecord.ExaminationRecordHandler;
import fsk.handler.older.OlderHandler;
import fsk.init.SystemInit;
import fsk.service.examinationData.ExaminationDataService;
import fsk.service.examinationDataFile.ExaminationDataFileService;
import fsk.service.examinationDataPhoto.ExaminationDataPhotoService;
import fsk.service.examinationRecord.ExaminationRecordService;
import fsk.service.examinationRecordFile.ExaminationRecordFileService;
import fsk.service.examinationRecordPhoto.ExaminationRecordPhotoService;
import fsk.util.FileUtil;
import fsk.util.RandomUtil;

@RequestMapping("/examinationRecord")
@Controller
public class ExaminationRecordController {
	private static Logger logger = Logger.getLogger(ExaminationRecordController.class);
	/**
	 * 处理器
	 */
	private ExaminationRecordHandler examinationRecordHandler = ExaminationRecordHandler.getInstance();
	/**
	 * 服务类
	 */
	private ExaminationRecordService examinationRecordService = ExaminationRecordService.getInstance();
	private static ExaminationRecordPhotoService examinationRecordPhotoService = ExaminationRecordPhotoService.getInstance();
	private ExaminationDataService examinationDataService = ExaminationDataService.getInstance();
	private ExaminationDataFileService examinationDataFileService = ExaminationDataFileService.getInstance();
	private ExaminationDataPhotoService examinationDataPhotoService = ExaminationDataPhotoService.getInstance();
	private ExaminationRecordFileService examinationRecordFileService = ExaminationRecordFileService.getInstance();

	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();

	/**
	 * 列表页
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "main")
	public ModelAndView center(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/examinationRecord/ExaminationRecordList");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds, htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		return mav;
	}

	/**
	 * 体检记录详情页
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "mainXQ")
	public ModelAndView centerXQ(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/older/older_PERecord_details");
		String id = "";
		String olderId = "";
		String flag = "";
		if (request.getParameter("flag") != null && !"".equals(request.getParameter("flag"))) {
			flag = request.getParameter("flag");
		}
		if (request.getParameter("id") != null && !request.getParameter("id").equals("")) {
			id = request.getParameter("id");
		}
		if (request.getParameter("olderId") != null && !request.getParameter("olderId").equals("")) {
			olderId = request.getParameter("olderId");
		}
		Integer userId = (Integer) request.getSession().getAttribute("userId");// 登录用户ID
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds, htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("id", id);
		mav.addObject("olderId", olderId);
		mav.addObject("userId", userId);
		mav.addObject("flag", flag);
		return mav;
	}

	/**
	 * 批量删除 ids英文逗号间隔
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "del")
	@ResponseBody
	public AjaxJson del(HttpServletRequest request) {
		AjaxJson j = new AjaxJson();
		String result = "failure";
		String des = "删除失败";
		String ids = request.getParameter("ids");
		if (ids != null && !"".equals(ids)) {
			boolean falg = examinationRecordService.del(ids);
			if (falg) {
				result = "success";
				des = "删除成功";
				Object userId = request.getSession().getAttribute("userId");
				String ip = request.getRemoteAddr();
				logger.debug("删除记录：userId为" + userId + "的用户删除了id为" + ids + "的examinationRecords," + "来自ip: " + ip);
			}
		}
		// 查到体检数据表的id
		String dataIds = "";
		Map<String, Object> queryData = new HashMap<String, Object>();
		queryData.put("examinationRecordId_in", ids);
		List<ExaminationDataEntity> dataList = examinationDataService.getListByCondition(queryData);
		if (dataList != null && dataList.size() > 0) {
			for (ExaminationDataEntity entity : dataList) {
				dataIds = dataIds + entity.getId() + ",";
			}
			if (!"".equals(dataIds)) {
				dataIds = dataIds.replaceAll(",,", ",");
				dataIds = dataIds.substring(0, dataIds.length() - 1);
			}
		}
		// 删除数据关联表的关联表
		if (!"".equals(dataIds)) {
			// 删除文件关联表
			// 删除文件
			Map<String, Object> datafilemap = new HashMap<String, Object>();
			datafilemap.put("examinationDataId_in", dataIds);
			List<ExaminationDataFileEntity> dataFilelList = examinationDataFileService.getListByCondition(datafilemap);
			if (dataFilelList != null && dataFilelList.size() > 0) {
				for (ExaminationDataFileEntity entity : dataFilelList) {
					String url = entity.getUrl();
					if (url != null) {
						File file = new File(url);
						if (file.exists()) {
							file.delete();
						}
					}
				}
			}
			// 删除关联表
			Map<String, Object> queryDoc = new HashMap<String, Object>();
			queryDoc.put("examinationDataId_in", dataIds);
			examinationDataFileService.delList(queryDoc, false);
			// 删除照片关联表
			Map<String, Object> queryPic = new HashMap<String, Object>();
			queryPic.put("examinationDataId_in", dataIds);
			examinationDataPhotoService.delList(queryPic, false);
			// 删除数据表
			examinationDataService.del(dataIds);
		}
		// 删除文件关联表
		// 删除文件
		Map<String, Object> recfilemap = new HashMap<String, Object>();
		recfilemap.put("examinationRecordId_in", ids);
		List<ExaminationRecordFileEntity> dataFilelList = examinationRecordFileService.getListByCondition(recfilemap);
		if (dataFilelList != null && dataFilelList.size() > 0) {
			for (ExaminationRecordFileEntity entity : dataFilelList) {
				String url = entity.getUrl();
				if (url != null) {
					File file = new File(url);
					if (file.exists()) {
						file.delete();
					}
				}
			}
		}
		// 删除文件表
		Map<String, Object> queryDoc = new HashMap<String, Object>();
		queryDoc.put("examinationRecordId_in", ids);
		examinationRecordFileService.delList(queryDoc, false);
		// 删除照片关联表
		Map<String, Object> queryPic = new HashMap<String, Object>();
		queryPic.put("examinationRecordId_in", ids);
		examinationRecordPhotoService.delList(queryPic, false);
		j.setResult(result);
		j.setDes(des);
		return j;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handler")
	@ResponseBody
	public String query(HttpServletRequest request, HttpServletResponse response) {
		String msg = "";
		try {
			String reqmsg = request.getParameter("reqmsg");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return msg;
			}
			String action = (String) reqParams.get("action");
			String rep = examinationRecordHandler.doHandler(1, action, reqmsg, request, response);
			msg = new String(rep.getBytes("utf-8"), "iso-8859-1");
		} catch (Exception e) {
			logger.error(e.toString());
		}

		return msg;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handlercontent")
	public void queryApp(HttpServletRequest request, HttpServletResponse response) {
		try {
			InputStream is = request.getInputStream();
			byte[] bis = IOUtils.toByteArray(is);
			String reqmsg = new String(bis, "UTF-8");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return;
			}
			String action = (String) reqParams.get("action");
			String rep = examinationRecordHandler.doHandler(1, action, reqmsg, request, response);
			OutputStream os = response.getOutputStream();
			os.write(rep.toString().getBytes("UTF-8"));
		} catch (Exception e) {
			logger.error(e.toString());
		}
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "uploadFiles")
	@ResponseBody
	public String uploadFiles(HttpServletRequest request, HttpServletResponse response) {
		JSONObject rep = new JSONObject();
		rep.put("result", "failure");
		try {
			// 将当前上下文初始化给 CommonsMutipartResolver
			CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(request.getSession().getServletContext());
			// 检查form中是否有enctype="multipart/form-data"
			if (multipartResolver.isMultipart(request)) {
				// 将request变成多部分request
				MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
				// 获取multiRequest 中所有的文件名
				Iterator iter = multiRequest.getFileNames();
				while (iter.hasNext()) {
					// 一次遍历所有文件
					MultipartFile file = multiRequest.getFile(iter.next().toString());
					if (file != null) {
						String filename = file.getOriginalFilename();// 原始文件名
						int num = filename.lastIndexOf(".");
						filename = filename.substring(num, filename.length());
						String filenewname = RandomUtil.generateString(32) + filename;
						String separator = FileUtil.getFileSeparator();
						String path = OlderHandler.class.getResource("OlderHandler.class").toString();
						if ("file".equals(path.substring(0, 4))) {
							if ("\\".equals(separator))
								path = path.substring(6);
							else {
								path = path.substring(5);
							}
						}
						String localPath = path.substring(0, path.indexOf("WEB-INF")) + "uploadFiles" + separator + "linshi" + separator;// 要保存的临时地址
						InputStream in = file.getInputStream();
						FileOutputStream out = new FileOutputStream(localPath + filenewname);
						byte buffer[] = new byte[1024];
						int len = 0;
						// 输入流读入到缓冲区当中
						while ((len = in.read(buffer)) > 0) {
							out.write(buffer, 0, len);// 数据写入到指定的目录中
						}
						rep.put("result", "success");
						String returnPath = SystemInit.photourl + "/uploadFiles/" + "tijianFiles/" + filenewname;
						rep.put("url", returnPath);
						// 关闭输入流
						in.close();
						// 关闭输出流
						out.close();

					}
				}

			}
		} catch (IOException e) {
			logger.error(e.toString());
		}
		String msg = rep.toString();
		try {
			msg = new String(msg.getBytes("utf-8"), "iso-8859-1");
		} catch (UnsupportedEncodingException e) {
			logger.error(e.toString());
		}
		return msg;
	}

}
