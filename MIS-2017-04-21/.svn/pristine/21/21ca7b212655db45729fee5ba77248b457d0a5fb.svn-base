package fsk.handler.older;

import java.math.BigDecimal;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.business.handler.BaseHandler;
import com.framework.system.common.entity.user.UserEntity;
import com.framework.system.common.service.SystemService;
import com.framework.system.common.service.user.UserService;
import com.framework.system.db.query.OrderVO;

import fsk.entity.employee.EmployeeEntity;
import fsk.entity.older.OlderEntity;
import fsk.entity.recharge.RechargeEntity;
import fsk.entity.serviceTask.ServiceTaskEntity;
import fsk.entity.siteServiceArea.SiteServiceAreaEntity;
import fsk.init.SystemInit;
import fsk.pack.older.OlderPack;
import fsk.parse.older.OlderParse;
import fsk.service.BusinessService;
import fsk.service.UpdateOlder;
import fsk.service.employee.EmployeeService;
import fsk.service.older.OlderService;
import fsk.service.olderAddress.OlderAddressService;
import fsk.service.olderContact.OlderContactService;
import fsk.service.recharge.RechargeService;
import fsk.service.serviceTask.ServiceTaskService;
import fsk.service.siteServiceArea.SiteServiceAreaService;
import fsk.util.DownLoadFileUtil;
import fsk.util.FileUtil;
import fsk.util.RandomUtil;

/**
 * @Title: Handler
 * @Description: 老人信息表业务处理器
 * @author feng.gu
 * @date 2017-03-06 10:55:24
 * @version V1.0
 * 
 */
public class OlderHandler extends BaseHandler {
	private static Logger logger = Logger.getLogger(OlderService.class);
	public static DownLoadFileUtil downLoad = DownLoadFileUtil.getInstance();
	/**
	 * 解析器
	 */
	private OlderParse olderParse = OlderParse.getInstance();
	/**
	 * 业务处理器
	 */
	private OlderService olderService = OlderService.getInstance();
	private static EmployeeService employeeService = EmployeeService.getInstance();
	private BusinessService businessService = BusinessService.getInstance();
	/**
	 * 封装器
	 */
	private OlderPack olderPack = OlderPack.getInstance();

	private static OlderHandler olderHandler;

	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();
	private OlderAddressService olderAddressService = OlderAddressService.getInstance();
	private OlderContactService olderContactService = OlderContactService.getInstance();
	private UserService userService = UserService.getInstance();
	private static SimpleDateFormat formater2 = new SimpleDateFormat("yyyyMMdd");
	private static ServiceTaskService serviceTaskService = ServiceTaskService.getInstance();
	private SiteServiceAreaService siteServiceAreaService = SiteServiceAreaService.getInstance();
	private static SimpleDateFormat formater = new SimpleDateFormat("yyyyMMddHHmmss");
	private static RechargeService rechargeService = RechargeService.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static OlderHandler getInstance() {
		if (olderHandler == null) {
			olderHandler = new OlderHandler();
		}
		return olderHandler;
	}

	/**
	 * 
	 * @param type
	 *            1-json 2-xml
	 * @param entityName
	 * @param command
	 * @param reqStr
	 * @param request
	 * @param response
	 */
	public String doHandler(int type, String command, String reqStr, HttpServletRequest request,
	        HttpServletResponse response) {
		logger.debug("请求消息：" + reqStr);
		String resultStr = "";
		try {
			// 解析
			Map<String, Object> parseMap = olderParse.parse(type, command, reqStr, request);
			String action = (String) parseMap.get("action");
			OlderEntity older = (OlderEntity) parseMap.get("older");
			List<OlderEntity> olderList = (List<OlderEntity>) parseMap.get("olderList");
			Integer id = (Integer) parseMap.get("id");
			Map<String, Object> queryMap = (Map<String, Object>) parseMap.get("queryMap");
			Integer pageno = (Integer) parseMap.get("pageno");
			Integer pagesize = (Integer) parseMap.get("pagesize");
			List<OrderVO> orderList = (List<OrderVO>) parseMap.get("orderList");

			Boolean userShow = (Boolean) parseMap.get("userShow");
			Boolean delUser = (Boolean) parseMap.get("delUser");
			Boolean nurseEmployeeShow = (Boolean) parseMap.get("nurseEmployeeShow");
			Boolean delNurseEmployee = (Boolean) parseMap.get("delNurseEmployee");
			Boolean OlderSiteListShow = (Boolean) parseMap.get("OlderSiteListShow");
			Boolean delOlderSiteList = (Boolean) parseMap.get("delOlderSiteList");
			Boolean olderAddressListShow = (Boolean) parseMap.get("olderAddressListShow");
			Boolean delOlderAddressList = (Boolean) parseMap.get("delOlderAddressList");
			Boolean olderContactListShow = (Boolean) parseMap.get("olderContactListShow");
			Boolean delOlderContactList = (Boolean) parseMap.get("delOlderContactList");
			Boolean caseRecordListShow = (Boolean) parseMap.get("caseRecordListShow");
			Boolean delCaseRecordList = (Boolean) parseMap.get("delCaseRecordList");
			Boolean dailyLifeListShow = (Boolean) parseMap.get("dailyLifeListShow");
			Boolean delDailyLifeList = (Boolean) parseMap.get("delDailyLifeList");
			Boolean employeeListShow = (Boolean) parseMap.get("employeeListShow");
			Boolean delOlderEmployeeList = (Boolean) parseMap.get("delOlderEmployeeList");

			/*
			 * 年纪条件查询 peihouxuan
			 */
			JSONObject reqStrjson = JSONObject.fromObject(reqStr);
			JSONObject cnnjson = (JSONObject) reqStrjson.get("content");
			String birthdate_le = (String) cnnjson.get("birthdate_le");
			String birthdate_ge = (String) cnnjson.get("birthdate_ge");
			boolean flag = false;
			if (birthdate_le != null || birthdate_ge != null) {
				flag = true;
			}
			String siteIdsQuery = (String) cnnjson.get("siteIdsQuery");
			boolean flag2 = false;
			if (siteIdsQuery != null) {
				flag2 = true;
			}
			// 工单查询
			String serviceExpectTime_ge = (String) cnnjson.get("serviceExpectTime_ge");
			String serviceExpectTime_le = (String) cnnjson.get("serviceExpectTime_le");
			String status_in = (String) cnnjson.get("status_in");
			String accountNumType = (String) cnnjson.get("accountNumType");
			String out_trade_no = (String) cnnjson.get("out_trade_no");
			// 业务处理
			Object result = null;
			if ("save".equals(action)) {
				// 账户充值 加上更新时间

				if (older.getId() != null) {
					// 编辑时加上更新时间
					older.setUpdateTime(formater.format(new Date()));
					if (accountNumType != null) {
						boolean saveOlder = false;
						OlderEntity olderOlder = olderService.getById(older.getId());
						Integer charType = null;// 类型
						Integer charMethod = null;// 充值扣款方式
						Integer rechargeType = 2;// 默认工作人员
						if (olderOlder != null) {
							BigDecimal newAccount = null;
							BigDecimal chaAccount = null;
							BigDecimal olderAccount = olderOlder.getAccountNum();// 原账户余额
							chaAccount = older.getAccountNum();
							if (olderAccount == null) {// 原账户无值时默认为0.0
								olderAccount = new BigDecimal(0);
							}
							if ("add".equals(accountNumType)) {// 充值
								newAccount = olderAccount.add(older.getAccountNum());
								charType = 1;
								charMethod = 4;
							}
							if ("del".equals(accountNumType)) {// 扣费
								newAccount = olderAccount.subtract(older.getAccountNum());
								charType = 2;
								charMethod = 2;
							}
							if ("add_weixin".equals(accountNumType)) {
								newAccount = olderAccount.add(older.getAccountNum());
								charType = 1;// 充值
								charMethod = 3;// 方式微信充值
								rechargeType = 1;// 方式微信
							}
							if (newAccount != null) {
								older.setAccountNum(newAccount);
								saveOlder = olderService.save(older);
								if (saveOlder) {// 充值成功时增加充值记录
									RechargeEntity recharge = new RechargeEntity();
									if (out_trade_no != null) {// 微信充值时使用传入交易流水号
										recharge.setSerialNumber(out_trade_no);
									} else {// 不然自动生成交易流水号
										recharge.setSerialNumber(creatrechargeNum());
									}
									recharge.setOlderId(older.getId());
									recharge.setOlderName(older.getName());
									recharge.setOlderMemberNum(older.getMemberNum());
									recharge.setCreateTime(formater.format(new Date()));
									recharge.setType(charType);
									recharge.setAmount(chaAccount);
									recharge.setRechargeType(rechargeType);
									Integer userId = (Integer) request.getSession().getAttribute("userId");// 登录用户ID
									if (userId != null && rechargeType == 2) {
										Map<String, Object> queryEmp = new HashMap<String, Object>();
										queryEmp.put("userId", userId);
										List<EmployeeEntity> empList = employeeService.getListByCondition(queryEmp);
										if (empList != null && empList.size() > 0) {
											EmployeeEntity emp = empList.get(0);
											recharge.setRechargeEmployeeId(emp.getId());
											recharge.setRechargeEmployeeName(emp.getName());
											recharge.setRechargeEmployeeIndexNum(emp.getIndexNum());
										}
									}
									recharge.setRechargeMethod(charMethod);
									rechargeService.save(recharge);
								}
							}
						}
						if (saveOlder) {
							resultStr = "{\"action\":\"ADD_OLDER_INFO_RESPONSE\",\"result\":\"100\",\"des\":\"充值成功！\"}";
							return resultStr;
						} else {
							resultStr = "{\"action\":\"ADD_OLDER_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"充值失败！\"}";
							return resultStr;
						}
					}
				}
				// memberCard唯一性校验 pei
				if (older.getId() == null && older.getMemberCard() != null && !"".equals(older.getMemberCard())) {
					Map<String, Object> queryMapmemberCard = new HashMap<String, Object>();
					queryMapmemberCard.put("memberCard", older.getMemberCard());
					List<OlderEntity> olderListmem = olderService.getListByCondition(queryMapmemberCard);
					if (olderListmem != null && olderListmem.size() > 0) {
						resultStr = "{\"action\":\"ADD_OLDER_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"该会员卡号已存在！\"}";
						logger.debug("返回消息：" + resultStr);
						return resultStr;
					}
				} else if (older.getId() != null && older.getMemberCard() != null && !"".equals(older.getMemberCard())) {
					OlderEntity entitynew = olderService.getById(older.getId());
					if (!older.getMemberCard().equals(entitynew.getMemberCard())) {
						Map<String, Object> queryMapold = new HashMap<String, Object>();
						queryMapold.put("memberCard", older.getMemberCard());
						List<OlderEntity> olderEntitylist = olderService.getListByCondition(queryMapold);
						if (olderEntitylist != null && olderEntitylist.size() > 0) {
							resultStr = "{\"action\":\"ADD_OLDER_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"该会员卡号已存在！\"}";
							logger.debug("返回消息：" + resultStr);
							return resultStr;
						}
					}
				}
				boolean savaPhoto = false;// 是否进行身份证照片的保存
				// 新增时生成会员号加上入会时间
				if (older.getId() == null) {
					older.setMemberNum(createNum());
					older.setCreateTime(formater.format(new Date()));
					savaPhoto = true;
				}
				//
				// 创建user
				if (older.getUserId() == null && older.getIdnumber() != null) {
					// 校验身份证为账号名是否已存在
					Map<String, Object> queryMap2 = new HashMap<String, Object>();
					queryMap2.put("loginname", older.getIdnumber());
					List<UserEntity> userlist = userService.getListByCondition(queryMap2);
					if (userlist != null && userlist.size() > 0) {
						resultStr = "{\"action\":\"ADD_OLDER_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"该身份证号账号已存在！\"}";
						logger.debug("返回消息：" + resultStr);
						return resultStr;
					}
					Integer userId = (Integer) request.getSession().getAttribute("userId");
					Integer uId = systemService.createUserByLoginName(older.getIdnumber(), userId, "老人");
					if (uId != null) {
						older.setUserId(uId);
					}
				}
				// 删除原有联系地址
				if (older.getId() != null) {
					if (older.getOlderAddressList() != null) {
						Map<String, Object> delMap = new HashMap<String, Object>();
						delMap.put("olderId", older.getId());
						olderAddressService.delList(delMap, false);
					}
				}
				// 删除原有联系人
				if (older.getId() != null) {
					if (older.getOlderContactList() != null) {
						Map<String, Object> delMap = new HashMap<String, Object>();
						delMap.put("olderId", older.getId());
						olderContactService.delList(delMap, false);
					}
				}
				boolean flushDataRule = false;
				if (older.getId() == null) {
					flushDataRule = true;
				}
				result = olderService.save(older);
				// 保存老人的身份证前后照片
				if (savaPhoto) {
					// 前面
					String idFront = older.getIdFront();
					if (idFront != null) {
						String fileNameFront = "OlderIdPhotoFront_" + older.getId() + ".jpg";
						String idFrontUrl = savePhoto(fileNameFront, idFront);
						older.setIdFront(idFrontUrl);
					}
					// 后面
					String idBack = older.getIdBack();
					if (idBack != null) {
						String fileBackFront = "OlderIdPhotoBack_" + older.getId() + ".jpg";
						String idBackUrl = savePhoto(fileBackFront, idBack);
						older.setIdBack(idBackUrl);
					}

					// 保存老人
					olderService.save(older);
				}

				if (flushDataRule) {
					Integer userId = (Integer) request.getSession().getAttribute("userId");
					if (userId != null && userId.intValue() > 0) {
						businessService.getUserBusinessId(userId, request);
					}
				}
				// 向床垫服务器同步
				List<Object> olders = new ArrayList<Object>();
				olders.add(older);
				UpdateOlder.sendOlder(olders);
			} else if ("saveList".equals(action)) {
				result = olderService.saveList(olderList);
			} else if ("getById".equals(action)) {
				result = olderService.getById(id, userShow, nurseEmployeeShow, OlderSiteListShow, olderAddressListShow,
				        olderContactListShow, caseRecordListShow, dailyLifeListShow, employeeListShow);
			} else if ("getListByCondition".equals(action)) {
				// 根据数据权限 增加查询条件
				/*
				 * 解析年龄查询范围 peihouxuan
				 */
				String ids = "";
				if (flag || flag2) {
					if (flag) {
						Map<String, Object> queryMapDate = new HashMap<String, Object>();
						if (birthdate_le != null) {
							queryMapDate.put("birthdate_le", birthdate_le);
						}
						if (birthdate_ge != null) {
							queryMapDate.put("birthdate_ge", birthdate_ge);
						}
						List<OlderEntity> olderListNew = olderService.getListByCondition(queryMapDate);

						if (olderListNew != null && olderListNew.size() > 0) {
							for (OlderEntity entity : olderListNew) {
								ids = ids + entity.getId() + ",";
							}
							if (!"".equals(ids)) {
								ids = ids.replaceAll(",,", ",");
								ids = ids.substring(0, ids.length() - 1);
							}
						} else {
							ids = "0";
						}
					}
					if (flag2) {
						String siteids = "";
						Map<String, Object> queryMapSiteArea = new HashMap<String, Object>();
						queryMapSiteArea.put("siteId_in", siteIdsQuery);
						List<SiteServiceAreaEntity> siteServiceAreaList = siteServiceAreaService
						        .getListByCondition(queryMapSiteArea);
						if (siteServiceAreaList != null && siteServiceAreaList.size() > 0) {
							for (SiteServiceAreaEntity entity : siteServiceAreaList) {
								siteids = siteids + entity.getServiceStreetId() + ",";
							}
							if (!"".equals(siteids)) {
								siteids = siteids.replaceAll(",,", ",");
								siteids = siteids.substring(0, siteids.length() - 1);
								Map<String, Object> queryMapOlder = new HashMap<String, Object>();
								queryMapOlder.put("serviceStreetId_in", siteids);
								if (!"".equals(ids)) {
									queryMapOlder.put("id_in", ids);
								}
								List<OlderEntity> olderListQuery = olderService.getListByCondition(queryMapOlder);
								if (olderListQuery != null && olderListQuery.size() > 0) {
									ids = "";
									for (OlderEntity entity : olderListQuery) {
										ids = ids + entity.getId() + ",";
									}
									if (!"".equals(ids)) {
										ids = ids.replaceAll(",,", ",");
										ids = ids.substring(0, ids.length() - 1);
									}
								} else {
									ids = "0";
								}
							}
						} else {
							ids = "0";
						}
					}
					queryMap.put("id_in", ids);
				}
				// 工单查询
				if (serviceExpectTime_ge != null || serviceExpectTime_le != null || status_in != null) {
					String idss = "";
					Map<String, Object> queryMapServiceTask = new HashMap<String, Object>();
					if (serviceExpectTime_ge != null) {
						queryMapServiceTask.put("serviceExpectTime_ge", serviceExpectTime_ge);
					}
					if (serviceExpectTime_le != null) {
						queryMapServiceTask.put("serviceExpectTime_le", serviceExpectTime_le);
					}
					if (status_in != null) {
						queryMapServiceTask.put("status_in", status_in);
					}
					queryMapServiceTask.put("source_isNull", "null");
					List<ServiceTaskEntity> serviceTaskList = serviceTaskService
					        .getListByCondition(queryMapServiceTask);
					if (serviceTaskList != null && serviceTaskList.size() > 0) {
						for (ServiceTaskEntity emtuti : serviceTaskList) {

							idss = idss + emtuti.getOlderId() + ",";
						}
						if (!"".equals(idss)) {
							idss = idss.replaceAll(",,", ",");
							idss = idss.substring(0, idss.length() - 1);
							queryMap.put("id_in", idss);
						} else {
							idss = "0";
							queryMap.put("id_in", idss);
						}

					} else {
						idss = "0";
						queryMap.put("id_in", idss);
					}
				}
				//
				queryMap = systemService.addDataRuleByRoles("OlderEntity", queryMap, request);
				result = olderService.getListByCondition(queryMap, orderList, pageno, pagesize, userShow,
				        nurseEmployeeShow, OlderSiteListShow, olderAddressListShow, olderContactListShow,
				        caseRecordListShow, dailyLifeListShow, employeeListShow);
			} else if ("del".equals(action)) {
				result = olderService.del(id, delUser, delNurseEmployee, delOlderAddressList, delOlderSiteList,
				        delOlderContactList, delCaseRecordList, delDailyLifeList, delOlderEmployeeList);
			} else if ("delList".equals(action)) {
				result = olderService.delList(queryMap, delUser, delNurseEmployee, delOlderSiteList,
				        delOlderAddressList, delOlderContactList, delCaseRecordList, delDailyLifeList,
				        delOlderEmployeeList);
			}
			// 封装
			Map<String, Object> packMap = olderPack.pack(type, action, result, older);
			String actionBack = (String) packMap.get("action");
			String resultBack = (String) packMap.get("result");
			String desBack = (String) packMap.get("des");
			JSONObject pageBack = (JSONObject) packMap.get("page");

			JSONObject contentBack = (JSONObject) packMap.get("content");
			// 工单的统计pei
			if (serviceExpectTime_ge != null || serviceExpectTime_le != null || status_in != null) {
				if (contentBack != null && contentBack.size() > 0) {
					JSONArray olderlist = contentBack.getJSONArray("olderList");
					JSONArray jsonOlder = new JSONArray();
					if (olderlist != null && olderlist.size() > 0) {
						for (int i = 0; i < olderlist.size(); i++) {
							String olderName = "";
							int daifenpei = 0;
							int daishenhe = 0;
							int yiwancheng = 0;
							JSONObject json = new JSONObject();
							Map<String, Object> queryMapService = new HashMap<String, Object>();
							JSONObject jsonTemp = olderlist.getJSONObject(i);
							Integer olderId = jsonTemp.getInt("id");
							olderName = jsonTemp.getString("name");
							queryMapService.put("olderId", olderId);
							if (serviceExpectTime_ge != null) {
								queryMapService.put("serviceExpectTime_ge", serviceExpectTime_ge);
							}
							if (serviceExpectTime_le != null) {
								queryMapService.put("serviceExpectTime_le", serviceExpectTime_le);
							}
							if (status_in != null) {
								queryMapService.put("status_in", status_in);
							}
							List<ServiceTaskEntity> serviceTaskList = serviceTaskService
							        .getListByCondition(queryMapService);
							if (serviceTaskList != null && serviceTaskList.size() > 0) {
								for (ServiceTaskEntity entity : serviceTaskList) {
									Integer status = entity.getStatus();
									if (status == 3) {
										daishenhe++;
									} else if (status == 4 || status == 5 || status == 6 || status == 7) {
										yiwancheng++;
									}
								}
							}
							// 统计status为2 的
							if (status_in == null || status_in.contains("2")) {
								Map<String, Object> queryMapService2 = new HashMap<String, Object>();
								queryMapService2.put("olderId", olderId);
								queryMapService2.put("status", 2);
								queryMapService2 = systemService.addDataRule("ServiceTaskEntity", queryMapService2,
								        request);
								List<ServiceTaskEntity> serviceTaskList2 = serviceTaskService
								        .getListByCondition(queryMapService2);
								if (serviceTaskList2 != null && serviceTaskList2.size() > 0) {
									daifenpei = serviceTaskList2.size();
								}
							}
							json.put("olderId", olderId);
							json.put("olderName", olderName);
							json.put("daifenpei", daifenpei);
							json.put("daishenhe", daishenhe);
							json.put("yiwancheng", yiwancheng);
							jsonOlder.add(json);
						}
					}
					contentBack.put("tcOlderCount", jsonOlder);
				}
			}
			JSONObject repJson = new JSONObject();
			if (actionBack != null && !"".equals(actionBack)) {
				repJson.put("action", actionBack);
			}
			if (resultBack != null && !"".equals(resultBack)) {
				repJson.put("result", resultBack);
			}
			if (desBack != null && !"".equals(desBack)) {
				repJson.put("des", desBack);
			}
			if (pageBack != null) {
				repJson.put("page", pageBack);
			}
			if (contentBack != null && !"".equals(contentBack)) {
				repJson.put("content", contentBack);
			}
			logger.debug("返回消息：" + repJson.toString());
			resultStr = repJson.toString();
		} catch (Exception e) {
			logger.error(e);
		}
		return resultStr;
	}

	// 生成老人会员号
	public String createNum() {

		String numTemp = "LR" + formater2.format(new Date());
		String num = "";
		Map<String, Object> mapVlue = new HashMap<String, Object>();
		Map<String, Object> queryMapService = new HashMap<String, Object>();
		queryMapService.put("memberNum_like", numTemp);
		List<OlderEntity> serviceTasklist = olderService.getListByCondition(queryMapService);
		if (serviceTasklist != null && serviceTasklist.size() > 0) {
			for (OlderEntity entiry : serviceTasklist) {
				String code = entiry.getMemberNum();
				code = code.substring(10, 14);
				mapVlue.put(code, "yes");
			}
		}
		for (int i = 1; i < 9999; i++) {
			if (i < 10) {
				num = "000" + String.valueOf(i);
			} else if (i >= 10 && i < 100) {
				num = "00" + String.valueOf(i);
			} else if (i >= 100 && i < 1000) {
				num = "0" + String.valueOf(i);
			} else {
				num = String.valueOf(i);
			}
			if (mapVlue.get(num) == null) {
				numTemp = numTemp + num;
				break;
			}
		}
		return numTemp;
	}

	// 充值消费流水号:RESN+14位当前时间+5位随机数
	public String creatrechargeNum() {
		String num = "RESN" + formater.format(new Date()) + RandomUtil.generateNumString(5);
		return num;
	}

	/**
	 * 保存老人身份证照片到本地
	 * 
	 * @param fileName
	 * @param url
	 * @return
	 */
	public static String savePhoto(String fileName, String url) {
		String returnPath = null;
		try {
			String path = OlderHandler.class.getResource("OlderHandler.class").toString();
			String separator = FileUtil.getFileSeparator();
			if ("file".equals(path.substring(0, 4))) {
				if ("\\".equals(separator))
					path = path.substring(6);
				else {
					path = path.substring(5);
				}
			}
			String localPath = path.substring(0, path.indexOf("WEB-INF")) + "photos" + separator
			        + "OlderIdentityPhotos";
			localPath = URLDecoder.decode(localPath);
			localPath = localPath.replace("/", separator);
			localPath = localPath.replace("\\", separator);
			downLoad.downLoadByUrl(fileName, url, localPath);
			returnPath = SystemInit.photourl + "/photos/" + "OlderIdentityPhotos/" + fileName;
		} catch (Exception e) {
			logger.error(e.toString());
		}
		return returnPath;
	}
}
