package fsk.service.older;

import java.io.File;
import java.io.FileOutputStream;
import java.math.BigDecimal;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.imageio.stream.FileImageOutputStream;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import com.framework.system.common.entity.dataDic.DataDicEntity;
import com.framework.system.common.entity.user.UserEntity;
import com.framework.system.common.service.dataDic.DataDicService;
import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

import fsk.entity.caseRecord.CaseRecordEntity;
import fsk.entity.dailyLife.DailyLifeEntity;
import fsk.entity.employee.EmployeeEntity;
import fsk.entity.older.OlderEntity;
import fsk.entity.olderAddress.OlderAddressEntity;
import fsk.entity.olderContact.OlderContactEntity;
import fsk.entity.olderPrincipalEmployee.OlderPrincipalEmployeeEntity;
import fsk.entity.olderSite.OlderSiteEntity;
import fsk.entity.site.SiteEntity;
import fsk.handler.older.OlderHandler;
import fsk.init.SystemInit;
import fsk.util.Base64Utils;
import fsk.util.FileUtil;
import fsk.util.Md5Utils;

/**
 * @Title: Service
 * @Description: 老人信息表服务类
 * @author feng.gu
 * @date 2017-03-07 14:57:18
 * @version V1.0
 * 
 */
public class OlderService {
	private static Logger logger = Logger.getLogger(OlderService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static OlderService olderService;
	private static SimpleDateFormat formater = new SimpleDateFormat("yyyyMMdd");
	private SimpleDateFormat formaterymdhms = new SimpleDateFormat("yyyyMMddHHmmss");
	private DataDicService dataDicService = DataDicService.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static OlderService getInstance() {
		if (olderService == null) {
			olderService = new OlderService();
		}
		return olderService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(OlderEntity older) {
		boolean result = false;
		if (older != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				String mainPhoto = older.getMainPhoto();
				if (mainPhoto != null && !"".equals(mainPhoto)) {
					older.setMainPhoto("tempurl");
				}
				// 编辑时保存身份证的照片
				if (older.getId() != null) {
					String idFront = older.getIdFront();
					String idback = older.getIdBack();
					if (idFront != null && !"".equals(idFront)) {
						if (!idFront.startsWith("http:")) {
							older.setIdFront("");
							dbManager.saveNoTransaction(older);
							String fileName = "OlderIdPhotoFront_" + older.getId() + ".jpg";
							String photourl = saveIdPhoto(idFront, fileName);
							older.setIdFront(photourl);
						} else {
							older.setIdFront(idFront);
						}
					}

					if (idback != null && !"".equals(idback)) {
						if (!idback.startsWith("http:")) {
							older.setIdBack("");
							dbManager.saveNoTransaction(older);
							String fileName = "OlderIdPhotoBack_" + older.getId() + ".jpg";
							String photourl = saveIdPhoto(idback, fileName);
							older.setIdBack(photourl);
						} else {
							older.setIdBack(idback);
						}
					}
				}
				// 关联信息保存
				UserEntity user = older.getUser();
				if (user != null) {
					dbManager.saveNoTransaction(user);
					older.setUserId(user.getId());
				}
				// 关联信息保存
				EmployeeEntity nurseEmployee = older.getNurseEmployee();
				if (nurseEmployee != null) {
					dbManager.saveNoTransaction(nurseEmployee);
					older.setNurseEmployeeId(nurseEmployee.getId());
				}
				if (older.getOlderSiteList() != null && older.getOlderSiteList().size() > 0) {
					// 关联信息保存
					if (older.getId() == null) {
						dbManager.saveNoTransaction(older);
					}
					for (OlderSiteEntity OlderSiteEntity : older.getOlderSiteList()) {
						OlderSiteEntity.setOlderId(older.getId());
						OlderSiteEntity.setOlderName(older.getName());
						if (OlderSiteEntity.getSiteId() != null) {

							QueryCondition qc = new QueryCondition(SiteEntity.ID, QueryCondition.eq, OlderSiteEntity.getSiteId());
							List<Object> list = dbManager.queryByConditionNoTransaction(SiteEntity.class, qc);
							if ((list != null) && (list.size() > 0)) {
								SiteEntity entity = (SiteEntity) list.get(0);
								OlderSiteEntity.setSiteName(entity.getName());
							}

						}

						dbManager.saveNoTransaction(OlderSiteEntity);
					}
				}
				if (older.getOlderAddressList() != null && older.getOlderAddressList().size() > 0) {
					// 关联信息保存
					if (older.getId() == null) {
						dbManager.saveNoTransaction(older);
					}
					for (OlderAddressEntity olderAddressEntity : older.getOlderAddressList()) {
						olderAddressEntity.setOlderId(older.getId());
						dbManager.saveNoTransaction(olderAddressEntity);
					}
				}
				if (older.getOlderContactList() != null && older.getOlderContactList().size() > 0) {
					// 关联信息保存
					if (older.getId() == null) {
						dbManager.saveNoTransaction(older);
					}
					for (OlderContactEntity olderContactEntity : older.getOlderContactList()) {
						olderContactEntity.setOlderId(older.getId());
						dbManager.saveNoTransaction(olderContactEntity);
					}
				}
				if (older.getCaseRecordList() != null && older.getCaseRecordList().size() > 0) {
					// 关联信息保存
					if (older.getId() == null) {
						dbManager.saveNoTransaction(older);
					}
					for (CaseRecordEntity caseRecordEntity : older.getCaseRecordList()) {
						caseRecordEntity.setOlderId(older.getId());
						dbManager.saveNoTransaction(caseRecordEntity);
					}
				}
				if (older.getDailyLifeList() != null && older.getDailyLifeList().size() > 0) {
					// 关联信息保存
					if (older.getId() == null) {
						dbManager.saveNoTransaction(older);
					}
					for (DailyLifeEntity dailyLifeEntity : older.getDailyLifeList()) {
						dailyLifeEntity.setOlderId(older.getId());
						dbManager.saveNoTransaction(dailyLifeEntity);
					}
				}
				dbManager.saveNoTransaction(older);
				if (older.getEmployeeList() != null && older.getEmployeeList().size() > 0) {
					// 先删除原先绑定关系
					QueryCondition qc = new QueryCondition(OlderPrincipalEmployeeEntity.OLDER_ID, QueryCondition.eq, older.getId());
					List<Object> list = dbManager.queryByConditionNoTransaction(OlderPrincipalEmployeeEntity.class, qc);
					if ((list != null) && (list.size() > 0)) {
						for (Object obj : list) {
							OlderPrincipalEmployeeEntity entity = (OlderPrincipalEmployeeEntity) obj;
							dbManager.delNoTransaction(entity.getId(), OlderPrincipalEmployeeEntity.class);
						}
					}
					// 绑定现在的关系
					for (EmployeeEntity employee : older.getEmployeeList()) {
						Integer employeeId = employee.getId();
						if (employeeId != null) {
							OlderPrincipalEmployeeEntity entity = new OlderPrincipalEmployeeEntity();
							entity.setOlderId(older.getId());
							entity.setPrincipalEmployeeId(employeeId);
							dbManager.saveNoTransaction(entity);
						}
					}
				}
				// 保存照片 pei
				if (mainPhoto != null && !"".equals(mainPhoto)) {
					if (mainPhoto != null && !mainPhoto.startsWith("http")) {
						String fileName = "olderPhoto_" + older.getId() + ".jpg";
						String photourl = savePhoto(mainPhoto, fileName);
						older.setMainPhoto(photourl);
					} else if (mainPhoto.startsWith("http")) {
						older.setMainPhoto(mainPhoto);
					}
				}
				result = dbManager.saveNoTransaction(older);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(List<OlderEntity> olderList) {
		boolean result = false;
		if (olderList != null && olderList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (OlderEntity older : olderList) {
					if (older != null) {
						// 关联信息保存
						UserEntity user = older.getUser();
						if (user != null) {
							dbManager.saveNoTransaction(user);
							older.setUserId(user.getId());
						}
						// 关联信息保存
						EmployeeEntity nurseEmployee = older.getNurseEmployee();
						if (nurseEmployee != null) {
							dbManager.saveNoTransaction(nurseEmployee);
							older.setNurseEmployeeId(nurseEmployee.getId());
						}
						// 关联信息保存
						if (older.getOlderSiteList() != null && older.getOlderSiteList().size() > 0) {
							if (older.getId() == null) {
								dbManager.saveNoTransaction(older);
							}
							for (OlderSiteEntity OlderSiteEntity : older.getOlderSiteList()) {
								OlderSiteEntity.setOlderId(older.getId());
								dbManager.saveNoTransaction(OlderSiteEntity);
							}
						}
						// 关联信息保存
						if (older.getOlderAddressList() != null && older.getOlderAddressList().size() > 0) {
							if (older.getId() == null) {
								dbManager.saveNoTransaction(older);
							}
							for (OlderAddressEntity olderAddressEntity : older.getOlderAddressList()) {
								olderAddressEntity.setOlderId(older.getId());
								dbManager.saveNoTransaction(olderAddressEntity);
							}
						}
						// 关联信息保存
						if (older.getOlderContactList() != null && older.getOlderContactList().size() > 0) {
							if (older.getId() == null) {
								dbManager.saveNoTransaction(older);
							}
							for (OlderContactEntity olderContactEntity : older.getOlderContactList()) {
								olderContactEntity.setOlderId(older.getId());
								dbManager.saveNoTransaction(olderContactEntity);
							}
						}
						// 关联信息保存
						if (older.getCaseRecordList() != null && older.getCaseRecordList().size() > 0) {
							if (older.getId() == null) {
								dbManager.saveNoTransaction(older);
							}
							for (CaseRecordEntity caseRecordEntity : older.getCaseRecordList()) {
								caseRecordEntity.setOlderId(older.getId());
								dbManager.saveNoTransaction(caseRecordEntity);
							}
						}
						// 关联信息保存
						if (older.getDailyLifeList() != null && older.getDailyLifeList().size() > 0) {
							if (older.getId() == null) {
								dbManager.saveNoTransaction(older);
							}
							for (DailyLifeEntity dailyLifeEntity : older.getDailyLifeList()) {
								dailyLifeEntity.setOlderId(older.getId());
								dbManager.saveNoTransaction(dailyLifeEntity);
							}
						}
						if (older.getEmployeeList() != null && older.getEmployeeList().size() > 0) {
							// 先删除原先绑定关系
							QueryCondition qc = new QueryCondition(OlderPrincipalEmployeeEntity.OLDER_ID, QueryCondition.eq, older.getId());
							List<Object> list = dbManager.queryByConditionNoTransaction(OlderPrincipalEmployeeEntity.class, qc);
							if ((list != null) && (list.size() > 0)) {
								for (Object obj : list) {
									OlderPrincipalEmployeeEntity entity = (OlderPrincipalEmployeeEntity) obj;
									dbManager.delNoTransaction(entity.getId(), OlderPrincipalEmployeeEntity.class);
								}
							}
							// 绑定现在的关系
							for (EmployeeEntity employee : older.getEmployeeList()) {
								Integer employeeId = employee.getId();
								if (employeeId != null) {
									OlderPrincipalEmployeeEntity entity = new OlderPrincipalEmployeeEntity();
									entity.setOlderId(older.getId());
									entity.setPrincipalEmployeeId(employeeId);
									dbManager.saveNoTransaction(entity);
								}
							}
						}
						result = dbManager.saveNoTransaction(older);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	// 批量导入 pei
	public String saveList(List<OlderEntity> olderList, Integer userId) {
		JSONObject resultJson = new JSONObject();
		resultJson.put("result", "success");
		String curTime = formaterymdhms.format(new Date());// 当前时间
		Integer successNum = 0;// 成功保存条数
		Integer failNum = 0; // 保存失败条数
		Integer existNun = 0;// 已存在条数
		Integer cardRepeatNum = 0;// 考号重复条数
		Integer idRepeatNum = 0;// 身份证号重复条数

		List<OlderEntity> newOlderList = new ArrayList<OlderEntity>();
		List<OlderEntity> notSaveOlderList = new ArrayList<OlderEntity>();
		boolean result = false;
		boolean flag = true;
		if (olderList != null && olderList.size() > 0) {
			Map<String, Object> mapCount = new HashMap<String, Object>();
			// 检验会员卡号的唯一性和身份证号的唯一性,剔除错误数据
			for (OlderEntity older : olderList) {
				boolean saveOlder = true;
				// 会员卡号唯一性

				if (older.getMemberCard() != null && !"".equals(older.getMemberCard())) {
					QueryCondition qc = new QueryCondition(OlderEntity.MEMBER_CARD, QueryCondition.eq, older.getMemberCard());
					List<Object> olderListmem = dbManager.queryByConditionNoTransaction(OlderEntity.class, qc);
					if (olderListmem != null && olderListmem.size() > 0) {
						saveOlder = false;
						existNun++;
					}
					if (mapCount.get(older.getMemberCard()) == null) {
						mapCount.put(older.getMemberCard(), older);
					} else {
						saveOlder = false;
						cardRepeatNum = cardRepeatNum + 2;
						OlderEntity olderTemp = (OlderEntity) mapCount.get(older.getMemberCard());
						if (newOlderList.contains(olderTemp)) {
							newOlderList.remove(olderTemp);

							if (!notSaveOlderList.contains(olderTemp)) {
								notSaveOlderList.add(olderTemp);
							}
						}

					}
				}

				// 身份证号的唯一性校验
				if (older.getIdnumber() != null && !"".equals(older.getIdnumber())) {
					QueryCondition qc = new QueryCondition(UserEntity.LOGINNAME, QueryCondition.eq, older.getIdnumber());
					List<Object> userlist = dbManager.queryByConditionNoTransaction(UserEntity.class, qc);
					if (userlist != null && userlist.size() > 0) {
						saveOlder = false;
						existNun++;
					}
					if (mapCount.get(older.getIdnumber()) == null) {
						mapCount.put(older.getIdnumber(), older);
					} else {
						saveOlder = false;
						idRepeatNum = idRepeatNum + 2;
						OlderEntity olderTemp = (OlderEntity) mapCount.get(older.getIdnumber());
						if (newOlderList.contains(olderTemp)) {
							newOlderList.remove(olderTemp);
							if (!notSaveOlderList.contains(olderTemp)) {
								notSaveOlderList.add(olderTemp);
							}
						}
					}
				}
				if (saveOlder) {
					newOlderList.add(older);
				} else {
					notSaveOlderList.add(older);
				}
			}
			if (flag) {
				TransactionManager tx = DbUtils.getTranManager();
				try {
					tx.beginTransaction();
					for (OlderEntity older : newOlderList) {
						if (older != null) {
							// 生成老人编号:LR2016...
							if (older.getId() == null) {
								String memberNum = createNum();
								older.setMemberNum(memberNum);
							}
							// 添加创建时间
							older.setCreateTime(curTime);
							// 余额
							older.setAccountNum(new BigDecimal("0.00"));
							// 关联信息保存
							// 创建账号
							if (userId != null) {
								Integer uId = createUserByLoginName(older.getIdnumber(), userId, "老人");
								older.setUserId(uId);
							}
							// 关联信息保存
							EmployeeEntity nurseEmployee = older.getNurseEmployee();
							if (nurseEmployee != null) {
								dbManager.saveNoTransaction(nurseEmployee);
								older.setNurseEmployeeId(nurseEmployee.getId());
							}
							// 关联信息保存
							if (older.getOlderAddressList() != null && older.getOlderAddressList().size() > 0) {
								if (older.getId() == null) {
									dbManager.saveNoTransaction(older);
								}
								for (OlderAddressEntity olderAddressEntity : older.getOlderAddressList()) {
									olderAddressEntity.setOlderId(older.getId());
									dbManager.saveNoTransaction(olderAddressEntity);
								}
							}
							// 关联信息保存
							if (older.getOlderContactList() != null && older.getOlderContactList().size() > 0) {
								if (older.getId() == null) {
									dbManager.saveNoTransaction(older);
								}
								for (OlderContactEntity olderContactEntity : older.getOlderContactList()) {
									olderContactEntity.setOlderId(older.getId());
									dbManager.saveNoTransaction(olderContactEntity);
								}
							}
							// 关联信息保存
							if (older.getCaseRecordList() != null && older.getCaseRecordList().size() > 0) {
								if (older.getId() == null) {
									dbManager.saveNoTransaction(older);
								}
								for (CaseRecordEntity caseRecordEntity : older.getCaseRecordList()) {
									caseRecordEntity.setOlderId(older.getId());
									dbManager.saveNoTransaction(caseRecordEntity);
								}
							}
							// 关联信息保存
							if (older.getDailyLifeList() != null && older.getDailyLifeList().size() > 0) {
								if (older.getId() == null) {
									dbManager.saveNoTransaction(older);
								}
								for (DailyLifeEntity dailyLifeEntity : older.getDailyLifeList()) {
									dailyLifeEntity.setOlderId(older.getId());
									dbManager.saveNoTransaction(dailyLifeEntity);
								}
							}
							if (older.getEmployeeList() != null && older.getEmployeeList().size() > 0) {
								// 先删除原先绑定关系
								QueryCondition qc = new QueryCondition(OlderPrincipalEmployeeEntity.OLDER_ID, QueryCondition.eq, older.getId());
								List<Object> list = dbManager.queryByConditionNoTransaction(OlderPrincipalEmployeeEntity.class, qc);
								if ((list != null) && (list.size() > 0)) {
									for (Object obj : list) {
										OlderPrincipalEmployeeEntity entity = (OlderPrincipalEmployeeEntity) obj;
										dbManager.delNoTransaction(entity.getId(), OlderPrincipalEmployeeEntity.class);
									}
								}
								// 绑定现在的关系
								for (EmployeeEntity employee : older.getEmployeeList()) {
									Integer employeeId = employee.getId();
									if (employeeId != null) {
										OlderPrincipalEmployeeEntity entity = new OlderPrincipalEmployeeEntity();
										entity.setOlderId(older.getId());
										entity.setPrincipalEmployeeId(employeeId);
										dbManager.saveNoTransaction(entity);
									}
								}
							}
							// 保存站点老人关联表
							if (older.getOlderSiteList() != null && older.getOlderSiteList().size() > 0) {
								if (older.getId() == null) {
									dbManager.saveNoTransaction(older);
								}
								for (OlderSiteEntity olderSite : older.getOlderSiteList()) {
									olderSite.setOlderId(older.getId());
									olderSite.setOlderName(older.getName());
									dbManager.saveNoTransaction(olderSite);
								}
							}
							result = dbManager.saveNoTransaction(older);
							if (result) {
								successNum++;
							} else {
								failNum++;
								notSaveOlderList.add(older);
							}
						}
					}
					tx.commitAndClose();

					StringBuilder des = new StringBuilder();
					des.append("成功导入" + successNum + "条数据.");
					if (existNun.intValue() != 0) {
						des.append(existNun + "条数据已经存在.");
					}
					if (failNum.intValue() != 0) {
						des.append(failNum + "条数据错误.");
					}
					if (cardRepeatNum.intValue() != 0) {
						des.append(cardRepeatNum + "条数据卡号重复.");
					}
					if (idRepeatNum.intValue() != 0) {
						des.append(idRepeatNum + "条数据身份证号重复.");
					}
					resultJson.put("des", des.toString());
					String errorPath = "";
					if (notSaveOlderList != null && notSaveOlderList.size() > 0) {
						errorPath = createErrorOlderList(notSaveOlderList);
					}
					resultJson.put("errorPath", errorPath);
				} catch (Exception e) {
					resultJson.put("result", "failure");
					logger.error("数据库提交失败！");
					logger.error(e);
					result = false;
					try {
						tx.rollbackAndClose();
					} catch (Exception ex) {
						logger.error("数据库回滚失败！");
						logger.error(ex);
					}
				}
			}

		}
		logger.debug(resultJson.toString());
		return resultJson.toString();

	}

	/**
	 * 
	 * @param notSaveOlderList
	 */
	private String createErrorOlderList(List<OlderEntity> notSaveOlderList) {
		String returnPath = "";

		SimpleDateFormat formaterymdhms = new SimpleDateFormat("yyyyMMddHHmmss");
		OlderService olderService = OlderService.getInstance();
		String path = OlderHandler.class.getResource("OlderHandler.class").toString();
		String separator = FileUtil.getFileSeparator();
		if ("file".equals(path.substring(0, 4))) {
			if ("\\".equals(separator))
				path = path.substring(6);
			else {
				path = path.substring(5);
			}
		}
		String filename = formaterymdhms.format(new Date()) + ".xls";
		String localPath = path.substring(0, path.indexOf("WEB-INF")) + "errorSaveOlderList" + separator + filename;
		// 第一步，创建一个webbook，对应一个Excel文件
		HSSFWorkbook wb = new HSSFWorkbook();
		// 第二步，在webbook中添加一个sheet,对应Excel文件中的sheet
		HSSFSheet sheet = wb.createSheet("保存失败老人信息表");
		// 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制short
		HSSFRow row = sheet.createRow((int) 0);
		// 第四步，创建单元格，并设置值表头 设置表头居中
		HSSFCellStyle style = wb.createCellStyle();
		// style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式

		HSSFFont font = wb.createFont();
		font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD); // 宽度

		// 设置单元格类型
		HSSFCellStyle cellStyle = wb.createCellStyle();
		cellStyle.setFont(font);
		HSSFCell cell = row.createCell(0, 0);

		cell.setCellValue("姓名");
		cell.setCellStyle(style);
		cell = row.createCell(1, 0);
		cell.setCellValue("性别");
		cell.setCellStyle(style);
		cell = row.createCell(2, 0);
		cell.setCellValue("身份证号");
		cell.setCellStyle(cellStyle);
		cell = row.createCell(3, 0);
		cell.setCellValue("社保号码");
		cell.setCellStyle(cellStyle);
		cell = row.createCell(4, 0);
		cell.setCellValue("出生日期");
		cell.setCellStyle(style);
		cell = row.createCell(5, 0);
		cell.setCellValue("居住地地址");
		cell.setCellStyle(cellStyle);
		cell = row.createCell(6, 0);
		cell.setCellValue("联系方式");
		cell.setCellStyle(cellStyle);
		if (notSaveOlderList != null && notSaveOlderList.size() > 0) {
			for (int i = 0; i < notSaveOlderList.size(); i++) {
				row = sheet.createRow((int) i + 1);
				OlderEntity older = (OlderEntity) notSaveOlderList.get(i);
				// 第四步，创建单元格，并设置值
				// /老人姓名
				row.createCell(0, 0).setCellValue(older.getName());
				// 老人性别
				row.createCell(1, 0).setCellValue(older.getGender());
				// 身份证号
				row.createCell(2, 0).setCellValue(older.getIdnumber());
				// 社保号码
				row.createCell(3, 0).setCellValue(older.getSocialSecurityNumber());
				// 出生日期
				row.createCell(4, 0).setCellValue(older.getBirthdate());
				// 居住地
				if (older.getOlderAddressList() != null && older.getOlderAddressList().size() > 0) {
					row.createCell(5, 0).setCellValue(older.getOlderAddressList().get(0).getAddress());
				}
				// 联系方式
				row.createCell(6, 0).setCellValue(older.getMobileTel());
			}
		}
		sheet.setColumnWidth((short) 0, 2400);
		sheet.setColumnWidth((short) 1, 2400);
		sheet.setColumnWidth((short) 2, 7500);
		sheet.setColumnWidth((short) 3, 7500);
		sheet.setColumnWidth((short) 4, 3600);
		sheet.setColumnWidth((short) 5, 9600);
		sheet.setColumnWidth((short) 6, 5000);

		try {
			FileOutputStream fout = new FileOutputStream(localPath);
			wb.write(fout);
			fout.close();
			returnPath = SystemInit.photourl + "/errorSaveOlderList/" + filename;
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("保存失败");
		}
		return returnPath;

	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public OlderEntity getById(Integer id) {
		OlderEntity obj = null;
		if (id != null) {
			obj = (OlderEntity) dbManager.getById(id, OlderEntity.class);
		}
		return obj;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param userShow
	 *            是否查询关联信息
	 * @param nurseEmployeeShow
	 *            是否查询关联信息
	 * @param olderSiteListShow
	 *            是否查询关联信息
	 * @param olderAddressListShow
	 *            是否查询关联信息
	 * @param olderContactListShow
	 *            是否查询关联信息
	 * @param caseRecordListShow
	 *            是否查询关联信息
	 * @param dailyLifeListShow
	 *            是否查询关联信息
	 * @param employeeListShow
	 *            是否查询关联信息
	 * @param obj
	 */
	public OlderEntity getById(Integer id, Boolean userShow, Boolean nurseEmployeeShow, Boolean olderSiteListShow, Boolean olderAddressListShow,
	        Boolean olderContactListShow, Boolean caseRecordListShow, Boolean dailyLifeListShow, Boolean employeeListShow) {
		OlderEntity obj = null;
		if (id != null) {
			obj = (OlderEntity) dbManager.getById(id, OlderEntity.class);
			// 查询关联内容
			if (userShow != null && userShow.booleanValue() && obj != null && obj.getUserId() != null && obj.getUserId() > 0) {
				UserEntity user = (UserEntity) dbManager.getById(obj.getUserId(), UserEntity.class);
				obj.setUser(user);
			}
			// 查询关联内容
			if (nurseEmployeeShow != null && nurseEmployeeShow.booleanValue() && obj != null && obj.getNurseEmployeeId() != null
			        && obj.getNurseEmployeeId() > 0) {
				EmployeeEntity nurseEmployee = (EmployeeEntity) dbManager.getById(obj.getNurseEmployeeId(), EmployeeEntity.class);
				obj.setNurseEmployee(nurseEmployee);
			}
			// 查询关联内容
			if (olderSiteListShow != null && olderSiteListShow.booleanValue() && obj != null && obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(OlderSiteEntity.class, OlderSiteEntity.OLDER_ID, String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<OlderSiteEntity> olderSiteList = new ArrayList<OlderSiteEntity>();
					for (Object o : list) {
						olderSiteList.add((OlderSiteEntity) o);
					}
					obj.setOlderSiteList(olderSiteList);
				}
			}
			// 查询关联内容
			if (olderAddressListShow != null && olderAddressListShow.booleanValue() && obj != null && obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(OlderAddressEntity.class, OlderAddressEntity.OLDER_ID, String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<OlderAddressEntity> olderAddressList = new ArrayList<OlderAddressEntity>();
					for (Object o : list) {
						olderAddressList.add((OlderAddressEntity) o);
					}
					obj.setOlderAddressList(olderAddressList);
				}
			}
			// 查询关联内容
			if (olderContactListShow != null && olderContactListShow.booleanValue() && obj != null && obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(OlderContactEntity.class, OlderContactEntity.OLDER_ID, String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<OlderContactEntity> olderContactList = new ArrayList<OlderContactEntity>();
					for (Object o : list) {
						olderContactList.add((OlderContactEntity) o);
					}
					obj.setOlderContactList(olderContactList);
				}
			}
			// 查询关联内容
			if (caseRecordListShow != null && caseRecordListShow.booleanValue() && obj != null && obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(CaseRecordEntity.class, CaseRecordEntity.OLDER_ID, String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<CaseRecordEntity> caseRecordList = new ArrayList<CaseRecordEntity>();
					for (Object o : list) {
						caseRecordList.add((CaseRecordEntity) o);
					}
					obj.setCaseRecordList(caseRecordList);
				}
			}
			// 查询关联内容
			if (dailyLifeListShow != null && dailyLifeListShow.booleanValue() && obj != null && obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(DailyLifeEntity.class, DailyLifeEntity.OLDER_ID, String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<DailyLifeEntity> dailyLifeList = new ArrayList<DailyLifeEntity>();
					for (Object o : list) {
						dailyLifeList.add((DailyLifeEntity) o);
					}
					obj.setDailyLifeList(dailyLifeList);
				}
			}
			// 查询关联内容
			if (employeeListShow != null && employeeListShow.booleanValue() && obj != null && obj.getId() != null && obj.getId() > 0) {
				List<Object> rlist = dbManager
				        .searchListByColumn(OlderPrincipalEmployeeEntity.class, OlderPrincipalEmployeeEntity.OLDER_ID, String.valueOf(id));
				if (rlist != null && rlist.size() > 0) {
					for (Object robj : rlist) {
						OlderPrincipalEmployeeEntity robject = (OlderPrincipalEmployeeEntity) robj;
						Integer employeeId = robject.getPrincipalEmployeeId();
						if (employeeId != null) {
							EmployeeEntity employee = (EmployeeEntity) dbManager.getById(employeeId, EmployeeEntity.class);
							List<EmployeeEntity> employeeList = obj.getEmployeeList();
							if (employeeList == null || employeeList.size() == 0) {
								employeeList = new ArrayList<EmployeeEntity>();
							}
							employeeList.add(employee);
							obj.setEmployeeList(employeeList);
						}
					}
				}
			}
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<OlderEntity> getListByCondition(Map<String, Object> queryMap) {
		List<OlderEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		Object employeeId = queryMap.get("employeeId");
		if (employeeId != null) {
			QueryCondition qc1 = new QueryCondition(OlderPrincipalEmployeeEntity.PRINCIPAL_EMPLOYEE_ID, QueryCondition.eq, employeeId);
			List<Object> rlist = dbManager.queryByCondition(OlderPrincipalEmployeeEntity.class, qc1);
			if (rlist != null && rlist.size() > 0) {
				String strIds = "";
				for (int i = 0; i < rlist.size(); i++) {
					OlderPrincipalEmployeeEntity entity = (OlderPrincipalEmployeeEntity) rlist.get(i);
					Integer temp = entity.getOlderId();
					if (temp != null) {
						if (i == rlist.size() - 1)
							strIds = strIds + temp;
						else {
							strIds = strIds + temp + ",";
						}
					}
				}
				if (strIds != null && !"".equals(strIds)) {
					qc.andCondition(new QueryCondition(OlderEntity.ID, QueryCondition.in, strIds));
				}
			} else {
				return returnlist;
			}
		}
		list = dbManager.queryByCondition(OlderEntity.class, qc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<OlderEntity>();
			for (Object obj : list) {
				returnlist.add((OlderEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param userShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param nurseEmployeeShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param olderSiteListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param olderAddressListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param olderContactListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param caseRecordListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param dailyLifeListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param employeeListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public List<OlderEntity> getListByCondition(Map<String, Object> queryMap, List<OrderVO> orderList, Boolean userShow, Boolean nurseEmployeeShow,
	        Boolean olderSiteListShow, Boolean olderAddressListShow, Boolean olderContactListShow, Boolean caseRecordListShow, Boolean dailyLifeListShow,
	        Boolean employeeListShow) {
		List<OlderEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		Object employeeId = queryMap.get("employeeId");
		if (employeeId != null) {
			QueryCondition qc1 = new QueryCondition(OlderPrincipalEmployeeEntity.PRINCIPAL_EMPLOYEE_ID, QueryCondition.eq, employeeId);
			List<Object> rlist = dbManager.queryByCondition(OlderPrincipalEmployeeEntity.class, qc1);
			if (rlist != null && rlist.size() > 0) {
				String strIds = "";
				for (int i = 0; i < rlist.size(); i++) {
					OlderPrincipalEmployeeEntity entity = (OlderPrincipalEmployeeEntity) rlist.get(i);
					Integer temp = entity.getOlderId();
					if (temp != null) {
						if (i == rlist.size() - 1)
							strIds = strIds + temp;
						else {
							strIds = strIds + temp + ",";
						}
					}
				}
				if (strIds != null && !"".equals(strIds)) {
					qc.andCondition(new QueryCondition(OlderEntity.ID, QueryCondition.in, strIds));
				}
			} else {
				return returnlist;
			}
		}
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt, orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(OlderEntity.class, qc, oc);
		int a = 0;
		if (userShow != null && userShow.booleanValue()) {
			a++;
		}
		if (nurseEmployeeShow != null && nurseEmployeeShow.booleanValue()) {
			a++;
		}
		if (olderSiteListShow != null && olderSiteListShow.booleanValue()) {
			a++;
		}
		if (olderAddressListShow != null && olderAddressListShow.booleanValue()) {
			a++;
		}
		if (olderContactListShow != null && olderContactListShow.booleanValue()) {
			a++;
		}
		if (caseRecordListShow != null && caseRecordListShow.booleanValue()) {
			a++;
		}
		if (dailyLifeListShow != null && dailyLifeListShow.booleanValue()) {
			a++;
		}
		if (employeeListShow != null && employeeListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && list != null && list.size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < list.size(); i++) {
				OlderEntity obj = (OlderEntity) list.get(i);
				// 查询关联内容
				if (userShow != null && userShow.booleanValue() && obj != null && obj.getUserId() != null && obj.getUserId() > 0) {
					UserEntity user = (UserEntity) dbManager.getById(obj.getUserId(), UserEntity.class);
					obj.setUser(user);
				}
				// 查询关联内容
				if (nurseEmployeeShow != null && nurseEmployeeShow.booleanValue() && obj != null && obj.getNurseEmployeeId() != null
				        && obj.getNurseEmployeeId() > 0) {
					EmployeeEntity nurseEmployee = (EmployeeEntity) dbManager.getById(obj.getNurseEmployeeId(), EmployeeEntity.class);
					obj.setNurseEmployee(nurseEmployee);
				}
				// 查询关联内容
				if (olderSiteListShow != null && olderSiteListShow.booleanValue() && obj != null && obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(OlderSiteEntity.class, OlderSiteEntity.OLDER_ID, String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<OlderSiteEntity> olderSiteList = new ArrayList<OlderSiteEntity>();
						for (Object o : objList) {
							olderSiteList.add((OlderSiteEntity) o);
						}
						obj.setOlderSiteList(olderSiteList);
					}
				}
				// 查询关联内容
				if (olderAddressListShow != null && olderAddressListShow.booleanValue() && obj != null && obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(OlderAddressEntity.class, OlderAddressEntity.OLDER_ID, String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<OlderAddressEntity> olderAddressList = new ArrayList<OlderAddressEntity>();
						for (Object o : objList) {
							olderAddressList.add((OlderAddressEntity) o);
						}
						obj.setOlderAddressList(olderAddressList);
					}
				}
				// 查询关联内容
				if (olderContactListShow != null && olderContactListShow.booleanValue() && obj != null && obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(OlderContactEntity.class, OlderContactEntity.OLDER_ID, String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<OlderContactEntity> olderContactList = new ArrayList<OlderContactEntity>();
						for (Object o : objList) {
							olderContactList.add((OlderContactEntity) o);
						}
						obj.setOlderContactList(olderContactList);
					}
				}
				// 查询关联内容
				if (caseRecordListShow != null && caseRecordListShow.booleanValue() && obj != null && obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(CaseRecordEntity.class, CaseRecordEntity.OLDER_ID, String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<CaseRecordEntity> caseRecordList = new ArrayList<CaseRecordEntity>();
						for (Object o : objList) {
							caseRecordList.add((CaseRecordEntity) o);
						}
						obj.setCaseRecordList(caseRecordList);
					}
				}
				// 查询关联内容
				if (dailyLifeListShow != null && dailyLifeListShow.booleanValue() && obj != null && obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(DailyLifeEntity.class, DailyLifeEntity.OLDER_ID, String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<DailyLifeEntity> dailyLifeList = new ArrayList<DailyLifeEntity>();
						for (Object o : objList) {
							dailyLifeList.add((DailyLifeEntity) o);
						}
						obj.setDailyLifeList(dailyLifeList);
					}
				}
				// 查询关联内容
				if (employeeListShow != null && employeeListShow.booleanValue() && obj != null && obj.getId() != null && obj.getId() > 0) {
					List<Object> rlist = dbManager.searchListByColumn(OlderPrincipalEmployeeEntity.class, OlderPrincipalEmployeeEntity.OLDER_ID,
					        String.valueOf(obj.getId()));
					if (rlist != null && rlist.size() > 0) {
						for (Object robj : rlist) {
							OlderPrincipalEmployeeEntity robject = (OlderPrincipalEmployeeEntity) robj;
							Integer objId = robject.getPrincipalEmployeeId();
							if (objId != null) {
								EmployeeEntity employee = (EmployeeEntity) dbManager.getById(objId, EmployeeEntity.class);
								List<EmployeeEntity> employeeList = obj.getEmployeeList();
								if (employeeList == null || employeeList.size() == 0) {
									employeeList = new ArrayList<EmployeeEntity>();
								}
								employeeList.add(employee);
								obj.setEmployeeList(employeeList);
							}
						}
					}
				}
				result.add(obj);
			}
			list = result;
		}
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<OlderEntity>();
			for (Object obj : list) {
				returnlist.add((OlderEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap, int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		Object employeeId = queryMap.get("employeeId");
		if (employeeId != null) {
			QueryCondition qc1 = new QueryCondition(OlderPrincipalEmployeeEntity.PRINCIPAL_EMPLOYEE_ID, QueryCondition.eq, employeeId);
			List<Object> rlist = dbManager.queryByCondition(OlderPrincipalEmployeeEntity.class, qc1);
			if (rlist != null && rlist.size() > 0) {
				String strIds = "";
				for (int i = 0; i < rlist.size(); i++) {
					OlderPrincipalEmployeeEntity entity = (OlderPrincipalEmployeeEntity) rlist.get(i);
					Integer temp = entity.getOlderId();
					if (temp != null) {
						if (i == rlist.size() - 1)
							strIds = strIds + temp;
						else {
							strIds = strIds + temp + ",";
						}
					}
				}
				if (strIds != null && !"".equals(strIds)) {
					qc.andCondition(new QueryCondition(OlderEntity.ID, QueryCondition.in, strIds));
				}
			} else {
				return pagelist;
			}
		}
		pagelist = dbManager.queryByCondition(OlderEntity.class, qc, pageno, pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @param userShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param nurseEmployeeShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param olderSiteListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param olderAddressListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param olderContactListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param caseRecordListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param dailyLifeListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param employeeListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap, List<OrderVO> orderList, int pageno, int pagesize, Boolean userShow,
	        Boolean nurseEmployeeShow, Boolean olderSiteListShow, Boolean olderAddressListShow, Boolean olderContactListShow, Boolean caseRecordListShow,
	        Boolean dailyLifeListShow, Boolean employeeListShow) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		Object employeeId = queryMap.get("employeeId");
		if (employeeId != null) {
			QueryCondition qc1 = new QueryCondition(OlderPrincipalEmployeeEntity.PRINCIPAL_EMPLOYEE_ID, QueryCondition.eq, employeeId);
			List<Object> rlist = dbManager.queryByCondition(OlderPrincipalEmployeeEntity.class, qc1);
			if (rlist != null && rlist.size() > 0) {
				String strIds = "";
				for (int i = 0; i < rlist.size(); i++) {
					OlderPrincipalEmployeeEntity entity = (OlderPrincipalEmployeeEntity) rlist.get(i);
					Integer temp = entity.getOlderId();
					if (temp != null) {
						if (i == rlist.size() - 1)
							strIds = strIds + temp;
						else {
							strIds = strIds + temp + ",";
						}
					}
				}
				if (strIds != null && !"".equals(strIds)) {
					qc.andCondition(new QueryCondition(OlderEntity.ID, QueryCondition.in, strIds));
				}
			} else {
				return pagelist;
			}
		}
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt, orderType));
					}
				}

			}
		}
		// 数据权限
		List<QueryCondition> dataRuleQclist = null;
		List<Map<String, Object>> dataRuleMapList = (List<Map<String, Object>>) queryMap.get("dataRuleMapList");
		if (dataRuleMapList != null && dataRuleMapList.size() > 0) {
			dataRuleQclist = new ArrayList<QueryCondition>();
			for (Map<String, Object> dataRuleMap : dataRuleMapList) {
				QueryCondition dataRuleQc = changeMapToQc(dataRuleMap);
				dataRuleQclist.add(dataRuleQc);
			}
		}
		pagelist = dbManager.queryByConditions(OlderEntity.class, qc, dataRuleQclist, oc, pageno, pagesize);
		int a = 0;
		if (userShow != null && userShow.booleanValue()) {
			a++;
		}
		if (nurseEmployeeShow != null && nurseEmployeeShow.booleanValue()) {
			a++;
		}
		if (olderSiteListShow != null && olderSiteListShow.booleanValue()) {
			a++;
		}
		if (olderAddressListShow != null && olderAddressListShow.booleanValue()) {
			a++;
		}
		if (olderContactListShow != null && olderContactListShow.booleanValue()) {
			a++;
		}
		if (caseRecordListShow != null && caseRecordListShow.booleanValue()) {
			a++;
		}
		if (dailyLifeListShow != null && dailyLifeListShow.booleanValue()) {
			a++;
		}
		if (employeeListShow != null && employeeListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && pagelist != null && pagelist.getResultList() != null && pagelist.getResultList().size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < pagelist.getResultList().size(); i++) {
				OlderEntity obj = (OlderEntity) pagelist.getResultList().get(i);
				// 查询关联内容
				if (userShow != null && userShow.booleanValue() && obj != null && obj.getUserId() != null && obj.getUserId() > 0) {
					UserEntity user = (UserEntity) dbManager.getById(obj.getUserId(), UserEntity.class);
					obj.setUser(user);
				}
				// 查询关联内容
				if (nurseEmployeeShow != null && nurseEmployeeShow.booleanValue() && obj != null && obj.getNurseEmployeeId() != null
				        && obj.getNurseEmployeeId() > 0) {
					EmployeeEntity nurseEmployee = (EmployeeEntity) dbManager.getById(obj.getNurseEmployeeId(), EmployeeEntity.class);
					obj.setNurseEmployee(nurseEmployee);
				}
				// 查询关联内容
				if (olderSiteListShow != null && olderSiteListShow.booleanValue() && obj != null && obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(OlderSiteEntity.class, OlderSiteEntity.OLDER_ID, String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<OlderSiteEntity> olderSiteList = new ArrayList<OlderSiteEntity>();
						for (Object o : objList) {
							olderSiteList.add((OlderSiteEntity) o);
						}
						obj.setOlderSiteList(olderSiteList);
					}
				}
				// 查询关联内容
				if (olderAddressListShow != null && olderAddressListShow.booleanValue() && obj != null && obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(OlderAddressEntity.class, OlderAddressEntity.OLDER_ID, String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<OlderAddressEntity> olderAddressList = new ArrayList<OlderAddressEntity>();
						for (Object o : objList) {
							olderAddressList.add((OlderAddressEntity) o);
						}
						obj.setOlderAddressList(olderAddressList);
					}
				}
				// 查询关联内容
				if (olderContactListShow != null && olderContactListShow.booleanValue() && obj != null && obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(OlderContactEntity.class, OlderContactEntity.OLDER_ID, String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<OlderContactEntity> olderContactList = new ArrayList<OlderContactEntity>();
						for (Object o : objList) {
							olderContactList.add((OlderContactEntity) o);
						}
						obj.setOlderContactList(olderContactList);
					}
				}
				// 查询关联内容
				if (caseRecordListShow != null && caseRecordListShow.booleanValue() && obj != null && obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(CaseRecordEntity.class, CaseRecordEntity.OLDER_ID, String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<CaseRecordEntity> caseRecordList = new ArrayList<CaseRecordEntity>();
						for (Object o : objList) {
							caseRecordList.add((CaseRecordEntity) o);
						}
						obj.setCaseRecordList(caseRecordList);
					}
				}
				// 查询关联内容
				if (dailyLifeListShow != null && dailyLifeListShow.booleanValue() && obj != null && obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(DailyLifeEntity.class, DailyLifeEntity.OLDER_ID, String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<DailyLifeEntity> dailyLifeList = new ArrayList<DailyLifeEntity>();
						for (Object o : objList) {
							dailyLifeList.add((DailyLifeEntity) o);
						}
						obj.setDailyLifeList(dailyLifeList);
					}
				}
				// 查询关联内容
				if (employeeListShow != null && employeeListShow.booleanValue() && obj != null && obj.getId() != null && obj.getId() > 0) {
					List<Object> rlist = dbManager.searchListByColumn(OlderPrincipalEmployeeEntity.class, OlderPrincipalEmployeeEntity.OLDER_ID,
					        String.valueOf(obj.getId()));
					if (rlist != null && rlist.size() > 0) {
						for (Object robj : rlist) {
							OlderPrincipalEmployeeEntity robject = (OlderPrincipalEmployeeEntity) robj;
							Integer objId = robject.getPrincipalEmployeeId();
							if (objId != null) {
								EmployeeEntity employee = (EmployeeEntity) dbManager.getById(objId, EmployeeEntity.class);
								List<EmployeeEntity> employeeList = obj.getEmployeeList();
								if (employeeList == null || employeeList.size() == 0) {
									employeeList = new ArrayList<EmployeeEntity>();
								}
								employeeList.add(employee);
								obj.setEmployeeList(employeeList);
							}
						}
					}
				}
				result.add(obj);
			}
			pagelist.setResultList(result);
		}
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id, Boolean delUser, Boolean delNurseEmployee, Boolean delOlderSiteList, Boolean delOlderAddressList,
	        Boolean delOlderContactList, Boolean delCaseRecordList, Boolean delDailyLifeList, Boolean delOlderEmployeeList) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delUser != null && delUser.booleanValue()) {
					OlderEntity older = (OlderEntity) dbManager.getById(id, OlderEntity.class);
					if (older != null && older.getUserId() != null) {
						dbManager.delNoTransaction(older.getUserId(), UserEntity.class);
					}
				}
				// 删除关联信息
				if (delNurseEmployee != null && delNurseEmployee.booleanValue()) {
					OlderEntity older = (OlderEntity) dbManager.getById(id, OlderEntity.class);
					if (older != null && older.getNurseEmployeeId() != null) {
						dbManager.delNoTransaction(older.getNurseEmployeeId(), EmployeeEntity.class);
					}
				}
				// 删除关联信息
				if (delOlderSiteList != null && delOlderSiteList.booleanValue()) {
					QueryCondition qc = new QueryCondition(OlderSiteEntity.OLDER_ID, QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(OlderSiteEntity.class, qc);
				}
				// 删除关联信息
				if (delOlderAddressList != null && delOlderAddressList.booleanValue()) {
					QueryCondition qc = new QueryCondition(OlderAddressEntity.OLDER_ID, QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(OlderAddressEntity.class, qc);
				}
				// 删除关联信息
				if (delOlderContactList != null && delOlderContactList.booleanValue()) {
					QueryCondition qc = new QueryCondition(OlderContactEntity.OLDER_ID, QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(OlderContactEntity.class, qc);
				}
				// 删除关联信息
				if (delCaseRecordList != null && delCaseRecordList.booleanValue()) {
					QueryCondition qc = new QueryCondition(CaseRecordEntity.OLDER_ID, QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(CaseRecordEntity.class, qc);
				}
				// 删除关联信息
				if (delDailyLifeList != null && delDailyLifeList.booleanValue()) {
					QueryCondition qc = new QueryCondition(DailyLifeEntity.OLDER_ID, QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(DailyLifeEntity.class, qc);
				}
				// 删除关联信息
				if (delOlderEmployeeList != null && delOlderEmployeeList.booleanValue()) {
					QueryCondition qc = new QueryCondition(OlderPrincipalEmployeeEntity.OLDER_ID, QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(OlderPrincipalEmployeeEntity.class, qc);
				}
				result = dbManager.delNoTransaction(id, OlderEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(OlderEntity.ID, QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(OlderEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap, Boolean delUser, Boolean delNurseEmployee, Boolean delOlderSiteList, Boolean delOlderAddressList,
	        Boolean delOlderContactList, Boolean delCaseRecordList, Boolean delDailyLifeList, Boolean delOlderEmployeeList) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		Object employeeId = queryMap.get("employeeId");
		if (employeeId != null) {
			QueryCondition qc1 = new QueryCondition(OlderPrincipalEmployeeEntity.PRINCIPAL_EMPLOYEE_ID, QueryCondition.eq, employeeId);
			List<Object> rlist = dbManager.queryByCondition(OlderPrincipalEmployeeEntity.class, qc1);
			if (rlist != null && rlist.size() > 0) {
				String strIds = "";
				for (int i = 0; i < rlist.size(); i++) {
					OlderPrincipalEmployeeEntity entity = (OlderPrincipalEmployeeEntity) rlist.get(i);
					Integer temp = entity.getOlderId();
					if (temp != null) {
						if (i == rlist.size() - 1)
							strIds = strIds + temp;
						else {
							strIds = strIds + temp + ",";
						}
					}
				}
				if (strIds != null && !"".equals(strIds)) {
					qc.andCondition(new QueryCondition(OlderEntity.ID, QueryCondition.in, strIds));
				}
			} else {
				return result;
			}
		}
		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delUser != null && delUser.booleanValue()) {
					List<Object> list = dbManager.queryByConditionNoTransaction(OlderEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							OlderEntity entity = (OlderEntity) obj;
							strIds += entity.getUserId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(UserEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(UserEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delNurseEmployee != null && delNurseEmployee.booleanValue()) {
					List<Object> list = dbManager.queryByConditionNoTransaction(OlderEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							OlderEntity entity = (OlderEntity) obj;
							strIds += entity.getNurseEmployeeId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(EmployeeEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(EmployeeEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delOlderSiteList != null && delOlderSiteList.booleanValue()) {
					List<Object> list = dbManager.queryByConditionNoTransaction(OlderEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							OlderEntity entity = (OlderEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(OlderSiteEntity.OLDER_ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(OlderSiteEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delOlderAddressList != null && delOlderAddressList.booleanValue()) {
					List<Object> list = dbManager.queryByConditionNoTransaction(OlderEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							OlderEntity entity = (OlderEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(OlderAddressEntity.OLDER_ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(OlderAddressEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delOlderContactList != null && delOlderContactList.booleanValue()) {
					List<Object> list = dbManager.queryByConditionNoTransaction(OlderEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							OlderEntity entity = (OlderEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(OlderContactEntity.OLDER_ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(OlderContactEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delCaseRecordList != null && delCaseRecordList.booleanValue()) {
					List<Object> list = dbManager.queryByConditionNoTransaction(OlderEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							OlderEntity entity = (OlderEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(CaseRecordEntity.OLDER_ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(CaseRecordEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delDailyLifeList != null && delDailyLifeList.booleanValue()) {
					List<Object> list = dbManager.queryByConditionNoTransaction(OlderEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							OlderEntity entity = (OlderEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(DailyLifeEntity.OLDER_ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(DailyLifeEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delOlderEmployeeList != null && delOlderEmployeeList.booleanValue()) {
					List<Object> list = dbManager.queryByConditionNoTransaction(OlderEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							OlderEntity entity = (OlderEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(OlderPrincipalEmployeeEntity.OLDER_ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(OlderPrincipalEmployeeEntity.class, qc1);
					}

				}
				result = dbManager.delByConditionsNoTransaction(OlderEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	private QueryCondition changeMapToQc(Map<String, Object> queryMap) {
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object nurseEmployeeId = queryMap.get("nurseEmployeeId");
		Object nurseEmployeeId_gt = queryMap.get("nurseEmployeeId_gt");
		Object nurseEmployeeId_ge = queryMap.get("nurseEmployeeId_ge");
		Object nurseEmployeeId_lt = queryMap.get("nurseEmployeeId_lt");
		Object nurseEmployeeId_le = queryMap.get("nurseEmployeeId_le");
		Object nurseEmployeeId_in = queryMap.get("nurseEmployeeId_in");
		Object userId = queryMap.get("userId");
		Object userId_gt = queryMap.get("userId_gt");
		Object userId_ge = queryMap.get("userId_ge");
		Object userId_lt = queryMap.get("userId_lt");
		Object userId_le = queryMap.get("userId_le");
		Object userId_in = queryMap.get("userId_in");
		Object memberNum = queryMap.get("memberNum");
		Object memberNum_like = queryMap.get("memberNum_like");
		Object memberNum_isNull = queryMap.get("memberNum_isNull");
		Object memberNum_isNotNull = queryMap.get("memberNum_isNotNull");
		Object memberNum_in = queryMap.get("memberNum_in");
		Object memberCard = queryMap.get("memberCard");
		Object memberCard_like = queryMap.get("memberCard_like");
		Object memberCard_isNull = queryMap.get("memberCard_isNull");
		Object memberCard_isNotNull = queryMap.get("memberCard_isNotNull");
		Object memberCard_in = queryMap.get("memberCard_in");
		Object memberSource = queryMap.get("memberSource");
		Object memberSource_like = queryMap.get("memberSource_like");
		Object memberSource_isNull = queryMap.get("memberSource_isNull");
		Object memberSource_isNotNull = queryMap.get("memberSource_isNotNull");
		Object memberSource_in = queryMap.get("memberSource_in");
		Object attentionPoint = queryMap.get("attentionPoint");
		Object attentionPoint_like = queryMap.get("attentionPoint_like");
		Object attentionPoint_isNull = queryMap.get("attentionPoint_isNull");
		Object attentionPoint_isNotNull = queryMap.get("attentionPoint_isNotNull");
		Object attentionPoint_in = queryMap.get("attentionPoint_in");
		Object nurseLevel = queryMap.get("nurseLevel");
		Object nurseLevel_gt = queryMap.get("nurseLevel_gt");
		Object nurseLevel_ge = queryMap.get("nurseLevel_ge");
		Object nurseLevel_lt = queryMap.get("nurseLevel_lt");
		Object nurseLevel_le = queryMap.get("nurseLevel_le");
		Object nurseLevel_in = queryMap.get("nurseLevel_in");
		Object memberStatus = queryMap.get("memberStatus");
		Object memberStatus_gt = queryMap.get("memberStatus_gt");
		Object memberStatus_ge = queryMap.get("memberStatus_ge");
		Object memberStatus_lt = queryMap.get("memberStatus_lt");
		Object memberStatus_le = queryMap.get("memberStatus_le");
		Object memberStatus_in = queryMap.get("memberStatus_in");
		Object lastAssessmentDate_gt = queryMap.get("lastAssessmentDate_gt");
		Object lastAssessmentDate_ge = queryMap.get("lastAssessmentDate_ge");
		Object lastAssessmentDate_lt = queryMap.get("lastAssessmentDate_lt");
		Object lastAssessmentDate_le = queryMap.get("lastAssessmentDate_le");
		Object assessmentCycle = queryMap.get("assessmentCycle");
		Object assessmentCycle_gt = queryMap.get("assessmentCycle_gt");
		Object assessmentCycle_ge = queryMap.get("assessmentCycle_ge");
		Object assessmentCycle_lt = queryMap.get("assessmentCycle_lt");
		Object assessmentCycle_le = queryMap.get("assessmentCycle_le");
		Object assessmentCycle_in = queryMap.get("assessmentCycle_in");
		Object chargeMonth = queryMap.get("chargeMonth");
		Object chargeMonth_gt = queryMap.get("chargeMonth_gt");
		Object chargeMonth_ge = queryMap.get("chargeMonth_ge");
		Object chargeMonth_lt = queryMap.get("chargeMonth_lt");
		Object chargeMonth_le = queryMap.get("chargeMonth_le");
		Object chargeMonth_in = queryMap.get("chargeMonth_in");
		Object requiredServiceTimes = queryMap.get("requiredServiceTimes");
		Object requiredServiceTimes_gt = queryMap.get("requiredServiceTimes_gt");
		Object requiredServiceTimes_ge = queryMap.get("requiredServiceTimes_ge");
		Object requiredServiceTimes_lt = queryMap.get("requiredServiceTimes_lt");
		Object requiredServiceTimes_le = queryMap.get("requiredServiceTimes_le");
		Object requiredServiceTimes_in = queryMap.get("requiredServiceTimes_in");
		Object alreadyServiceTimes = queryMap.get("alreadyServiceTimes");
		Object alreadyServiceTimes_gt = queryMap.get("alreadyServiceTimes_gt");
		Object alreadyServiceTimes_ge = queryMap.get("alreadyServiceTimes_ge");
		Object alreadyServiceTimes_lt = queryMap.get("alreadyServiceTimes_lt");
		Object alreadyServiceTimes_le = queryMap.get("alreadyServiceTimes_le");
		Object alreadyServiceTimes_in = queryMap.get("alreadyServiceTimes_in");
		Object mainPhoto = queryMap.get("mainPhoto");
		Object mainPhoto_like = queryMap.get("mainPhoto_like");
		Object mainPhoto_isNull = queryMap.get("mainPhoto_isNull");
		Object mainPhoto_isNotNull = queryMap.get("mainPhoto_isNotNull");
		Object mainPhoto_in = queryMap.get("mainPhoto_in");
		Object name = queryMap.get("name");
		Object name_like = queryMap.get("name_like");
		Object name_isNull = queryMap.get("name_isNull");
		Object name_isNotNull = queryMap.get("name_isNotNull");
		Object name_in = queryMap.get("name_in");
		Object idnumber = queryMap.get("idnumber");
		Object idnumber_like = queryMap.get("idnumber_like");
		Object idnumber_isNull = queryMap.get("idnumber_isNull");
		Object idnumber_isNotNull = queryMap.get("idnumber_isNotNull");
		Object idnumber_in = queryMap.get("idnumber_in");
		Object socialSecurityNumber = queryMap.get("socialSecurityNumber");
		Object socialSecurityNumber_like = queryMap.get("socialSecurityNumber_like");
		Object socialSecurityNumber_isNull = queryMap.get("socialSecurityNumber_isNull");
		Object socialSecurityNumber_isNotNull = queryMap.get("socialSecurityNumber_isNotNull");
		Object socialSecurityNumber_in = queryMap.get("socialSecurityNumber_in");
		Object gender = queryMap.get("gender");
		Object gender_like = queryMap.get("gender_like");
		Object gender_isNull = queryMap.get("gender_isNull");
		Object gender_isNotNull = queryMap.get("gender_isNotNull");
		Object gender_in = queryMap.get("gender_in");
		Object birthdate_gt = queryMap.get("birthdate_gt");
		Object birthdate_ge = queryMap.get("birthdate_ge");
		Object birthdate_lt = queryMap.get("birthdate_lt");
		Object birthdate_le = queryMap.get("birthdate_le");
		Object nation = queryMap.get("nation");
		Object nation_like = queryMap.get("nation_like");
		Object nation_isNull = queryMap.get("nation_isNull");
		Object nation_isNotNull = queryMap.get("nation_isNotNull");
		Object nation_in = queryMap.get("nation_in");
		Object education = queryMap.get("education");
		Object education_like = queryMap.get("education_like");
		Object education_isNull = queryMap.get("education_isNull");
		Object education_isNotNull = queryMap.get("education_isNotNull");
		Object education_in = queryMap.get("education_in");
		Object maritalStatus = queryMap.get("maritalStatus");
		Object maritalStatus_like = queryMap.get("maritalStatus_like");
		Object maritalStatus_isNull = queryMap.get("maritalStatus_isNull");
		Object maritalStatus_isNotNull = queryMap.get("maritalStatus_isNotNull");
		Object maritalStatus_in = queryMap.get("maritalStatus_in");
		Object occupation = queryMap.get("occupation");
		Object occupation_like = queryMap.get("occupation_like");
		Object occupation_isNull = queryMap.get("occupation_isNull");
		Object occupation_isNotNull = queryMap.get("occupation_isNotNull");
		Object occupation_in = queryMap.get("occupation_in");
		Object homeTel = queryMap.get("homeTel");
		Object homeTel_like = queryMap.get("homeTel_like");
		Object homeTel_isNull = queryMap.get("homeTel_isNull");
		Object homeTel_isNotNull = queryMap.get("homeTel_isNotNull");
		Object homeTel_in = queryMap.get("homeTel_in");
		Object mobileTel = queryMap.get("mobileTel");
		Object mobileTel_like = queryMap.get("mobileTel_like");
		Object mobileTel_isNull = queryMap.get("mobileTel_isNull");
		Object mobileTel_isNotNull = queryMap.get("mobileTel_isNotNull");
		Object mobileTel_in = queryMap.get("mobileTel_in");
		Object bloodType = queryMap.get("bloodType");
		Object bloodType_like = queryMap.get("bloodType_like");
		Object bloodType_isNull = queryMap.get("bloodType_isNull");
		Object bloodType_isNotNull = queryMap.get("bloodType_isNotNull");
		Object bloodType_in = queryMap.get("bloodType_in");
		Object symptom = queryMap.get("symptom");
		Object symptom_like = queryMap.get("symptom_like");
		Object symptom_isNull = queryMap.get("symptom_isNull");
		Object symptom_isNotNull = queryMap.get("symptom_isNotNull");
		Object symptom_in = queryMap.get("symptom_in");
		Object symptomOther = queryMap.get("symptomOther");
		Object symptomOther_like = queryMap.get("symptomOther_like");
		Object symptomOther_isNull = queryMap.get("symptomOther_isNull");
		Object symptomOther_isNotNull = queryMap.get("symptomOther_isNotNull");
		Object symptomOther_in = queryMap.get("symptomOther_in");
		Object drugAllergy = queryMap.get("drugAllergy");
		Object drugAllergy_like = queryMap.get("drugAllergy_like");
		Object drugAllergy_isNull = queryMap.get("drugAllergy_isNull");
		Object drugAllergy_isNotNull = queryMap.get("drugAllergy_isNotNull");
		Object drugAllergy_in = queryMap.get("drugAllergy_in");
		Object drugAllergyOther = queryMap.get("drugAllergyOther");
		Object drugAllergyOther_like = queryMap.get("drugAllergyOther_like");
		Object drugAllergyOther_isNull = queryMap.get("drugAllergyOther_isNull");
		Object drugAllergyOther_isNotNull = queryMap.get("drugAllergyOther_isNotNull");
		Object drugAllergyOther_in = queryMap.get("drugAllergyOther_in");
		Object cognitive = queryMap.get("cognitive");
		Object cognitive_like = queryMap.get("cognitive_like");
		Object cognitive_isNull = queryMap.get("cognitive_isNull");
		Object cognitive_isNotNull = queryMap.get("cognitive_isNotNull");
		Object cognitive_in = queryMap.get("cognitive_in");
		Object emotion = queryMap.get("emotion");
		Object emotion_like = queryMap.get("emotion_like");
		Object emotion_isNull = queryMap.get("emotion_isNull");
		Object emotion_isNotNull = queryMap.get("emotion_isNotNull");
		Object emotion_in = queryMap.get("emotion_in");
		Object sportsFre = queryMap.get("sportsFre");
		Object sportsFre_like = queryMap.get("sportsFre_like");
		Object sportsFre_isNull = queryMap.get("sportsFre_isNull");
		Object sportsFre_isNotNull = queryMap.get("sportsFre_isNotNull");
		Object sportsFre_in = queryMap.get("sportsFre_in");
		Object sportsTime = queryMap.get("sportsTime");
		Object sportsTime_gt = queryMap.get("sportsTime_gt");
		Object sportsTime_ge = queryMap.get("sportsTime_ge");
		Object sportsTime_lt = queryMap.get("sportsTime_lt");
		Object sportsTime_le = queryMap.get("sportsTime_le");
		Object sportsTime_in = queryMap.get("sportsTime_in");
		Object holdSportsTime = queryMap.get("holdSportsTime");
		Object holdSportsTime_gt = queryMap.get("holdSportsTime_gt");
		Object holdSportsTime_ge = queryMap.get("holdSportsTime_ge");
		Object holdSportsTime_lt = queryMap.get("holdSportsTime_lt");
		Object holdSportsTime_le = queryMap.get("holdSportsTime_le");
		Object holdSportsTime_in = queryMap.get("holdSportsTime_in");
		Object sportsType = queryMap.get("sportsType");
		Object sportsType_like = queryMap.get("sportsType_like");
		Object sportsType_isNull = queryMap.get("sportsType_isNull");
		Object sportsType_isNotNull = queryMap.get("sportsType_isNotNull");
		Object sportsType_in = queryMap.get("sportsType_in");
		Object diet = queryMap.get("diet");
		Object diet_like = queryMap.get("diet_like");
		Object diet_isNull = queryMap.get("diet_isNull");
		Object diet_isNotNull = queryMap.get("diet_isNotNull");
		Object diet_in = queryMap.get("diet_in");
		Object smoking = queryMap.get("smoking");
		Object smoking_like = queryMap.get("smoking_like");
		Object smoking_isNull = queryMap.get("smoking_isNull");
		Object smoking_isNotNull = queryMap.get("smoking_isNotNull");
		Object smoking_in = queryMap.get("smoking_in");
		Object smokingDay = queryMap.get("smokingDay");
		Object smokingDay_gt = queryMap.get("smokingDay_gt");
		Object smokingDay_ge = queryMap.get("smokingDay_ge");
		Object smokingDay_lt = queryMap.get("smokingDay_lt");
		Object smokingDay_le = queryMap.get("smokingDay_le");
		Object smokingDay_in = queryMap.get("smokingDay_in");
		Object quitAlcohol = queryMap.get("quitAlcohol");
		Object quitAlcohol_like = queryMap.get("quitAlcohol_like");
		Object quitAlcohol_isNull = queryMap.get("quitAlcohol_isNull");
		Object quitAlcohol_isNotNull = queryMap.get("quitAlcohol_isNotNull");
		Object quitAlcohol_in = queryMap.get("quitAlcohol_in");
		Object quitAlcoholAge = queryMap.get("quitAlcoholAge");
		Object quitAlcoholAge_gt = queryMap.get("quitAlcoholAge_gt");
		Object quitAlcoholAge_ge = queryMap.get("quitAlcoholAge_ge");
		Object quitAlcoholAge_lt = queryMap.get("quitAlcoholAge_lt");
		Object quitAlcoholAge_le = queryMap.get("quitAlcoholAge_le");
		Object quitAlcoholAge_in = queryMap.get("quitAlcoholAge_in");
		Object startAlcoholAge = queryMap.get("startAlcoholAge");
		Object startAlcoholAge_gt = queryMap.get("startAlcoholAge_gt");
		Object startAlcoholAge_ge = queryMap.get("startAlcoholAge_ge");
		Object startAlcoholAge_lt = queryMap.get("startAlcoholAge_lt");
		Object startAlcoholAge_le = queryMap.get("startAlcoholAge_le");
		Object startAlcoholAge_in = queryMap.get("startAlcoholAge_in");
		Object drunkYear = queryMap.get("drunkYear");
		Object drunkYear_gt = queryMap.get("drunkYear_gt");
		Object drunkYear_ge = queryMap.get("drunkYear_ge");
		Object drunkYear_lt = queryMap.get("drunkYear_lt");
		Object drunkYear_le = queryMap.get("drunkYear_le");
		Object drunkYear_in = queryMap.get("drunkYear_in");
		Object alcoholType = queryMap.get("alcoholType");
		Object alcoholType_like = queryMap.get("alcoholType_like");
		Object alcoholType_isNull = queryMap.get("alcoholType_isNull");
		Object alcoholType_isNotNull = queryMap.get("alcoholType_isNotNull");
		Object alcoholType_in = queryMap.get("alcoholType_in");
		Object alcoholTypeOther = queryMap.get("alcoholTypeOther");
		Object alcoholTypeOther_like = queryMap.get("alcoholTypeOther_like");
		Object alcoholTypeOther_isNull = queryMap.get("alcoholTypeOther_isNull");
		Object alcoholTypeOther_isNotNull = queryMap.get("alcoholTypeOther_isNotNull");
		Object alcoholTypeOther_in = queryMap.get("alcoholTypeOther_in");
		Object brainBloodVessel = queryMap.get("brainBloodVessel");
		Object brainBloodVessel_like = queryMap.get("brainBloodVessel_like");
		Object brainBloodVessel_isNull = queryMap.get("brainBloodVessel_isNull");
		Object brainBloodVessel_isNotNull = queryMap.get("brainBloodVessel_isNotNull");
		Object brainBloodVessel_in = queryMap.get("brainBloodVessel_in");
		Object brainBloodVesselOther = queryMap.get("brainBloodVesselOther");
		Object brainBloodVesselOther_like = queryMap.get("brainBloodVesselOther_like");
		Object brainBloodVesselOther_isNull = queryMap.get("brainBloodVesselOther_isNull");
		Object brainBloodVesselOther_isNotNull = queryMap.get("brainBloodVesselOther_isNotNull");
		Object brainBloodVesselOther_in = queryMap.get("brainBloodVesselOther_in");
		Object kindney = queryMap.get("kindney");
		Object kindney_like = queryMap.get("kindney_like");
		Object kindney_isNull = queryMap.get("kindney_isNull");
		Object kindney_isNotNull = queryMap.get("kindney_isNotNull");
		Object kindney_in = queryMap.get("kindney_in");
		Object kindneyOther = queryMap.get("kindneyOther");
		Object kindneyOther_like = queryMap.get("kindneyOther_like");
		Object kindneyOther_isNull = queryMap.get("kindneyOther_isNull");
		Object kindneyOther_isNotNull = queryMap.get("kindneyOther_isNotNull");
		Object kindneyOther_in = queryMap.get("kindneyOther_in");
		Object heart = queryMap.get("heart");
		Object heart_like = queryMap.get("heart_like");
		Object heart_isNull = queryMap.get("heart_isNull");
		Object heart_isNotNull = queryMap.get("heart_isNotNull");
		Object heart_in = queryMap.get("heart_in");
		Object heartOther = queryMap.get("heartOther");
		Object heartOther_like = queryMap.get("heartOther_like");
		Object heartOther_isNull = queryMap.get("heartOther_isNull");
		Object heartOther_isNotNull = queryMap.get("heartOther_isNotNull");
		Object heartOther_in = queryMap.get("heartOther_in");
		Object bloodVessel = queryMap.get("bloodVessel");
		Object bloodVessel_like = queryMap.get("bloodVessel_like");
		Object bloodVessel_isNull = queryMap.get("bloodVessel_isNull");
		Object bloodVessel_isNotNull = queryMap.get("bloodVessel_isNotNull");
		Object bloodVessel_in = queryMap.get("bloodVessel_in");
		Object bloodVesselOther = queryMap.get("bloodVesselOther");
		Object bloodVesselOther_like = queryMap.get("bloodVesselOther_like");
		Object bloodVesselOther_isNull = queryMap.get("bloodVesselOther_isNull");
		Object bloodVesselOther_isNotNull = queryMap.get("bloodVesselOther_isNotNull");
		Object bloodVesselOther_in = queryMap.get("bloodVesselOther_in");
		Object eye = queryMap.get("eye");
		Object eye_like = queryMap.get("eye_like");
		Object eye_isNull = queryMap.get("eye_isNull");
		Object eye_isNotNull = queryMap.get("eye_isNotNull");
		Object eye_in = queryMap.get("eye_in");
		Object eyeOther = queryMap.get("eyeOther");
		Object eyeOther_like = queryMap.get("eyeOther_like");
		Object eyeOther_isNull = queryMap.get("eyeOther_isNull");
		Object eyeOther_isNotNull = queryMap.get("eyeOther_isNotNull");
		Object eyeOther_in = queryMap.get("eyeOther_in");
		Object otherDisease = queryMap.get("otherDisease");
		Object otherDisease_like = queryMap.get("otherDisease_like");
		Object otherDisease_isNull = queryMap.get("otherDisease_isNull");
		Object otherDisease_isNotNull = queryMap.get("otherDisease_isNotNull");
		Object otherDisease_in = queryMap.get("otherDisease_in");
		Object serviceProvinceId = queryMap.get("serviceProvinceId");
		Object serviceProvinceId_gt = queryMap.get("serviceProvinceId_gt");
		Object serviceProvinceId_ge = queryMap.get("serviceProvinceId_ge");
		Object serviceProvinceId_lt = queryMap.get("serviceProvinceId_lt");
		Object serviceProvinceId_le = queryMap.get("serviceProvinceId_le");
		Object serviceProvinceId_in = queryMap.get("serviceProvinceId_in");
		Object serviceCityId = queryMap.get("serviceCityId");
		Object serviceCityId_gt = queryMap.get("serviceCityId_gt");
		Object serviceCityId_ge = queryMap.get("serviceCityId_ge");
		Object serviceCityId_lt = queryMap.get("serviceCityId_lt");
		Object serviceCityId_le = queryMap.get("serviceCityId_le");
		Object serviceCityId_in = queryMap.get("serviceCityId_in");
		Object serviceAreaId = queryMap.get("serviceAreaId");
		Object serviceAreaId_gt = queryMap.get("serviceAreaId_gt");
		Object serviceAreaId_ge = queryMap.get("serviceAreaId_ge");
		Object serviceAreaId_lt = queryMap.get("serviceAreaId_lt");
		Object serviceAreaId_le = queryMap.get("serviceAreaId_le");
		Object serviceAreaId_in = queryMap.get("serviceAreaId_in");
		Object serviceStreetId = queryMap.get("serviceStreetId");
		Object serviceStreetId_gt = queryMap.get("serviceStreetId_gt");
		Object serviceStreetId_ge = queryMap.get("serviceStreetId_ge");
		Object serviceStreetId_lt = queryMap.get("serviceStreetId_lt");
		Object serviceStreetId_le = queryMap.get("serviceStreetId_le");
		Object serviceStreetId_in = queryMap.get("serviceStreetId_in");
		Object familyComposition = queryMap.get("familyComposition");
		Object familyComposition_like = queryMap.get("familyComposition_like");
		Object familyComposition_isNull = queryMap.get("familyComposition_isNull");
		Object familyComposition_isNotNull = queryMap.get("familyComposition_isNotNull");
		Object familyComposition_in = queryMap.get("familyComposition_in");
		Object live = queryMap.get("live");
		Object live_like = queryMap.get("live_like");
		Object live_isNull = queryMap.get("live_isNull");
		Object live_isNotNull = queryMap.get("live_isNotNull");
		Object live_in = queryMap.get("live_in");
		Object liveOther = queryMap.get("liveOther");
		Object liveOther_like = queryMap.get("liveOther_like");
		Object liveOther_isNull = queryMap.get("liveOther_isNull");
		Object liveOther_isNotNull = queryMap.get("liveOther_isNotNull");
		Object liveOther_in = queryMap.get("liveOther_in");
		Object economic = queryMap.get("economic");
		Object economic_like = queryMap.get("economic_like");
		Object economic_isNull = queryMap.get("economic_isNull");
		Object economic_isNotNull = queryMap.get("economic_isNotNull");
		Object economic_in = queryMap.get("economic_in");
		Object economicOther = queryMap.get("economicOther");
		Object economicOther_like = queryMap.get("economicOther_like");
		Object economicOther_isNull = queryMap.get("economicOther_isNull");
		Object economicOther_isNotNull = queryMap.get("economicOther_isNotNull");
		Object economicOther_in = queryMap.get("economicOther_in");
		Object house = queryMap.get("house");
		Object house_like = queryMap.get("house_like");
		Object house_isNull = queryMap.get("house_isNull");
		Object house_isNotNull = queryMap.get("house_isNotNull");
		Object house_in = queryMap.get("house_in");
		Object houseOther = queryMap.get("houseOther");
		Object houseOther_like = queryMap.get("houseOther_like");
		Object houseOther_isNull = queryMap.get("houseOther_isNull");
		Object houseOther_isNotNull = queryMap.get("houseOther_isNotNull");
		Object houseOther_in = queryMap.get("houseOther_in");
		Object interest = queryMap.get("interest");
		Object interest_like = queryMap.get("interest_like");
		Object interest_isNull = queryMap.get("interest_isNull");
		Object interest_isNotNull = queryMap.get("interest_isNotNull");
		Object interest_in = queryMap.get("interest_in");
		Object lifeExperience = queryMap.get("lifeExperience");
		Object lifeExperience_like = queryMap.get("lifeExperience_like");
		Object lifeExperience_isNull = queryMap.get("lifeExperience_isNull");
		Object lifeExperience_isNotNull = queryMap.get("lifeExperience_isNotNull");
		Object lifeExperience_in = queryMap.get("lifeExperience_in");
		Object specialExperience = queryMap.get("specialExperience");
		Object specialExperience_like = queryMap.get("specialExperience_like");
		Object specialExperience_isNull = queryMap.get("specialExperience_isNull");
		Object specialExperience_isNotNull = queryMap.get("specialExperience_isNotNull");
		Object specialExperience_in = queryMap.get("specialExperience_in");
		Object specialExperienceOther = queryMap.get("specialExperienceOther");
		Object specialExperienceOther_like = queryMap.get("specialExperienceOther_like");
		Object specialExperienceOther_isNull = queryMap.get("specialExperienceOther_isNull");
		Object specialExperienceOther_isNotNull = queryMap.get("specialExperienceOther_isNotNull");
		Object specialExperienceOther_in = queryMap.get("specialExperienceOther_in");
		Object residence = queryMap.get("residence");
		Object residence_like = queryMap.get("residence_like");
		Object residence_isNull = queryMap.get("residence_isNull");
		Object residence_isNotNull = queryMap.get("residence_isNotNull");
		Object residence_in = queryMap.get("residence_in");
		Object elevator = queryMap.get("elevator");
		Object elevator_like = queryMap.get("elevator_like");
		Object elevator_isNull = queryMap.get("elevator_isNull");
		Object elevator_isNotNull = queryMap.get("elevator_isNotNull");
		Object elevator_in = queryMap.get("elevator_in");
		Object step = queryMap.get("step");
		Object step_like = queryMap.get("step_like");
		Object step_isNull = queryMap.get("step_isNull");
		Object step_isNotNull = queryMap.get("step_isNotNull");
		Object step_in = queryMap.get("step_in");
		Object stepOther = queryMap.get("stepOther");
		Object stepOther_like = queryMap.get("stepOther_like");
		Object stepOther_isNull = queryMap.get("stepOther_isNull");
		Object stepOther_isNotNull = queryMap.get("stepOther_isNotNull");
		Object stepOther_in = queryMap.get("stepOther_in");
		Object restroom = queryMap.get("restroom");
		Object restroom_like = queryMap.get("restroom_like");
		Object restroom_isNull = queryMap.get("restroom_isNull");
		Object restroom_isNotNull = queryMap.get("restroom_isNotNull");
		Object restroom_in = queryMap.get("restroom_in");
		Object restroomOther = queryMap.get("restroomOther");
		Object restroomOther_like = queryMap.get("restroomOther_like");
		Object restroomOther_isNull = queryMap.get("restroomOther_isNull");
		Object restroomOther_isNotNull = queryMap.get("restroomOther_isNotNull");
		Object restroomOther_in = queryMap.get("restroomOther_in");
		Object bathroomTub = queryMap.get("bathroomTub");
		Object bathroomTub_like = queryMap.get("bathroomTub_like");
		Object bathroomTub_isNull = queryMap.get("bathroomTub_isNull");
		Object bathroomTub_isNotNull = queryMap.get("bathroomTub_isNotNull");
		Object bathroomTub_in = queryMap.get("bathroomTub_in");
		Object bathroomShower = queryMap.get("bathroomShower");
		Object bathroomShower_like = queryMap.get("bathroomShower_like");
		Object bathroomShower_isNull = queryMap.get("bathroomShower_isNull");
		Object bathroomShower_isNotNull = queryMap.get("bathroomShower_isNotNull");
		Object bathroomShower_in = queryMap.get("bathroomShower_in");
		Object bathroomStrip = queryMap.get("bathroomStrip");
		Object bathroomStrip_like = queryMap.get("bathroomStrip_like");
		Object bathroomStrip_isNull = queryMap.get("bathroomStrip_isNull");
		Object bathroomStrip_isNotNull = queryMap.get("bathroomStrip_isNotNull");
		Object bathroomStrip_in = queryMap.get("bathroomStrip_in");
		Object kitchenOther = queryMap.get("kitchenOther");
		Object kitchenOther_like = queryMap.get("kitchenOther_like");
		Object kitchenOther_isNull = queryMap.get("kitchenOther_isNull");
		Object kitchenOther_isNotNull = queryMap.get("kitchenOther_isNotNull");
		Object kitchenOther_in = queryMap.get("kitchenOther_in");
		Object kitchen = queryMap.get("kitchen");
		Object kitchen_like = queryMap.get("kitchen_like");
		Object kitchen_isNull = queryMap.get("kitchen_isNull");
		Object kitchen_isNotNull = queryMap.get("kitchen_isNotNull");
		Object kitchen_in = queryMap.get("kitchen_in");
		Object clean = queryMap.get("clean");
		Object clean_like = queryMap.get("clean_like");
		Object clean_isNull = queryMap.get("clean_isNull");
		Object clean_isNotNull = queryMap.get("clean_isNotNull");
		Object clean_in = queryMap.get("clean_in");
		Object shopping = queryMap.get("shopping");
		Object shopping_like = queryMap.get("shopping_like");
		Object shopping_isNull = queryMap.get("shopping_isNull");
		Object shopping_isNotNull = queryMap.get("shopping_isNotNull");
		Object shopping_in = queryMap.get("shopping_in");
		Object shoppingTraffic = queryMap.get("shoppingTraffic");
		Object shoppingTraffic_like = queryMap.get("shoppingTraffic_like");
		Object shoppingTraffic_isNull = queryMap.get("shoppingTraffic_isNull");
		Object shoppingTraffic_isNotNull = queryMap.get("shoppingTraffic_isNotNull");
		Object shoppingTraffic_in = queryMap.get("shoppingTraffic_in");
		Object shoppingAccessibility = queryMap.get("shoppingAccessibility");
		Object shoppingAccessibility_like = queryMap.get("shoppingAccessibility_like");
		Object shoppingAccessibility_isNull = queryMap.get("shoppingAccessibility_isNull");
		Object shoppingAccessibility_isNotNull = queryMap.get("shoppingAccessibility_isNotNull");
		Object shoppingAccessibility_in = queryMap.get("shoppingAccessibility_in");
		Object shoppingOther = queryMap.get("shoppingOther");
		Object shoppingOther_like = queryMap.get("shoppingOther_like");
		Object shoppingOther_isNull = queryMap.get("shoppingOther_isNull");
		Object shoppingOther_isNotNull = queryMap.get("shoppingOther_isNotNull");
		Object shoppingOther_in = queryMap.get("shoppingOther_in");
		Object livingEnvironmentDefect = queryMap.get("livingEnvironmentDefect");
		Object livingEnvironmentDefect_like = queryMap.get("livingEnvironmentDefect_like");
		Object livingEnvironmentDefect_isNull = queryMap.get("livingEnvironmentDefect_isNull");
		Object livingEnvironmentDefect_isNotNull = queryMap.get("livingEnvironmentDefect_isNotNull");
		Object livingEnvironmentDefect_in = queryMap.get("livingEnvironmentDefect_in");
		Object dailyWater = queryMap.get("dailyWater");
		Object dailyWater_like = queryMap.get("dailyWater_like");
		Object dailyWater_isNull = queryMap.get("dailyWater_isNull");
		Object dailyWater_isNotNull = queryMap.get("dailyWater_isNotNull");
		Object dailyWater_in = queryMap.get("dailyWater_in");
		Object dailyDrinking = queryMap.get("dailyDrinking");
		Object dailyDrinking_like = queryMap.get("dailyDrinking_like");
		Object dailyDrinking_isNull = queryMap.get("dailyDrinking_isNull");
		Object dailyDrinking_isNotNull = queryMap.get("dailyDrinking_isNotNull");
		Object dailyDrinking_in = queryMap.get("dailyDrinking_in");
		Object drinking = queryMap.get("drinking");
		Object drinking_like = queryMap.get("drinking_like");
		Object drinking_isNull = queryMap.get("drinking_isNull");
		Object drinking_isNotNull = queryMap.get("drinking_isNotNull");
		Object drinking_in = queryMap.get("drinking_in");
		Object gadget = queryMap.get("gadget");
		Object gadget_like = queryMap.get("gadget_like");
		Object gadget_isNull = queryMap.get("gadget_isNull");
		Object gadget_isNotNull = queryMap.get("gadget_isNotNull");
		Object gadget_in = queryMap.get("gadget_in");
		Object mainFood = queryMap.get("mainFood");
		Object mainFood_like = queryMap.get("mainFood_like");
		Object mainFood_isNull = queryMap.get("mainFood_isNull");
		Object mainFood_isNotNull = queryMap.get("mainFood_isNotNull");
		Object mainFood_in = queryMap.get("mainFood_in");
		Object fruitsVegetables = queryMap.get("fruitsVegetables");
		Object fruitsVegetables_like = queryMap.get("fruitsVegetables_like");
		Object fruitsVegetables_isNull = queryMap.get("fruitsVegetables_isNull");
		Object fruitsVegetables_isNotNull = queryMap.get("fruitsVegetables_isNotNull");
		Object fruitsVegetables_in = queryMap.get("fruitsVegetables_in");
		Object salt = queryMap.get("salt");
		Object salt_like = queryMap.get("salt_like");
		Object salt_isNull = queryMap.get("salt_isNull");
		Object salt_isNotNull = queryMap.get("salt_isNotNull");
		Object salt_in = queryMap.get("salt_in");
		Object oil = queryMap.get("oil");
		Object oil_like = queryMap.get("oil_like");
		Object oil_isNull = queryMap.get("oil_isNull");
		Object oil_isNotNull = queryMap.get("oil_isNotNull");
		Object oil_in = queryMap.get("oil_in");
		Object fish = queryMap.get("fish");
		Object fish_like = queryMap.get("fish_like");
		Object fish_isNull = queryMap.get("fish_isNull");
		Object fish_isNotNull = queryMap.get("fish_isNotNull");
		Object fish_in = queryMap.get("fish_in");
		Object meat = queryMap.get("meat");
		Object meat_like = queryMap.get("meat_like");
		Object meat_isNull = queryMap.get("meat_isNull");
		Object meat_isNotNull = queryMap.get("meat_isNotNull");
		Object meat_in = queryMap.get("meat_in");
		Object beanProducts = queryMap.get("beanProducts");
		Object beanProducts_like = queryMap.get("beanProducts_like");
		Object beanProducts_isNull = queryMap.get("beanProducts_isNull");
		Object beanProducts_isNotNull = queryMap.get("beanProducts_isNotNull");
		Object beanProducts_in = queryMap.get("beanProducts_in");
		Object milk = queryMap.get("milk");
		Object milk_like = queryMap.get("milk_like");
		Object milk_isNull = queryMap.get("milk_isNull");
		Object milk_isNotNull = queryMap.get("milk_isNotNull");
		Object milk_in = queryMap.get("milk_in");
		Object foodForm = queryMap.get("foodForm");
		Object foodForm_like = queryMap.get("foodForm_like");
		Object foodForm_isNull = queryMap.get("foodForm_isNull");
		Object foodForm_isNotNull = queryMap.get("foodForm_isNotNull");
		Object foodForm_in = queryMap.get("foodForm_in");
		Object dysphagia = queryMap.get("dysphagia");
		Object dysphagia_like = queryMap.get("dysphagia_like");
		Object dysphagia_isNull = queryMap.get("dysphagia_isNull");
		Object dysphagia_isNotNull = queryMap.get("dysphagia_isNotNull");
		Object dysphagia_in = queryMap.get("dysphagia_in");
		Object morningSit = queryMap.get("morningSit");
		Object morningSit_like = queryMap.get("morningSit_like");
		Object morningSit_isNull = queryMap.get("morningSit_isNull");
		Object morningSit_isNotNull = queryMap.get("morningSit_isNotNull");
		Object morningSit_in = queryMap.get("morningSit_in");
		Object noonSit = queryMap.get("noonSit");
		Object noonSit_like = queryMap.get("noonSit_like");
		Object noonSit_isNull = queryMap.get("noonSit_isNull");
		Object noonSit_isNotNull = queryMap.get("noonSit_isNotNull");
		Object noonSit_in = queryMap.get("noonSit_in");
		Object nightSit = queryMap.get("nightSit");
		Object nightSit_like = queryMap.get("nightSit_like");
		Object nightSit_isNull = queryMap.get("nightSit_isNull");
		Object nightSit_isNotNull = queryMap.get("nightSit_isNotNull");
		Object nightSit_in = queryMap.get("nightSit_in");
		Object lateAfternoonTea = queryMap.get("lateAfternoonTea");
		Object lateAfternoonTea_like = queryMap.get("lateAfternoonTea_like");
		Object lateAfternoonTea_isNull = queryMap.get("lateAfternoonTea_isNull");
		Object lateAfternoonTea_isNotNull = queryMap.get("lateAfternoonTea_isNotNull");
		Object lateAfternoonTea_in = queryMap.get("lateAfternoonTea_in");
		Object urine = queryMap.get("urine");
		Object urine_like = queryMap.get("urine_like");
		Object urine_isNull = queryMap.get("urine_isNull");
		Object urine_isNotNull = queryMap.get("urine_isNotNull");
		Object urine_in = queryMap.get("urine_in");
		Object urineNum = queryMap.get("urineNum");
		Object urineNum_like = queryMap.get("urineNum_like");
		Object urineNum_isNull = queryMap.get("urineNum_isNull");
		Object urineNum_isNotNull = queryMap.get("urineNum_isNotNull");
		Object urineNum_in = queryMap.get("urineNum_in");
		Object urineMethod = queryMap.get("urineMethod");
		Object urineMethod_like = queryMap.get("urineMethod_like");
		Object urineMethod_isNull = queryMap.get("urineMethod_isNull");
		Object urineMethod_isNotNull = queryMap.get("urineMethod_isNotNull");
		Object urineMethod_in = queryMap.get("urineMethod_in");
		Object urineType = queryMap.get("urineType");
		Object urineType_like = queryMap.get("urineType_like");
		Object urineType_isNull = queryMap.get("urineType_isNull");
		Object urineType_isNotNull = queryMap.get("urineType_isNotNull");
		Object urineType_in = queryMap.get("urineType_in");
		Object urineTypeOther = queryMap.get("urineTypeOther");
		Object urineTypeOther_like = queryMap.get("urineTypeOther_like");
		Object urineTypeOther_isNull = queryMap.get("urineTypeOther_isNull");
		Object urineTypeOther_isNotNull = queryMap.get("urineTypeOther_isNotNull");
		Object urineTypeOther_in = queryMap.get("urineTypeOther_in");
		Object shit = queryMap.get("shit");
		Object shit_like = queryMap.get("shit_like");
		Object shit_isNull = queryMap.get("shit_isNull");
		Object shit_isNotNull = queryMap.get("shit_isNotNull");
		Object shit_in = queryMap.get("shit_in");
		Object shitDay = queryMap.get("shitDay");
		Object shitDay_like = queryMap.get("shitDay_like");
		Object shitDay_isNull = queryMap.get("shitDay_isNull");
		Object shitDay_isNotNull = queryMap.get("shitDay_isNotNull");
		Object shitDay_in = queryMap.get("shitDay_in");
		Object shitMethod = queryMap.get("shitMethod");
		Object shitMethod_like = queryMap.get("shitMethod_like");
		Object shitMethod_isNull = queryMap.get("shitMethod_isNull");
		Object shitMethod_isNotNull = queryMap.get("shitMethod_isNotNull");
		Object shitMethod_in = queryMap.get("shitMethod_in");
		Object shitType = queryMap.get("shitType");
		Object shitType_like = queryMap.get("shitType_like");
		Object shitType_isNull = queryMap.get("shitType_isNull");
		Object shitType_isNotNull = queryMap.get("shitType_isNotNull");
		Object shitType_in = queryMap.get("shitType_in");
		Object shitTypeOther = queryMap.get("shitTypeOther");
		Object shitTypeOther_like = queryMap.get("shitTypeOther_like");
		Object shitTypeOther_isNull = queryMap.get("shitTypeOther_isNull");
		Object shitTypeOther_isNotNull = queryMap.get("shitTypeOther_isNotNull");
		Object shitTypeOther_in = queryMap.get("shitTypeOther_in");
		Object sportsForm = queryMap.get("sportsForm");
		Object sportsForm_like = queryMap.get("sportsForm_like");
		Object sportsForm_isNull = queryMap.get("sportsForm_isNull");
		Object sportsForm_isNotNull = queryMap.get("sportsForm_isNotNull");
		Object sportsForm_in = queryMap.get("sportsForm_in");
		Object sportsT = queryMap.get("sportsT");
		Object sportsT_like = queryMap.get("sportsT_like");
		Object sportsT_isNull = queryMap.get("sportsT_isNull");
		Object sportsT_isNotNull = queryMap.get("sportsT_isNotNull");
		Object sportsT_in = queryMap.get("sportsT_in");
		Object sportsF = queryMap.get("sportsF");
		Object sportsF_like = queryMap.get("sportsF_like");
		Object sportsF_isNull = queryMap.get("sportsF_isNull");
		Object sportsF_isNotNull = queryMap.get("sportsF_isNotNull");
		Object sportsF_in = queryMap.get("sportsF_in");
		Object sportsNo = queryMap.get("sportsNo");
		Object sportsNo_like = queryMap.get("sportsNo_like");
		Object sportsNo_isNull = queryMap.get("sportsNo_isNull");
		Object sportsNo_isNotNull = queryMap.get("sportsNo_isNotNull");
		Object sportsNo_in = queryMap.get("sportsNo_in");
		Object bathNum = queryMap.get("bathNum");
		Object bathNum_like = queryMap.get("bathNum_like");
		Object bathNum_isNull = queryMap.get("bathNum_isNull");
		Object bathNum_isNotNull = queryMap.get("bathNum_isNotNull");
		Object bathNum_in = queryMap.get("bathNum_in");
		Object bathMethod = queryMap.get("bathMethod");
		Object bathMethod_like = queryMap.get("bathMethod_like");
		Object bathMethod_isNull = queryMap.get("bathMethod_isNull");
		Object bathMethod_isNotNull = queryMap.get("bathMethod_isNotNull");
		Object bathMethod_in = queryMap.get("bathMethod_in");
		Object goOut = queryMap.get("goOut");
		Object goOut_like = queryMap.get("goOut_like");
		Object goOut_isNull = queryMap.get("goOut_isNull");
		Object goOut_isNotNull = queryMap.get("goOut_isNotNull");
		Object goOut_in = queryMap.get("goOut_in");
		Object goOutOther = queryMap.get("goOutOther");
		Object goOutOther_like = queryMap.get("goOutOther_like");
		Object goOutOther_isNull = queryMap.get("goOutOther_isNull");
		Object goOutOther_isNotNull = queryMap.get("goOutOther_isNotNull");
		Object goOutOther_in = queryMap.get("goOutOther_in");
		Object brush = queryMap.get("brush");
		Object brush_like = queryMap.get("brush_like");
		Object brush_isNull = queryMap.get("brush_isNull");
		Object brush_isNotNull = queryMap.get("brush_isNotNull");
		Object brush_in = queryMap.get("brush_in");
		Object communication = queryMap.get("communication");
		Object communication_like = queryMap.get("communication_like");
		Object communication_isNull = queryMap.get("communication_isNull");
		Object communication_isNotNull = queryMap.get("communication_isNotNull");
		Object communication_in = queryMap.get("communication_in");
		Object sleepHour = queryMap.get("sleepHour");
		Object sleepHour_like = queryMap.get("sleepHour_like");
		Object sleepHour_isNull = queryMap.get("sleepHour_isNull");
		Object sleepHour_isNotNull = queryMap.get("sleepHour_isNotNull");
		Object sleepHour_in = queryMap.get("sleepHour_in");
		Object sleepQuality = queryMap.get("sleepQuality");
		Object sleepQuality_like = queryMap.get("sleepQuality_like");
		Object sleepQuality_isNull = queryMap.get("sleepQuality_isNull");
		Object sleepQuality_isNotNull = queryMap.get("sleepQuality_isNotNull");
		Object sleepQuality_in = queryMap.get("sleepQuality_in");
		Object morningSpirit = queryMap.get("morningSpirit");
		Object morningSpirit_like = queryMap.get("morningSpirit_like");
		Object morningSpirit_isNull = queryMap.get("morningSpirit_isNull");
		Object morningSpirit_isNotNull = queryMap.get("morningSpirit_isNotNull");
		Object morningSpirit_in = queryMap.get("morningSpirit_in");
		Object accountNum = queryMap.get("accountNum");
		Object accountNum_gt = queryMap.get("accountNum_gt");
		Object accountNum_ge = queryMap.get("accountNum_ge");
		Object accountNum_lt = queryMap.get("accountNum_lt");
		Object accountNum_le = queryMap.get("accountNum_le");
		Object accountNum_in = queryMap.get("accountNum_in");
		Object lastChatTime_gt = queryMap.get("lastChatTime_gt");
		Object lastChatTime_ge = queryMap.get("lastChatTime_ge");
		Object lastChatTime_lt = queryMap.get("lastChatTime_lt");
		Object lastChatTime_le = queryMap.get("lastChatTime_le");
		Object lastChatContent = queryMap.get("lastChatContent");
		Object lastChatContent_like = queryMap.get("lastChatContent_like");
		Object lastChatContent_isNull = queryMap.get("lastChatContent_isNull");
		Object lastChatContent_isNotNull = queryMap.get("lastChatContent_isNotNull");
		Object lastChatContent_in = queryMap.get("lastChatContent_in");
		Object hasNewNotice = queryMap.get("hasNewNotice");
		Object hasNewNotice_like = queryMap.get("hasNewNotice_like");
		Object hasNewNotice_isNull = queryMap.get("hasNewNotice_isNull");
		Object hasNewNotice_isNotNull = queryMap.get("hasNewNotice_isNotNull");
		Object hasNewNotice_in = queryMap.get("hasNewNotice_in");
		Object chronicDisease = queryMap.get("chronicDisease");
		Object chronicDisease_like = queryMap.get("chronicDisease_like");
		Object chronicDisease_isNull = queryMap.get("chronicDisease_isNull");
		Object chronicDisease_isNotNull = queryMap.get("chronicDisease_isNotNull");
		Object chronicDisease_in = queryMap.get("chronicDisease_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");
		Object updateTime_gt = queryMap.get("updateTime_gt");
		Object updateTime_ge = queryMap.get("updateTime_ge");
		Object updateTime_lt = queryMap.get("updateTime_lt");
		Object updateTime_le = queryMap.get("updateTime_le");
		Object lastReviewTime_gt = queryMap.get("lastReviewTime_gt");
		Object lastReviewTime_ge = queryMap.get("lastReviewTime_ge");
		Object lastReviewTime_lt = queryMap.get("lastReviewTime_lt");
		Object lastReviewTime_le = queryMap.get("lastReviewTime_le");
		Object source = queryMap.get("source");
		Object source_gt = queryMap.get("source_gt");
		Object source_ge = queryMap.get("source_ge");
		Object source_lt = queryMap.get("source_lt");
		Object source_le = queryMap.get("source_le");
		Object source_in = queryMap.get("source_in");
		Object livingCondition = queryMap.get("livingCondition");
		Object livingCondition_like = queryMap.get("livingCondition_like");
		Object livingCondition_isNull = queryMap.get("livingCondition_isNull");
		Object livingCondition_isNotNull = queryMap.get("livingCondition_isNotNull");
		Object livingCondition_in = queryMap.get("livingCondition_in");
		Object idFront = queryMap.get("idFront");
		Object idFront_like = queryMap.get("idFront_like");
		Object idFront_isNull = queryMap.get("idFront_isNull");
		Object idFront_isNotNull = queryMap.get("idFront_isNotNull");
		Object idFront_in = queryMap.get("idFront_in");
		Object idBack = queryMap.get("idBack");
		Object idBack_like = queryMap.get("idBack_like");
		Object idBack_isNull = queryMap.get("idBack_isNull");
		Object idBack_isNotNull = queryMap.get("idBack_isNotNull");
		Object idBack_in = queryMap.get("idBack_in");

		Object employeeId = queryMap.get("employeeId");

		QueryCondition qc = new QueryCondition(OlderEntity.ID, QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ID, QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ID, QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ID, QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ID, QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ID, QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ID, QueryCondition.in, id_in));
		}
		if (nurseEmployeeId != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NURSE_EMPLOYEE_ID, QueryCondition.eq, nurseEmployeeId));
		}
		if (nurseEmployeeId_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NURSE_EMPLOYEE_ID, QueryCondition.gt, nurseEmployeeId_gt));
		}
		if (nurseEmployeeId_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NURSE_EMPLOYEE_ID, QueryCondition.ge, nurseEmployeeId_ge));
		}
		if (nurseEmployeeId_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NURSE_EMPLOYEE_ID, QueryCondition.lt, nurseEmployeeId_lt));
		}
		if (nurseEmployeeId_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NURSE_EMPLOYEE_ID, QueryCondition.le, nurseEmployeeId_le));
		}
		if (nurseEmployeeId_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NURSE_EMPLOYEE_ID, QueryCondition.in, nurseEmployeeId_in));
		}
		if (userId != null) {
			qc.andCondition(new QueryCondition(OlderEntity.USER_ID, QueryCondition.eq, userId));
		}
		if (userId_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.USER_ID, QueryCondition.gt, userId_gt));
		}
		if (userId_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.USER_ID, QueryCondition.ge, userId_ge));
		}
		if (userId_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.USER_ID, QueryCondition.lt, userId_lt));
		}
		if (userId_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.USER_ID, QueryCondition.le, userId_le));
		}
		if (userId_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.USER_ID, QueryCondition.in, userId_in));
		}
		if (memberNum != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_NUM, QueryCondition.eq, memberNum));
		}
		if (memberNum_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_NUM, QueryCondition.like, memberNum_like));
		}
		if (memberNum_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_NUM, QueryCondition.isNull, memberNum_isNull));
		}
		if (memberNum_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_NUM, QueryCondition.isNotNull, memberNum_isNotNull));
		}
		if (memberNum_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_NUM, QueryCondition.in, memberNum_in));
		}
		if (memberCard != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_CARD, QueryCondition.eq, memberCard));
		}
		if (memberCard_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_CARD, QueryCondition.like, memberCard_like));
		}
		if (memberCard_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_CARD, QueryCondition.isNull, memberCard_isNull));
		}
		if (memberCard_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_CARD, QueryCondition.isNotNull, memberCard_isNotNull));
		}
		if (memberCard_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_CARD, QueryCondition.in, memberCard_in));
		}
		if (memberSource != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_SOURCE, QueryCondition.eq, memberSource));
		}
		if (memberSource_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_SOURCE, QueryCondition.like, memberSource_like));
		}
		if (memberSource_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_SOURCE, QueryCondition.isNull, memberSource_isNull));
		}
		if (memberSource_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_SOURCE, QueryCondition.isNotNull, memberSource_isNotNull));
		}
		if (memberSource_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_SOURCE, QueryCondition.in, memberSource_in));
		}
		if (attentionPoint != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ATTENTION_POINT, QueryCondition.eq, attentionPoint));
		}
		if (attentionPoint_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ATTENTION_POINT, QueryCondition.like, attentionPoint_like));
		}
		if (attentionPoint_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ATTENTION_POINT, QueryCondition.isNull, attentionPoint_isNull));
		}
		if (attentionPoint_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ATTENTION_POINT, QueryCondition.isNotNull, attentionPoint_isNotNull));
		}
		if (attentionPoint_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ATTENTION_POINT, QueryCondition.in, attentionPoint_in));
		}
		if (nurseLevel != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NURSE_LEVEL, QueryCondition.eq, nurseLevel));
		}
		if (nurseLevel_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NURSE_LEVEL, QueryCondition.gt, nurseLevel_gt));
		}
		if (nurseLevel_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NURSE_LEVEL, QueryCondition.ge, nurseLevel_ge));
		}
		if (nurseLevel_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NURSE_LEVEL, QueryCondition.lt, nurseLevel_lt));
		}
		if (nurseLevel_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NURSE_LEVEL, QueryCondition.le, nurseLevel_le));
		}
		if (nurseLevel_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NURSE_LEVEL, QueryCondition.in, nurseLevel_in));
		}
		if (memberStatus != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_STATUS, QueryCondition.eq, memberStatus));
		}
		if (memberStatus_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_STATUS, QueryCondition.gt, memberStatus_gt));
		}
		if (memberStatus_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_STATUS, QueryCondition.ge, memberStatus_ge));
		}
		if (memberStatus_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_STATUS, QueryCondition.lt, memberStatus_lt));
		}
		if (memberStatus_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_STATUS, QueryCondition.le, memberStatus_le));
		}
		if (memberStatus_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEMBER_STATUS, QueryCondition.in, memberStatus_in));
		}
		if (lastAssessmentDate_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LAST_ASSESSMENT_DATE, QueryCondition.gt, lastAssessmentDate_gt));
		}
		if (lastAssessmentDate_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LAST_ASSESSMENT_DATE, QueryCondition.ge, lastAssessmentDate_ge));
		}
		if (lastAssessmentDate_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LAST_ASSESSMENT_DATE, QueryCondition.lt, lastAssessmentDate_lt));
		}
		if (lastAssessmentDate_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LAST_ASSESSMENT_DATE, QueryCondition.le, lastAssessmentDate_le));
		}
		if (assessmentCycle != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ASSESSMENT_CYCLE, QueryCondition.eq, assessmentCycle));
		}
		if (assessmentCycle_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ASSESSMENT_CYCLE, QueryCondition.gt, assessmentCycle_gt));
		}
		if (assessmentCycle_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ASSESSMENT_CYCLE, QueryCondition.ge, assessmentCycle_ge));
		}
		if (assessmentCycle_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ASSESSMENT_CYCLE, QueryCondition.lt, assessmentCycle_lt));
		}
		if (assessmentCycle_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ASSESSMENT_CYCLE, QueryCondition.le, assessmentCycle_le));
		}
		if (assessmentCycle_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ASSESSMENT_CYCLE, QueryCondition.in, assessmentCycle_in));
		}
		if (chargeMonth != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CHARGE_MONTH, QueryCondition.eq, chargeMonth));
		}
		if (chargeMonth_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CHARGE_MONTH, QueryCondition.gt, chargeMonth_gt));
		}
		if (chargeMonth_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CHARGE_MONTH, QueryCondition.ge, chargeMonth_ge));
		}
		if (chargeMonth_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CHARGE_MONTH, QueryCondition.lt, chargeMonth_lt));
		}
		if (chargeMonth_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CHARGE_MONTH, QueryCondition.le, chargeMonth_le));
		}
		if (chargeMonth_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CHARGE_MONTH, QueryCondition.in, chargeMonth_in));
		}
		if (requiredServiceTimes != null) {
			qc.andCondition(new QueryCondition(OlderEntity.REQUIRED_SERVICE_TIMES, QueryCondition.eq, requiredServiceTimes));
		}
		if (requiredServiceTimes_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.REQUIRED_SERVICE_TIMES, QueryCondition.gt, requiredServiceTimes_gt));
		}
		if (requiredServiceTimes_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.REQUIRED_SERVICE_TIMES, QueryCondition.ge, requiredServiceTimes_ge));
		}
		if (requiredServiceTimes_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.REQUIRED_SERVICE_TIMES, QueryCondition.lt, requiredServiceTimes_lt));
		}
		if (requiredServiceTimes_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.REQUIRED_SERVICE_TIMES, QueryCondition.le, requiredServiceTimes_le));
		}
		if (requiredServiceTimes_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.REQUIRED_SERVICE_TIMES, QueryCondition.in, requiredServiceTimes_in));
		}
		if (alreadyServiceTimes != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ALREADY_SERVICE_TIMES, QueryCondition.eq, alreadyServiceTimes));
		}
		if (alreadyServiceTimes_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ALREADY_SERVICE_TIMES, QueryCondition.gt, alreadyServiceTimes_gt));
		}
		if (alreadyServiceTimes_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ALREADY_SERVICE_TIMES, QueryCondition.ge, alreadyServiceTimes_ge));
		}
		if (alreadyServiceTimes_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ALREADY_SERVICE_TIMES, QueryCondition.lt, alreadyServiceTimes_lt));
		}
		if (alreadyServiceTimes_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ALREADY_SERVICE_TIMES, QueryCondition.le, alreadyServiceTimes_le));
		}
		if (alreadyServiceTimes_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ALREADY_SERVICE_TIMES, QueryCondition.in, alreadyServiceTimes_in));
		}
		if (mainPhoto != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MAIN_PHOTO, QueryCondition.eq, mainPhoto));
		}
		if (mainPhoto_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MAIN_PHOTO, QueryCondition.like, mainPhoto_like));
		}
		if (mainPhoto_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MAIN_PHOTO, QueryCondition.isNull, mainPhoto_isNull));
		}
		if (mainPhoto_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MAIN_PHOTO, QueryCondition.isNotNull, mainPhoto_isNotNull));
		}
		if (mainPhoto_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MAIN_PHOTO, QueryCondition.in, mainPhoto_in));
		}
		if (name != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NAME, QueryCondition.eq, name));
		}
		if (name_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NAME, QueryCondition.like, name_like));
		}
		if (name_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NAME, QueryCondition.isNull, name_isNull));
		}
		if (name_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NAME, QueryCondition.isNotNull, name_isNotNull));
		}
		if (name_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NAME, QueryCondition.in, name_in));
		}
		if (idnumber != null) {
			qc.andCondition(new QueryCondition(OlderEntity.IDNUMBER, QueryCondition.eq, idnumber));
		}
		if (idnumber_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.IDNUMBER, QueryCondition.like, idnumber_like));
		}
		if (idnumber_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.IDNUMBER, QueryCondition.isNull, idnumber_isNull));
		}
		if (idnumber_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.IDNUMBER, QueryCondition.isNotNull, idnumber_isNotNull));
		}
		if (idnumber_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.IDNUMBER, QueryCondition.in, idnumber_in));
		}
		if (socialSecurityNumber != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SOCIAL_SECURITY_NUMBER, QueryCondition.eq, socialSecurityNumber));
		}
		if (socialSecurityNumber_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SOCIAL_SECURITY_NUMBER, QueryCondition.like, socialSecurityNumber_like));
		}
		if (socialSecurityNumber_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SOCIAL_SECURITY_NUMBER, QueryCondition.isNull, socialSecurityNumber_isNull));
		}
		if (socialSecurityNumber_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SOCIAL_SECURITY_NUMBER, QueryCondition.isNotNull, socialSecurityNumber_isNotNull));
		}
		if (socialSecurityNumber_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SOCIAL_SECURITY_NUMBER, QueryCondition.in, socialSecurityNumber_in));
		}
		if (gender != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GENDER, QueryCondition.eq, gender));
		}
		if (gender_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GENDER, QueryCondition.like, gender_like));
		}
		if (gender_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GENDER, QueryCondition.isNull, gender_isNull));
		}
		if (gender_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GENDER, QueryCondition.isNotNull, gender_isNotNull));
		}
		if (gender_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GENDER, QueryCondition.in, gender_in));
		}
		if (birthdate_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BIRTHDATE, QueryCondition.gt, birthdate_gt));
		}
		if (birthdate_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BIRTHDATE, QueryCondition.ge, birthdate_ge));
		}
		if (birthdate_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BIRTHDATE, QueryCondition.lt, birthdate_lt));
		}
		if (birthdate_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BIRTHDATE, QueryCondition.le, birthdate_le));
		}
		if (nation != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NATION, QueryCondition.eq, nation));
		}
		if (nation_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NATION, QueryCondition.like, nation_like));
		}
		if (nation_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NATION, QueryCondition.isNull, nation_isNull));
		}
		if (nation_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NATION, QueryCondition.isNotNull, nation_isNotNull));
		}
		if (nation_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NATION, QueryCondition.in, nation_in));
		}
		if (education != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EDUCATION, QueryCondition.eq, education));
		}
		if (education_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EDUCATION, QueryCondition.like, education_like));
		}
		if (education_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EDUCATION, QueryCondition.isNull, education_isNull));
		}
		if (education_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EDUCATION, QueryCondition.isNotNull, education_isNotNull));
		}
		if (education_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EDUCATION, QueryCondition.in, education_in));
		}
		if (maritalStatus != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MARITAL_STATUS, QueryCondition.eq, maritalStatus));
		}
		if (maritalStatus_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MARITAL_STATUS, QueryCondition.like, maritalStatus_like));
		}
		if (maritalStatus_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MARITAL_STATUS, QueryCondition.isNull, maritalStatus_isNull));
		}
		if (maritalStatus_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MARITAL_STATUS, QueryCondition.isNotNull, maritalStatus_isNotNull));
		}
		if (maritalStatus_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MARITAL_STATUS, QueryCondition.in, maritalStatus_in));
		}
		if (occupation != null) {
			qc.andCondition(new QueryCondition(OlderEntity.OCCUPATION, QueryCondition.eq, occupation));
		}
		if (occupation_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.OCCUPATION, QueryCondition.like, occupation_like));
		}
		if (occupation_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.OCCUPATION, QueryCondition.isNull, occupation_isNull));
		}
		if (occupation_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.OCCUPATION, QueryCondition.isNotNull, occupation_isNotNull));
		}
		if (occupation_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.OCCUPATION, QueryCondition.in, occupation_in));
		}
		if (homeTel != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOME_TEL, QueryCondition.eq, homeTel));
		}
		if (homeTel_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOME_TEL, QueryCondition.like, homeTel_like));
		}
		if (homeTel_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOME_TEL, QueryCondition.isNull, homeTel_isNull));
		}
		if (homeTel_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOME_TEL, QueryCondition.isNotNull, homeTel_isNotNull));
		}
		if (homeTel_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOME_TEL, QueryCondition.in, homeTel_in));
		}
		if (mobileTel != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MOBILE_TEL, QueryCondition.eq, mobileTel));
		}
		if (mobileTel_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MOBILE_TEL, QueryCondition.like, mobileTel_like));
		}
		if (mobileTel_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MOBILE_TEL, QueryCondition.isNull, mobileTel_isNull));
		}
		if (mobileTel_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MOBILE_TEL, QueryCondition.isNotNull, mobileTel_isNotNull));
		}
		if (mobileTel_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MOBILE_TEL, QueryCondition.in, mobileTel_in));
		}
		if (bloodType != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BLOOD_TYPE, QueryCondition.eq, bloodType));
		}
		if (bloodType_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BLOOD_TYPE, QueryCondition.like, bloodType_like));
		}
		if (bloodType_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BLOOD_TYPE, QueryCondition.isNull, bloodType_isNull));
		}
		if (bloodType_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BLOOD_TYPE, QueryCondition.isNotNull, bloodType_isNotNull));
		}
		if (bloodType_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BLOOD_TYPE, QueryCondition.in, bloodType_in));
		}
		if (symptom != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SYMPTOM, QueryCondition.eq, symptom));
		}
		if (symptom_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SYMPTOM, QueryCondition.like, symptom_like));
		}
		if (symptom_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SYMPTOM, QueryCondition.isNull, symptom_isNull));
		}
		if (symptom_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SYMPTOM, QueryCondition.isNotNull, symptom_isNotNull));
		}
		if (symptom_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SYMPTOM, QueryCondition.in, symptom_in));
		}
		if (symptomOther != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SYMPTOM_OTHER, QueryCondition.eq, symptomOther));
		}
		if (symptomOther_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SYMPTOM_OTHER, QueryCondition.like, symptomOther_like));
		}
		if (symptomOther_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SYMPTOM_OTHER, QueryCondition.isNull, symptomOther_isNull));
		}
		if (symptomOther_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SYMPTOM_OTHER, QueryCondition.isNotNull, symptomOther_isNotNull));
		}
		if (symptomOther_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SYMPTOM_OTHER, QueryCondition.in, symptomOther_in));
		}
		if (drugAllergy != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRUG_ALLERGY, QueryCondition.eq, drugAllergy));
		}
		if (drugAllergy_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRUG_ALLERGY, QueryCondition.like, drugAllergy_like));
		}
		if (drugAllergy_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRUG_ALLERGY, QueryCondition.isNull, drugAllergy_isNull));
		}
		if (drugAllergy_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRUG_ALLERGY, QueryCondition.isNotNull, drugAllergy_isNotNull));
		}
		if (drugAllergy_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRUG_ALLERGY, QueryCondition.in, drugAllergy_in));
		}
		if (drugAllergyOther != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRUG_ALLERGY_OTHER, QueryCondition.eq, drugAllergyOther));
		}
		if (drugAllergyOther_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRUG_ALLERGY_OTHER, QueryCondition.like, drugAllergyOther_like));
		}
		if (drugAllergyOther_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRUG_ALLERGY_OTHER, QueryCondition.isNull, drugAllergyOther_isNull));
		}
		if (drugAllergyOther_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRUG_ALLERGY_OTHER, QueryCondition.isNotNull, drugAllergyOther_isNotNull));
		}
		if (drugAllergyOther_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRUG_ALLERGY_OTHER, QueryCondition.in, drugAllergyOther_in));
		}
		if (cognitive != null) {
			qc.andCondition(new QueryCondition(OlderEntity.COGNITIVE, QueryCondition.eq, cognitive));
		}
		if (cognitive_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.COGNITIVE, QueryCondition.like, cognitive_like));
		}
		if (cognitive_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.COGNITIVE, QueryCondition.isNull, cognitive_isNull));
		}
		if (cognitive_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.COGNITIVE, QueryCondition.isNotNull, cognitive_isNotNull));
		}
		if (cognitive_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.COGNITIVE, QueryCondition.in, cognitive_in));
		}
		if (emotion != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EMOTION, QueryCondition.eq, emotion));
		}
		if (emotion_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EMOTION, QueryCondition.like, emotion_like));
		}
		if (emotion_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EMOTION, QueryCondition.isNull, emotion_isNull));
		}
		if (emotion_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EMOTION, QueryCondition.isNotNull, emotion_isNotNull));
		}
		if (emotion_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EMOTION, QueryCondition.in, emotion_in));
		}
		if (sportsFre != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_FRE, QueryCondition.eq, sportsFre));
		}
		if (sportsFre_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_FRE, QueryCondition.like, sportsFre_like));
		}
		if (sportsFre_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_FRE, QueryCondition.isNull, sportsFre_isNull));
		}
		if (sportsFre_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_FRE, QueryCondition.isNotNull, sportsFre_isNotNull));
		}
		if (sportsFre_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_FRE, QueryCondition.in, sportsFre_in));
		}
		if (sportsTime != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_TIME, QueryCondition.eq, sportsTime));
		}
		if (sportsTime_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_TIME, QueryCondition.gt, sportsTime_gt));
		}
		if (sportsTime_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_TIME, QueryCondition.ge, sportsTime_ge));
		}
		if (sportsTime_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_TIME, QueryCondition.lt, sportsTime_lt));
		}
		if (sportsTime_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_TIME, QueryCondition.le, sportsTime_le));
		}
		if (sportsTime_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_TIME, QueryCondition.in, sportsTime_in));
		}
		if (holdSportsTime != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOLD_SPORTS_TIME, QueryCondition.eq, holdSportsTime));
		}
		if (holdSportsTime_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOLD_SPORTS_TIME, QueryCondition.gt, holdSportsTime_gt));
		}
		if (holdSportsTime_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOLD_SPORTS_TIME, QueryCondition.ge, holdSportsTime_ge));
		}
		if (holdSportsTime_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOLD_SPORTS_TIME, QueryCondition.lt, holdSportsTime_lt));
		}
		if (holdSportsTime_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOLD_SPORTS_TIME, QueryCondition.le, holdSportsTime_le));
		}
		if (holdSportsTime_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOLD_SPORTS_TIME, QueryCondition.in, holdSportsTime_in));
		}
		if (sportsType != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_TYPE, QueryCondition.eq, sportsType));
		}
		if (sportsType_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_TYPE, QueryCondition.like, sportsType_like));
		}
		if (sportsType_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_TYPE, QueryCondition.isNull, sportsType_isNull));
		}
		if (sportsType_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_TYPE, QueryCondition.isNotNull, sportsType_isNotNull));
		}
		if (sportsType_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_TYPE, QueryCondition.in, sportsType_in));
		}
		if (diet != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DIET, QueryCondition.eq, diet));
		}
		if (diet_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DIET, QueryCondition.like, diet_like));
		}
		if (diet_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DIET, QueryCondition.isNull, diet_isNull));
		}
		if (diet_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DIET, QueryCondition.isNotNull, diet_isNotNull));
		}
		if (diet_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DIET, QueryCondition.in, diet_in));
		}
		if (smoking != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SMOKING, QueryCondition.eq, smoking));
		}
		if (smoking_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SMOKING, QueryCondition.like, smoking_like));
		}
		if (smoking_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SMOKING, QueryCondition.isNull, smoking_isNull));
		}
		if (smoking_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SMOKING, QueryCondition.isNotNull, smoking_isNotNull));
		}
		if (smoking_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SMOKING, QueryCondition.in, smoking_in));
		}
		if (smokingDay != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SMOKING_DAY, QueryCondition.eq, smokingDay));
		}
		if (smokingDay_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SMOKING_DAY, QueryCondition.gt, smokingDay_gt));
		}
		if (smokingDay_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SMOKING_DAY, QueryCondition.ge, smokingDay_ge));
		}
		if (smokingDay_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SMOKING_DAY, QueryCondition.lt, smokingDay_lt));
		}
		if (smokingDay_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SMOKING_DAY, QueryCondition.le, smokingDay_le));
		}
		if (smokingDay_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SMOKING_DAY, QueryCondition.in, smokingDay_in));
		}
		if (quitAlcohol != null) {
			qc.andCondition(new QueryCondition(OlderEntity.QUIT_ALCOHOL, QueryCondition.eq, quitAlcohol));
		}
		if (quitAlcohol_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.QUIT_ALCOHOL, QueryCondition.like, quitAlcohol_like));
		}
		if (quitAlcohol_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.QUIT_ALCOHOL, QueryCondition.isNull, quitAlcohol_isNull));
		}
		if (quitAlcohol_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.QUIT_ALCOHOL, QueryCondition.isNotNull, quitAlcohol_isNotNull));
		}
		if (quitAlcohol_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.QUIT_ALCOHOL, QueryCondition.in, quitAlcohol_in));
		}
		if (quitAlcoholAge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.QUIT_ALCOHOL_AGE, QueryCondition.eq, quitAlcoholAge));
		}
		if (quitAlcoholAge_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.QUIT_ALCOHOL_AGE, QueryCondition.gt, quitAlcoholAge_gt));
		}
		if (quitAlcoholAge_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.QUIT_ALCOHOL_AGE, QueryCondition.ge, quitAlcoholAge_ge));
		}
		if (quitAlcoholAge_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.QUIT_ALCOHOL_AGE, QueryCondition.lt, quitAlcoholAge_lt));
		}
		if (quitAlcoholAge_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.QUIT_ALCOHOL_AGE, QueryCondition.le, quitAlcoholAge_le));
		}
		if (quitAlcoholAge_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.QUIT_ALCOHOL_AGE, QueryCondition.in, quitAlcoholAge_in));
		}
		if (startAlcoholAge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.START_ALCOHOL_AGE, QueryCondition.eq, startAlcoholAge));
		}
		if (startAlcoholAge_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.START_ALCOHOL_AGE, QueryCondition.gt, startAlcoholAge_gt));
		}
		if (startAlcoholAge_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.START_ALCOHOL_AGE, QueryCondition.ge, startAlcoholAge_ge));
		}
		if (startAlcoholAge_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.START_ALCOHOL_AGE, QueryCondition.lt, startAlcoholAge_lt));
		}
		if (startAlcoholAge_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.START_ALCOHOL_AGE, QueryCondition.le, startAlcoholAge_le));
		}
		if (startAlcoholAge_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.START_ALCOHOL_AGE, QueryCondition.in, startAlcoholAge_in));
		}
		if (drunkYear != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRUNK_YEAR, QueryCondition.eq, drunkYear));
		}
		if (drunkYear_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRUNK_YEAR, QueryCondition.gt, drunkYear_gt));
		}
		if (drunkYear_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRUNK_YEAR, QueryCondition.ge, drunkYear_ge));
		}
		if (drunkYear_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRUNK_YEAR, QueryCondition.lt, drunkYear_lt));
		}
		if (drunkYear_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRUNK_YEAR, QueryCondition.le, drunkYear_le));
		}
		if (drunkYear_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRUNK_YEAR, QueryCondition.in, drunkYear_in));
		}
		if (alcoholType != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ALCOHOL_TYPE, QueryCondition.eq, alcoholType));
		}
		if (alcoholType_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ALCOHOL_TYPE, QueryCondition.like, alcoholType_like));
		}
		if (alcoholType_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ALCOHOL_TYPE, QueryCondition.isNull, alcoholType_isNull));
		}
		if (alcoholType_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ALCOHOL_TYPE, QueryCondition.isNotNull, alcoholType_isNotNull));
		}
		if (alcoholType_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ALCOHOL_TYPE, QueryCondition.in, alcoholType_in));
		}
		if (alcoholTypeOther != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ALCOHOL_TYPE_OTHER, QueryCondition.eq, alcoholTypeOther));
		}
		if (alcoholTypeOther_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ALCOHOL_TYPE_OTHER, QueryCondition.like, alcoholTypeOther_like));
		}
		if (alcoholTypeOther_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ALCOHOL_TYPE_OTHER, QueryCondition.isNull, alcoholTypeOther_isNull));
		}
		if (alcoholTypeOther_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ALCOHOL_TYPE_OTHER, QueryCondition.isNotNull, alcoholTypeOther_isNotNull));
		}
		if (alcoholTypeOther_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ALCOHOL_TYPE_OTHER, QueryCondition.in, alcoholTypeOther_in));
		}
		if (brainBloodVessel != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BRAIN_BLOOD_VESSEL, QueryCondition.eq, brainBloodVessel));
		}
		if (brainBloodVessel_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BRAIN_BLOOD_VESSEL, QueryCondition.like, brainBloodVessel_like));
		}
		if (brainBloodVessel_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BRAIN_BLOOD_VESSEL, QueryCondition.isNull, brainBloodVessel_isNull));
		}
		if (brainBloodVessel_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BRAIN_BLOOD_VESSEL, QueryCondition.isNotNull, brainBloodVessel_isNotNull));
		}
		if (brainBloodVessel_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BRAIN_BLOOD_VESSEL, QueryCondition.in, brainBloodVessel_in));
		}
		if (brainBloodVesselOther != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BRAIN_BLOOD_VESSEL_OTHER, QueryCondition.eq, brainBloodVesselOther));
		}
		if (brainBloodVesselOther_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BRAIN_BLOOD_VESSEL_OTHER, QueryCondition.like, brainBloodVesselOther_like));
		}
		if (brainBloodVesselOther_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BRAIN_BLOOD_VESSEL_OTHER, QueryCondition.isNull, brainBloodVesselOther_isNull));
		}
		if (brainBloodVesselOther_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BRAIN_BLOOD_VESSEL_OTHER, QueryCondition.isNotNull, brainBloodVesselOther_isNotNull));
		}
		if (brainBloodVesselOther_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BRAIN_BLOOD_VESSEL_OTHER, QueryCondition.in, brainBloodVesselOther_in));
		}
		if (kindney != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KINDNEY, QueryCondition.eq, kindney));
		}
		if (kindney_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KINDNEY, QueryCondition.like, kindney_like));
		}
		if (kindney_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KINDNEY, QueryCondition.isNull, kindney_isNull));
		}
		if (kindney_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KINDNEY, QueryCondition.isNotNull, kindney_isNotNull));
		}
		if (kindney_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KINDNEY, QueryCondition.in, kindney_in));
		}
		if (kindneyOther != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KINDNEY_OTHER, QueryCondition.eq, kindneyOther));
		}
		if (kindneyOther_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KINDNEY_OTHER, QueryCondition.like, kindneyOther_like));
		}
		if (kindneyOther_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KINDNEY_OTHER, QueryCondition.isNull, kindneyOther_isNull));
		}
		if (kindneyOther_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KINDNEY_OTHER, QueryCondition.isNotNull, kindneyOther_isNotNull));
		}
		if (kindneyOther_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KINDNEY_OTHER, QueryCondition.in, kindneyOther_in));
		}
		if (heart != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HEART, QueryCondition.eq, heart));
		}
		if (heart_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HEART, QueryCondition.like, heart_like));
		}
		if (heart_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HEART, QueryCondition.isNull, heart_isNull));
		}
		if (heart_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HEART, QueryCondition.isNotNull, heart_isNotNull));
		}
		if (heart_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HEART, QueryCondition.in, heart_in));
		}
		if (heartOther != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HEART_OTHER, QueryCondition.eq, heartOther));
		}
		if (heartOther_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HEART_OTHER, QueryCondition.like, heartOther_like));
		}
		if (heartOther_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HEART_OTHER, QueryCondition.isNull, heartOther_isNull));
		}
		if (heartOther_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HEART_OTHER, QueryCondition.isNotNull, heartOther_isNotNull));
		}
		if (heartOther_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HEART_OTHER, QueryCondition.in, heartOther_in));
		}
		if (bloodVessel != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BLOOD_VESSEL, QueryCondition.eq, bloodVessel));
		}
		if (bloodVessel_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BLOOD_VESSEL, QueryCondition.like, bloodVessel_like));
		}
		if (bloodVessel_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BLOOD_VESSEL, QueryCondition.isNull, bloodVessel_isNull));
		}
		if (bloodVessel_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BLOOD_VESSEL, QueryCondition.isNotNull, bloodVessel_isNotNull));
		}
		if (bloodVessel_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BLOOD_VESSEL, QueryCondition.in, bloodVessel_in));
		}
		if (bloodVesselOther != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BLOOD_VESSEL_OTHER, QueryCondition.eq, bloodVesselOther));
		}
		if (bloodVesselOther_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BLOOD_VESSEL_OTHER, QueryCondition.like, bloodVesselOther_like));
		}
		if (bloodVesselOther_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BLOOD_VESSEL_OTHER, QueryCondition.isNull, bloodVesselOther_isNull));
		}
		if (bloodVesselOther_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BLOOD_VESSEL_OTHER, QueryCondition.isNotNull, bloodVesselOther_isNotNull));
		}
		if (bloodVesselOther_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BLOOD_VESSEL_OTHER, QueryCondition.in, bloodVesselOther_in));
		}
		if (eye != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EYE, QueryCondition.eq, eye));
		}
		if (eye_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EYE, QueryCondition.like, eye_like));
		}
		if (eye_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EYE, QueryCondition.isNull, eye_isNull));
		}
		if (eye_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EYE, QueryCondition.isNotNull, eye_isNotNull));
		}
		if (eye_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EYE, QueryCondition.in, eye_in));
		}
		if (eyeOther != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EYE_OTHER, QueryCondition.eq, eyeOther));
		}
		if (eyeOther_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EYE_OTHER, QueryCondition.like, eyeOther_like));
		}
		if (eyeOther_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EYE_OTHER, QueryCondition.isNull, eyeOther_isNull));
		}
		if (eyeOther_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EYE_OTHER, QueryCondition.isNotNull, eyeOther_isNotNull));
		}
		if (eyeOther_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.EYE_OTHER, QueryCondition.in, eyeOther_in));
		}
		if (otherDisease != null) {
			qc.andCondition(new QueryCondition(OlderEntity.OTHER_DISEASE, QueryCondition.eq, otherDisease));
		}
		if (otherDisease_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.OTHER_DISEASE, QueryCondition.like, otherDisease_like));
		}
		if (otherDisease_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.OTHER_DISEASE, QueryCondition.isNull, otherDisease_isNull));
		}
		if (otherDisease_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.OTHER_DISEASE, QueryCondition.isNotNull, otherDisease_isNotNull));
		}
		if (otherDisease_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.OTHER_DISEASE, QueryCondition.in, otherDisease_in));
		}
		if (serviceProvinceId != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_PROVINCE_ID, QueryCondition.eq, serviceProvinceId));
		}
		if (serviceProvinceId_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_PROVINCE_ID, QueryCondition.gt, serviceProvinceId_gt));
		}
		if (serviceProvinceId_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_PROVINCE_ID, QueryCondition.ge, serviceProvinceId_ge));
		}
		if (serviceProvinceId_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_PROVINCE_ID, QueryCondition.lt, serviceProvinceId_lt));
		}
		if (serviceProvinceId_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_PROVINCE_ID, QueryCondition.le, serviceProvinceId_le));
		}
		if (serviceProvinceId_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_PROVINCE_ID, QueryCondition.in, serviceProvinceId_in));
		}
		if (serviceCityId != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_CITY_ID, QueryCondition.eq, serviceCityId));
		}
		if (serviceCityId_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_CITY_ID, QueryCondition.gt, serviceCityId_gt));
		}
		if (serviceCityId_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_CITY_ID, QueryCondition.ge, serviceCityId_ge));
		}
		if (serviceCityId_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_CITY_ID, QueryCondition.lt, serviceCityId_lt));
		}
		if (serviceCityId_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_CITY_ID, QueryCondition.le, serviceCityId_le));
		}
		if (serviceCityId_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_CITY_ID, QueryCondition.in, serviceCityId_in));
		}
		if (serviceAreaId != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_AREA_ID, QueryCondition.eq, serviceAreaId));
		}
		if (serviceAreaId_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_AREA_ID, QueryCondition.gt, serviceAreaId_gt));
		}
		if (serviceAreaId_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_AREA_ID, QueryCondition.ge, serviceAreaId_ge));
		}
		if (serviceAreaId_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_AREA_ID, QueryCondition.lt, serviceAreaId_lt));
		}
		if (serviceAreaId_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_AREA_ID, QueryCondition.le, serviceAreaId_le));
		}
		if (serviceAreaId_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_AREA_ID, QueryCondition.in, serviceAreaId_in));
		}
		if (serviceStreetId != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_STREET_ID, QueryCondition.eq, serviceStreetId));
		}
		if (serviceStreetId_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_STREET_ID, QueryCondition.gt, serviceStreetId_gt));
		}
		if (serviceStreetId_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_STREET_ID, QueryCondition.ge, serviceStreetId_ge));
		}
		if (serviceStreetId_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_STREET_ID, QueryCondition.lt, serviceStreetId_lt));
		}
		if (serviceStreetId_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_STREET_ID, QueryCondition.le, serviceStreetId_le));
		}
		if (serviceStreetId_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SERVICE_STREET_ID, QueryCondition.in, serviceStreetId_in));
		}
		if (familyComposition != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FAMILY_COMPOSITION, QueryCondition.eq, familyComposition));
		}
		if (familyComposition_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FAMILY_COMPOSITION, QueryCondition.like, familyComposition_like));
		}
		if (familyComposition_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FAMILY_COMPOSITION, QueryCondition.isNull, familyComposition_isNull));
		}
		if (familyComposition_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FAMILY_COMPOSITION, QueryCondition.isNotNull, familyComposition_isNotNull));
		}
		if (familyComposition_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FAMILY_COMPOSITION, QueryCondition.in, familyComposition_in));
		}
		if (live != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVE, QueryCondition.eq, live));
		}
		if (live_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVE, QueryCondition.like, live_like));
		}
		if (live_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVE, QueryCondition.isNull, live_isNull));
		}
		if (live_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVE, QueryCondition.isNotNull, live_isNotNull));
		}
		if (live_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVE, QueryCondition.in, live_in));
		}
		if (liveOther != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVE_OTHER, QueryCondition.eq, liveOther));
		}
		if (liveOther_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVE_OTHER, QueryCondition.like, liveOther_like));
		}
		if (liveOther_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVE_OTHER, QueryCondition.isNull, liveOther_isNull));
		}
		if (liveOther_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVE_OTHER, QueryCondition.isNotNull, liveOther_isNotNull));
		}
		if (liveOther_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVE_OTHER, QueryCondition.in, liveOther_in));
		}
		if (economic != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ECONOMIC, QueryCondition.eq, economic));
		}
		if (economic_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ECONOMIC, QueryCondition.like, economic_like));
		}
		if (economic_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ECONOMIC, QueryCondition.isNull, economic_isNull));
		}
		if (economic_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ECONOMIC, QueryCondition.isNotNull, economic_isNotNull));
		}
		if (economic_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ECONOMIC, QueryCondition.in, economic_in));
		}
		if (economicOther != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ECONOMIC_OTHER, QueryCondition.eq, economicOther));
		}
		if (economicOther_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ECONOMIC_OTHER, QueryCondition.like, economicOther_like));
		}
		if (economicOther_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ECONOMIC_OTHER, QueryCondition.isNull, economicOther_isNull));
		}
		if (economicOther_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ECONOMIC_OTHER, QueryCondition.isNotNull, economicOther_isNotNull));
		}
		if (economicOther_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ECONOMIC_OTHER, QueryCondition.in, economicOther_in));
		}
		if (house != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOUSE, QueryCondition.eq, house));
		}
		if (house_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOUSE, QueryCondition.like, house_like));
		}
		if (house_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOUSE, QueryCondition.isNull, house_isNull));
		}
		if (house_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOUSE, QueryCondition.isNotNull, house_isNotNull));
		}
		if (house_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOUSE, QueryCondition.in, house_in));
		}
		if (houseOther != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOUSE_OTHER, QueryCondition.eq, houseOther));
		}
		if (houseOther_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOUSE_OTHER, QueryCondition.like, houseOther_like));
		}
		if (houseOther_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOUSE_OTHER, QueryCondition.isNull, houseOther_isNull));
		}
		if (houseOther_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOUSE_OTHER, QueryCondition.isNotNull, houseOther_isNotNull));
		}
		if (houseOther_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HOUSE_OTHER, QueryCondition.in, houseOther_in));
		}
		if (interest != null) {
			qc.andCondition(new QueryCondition(OlderEntity.INTEREST, QueryCondition.eq, interest));
		}
		if (interest_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.INTEREST, QueryCondition.like, interest_like));
		}
		if (interest_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.INTEREST, QueryCondition.isNull, interest_isNull));
		}
		if (interest_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.INTEREST, QueryCondition.isNotNull, interest_isNotNull));
		}
		if (interest_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.INTEREST, QueryCondition.in, interest_in));
		}
		if (lifeExperience != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIFE_EXPERIENCE, QueryCondition.eq, lifeExperience));
		}
		if (lifeExperience_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIFE_EXPERIENCE, QueryCondition.like, lifeExperience_like));
		}
		if (lifeExperience_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIFE_EXPERIENCE, QueryCondition.isNull, lifeExperience_isNull));
		}
		if (lifeExperience_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIFE_EXPERIENCE, QueryCondition.isNotNull, lifeExperience_isNotNull));
		}
		if (lifeExperience_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIFE_EXPERIENCE, QueryCondition.in, lifeExperience_in));
		}
		if (specialExperience != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPECIAL_EXPERIENCE, QueryCondition.eq, specialExperience));
		}
		if (specialExperience_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPECIAL_EXPERIENCE, QueryCondition.like, specialExperience_like));
		}
		if (specialExperience_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPECIAL_EXPERIENCE, QueryCondition.isNull, specialExperience_isNull));
		}
		if (specialExperience_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPECIAL_EXPERIENCE, QueryCondition.isNotNull, specialExperience_isNotNull));
		}
		if (specialExperience_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPECIAL_EXPERIENCE, QueryCondition.in, specialExperience_in));
		}
		if (specialExperienceOther != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPECIAL_EXPERIENCE_OTHER, QueryCondition.eq, specialExperienceOther));
		}
		if (specialExperienceOther_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPECIAL_EXPERIENCE_OTHER, QueryCondition.like, specialExperienceOther_like));
		}
		if (specialExperienceOther_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPECIAL_EXPERIENCE_OTHER, QueryCondition.isNull, specialExperienceOther_isNull));
		}
		if (specialExperienceOther_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPECIAL_EXPERIENCE_OTHER, QueryCondition.isNotNull, specialExperienceOther_isNotNull));
		}
		if (specialExperienceOther_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPECIAL_EXPERIENCE_OTHER, QueryCondition.in, specialExperienceOther_in));
		}
		if (residence != null) {
			qc.andCondition(new QueryCondition(OlderEntity.RESIDENCE, QueryCondition.eq, residence));
		}
		if (residence_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.RESIDENCE, QueryCondition.like, residence_like));
		}
		if (residence_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.RESIDENCE, QueryCondition.isNull, residence_isNull));
		}
		if (residence_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.RESIDENCE, QueryCondition.isNotNull, residence_isNotNull));
		}
		if (residence_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.RESIDENCE, QueryCondition.in, residence_in));
		}
		if (elevator != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ELEVATOR, QueryCondition.eq, elevator));
		}
		if (elevator_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ELEVATOR, QueryCondition.like, elevator_like));
		}
		if (elevator_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ELEVATOR, QueryCondition.isNull, elevator_isNull));
		}
		if (elevator_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ELEVATOR, QueryCondition.isNotNull, elevator_isNotNull));
		}
		if (elevator_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ELEVATOR, QueryCondition.in, elevator_in));
		}
		if (step != null) {
			qc.andCondition(new QueryCondition(OlderEntity.STEP, QueryCondition.eq, step));
		}
		if (step_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.STEP, QueryCondition.like, step_like));
		}
		if (step_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.STEP, QueryCondition.isNull, step_isNull));
		}
		if (step_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.STEP, QueryCondition.isNotNull, step_isNotNull));
		}
		if (step_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.STEP, QueryCondition.in, step_in));
		}
		if (stepOther != null) {
			qc.andCondition(new QueryCondition(OlderEntity.STEP_OTHER, QueryCondition.eq, stepOther));
		}
		if (stepOther_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.STEP_OTHER, QueryCondition.like, stepOther_like));
		}
		if (stepOther_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.STEP_OTHER, QueryCondition.isNull, stepOther_isNull));
		}
		if (stepOther_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.STEP_OTHER, QueryCondition.isNotNull, stepOther_isNotNull));
		}
		if (stepOther_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.STEP_OTHER, QueryCondition.in, stepOther_in));
		}
		if (restroom != null) {
			qc.andCondition(new QueryCondition(OlderEntity.RESTROOM, QueryCondition.eq, restroom));
		}
		if (restroom_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.RESTROOM, QueryCondition.like, restroom_like));
		}
		if (restroom_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.RESTROOM, QueryCondition.isNull, restroom_isNull));
		}
		if (restroom_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.RESTROOM, QueryCondition.isNotNull, restroom_isNotNull));
		}
		if (restroom_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.RESTROOM, QueryCondition.in, restroom_in));
		}
		if (restroomOther != null) {
			qc.andCondition(new QueryCondition(OlderEntity.RESTROOM_OTHER, QueryCondition.eq, restroomOther));
		}
		if (restroomOther_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.RESTROOM_OTHER, QueryCondition.like, restroomOther_like));
		}
		if (restroomOther_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.RESTROOM_OTHER, QueryCondition.isNull, restroomOther_isNull));
		}
		if (restroomOther_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.RESTROOM_OTHER, QueryCondition.isNotNull, restroomOther_isNotNull));
		}
		if (restroomOther_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.RESTROOM_OTHER, QueryCondition.in, restroomOther_in));
		}
		if (bathroomTub != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATHROOM_TUB, QueryCondition.eq, bathroomTub));
		}
		if (bathroomTub_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATHROOM_TUB, QueryCondition.like, bathroomTub_like));
		}
		if (bathroomTub_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATHROOM_TUB, QueryCondition.isNull, bathroomTub_isNull));
		}
		if (bathroomTub_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATHROOM_TUB, QueryCondition.isNotNull, bathroomTub_isNotNull));
		}
		if (bathroomTub_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATHROOM_TUB, QueryCondition.in, bathroomTub_in));
		}
		if (bathroomShower != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATHROOM_SHOWER, QueryCondition.eq, bathroomShower));
		}
		if (bathroomShower_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATHROOM_SHOWER, QueryCondition.like, bathroomShower_like));
		}
		if (bathroomShower_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATHROOM_SHOWER, QueryCondition.isNull, bathroomShower_isNull));
		}
		if (bathroomShower_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATHROOM_SHOWER, QueryCondition.isNotNull, bathroomShower_isNotNull));
		}
		if (bathroomShower_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATHROOM_SHOWER, QueryCondition.in, bathroomShower_in));
		}
		if (bathroomStrip != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATHROOM_STRIP, QueryCondition.eq, bathroomStrip));
		}
		if (bathroomStrip_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATHROOM_STRIP, QueryCondition.like, bathroomStrip_like));
		}
		if (bathroomStrip_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATHROOM_STRIP, QueryCondition.isNull, bathroomStrip_isNull));
		}
		if (bathroomStrip_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATHROOM_STRIP, QueryCondition.isNotNull, bathroomStrip_isNotNull));
		}
		if (bathroomStrip_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATHROOM_STRIP, QueryCondition.in, bathroomStrip_in));
		}
		if (kitchenOther != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KITCHEN_OTHER, QueryCondition.eq, kitchenOther));
		}
		if (kitchenOther_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KITCHEN_OTHER, QueryCondition.like, kitchenOther_like));
		}
		if (kitchenOther_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KITCHEN_OTHER, QueryCondition.isNull, kitchenOther_isNull));
		}
		if (kitchenOther_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KITCHEN_OTHER, QueryCondition.isNotNull, kitchenOther_isNotNull));
		}
		if (kitchenOther_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KITCHEN_OTHER, QueryCondition.in, kitchenOther_in));
		}
		if (kitchen != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KITCHEN, QueryCondition.eq, kitchen));
		}
		if (kitchen_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KITCHEN, QueryCondition.like, kitchen_like));
		}
		if (kitchen_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KITCHEN, QueryCondition.isNull, kitchen_isNull));
		}
		if (kitchen_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KITCHEN, QueryCondition.isNotNull, kitchen_isNotNull));
		}
		if (kitchen_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.KITCHEN, QueryCondition.in, kitchen_in));
		}
		if (clean != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CLEAN, QueryCondition.eq, clean));
		}
		if (clean_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CLEAN, QueryCondition.like, clean_like));
		}
		if (clean_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CLEAN, QueryCondition.isNull, clean_isNull));
		}
		if (clean_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CLEAN, QueryCondition.isNotNull, clean_isNotNull));
		}
		if (clean_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CLEAN, QueryCondition.in, clean_in));
		}
		if (shopping != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING, QueryCondition.eq, shopping));
		}
		if (shopping_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING, QueryCondition.like, shopping_like));
		}
		if (shopping_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING, QueryCondition.isNull, shopping_isNull));
		}
		if (shopping_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING, QueryCondition.isNotNull, shopping_isNotNull));
		}
		if (shopping_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING, QueryCondition.in, shopping_in));
		}
		if (shoppingTraffic != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING_TRAFFIC, QueryCondition.eq, shoppingTraffic));
		}
		if (shoppingTraffic_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING_TRAFFIC, QueryCondition.like, shoppingTraffic_like));
		}
		if (shoppingTraffic_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING_TRAFFIC, QueryCondition.isNull, shoppingTraffic_isNull));
		}
		if (shoppingTraffic_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING_TRAFFIC, QueryCondition.isNotNull, shoppingTraffic_isNotNull));
		}
		if (shoppingTraffic_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING_TRAFFIC, QueryCondition.in, shoppingTraffic_in));
		}
		if (shoppingAccessibility != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING_ACCESSIBILITY, QueryCondition.eq, shoppingAccessibility));
		}
		if (shoppingAccessibility_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING_ACCESSIBILITY, QueryCondition.like, shoppingAccessibility_like));
		}
		if (shoppingAccessibility_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING_ACCESSIBILITY, QueryCondition.isNull, shoppingAccessibility_isNull));
		}
		if (shoppingAccessibility_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING_ACCESSIBILITY, QueryCondition.isNotNull, shoppingAccessibility_isNotNull));
		}
		if (shoppingAccessibility_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING_ACCESSIBILITY, QueryCondition.in, shoppingAccessibility_in));
		}
		if (shoppingOther != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING_OTHER, QueryCondition.eq, shoppingOther));
		}
		if (shoppingOther_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING_OTHER, QueryCondition.like, shoppingOther_like));
		}
		if (shoppingOther_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING_OTHER, QueryCondition.isNull, shoppingOther_isNull));
		}
		if (shoppingOther_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING_OTHER, QueryCondition.isNotNull, shoppingOther_isNotNull));
		}
		if (shoppingOther_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHOPPING_OTHER, QueryCondition.in, shoppingOther_in));
		}
		if (livingEnvironmentDefect != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVING_ENVIRONMENT_DEFECT, QueryCondition.eq, livingEnvironmentDefect));
		}
		if (livingEnvironmentDefect_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVING_ENVIRONMENT_DEFECT, QueryCondition.like, livingEnvironmentDefect_like));
		}
		if (livingEnvironmentDefect_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVING_ENVIRONMENT_DEFECT, QueryCondition.isNull, livingEnvironmentDefect_isNull));
		}
		if (livingEnvironmentDefect_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVING_ENVIRONMENT_DEFECT, QueryCondition.isNotNull, livingEnvironmentDefect_isNotNull));
		}
		if (livingEnvironmentDefect_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVING_ENVIRONMENT_DEFECT, QueryCondition.in, livingEnvironmentDefect_in));
		}
		if (dailyWater != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DAILY_WATER, QueryCondition.eq, dailyWater));
		}
		if (dailyWater_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DAILY_WATER, QueryCondition.like, dailyWater_like));
		}
		if (dailyWater_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DAILY_WATER, QueryCondition.isNull, dailyWater_isNull));
		}
		if (dailyWater_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DAILY_WATER, QueryCondition.isNotNull, dailyWater_isNotNull));
		}
		if (dailyWater_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DAILY_WATER, QueryCondition.in, dailyWater_in));
		}
		if (dailyDrinking != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DAILY_DRINKING, QueryCondition.eq, dailyDrinking));
		}
		if (dailyDrinking_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DAILY_DRINKING, QueryCondition.like, dailyDrinking_like));
		}
		if (dailyDrinking_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DAILY_DRINKING, QueryCondition.isNull, dailyDrinking_isNull));
		}
		if (dailyDrinking_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DAILY_DRINKING, QueryCondition.isNotNull, dailyDrinking_isNotNull));
		}
		if (dailyDrinking_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DAILY_DRINKING, QueryCondition.in, dailyDrinking_in));
		}
		if (drinking != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRINKING, QueryCondition.eq, drinking));
		}
		if (drinking_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRINKING, QueryCondition.like, drinking_like));
		}
		if (drinking_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRINKING, QueryCondition.isNull, drinking_isNull));
		}
		if (drinking_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRINKING, QueryCondition.isNotNull, drinking_isNotNull));
		}
		if (drinking_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DRINKING, QueryCondition.in, drinking_in));
		}
		if (gadget != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GADGET, QueryCondition.eq, gadget));
		}
		if (gadget_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GADGET, QueryCondition.like, gadget_like));
		}
		if (gadget_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GADGET, QueryCondition.isNull, gadget_isNull));
		}
		if (gadget_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GADGET, QueryCondition.isNotNull, gadget_isNotNull));
		}
		if (gadget_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GADGET, QueryCondition.in, gadget_in));
		}
		if (mainFood != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MAIN_FOOD, QueryCondition.eq, mainFood));
		}
		if (mainFood_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MAIN_FOOD, QueryCondition.like, mainFood_like));
		}
		if (mainFood_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MAIN_FOOD, QueryCondition.isNull, mainFood_isNull));
		}
		if (mainFood_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MAIN_FOOD, QueryCondition.isNotNull, mainFood_isNotNull));
		}
		if (mainFood_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MAIN_FOOD, QueryCondition.in, mainFood_in));
		}
		if (fruitsVegetables != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FRUITS_VEGETABLES, QueryCondition.eq, fruitsVegetables));
		}
		if (fruitsVegetables_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FRUITS_VEGETABLES, QueryCondition.like, fruitsVegetables_like));
		}
		if (fruitsVegetables_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FRUITS_VEGETABLES, QueryCondition.isNull, fruitsVegetables_isNull));
		}
		if (fruitsVegetables_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FRUITS_VEGETABLES, QueryCondition.isNotNull, fruitsVegetables_isNotNull));
		}
		if (fruitsVegetables_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FRUITS_VEGETABLES, QueryCondition.in, fruitsVegetables_in));
		}
		if (salt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SALT, QueryCondition.eq, salt));
		}
		if (salt_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SALT, QueryCondition.like, salt_like));
		}
		if (salt_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SALT, QueryCondition.isNull, salt_isNull));
		}
		if (salt_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SALT, QueryCondition.isNotNull, salt_isNotNull));
		}
		if (salt_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SALT, QueryCondition.in, salt_in));
		}
		if (oil != null) {
			qc.andCondition(new QueryCondition(OlderEntity.OIL, QueryCondition.eq, oil));
		}
		if (oil_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.OIL, QueryCondition.like, oil_like));
		}
		if (oil_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.OIL, QueryCondition.isNull, oil_isNull));
		}
		if (oil_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.OIL, QueryCondition.isNotNull, oil_isNotNull));
		}
		if (oil_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.OIL, QueryCondition.in, oil_in));
		}
		if (fish != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FISH, QueryCondition.eq, fish));
		}
		if (fish_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FISH, QueryCondition.like, fish_like));
		}
		if (fish_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FISH, QueryCondition.isNull, fish_isNull));
		}
		if (fish_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FISH, QueryCondition.isNotNull, fish_isNotNull));
		}
		if (fish_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FISH, QueryCondition.in, fish_in));
		}
		if (meat != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEAT, QueryCondition.eq, meat));
		}
		if (meat_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEAT, QueryCondition.like, meat_like));
		}
		if (meat_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEAT, QueryCondition.isNull, meat_isNull));
		}
		if (meat_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEAT, QueryCondition.isNotNull, meat_isNotNull));
		}
		if (meat_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MEAT, QueryCondition.in, meat_in));
		}
		if (beanProducts != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BEAN_PRODUCTS, QueryCondition.eq, beanProducts));
		}
		if (beanProducts_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BEAN_PRODUCTS, QueryCondition.like, beanProducts_like));
		}
		if (beanProducts_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BEAN_PRODUCTS, QueryCondition.isNull, beanProducts_isNull));
		}
		if (beanProducts_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BEAN_PRODUCTS, QueryCondition.isNotNull, beanProducts_isNotNull));
		}
		if (beanProducts_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BEAN_PRODUCTS, QueryCondition.in, beanProducts_in));
		}
		if (milk != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MILK, QueryCondition.eq, milk));
		}
		if (milk_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MILK, QueryCondition.like, milk_like));
		}
		if (milk_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MILK, QueryCondition.isNull, milk_isNull));
		}
		if (milk_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MILK, QueryCondition.isNotNull, milk_isNotNull));
		}
		if (milk_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MILK, QueryCondition.in, milk_in));
		}
		if (foodForm != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FOOD_FORM, QueryCondition.eq, foodForm));
		}
		if (foodForm_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FOOD_FORM, QueryCondition.like, foodForm_like));
		}
		if (foodForm_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FOOD_FORM, QueryCondition.isNull, foodForm_isNull));
		}
		if (foodForm_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FOOD_FORM, QueryCondition.isNotNull, foodForm_isNotNull));
		}
		if (foodForm_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.FOOD_FORM, QueryCondition.in, foodForm_in));
		}
		if (dysphagia != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DYSPHAGIA, QueryCondition.eq, dysphagia));
		}
		if (dysphagia_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DYSPHAGIA, QueryCondition.like, dysphagia_like));
		}
		if (dysphagia_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DYSPHAGIA, QueryCondition.isNull, dysphagia_isNull));
		}
		if (dysphagia_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DYSPHAGIA, QueryCondition.isNotNull, dysphagia_isNotNull));
		}
		if (dysphagia_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.DYSPHAGIA, QueryCondition.in, dysphagia_in));
		}
		if (morningSit != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MORNING_SIT, QueryCondition.eq, morningSit));
		}
		if (morningSit_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MORNING_SIT, QueryCondition.like, morningSit_like));
		}
		if (morningSit_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MORNING_SIT, QueryCondition.isNull, morningSit_isNull));
		}
		if (morningSit_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MORNING_SIT, QueryCondition.isNotNull, morningSit_isNotNull));
		}
		if (morningSit_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MORNING_SIT, QueryCondition.in, morningSit_in));
		}
		if (noonSit != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NOON_SIT, QueryCondition.eq, noonSit));
		}
		if (noonSit_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NOON_SIT, QueryCondition.like, noonSit_like));
		}
		if (noonSit_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NOON_SIT, QueryCondition.isNull, noonSit_isNull));
		}
		if (noonSit_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NOON_SIT, QueryCondition.isNotNull, noonSit_isNotNull));
		}
		if (noonSit_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NOON_SIT, QueryCondition.in, noonSit_in));
		}
		if (nightSit != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NIGHT_SIT, QueryCondition.eq, nightSit));
		}
		if (nightSit_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NIGHT_SIT, QueryCondition.like, nightSit_like));
		}
		if (nightSit_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NIGHT_SIT, QueryCondition.isNull, nightSit_isNull));
		}
		if (nightSit_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NIGHT_SIT, QueryCondition.isNotNull, nightSit_isNotNull));
		}
		if (nightSit_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.NIGHT_SIT, QueryCondition.in, nightSit_in));
		}
		if (lateAfternoonTea != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LATE_AFTERNOON_TEA, QueryCondition.eq, lateAfternoonTea));
		}
		if (lateAfternoonTea_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LATE_AFTERNOON_TEA, QueryCondition.like, lateAfternoonTea_like));
		}
		if (lateAfternoonTea_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LATE_AFTERNOON_TEA, QueryCondition.isNull, lateAfternoonTea_isNull));
		}
		if (lateAfternoonTea_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LATE_AFTERNOON_TEA, QueryCondition.isNotNull, lateAfternoonTea_isNotNull));
		}
		if (lateAfternoonTea_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LATE_AFTERNOON_TEA, QueryCondition.in, lateAfternoonTea_in));
		}
		if (urine != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE, QueryCondition.eq, urine));
		}
		if (urine_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE, QueryCondition.like, urine_like));
		}
		if (urine_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE, QueryCondition.isNull, urine_isNull));
		}
		if (urine_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE, QueryCondition.isNotNull, urine_isNotNull));
		}
		if (urine_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE, QueryCondition.in, urine_in));
		}
		if (urineNum != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_NUM, QueryCondition.eq, urineNum));
		}
		if (urineNum_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_NUM, QueryCondition.like, urineNum_like));
		}
		if (urineNum_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_NUM, QueryCondition.isNull, urineNum_isNull));
		}
		if (urineNum_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_NUM, QueryCondition.isNotNull, urineNum_isNotNull));
		}
		if (urineNum_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_NUM, QueryCondition.in, urineNum_in));
		}
		if (urineMethod != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_METHOD, QueryCondition.eq, urineMethod));
		}
		if (urineMethod_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_METHOD, QueryCondition.like, urineMethod_like));
		}
		if (urineMethod_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_METHOD, QueryCondition.isNull, urineMethod_isNull));
		}
		if (urineMethod_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_METHOD, QueryCondition.isNotNull, urineMethod_isNotNull));
		}
		if (urineMethod_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_METHOD, QueryCondition.in, urineMethod_in));
		}
		if (urineType != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_TYPE, QueryCondition.eq, urineType));
		}
		if (urineType_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_TYPE, QueryCondition.like, urineType_like));
		}
		if (urineType_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_TYPE, QueryCondition.isNull, urineType_isNull));
		}
		if (urineType_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_TYPE, QueryCondition.isNotNull, urineType_isNotNull));
		}
		if (urineType_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_TYPE, QueryCondition.in, urineType_in));
		}
		if (urineTypeOther != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_TYPE_OTHER, QueryCondition.eq, urineTypeOther));
		}
		if (urineTypeOther_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_TYPE_OTHER, QueryCondition.like, urineTypeOther_like));
		}
		if (urineTypeOther_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_TYPE_OTHER, QueryCondition.isNull, urineTypeOther_isNull));
		}
		if (urineTypeOther_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_TYPE_OTHER, QueryCondition.isNotNull, urineTypeOther_isNotNull));
		}
		if (urineTypeOther_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.URINE_TYPE_OTHER, QueryCondition.in, urineTypeOther_in));
		}
		if (shit != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT, QueryCondition.eq, shit));
		}
		if (shit_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT, QueryCondition.like, shit_like));
		}
		if (shit_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT, QueryCondition.isNull, shit_isNull));
		}
		if (shit_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT, QueryCondition.isNotNull, shit_isNotNull));
		}
		if (shit_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT, QueryCondition.in, shit_in));
		}
		if (shitDay != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_DAY, QueryCondition.eq, shitDay));
		}
		if (shitDay_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_DAY, QueryCondition.like, shitDay_like));
		}
		if (shitDay_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_DAY, QueryCondition.isNull, shitDay_isNull));
		}
		if (shitDay_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_DAY, QueryCondition.isNotNull, shitDay_isNotNull));
		}
		if (shitDay_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_DAY, QueryCondition.in, shitDay_in));
		}
		if (shitMethod != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_METHOD, QueryCondition.eq, shitMethod));
		}
		if (shitMethod_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_METHOD, QueryCondition.like, shitMethod_like));
		}
		if (shitMethod_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_METHOD, QueryCondition.isNull, shitMethod_isNull));
		}
		if (shitMethod_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_METHOD, QueryCondition.isNotNull, shitMethod_isNotNull));
		}
		if (shitMethod_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_METHOD, QueryCondition.in, shitMethod_in));
		}
		if (shitType != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_TYPE, QueryCondition.eq, shitType));
		}
		if (shitType_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_TYPE, QueryCondition.like, shitType_like));
		}
		if (shitType_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_TYPE, QueryCondition.isNull, shitType_isNull));
		}
		if (shitType_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_TYPE, QueryCondition.isNotNull, shitType_isNotNull));
		}
		if (shitType_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_TYPE, QueryCondition.in, shitType_in));
		}
		if (shitTypeOther != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_TYPE_OTHER, QueryCondition.eq, shitTypeOther));
		}
		if (shitTypeOther_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_TYPE_OTHER, QueryCondition.like, shitTypeOther_like));
		}
		if (shitTypeOther_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_TYPE_OTHER, QueryCondition.isNull, shitTypeOther_isNull));
		}
		if (shitTypeOther_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_TYPE_OTHER, QueryCondition.isNotNull, shitTypeOther_isNotNull));
		}
		if (shitTypeOther_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SHIT_TYPE_OTHER, QueryCondition.in, shitTypeOther_in));
		}
		if (sportsForm != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_FORM, QueryCondition.eq, sportsForm));
		}
		if (sportsForm_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_FORM, QueryCondition.like, sportsForm_like));
		}
		if (sportsForm_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_FORM, QueryCondition.isNull, sportsForm_isNull));
		}
		if (sportsForm_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_FORM, QueryCondition.isNotNull, sportsForm_isNotNull));
		}
		if (sportsForm_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_FORM, QueryCondition.in, sportsForm_in));
		}
		if (sportsT != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_T, QueryCondition.eq, sportsT));
		}
		if (sportsT_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_T, QueryCondition.like, sportsT_like));
		}
		if (sportsT_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_T, QueryCondition.isNull, sportsT_isNull));
		}
		if (sportsT_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_T, QueryCondition.isNotNull, sportsT_isNotNull));
		}
		if (sportsT_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_T, QueryCondition.in, sportsT_in));
		}
		if (sportsF != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_F, QueryCondition.eq, sportsF));
		}
		if (sportsF_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_F, QueryCondition.like, sportsF_like));
		}
		if (sportsF_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_F, QueryCondition.isNull, sportsF_isNull));
		}
		if (sportsF_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_F, QueryCondition.isNotNull, sportsF_isNotNull));
		}
		if (sportsF_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_F, QueryCondition.in, sportsF_in));
		}
		if (sportsNo != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_NO, QueryCondition.eq, sportsNo));
		}
		if (sportsNo_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_NO, QueryCondition.like, sportsNo_like));
		}
		if (sportsNo_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_NO, QueryCondition.isNull, sportsNo_isNull));
		}
		if (sportsNo_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_NO, QueryCondition.isNotNull, sportsNo_isNotNull));
		}
		if (sportsNo_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SPORTS_NO, QueryCondition.in, sportsNo_in));
		}
		if (bathNum != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATH_NUM, QueryCondition.eq, bathNum));
		}
		if (bathNum_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATH_NUM, QueryCondition.like, bathNum_like));
		}
		if (bathNum_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATH_NUM, QueryCondition.isNull, bathNum_isNull));
		}
		if (bathNum_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATH_NUM, QueryCondition.isNotNull, bathNum_isNotNull));
		}
		if (bathNum_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATH_NUM, QueryCondition.in, bathNum_in));
		}
		if (bathMethod != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATH_METHOD, QueryCondition.eq, bathMethod));
		}
		if (bathMethod_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATH_METHOD, QueryCondition.like, bathMethod_like));
		}
		if (bathMethod_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATH_METHOD, QueryCondition.isNull, bathMethod_isNull));
		}
		if (bathMethod_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATH_METHOD, QueryCondition.isNotNull, bathMethod_isNotNull));
		}
		if (bathMethod_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BATH_METHOD, QueryCondition.in, bathMethod_in));
		}
		if (goOut != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GO_OUT, QueryCondition.eq, goOut));
		}
		if (goOut_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GO_OUT, QueryCondition.like, goOut_like));
		}
		if (goOut_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GO_OUT, QueryCondition.isNull, goOut_isNull));
		}
		if (goOut_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GO_OUT, QueryCondition.isNotNull, goOut_isNotNull));
		}
		if (goOut_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GO_OUT, QueryCondition.in, goOut_in));
		}
		if (goOutOther != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GO_OUT_OTHER, QueryCondition.eq, goOutOther));
		}
		if (goOutOther_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GO_OUT_OTHER, QueryCondition.like, goOutOther_like));
		}
		if (goOutOther_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GO_OUT_OTHER, QueryCondition.isNull, goOutOther_isNull));
		}
		if (goOutOther_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GO_OUT_OTHER, QueryCondition.isNotNull, goOutOther_isNotNull));
		}
		if (goOutOther_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.GO_OUT_OTHER, QueryCondition.in, goOutOther_in));
		}
		if (brush != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BRUSH, QueryCondition.eq, brush));
		}
		if (brush_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BRUSH, QueryCondition.like, brush_like));
		}
		if (brush_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BRUSH, QueryCondition.isNull, brush_isNull));
		}
		if (brush_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BRUSH, QueryCondition.isNotNull, brush_isNotNull));
		}
		if (brush_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.BRUSH, QueryCondition.in, brush_in));
		}
		if (communication != null) {
			qc.andCondition(new QueryCondition(OlderEntity.COMMUNICATION, QueryCondition.eq, communication));
		}
		if (communication_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.COMMUNICATION, QueryCondition.like, communication_like));
		}
		if (communication_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.COMMUNICATION, QueryCondition.isNull, communication_isNull));
		}
		if (communication_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.COMMUNICATION, QueryCondition.isNotNull, communication_isNotNull));
		}
		if (communication_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.COMMUNICATION, QueryCondition.in, communication_in));
		}
		if (sleepHour != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SLEEP_HOUR, QueryCondition.eq, sleepHour));
		}
		if (sleepHour_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SLEEP_HOUR, QueryCondition.like, sleepHour_like));
		}
		if (sleepHour_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SLEEP_HOUR, QueryCondition.isNull, sleepHour_isNull));
		}
		if (sleepHour_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SLEEP_HOUR, QueryCondition.isNotNull, sleepHour_isNotNull));
		}
		if (sleepHour_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SLEEP_HOUR, QueryCondition.in, sleepHour_in));
		}
		if (sleepQuality != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SLEEP_QUALITY, QueryCondition.eq, sleepQuality));
		}
		if (sleepQuality_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SLEEP_QUALITY, QueryCondition.like, sleepQuality_like));
		}
		if (sleepQuality_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SLEEP_QUALITY, QueryCondition.isNull, sleepQuality_isNull));
		}
		if (sleepQuality_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SLEEP_QUALITY, QueryCondition.isNotNull, sleepQuality_isNotNull));
		}
		if (sleepQuality_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SLEEP_QUALITY, QueryCondition.in, sleepQuality_in));
		}
		if (morningSpirit != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MORNING_SPIRIT, QueryCondition.eq, morningSpirit));
		}
		if (morningSpirit_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MORNING_SPIRIT, QueryCondition.like, morningSpirit_like));
		}
		if (morningSpirit_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MORNING_SPIRIT, QueryCondition.isNull, morningSpirit_isNull));
		}
		if (morningSpirit_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MORNING_SPIRIT, QueryCondition.isNotNull, morningSpirit_isNotNull));
		}
		if (morningSpirit_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.MORNING_SPIRIT, QueryCondition.in, morningSpirit_in));
		}
		if (accountNum != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ACCOUNT_NUM, QueryCondition.eq, accountNum));
		}
		if (accountNum_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ACCOUNT_NUM, QueryCondition.gt, accountNum_gt));
		}
		if (accountNum_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ACCOUNT_NUM, QueryCondition.ge, accountNum_ge));
		}
		if (accountNum_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ACCOUNT_NUM, QueryCondition.lt, accountNum_lt));
		}
		if (accountNum_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ACCOUNT_NUM, QueryCondition.le, accountNum_le));
		}
		if (accountNum_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ACCOUNT_NUM, QueryCondition.in, accountNum_in));
		}
		if (lastChatTime_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LAST_CHAT_TIME, QueryCondition.gt, lastChatTime_gt));
		}
		if (lastChatTime_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LAST_CHAT_TIME, QueryCondition.ge, lastChatTime_ge));
		}
		if (lastChatTime_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LAST_CHAT_TIME, QueryCondition.lt, lastChatTime_lt));
		}
		if (lastChatTime_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LAST_CHAT_TIME, QueryCondition.le, lastChatTime_le));
		}
		if (lastChatContent != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LAST_CHAT_CONTENT, QueryCondition.eq, lastChatContent));
		}
		if (lastChatContent_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LAST_CHAT_CONTENT, QueryCondition.like, lastChatContent_like));
		}
		if (lastChatContent_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LAST_CHAT_CONTENT, QueryCondition.isNull, lastChatContent_isNull));
		}
		if (lastChatContent_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LAST_CHAT_CONTENT, QueryCondition.isNotNull, lastChatContent_isNotNull));
		}
		if (lastChatContent_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LAST_CHAT_CONTENT, QueryCondition.in, lastChatContent_in));
		}
		if (hasNewNotice != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HAS_NEW_NOTICE, QueryCondition.eq, hasNewNotice));
		}
		if (hasNewNotice_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HAS_NEW_NOTICE, QueryCondition.like, hasNewNotice_like));
		}
		if (hasNewNotice_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HAS_NEW_NOTICE, QueryCondition.isNull, hasNewNotice_isNull));
		}
		if (hasNewNotice_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HAS_NEW_NOTICE, QueryCondition.isNotNull, hasNewNotice_isNotNull));
		}
		if (hasNewNotice_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.HAS_NEW_NOTICE, QueryCondition.in, hasNewNotice_in));
		}
		if (chronicDisease != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CHRONIC_DISEASE, QueryCondition.eq, chronicDisease));
		}
		if (chronicDisease_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CHRONIC_DISEASE, QueryCondition.like, chronicDisease_like));
		}
		if (chronicDisease_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CHRONIC_DISEASE, QueryCondition.isNull, chronicDisease_isNull));
		}
		if (chronicDisease_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CHRONIC_DISEASE, QueryCondition.isNotNull, chronicDisease_isNotNull));
		}
		if (chronicDisease_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CHRONIC_DISEASE, QueryCondition.in, chronicDisease_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CREATE_TIME, QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CREATE_TIME, QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CREATE_TIME, QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.CREATE_TIME, QueryCondition.le, createTime_le));
		}
		if (updateTime_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.UPDATE_TIME, QueryCondition.gt, updateTime_gt));
		}
		if (updateTime_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.UPDATE_TIME, QueryCondition.ge, updateTime_ge));
		}
		if (updateTime_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.UPDATE_TIME, QueryCondition.lt, updateTime_lt));
		}
		if (updateTime_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.UPDATE_TIME, QueryCondition.le, updateTime_le));
		}
		if (lastReviewTime_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LAST_REVIEW_TIME, QueryCondition.gt, lastReviewTime_gt));
		}
		if (lastReviewTime_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LAST_REVIEW_TIME, QueryCondition.ge, lastReviewTime_ge));
		}
		if (lastReviewTime_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LAST_REVIEW_TIME, QueryCondition.lt, lastReviewTime_lt));
		}
		if (lastReviewTime_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LAST_REVIEW_TIME, QueryCondition.le, lastReviewTime_le));
		}
		if (source != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SOURCE, QueryCondition.eq, source));
		}
		if (source_gt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SOURCE, QueryCondition.gt, source_gt));
		}
		if (source_ge != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SOURCE, QueryCondition.ge, source_ge));
		}
		if (source_lt != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SOURCE, QueryCondition.lt, source_lt));
		}
		if (source_le != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SOURCE, QueryCondition.le, source_le));
		}
		if (source_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.SOURCE, QueryCondition.in, source_in));
		}
		if (livingCondition != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVING_CONDITION, QueryCondition.eq, livingCondition));
		}
		if (livingCondition_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVING_CONDITION, QueryCondition.like, livingCondition_like));
		}
		if (livingCondition_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVING_CONDITION, QueryCondition.isNull, livingCondition_isNull));
		}
		if (livingCondition_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVING_CONDITION, QueryCondition.isNotNull, livingCondition_isNotNull));
		}
		if (livingCondition_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.LIVING_CONDITION, QueryCondition.in, livingCondition_in));
		}
		if (idFront != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ID_FRONT, QueryCondition.eq, idFront));
		}
		if (idFront_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ID_FRONT, QueryCondition.like, idFront_like));
		}
		if (idFront_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ID_FRONT, QueryCondition.isNull, idFront_isNull));
		}
		if (idFront_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ID_FRONT, QueryCondition.isNotNull, idFront_isNotNull));
		}
		if (idFront_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ID_FRONT, QueryCondition.in, idFront_in));
		}
		if (idBack != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ID_BACK, QueryCondition.eq, idBack));
		}
		if (idBack_like != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ID_BACK, QueryCondition.like, idBack_like));
		}
		if (idBack_isNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ID_BACK, QueryCondition.isNull, idBack_isNull));
		}
		if (idBack_isNotNull != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ID_BACK, QueryCondition.isNotNull, idBack_isNotNull));
		}
		if (idBack_in != null) {
			qc.andCondition(new QueryCondition(OlderEntity.ID_BACK, QueryCondition.in, idBack_in));
		}
		return qc;
	}

	public static String savePhoto(String photo, String fileName) {
		String returnPath = null;
		try {
			photo = photo.replaceAll("\n", "");
			byte[] photobyte = Base64Utils.decode(photo);

			String path = OlderHandler.class.getResource("OlderHandler.class").toString();
			String separator = FileUtil.getFileSeparator();
			if ("file".equals(path.substring(0, 4))) {
				if ("\\".equals(separator))
					path = path.substring(6);
				else {
					path = path.substring(5);
				}
			}
			String localPath = path.substring(0, path.indexOf("WEB-INF")) + "photos" + separator + "olderPhotos" + separator + fileName;
			localPath = URLDecoder.decode(localPath);
			localPath = localPath.replace("/", separator);
			localPath = localPath.replace("\\", separator);

			returnPath = SystemInit.photourl + "/photos/" + "olderPhotos/" + fileName;

			byte2image(photobyte, localPath);
		} catch (Exception e) {
			logger.error(e.toString());
		}
		return returnPath;
	}

	private String saveIdPhoto(String idFront, String fileName) {
		String returnPath = null;
		try {
			idFront = idFront.replaceAll("\n", "");
			byte[] photobyte = Base64Utils.decode(idFront);

			String path = OlderHandler.class.getResource("OlderHandler.class").toString();
			String separator = FileUtil.getFileSeparator();
			if ("file".equals(path.substring(0, 4))) {
				if ("\\".equals(separator))
					path = path.substring(6);
				else {
					path = path.substring(5);
				}
			}
			String localPath = path.substring(0, path.indexOf("WEB-INF")) + "photos" + separator + "OlderIdentityPhotos" + separator + fileName;
			localPath = URLDecoder.decode(localPath);
			localPath = localPath.replace("/", separator);
			localPath = localPath.replace("\\", separator);

			returnPath = SystemInit.photourl + "/photos/" + "OlderIdentityPhotos/" + fileName;

			byte2image(photobyte, localPath);
		} catch (Exception e) {
			logger.error(e.toString());
		}
		return returnPath;
	}

	public static void byte2image(byte[] data, String path) {
		if ((data.length < 3) || (path.equals("")))
			return;
		try {
			FileImageOutputStream imageOutput = new FileImageOutputStream(new File(path));
			imageOutput.write(data, 0, data.length);
			imageOutput.close();
			System.out.println("Make Picture success,Please find image in " + path);
		} catch (Exception ex) {
			System.out.println("Exception: " + ex);
			ex.printStackTrace();
		}
	}

	public Integer createUserByLoginName(String loginname, Integer createUserId, String userType) {
		Integer result = null;
		String pwd = Md5Utils.MD5("123456");
		try {
			UserEntity user = new UserEntity();
			Date date = new Date();
			String md5_pwd = Md5Utils.MD5(loginname + "$" + pwd);
			user.setLoginname(loginname);
			user.setNickname(loginname);
			user.setStatus(0);// pei新增时默认状态为0
			user.setPassword(md5_pwd);
			user.setCreateTime(formater.format(date));
			user.setCreateUserId(createUserId);
			user.setType(userType);
			dbManager.saveNoTransaction(user);
			if (user.getId() != null) {
				result = user.getId();
			}
		} catch (Exception e) {
			logger.error(e);
		}
		return result;
	}

	public String createNum() {

		String numTemp = "LR" + formater.format(new Date());
		String num = "";
		Map<String, Object> mapVlue = new HashMap<String, Object>();
		QueryCondition qc = new QueryCondition(OlderEntity.MEMBER_NUM, QueryCondition.like, numTemp);

		List<Object> olderList = dbManager.queryByConditionNoTransaction(OlderEntity.class, qc);
		if (olderList != null && olderList.size() > 0) {
			for (Object entiry : olderList) {
				OlderEntity oler = (OlderEntity) entiry;
				String code = oler.getMemberNum();
				code = code.substring(10, 14);
				mapVlue.put(code, "yes");
			}
		}
		for (int i = 1; i < 9999; i++) {
			if (i < 10) {
				num = "000" + String.valueOf(i);
			} else if (i >= 10 && i < 100) {
				num = "00" + String.valueOf(i);
			} else if (i >= 100 && i < 1000) {
				num = "0" + String.valueOf(i);
			} else {
				num = String.valueOf(i);
			}
			if (mapVlue.get(num) == null) {
				numTemp = numTemp + num;
				break;
			}
		}
		return numTemp;
	}

	/**
	 * 根据出身日计算年龄yyyymmdd
	 * 
	 * @return 年龄
	 */
	public String getAge(String birth) {
		try {
			String birthYear = birth.substring(0, 4);
			Calendar cal = Calendar.getInstance();
			int year = cal.get(Calendar.YEAR);
			int age = 0;
			if (birthYear.length() == 4) {
				age = year - Integer.parseInt(birthYear);
			}
			return age + "";
		} catch (Exception e) {
			return "无";
		}
	}

	/**
	 * 根据数据字典ID查询名称
	 * 
	 * @return 名称
	 */
	public String getNameBysjzdId(Integer id) {
		String name = "未知";
		if (id == null || id == 0) {
			return name;
		}
		Map<String, Object> query = new HashMap<String, Object>();
		if (id != null && id != 0) {
			query.put("id", id);
		}
		List<Object> objects = dataDicService.getListByCondition(query);
		if (objects != null && objects.size() > 0) {
			for (Object obj : objects) {
				DataDicEntity dataDicEntity = (DataDicEntity) obj;
				if (dataDicEntity != null) {
					name = dataDicEntity.getName();
				}
			}
		}
		return name;
	}

	/**
	 * 根据客户状态Id转化状态名称
	 * 
	 * @return 名称
	 */
	public String changeState(Integer id) {
		String name = "未知";
		switch (id) {
		case 0:
			name = "正常";
			break;
		case 1:
			name = "审核不通过";
			break;
		case 2:
			name = "待评估";
			break;
		default:
			name = "未知";
			break;
		}
		return name;
	}

}
