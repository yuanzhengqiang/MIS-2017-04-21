package fsk.service.review;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

import fsk.entity.employee.EmployeeEntity;
import fsk.entity.older.OlderEntity;
import fsk.entity.review.ReviewEntity;
import fsk.entity.site.SiteEntity;

/**
 * @Title: Service
 * @Description: 回访记录服务类
 * @author feng.gu
 * @date 2016-11-17 10:38:46
 * @version V1.0
 * 
 */
public class ReviewService {
	private static Logger logger = Logger.getLogger(ReviewService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static ReviewService reviewService;

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static ReviewService getInstance() {
		if (reviewService == null) {
			reviewService = new ReviewService();
		}
		return reviewService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(ReviewEntity review) {
		boolean result = false;
		if (review != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 关联信息保存
				OlderEntity older = review.getOlder();
				if (older != null) {
					dbManager.saveNoTransaction(older);
					review.setOlderId(older.getId());
				}
				// 关联信息保存
				SiteEntity site = review.getSite();
				if (site != null) {
					dbManager.saveNoTransaction(site);
					review.setSiteId(site.getId());
				}
				// 关联信息保存
				EmployeeEntity employee = review.getEmployee();
				if (employee != null) {
					dbManager.saveNoTransaction(employee);
					review.setEmployeeId(employee.getId());
				}
				result = dbManager.saveNoTransaction(review);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(List<ReviewEntity> reviewList) {
		boolean result = false;
		if (reviewList != null && reviewList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (ReviewEntity review : reviewList) {
					if (review != null) {
						// 关联信息保存
						OlderEntity older = review.getOlder();
						if (older != null) {
							dbManager.saveNoTransaction(older);
							review.setOlderId(older.getId());
						}
						// 关联信息保存
						SiteEntity site = review.getSite();
						if (site != null) {
							dbManager.saveNoTransaction(site);
							review.setSiteId(site.getId());
						}
						// 关联信息保存
						EmployeeEntity employee = review.getEmployee();
						if (employee != null) {
							dbManager.saveNoTransaction(employee);
							review.setEmployeeId(employee.getId());
						}
						result = dbManager.saveNoTransaction(review);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public ReviewEntity getById(Integer id) {
		ReviewEntity obj = null;
		if (id != null) {
			obj = (ReviewEntity) dbManager.getById(id, ReviewEntity.class);
		}
		return obj;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param olderShow
	 *            是否查询关联信息
	 * @param siteShow
	 *            是否查询关联信息
	 * @param employeeShow
	 *            是否查询关联信息
	 * @param obj
	 */
	public ReviewEntity getById(Integer id, Boolean olderShow, Boolean siteShow, Boolean employeeShow) {
		ReviewEntity obj = null;
		if (id != null) {
			obj = (ReviewEntity) dbManager.getById(id, ReviewEntity.class);
			// 查询关联内容
			if (olderShow != null && olderShow.booleanValue() && obj != null && obj.getOlderId() != null && obj.getOlderId() > 0) {
				OlderEntity older = (OlderEntity) dbManager.getById(obj.getOlderId(), OlderEntity.class);
				obj.setOlder(older);
			}
			// 查询关联内容
			if (siteShow != null && siteShow.booleanValue() && obj != null && obj.getSiteId() != null && obj.getSiteId() > 0) {
				SiteEntity site = (SiteEntity) dbManager.getById(obj.getSiteId(), SiteEntity.class);
				obj.setSite(site);
			}
			// 查询关联内容
			if (employeeShow != null && employeeShow.booleanValue() && obj != null && obj.getEmployeeId() != null && obj.getEmployeeId() > 0) {
				EmployeeEntity employee = (EmployeeEntity) dbManager.getById(obj.getEmployeeId(), EmployeeEntity.class);
				obj.setEmployee(employee);
			}
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<ReviewEntity> getListByCondition(Map<String, Object> queryMap) {
		List<ReviewEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		list = dbManager.queryByCondition(ReviewEntity.class, qc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<ReviewEntity>();
			for (Object obj : list) {
				returnlist.add((ReviewEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param olderShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param siteShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param employeeShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public List<ReviewEntity> getListByCondition(Map<String, Object> queryMap, List<OrderVO> orderList, Boolean olderShow, Boolean siteShow, Boolean employeeShow) {
		List<ReviewEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt, orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(ReviewEntity.class, qc, oc);
		int a = 0;
		if (olderShow != null && olderShow.booleanValue()) {
			a++;
		}
		if (siteShow != null && siteShow.booleanValue()) {
			a++;
		}
		if (employeeShow != null && employeeShow.booleanValue()) {
			a++;
		}
		if (a > 0 && list != null && list.size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < list.size(); i++) {
				ReviewEntity obj = (ReviewEntity) list.get(i);
				// 查询关联内容
				if (olderShow != null && olderShow.booleanValue() && obj != null && obj.getOlderId() != null && obj.getOlderId() > 0) {
					OlderEntity older = (OlderEntity) dbManager.getById(obj.getOlderId(), OlderEntity.class);
					obj.setOlder(older);
				}
				// 查询关联内容
				if (siteShow != null && siteShow.booleanValue() && obj != null && obj.getSiteId() != null && obj.getSiteId() > 0) {
					SiteEntity site = (SiteEntity) dbManager.getById(obj.getSiteId(), SiteEntity.class);
					obj.setSite(site);
				}
				// 查询关联内容
				if (employeeShow != null && employeeShow.booleanValue() && obj != null && obj.getEmployeeId() != null && obj.getEmployeeId() > 0) {
					EmployeeEntity employee = (EmployeeEntity) dbManager.getById(obj.getEmployeeId(), EmployeeEntity.class);
					obj.setEmployee(employee);
				}
				result.add(obj);
			}
			list = result;
		}
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<ReviewEntity>();
			for (Object obj : list) {
				returnlist.add((ReviewEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap, int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		pagelist = dbManager.queryByCondition(ReviewEntity.class, qc, pageno, pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @param olderShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param siteShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param employeeShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap, List<OrderVO> orderList, int pageno, int pagesize, Boolean olderShow, Boolean siteShow, Boolean employeeShow) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt, orderType));
					}
				}

			}
		}
		// 数据权限
		List<QueryCondition> dataRuleQclist = null;
		List<Map<String, Object>> dataRuleMapList = (List<Map<String, Object>>) queryMap.get("dataRuleMapList");
		if (dataRuleMapList != null && dataRuleMapList.size() > 0) {
			dataRuleQclist = new ArrayList<QueryCondition>();
			for (Map<String, Object> dataRuleMap : dataRuleMapList) {
				QueryCondition dataRuleQc = changeMapToQc(dataRuleMap);
				dataRuleQclist.add(dataRuleQc);
			}
		}
		pagelist = dbManager.queryByConditions(ReviewEntity.class, qc, dataRuleQclist, oc, pageno, pagesize);
		int a = 0;
		if (olderShow != null && olderShow.booleanValue()) {
			a++;
		}
		if (siteShow != null && siteShow.booleanValue()) {
			a++;
		}
		if (employeeShow != null && employeeShow.booleanValue()) {
			a++;
		}
		if (a > 0 && pagelist != null && pagelist.getResultList() != null && pagelist.getResultList().size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < pagelist.getResultList().size(); i++) {
				ReviewEntity obj = (ReviewEntity) pagelist.getResultList().get(i);
				// 查询关联内容
				if (olderShow != null && olderShow.booleanValue() && obj != null && obj.getOlderId() != null && obj.getOlderId() > 0) {
					OlderEntity older = (OlderEntity) dbManager.getById(obj.getOlderId(), OlderEntity.class);
					obj.setOlder(older);
				}
				// 查询关联内容
				if (siteShow != null && siteShow.booleanValue() && obj != null && obj.getSiteId() != null && obj.getSiteId() > 0) {
					SiteEntity site = (SiteEntity) dbManager.getById(obj.getSiteId(), SiteEntity.class);
					obj.setSite(site);
				}
				// 查询关联内容
				if (employeeShow != null && employeeShow.booleanValue() && obj != null && obj.getEmployeeId() != null && obj.getEmployeeId() > 0) {
					EmployeeEntity employee = (EmployeeEntity) dbManager.getById(obj.getEmployeeId(), EmployeeEntity.class);
					obj.setEmployee(employee);
				}
				result.add(obj);
			}
			pagelist.setResultList(result);
		}
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id, Boolean delOlder, Boolean delSite, Boolean delEmployee) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delOlder != null && delOlder.booleanValue()) {
					ReviewEntity review = (ReviewEntity) dbManager.getById(id, ReviewEntity.class);
					if (review != null && review.getOlderId() != null) {
						dbManager.delNoTransaction(review.getOlderId(), OlderEntity.class);
					}
				}
				// 删除关联信息
				if (delSite != null && delSite.booleanValue()) {
					ReviewEntity review = (ReviewEntity) dbManager.getById(id, ReviewEntity.class);
					if (review != null && review.getSiteId() != null) {
						dbManager.delNoTransaction(review.getSiteId(), SiteEntity.class);
					}
				}
				// 删除关联信息
				if (delEmployee != null && delEmployee.booleanValue()) {
					ReviewEntity review = (ReviewEntity) dbManager.getById(id, ReviewEntity.class);
					if (review != null && review.getEmployeeId() != null) {
						dbManager.delNoTransaction(review.getEmployeeId(), EmployeeEntity.class);
					}
				}
				result = dbManager.delNoTransaction(id, ReviewEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(ReviewEntity.ID, QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(ReviewEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap, Boolean delOlder, Boolean delSite, Boolean delEmployee) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delOlder != null && delOlder.booleanValue()) {
					List<Object> list = dbManager.queryByConditionNoTransaction(ReviewEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ReviewEntity entity = (ReviewEntity) obj;
							strIds += entity.getOlderId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(OlderEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(OlderEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delSite != null && delSite.booleanValue()) {
					List<Object> list = dbManager.queryByConditionNoTransaction(ReviewEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ReviewEntity entity = (ReviewEntity) obj;
							strIds += entity.getSiteId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(SiteEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(SiteEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delEmployee != null && delEmployee.booleanValue()) {
					List<Object> list = dbManager.queryByConditionNoTransaction(ReviewEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ReviewEntity entity = (ReviewEntity) obj;
							strIds += entity.getEmployeeId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(EmployeeEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(EmployeeEntity.class, qc1);
					}

				}
				result = dbManager.delByConditionsNoTransaction(ReviewEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	private QueryCondition changeMapToQc(Map<String, Object> queryMap) {
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object recordCode = queryMap.get("recordCode");
		Object recordCode_like = queryMap.get("recordCode_like");
		Object recordCode_isNull = queryMap.get("recordCode_isNull");
		Object recordCode_isNotNull = queryMap.get("recordCode_isNotNull");
		Object recordCode_in = queryMap.get("recordCode_in");
		Object olderId = queryMap.get("olderId");
		Object olderId_gt = queryMap.get("olderId_gt");
		Object olderId_ge = queryMap.get("olderId_ge");
		Object olderId_lt = queryMap.get("olderId_lt");
		Object olderId_le = queryMap.get("olderId_le");
		Object olderId_in = queryMap.get("olderId_in");
		Object olderName = queryMap.get("olderName");
		Object olderName_like = queryMap.get("olderName_like");
		Object olderName_isNull = queryMap.get("olderName_isNull");
		Object olderName_isNotNull = queryMap.get("olderName_isNotNull");
		Object olderName_in = queryMap.get("olderName_in");
		Object status = queryMap.get("status");
		Object status_like = queryMap.get("status_like");
		Object status_isNull = queryMap.get("status_isNull");
		Object status_isNotNull = queryMap.get("status_isNotNull");
		Object status_in = queryMap.get("status_in");
		Object method = queryMap.get("method");
		Object method_like = queryMap.get("method_like");
		Object method_isNull = queryMap.get("method_isNull");
		Object method_isNotNull = queryMap.get("method_isNotNull");
		Object method_in = queryMap.get("method_in");
		Object source = queryMap.get("source");
		Object source_like = queryMap.get("source_like");
		Object source_isNull = queryMap.get("source_isNull");
		Object source_isNotNull = queryMap.get("source_isNotNull");
		Object source_in = queryMap.get("source_in");
		Object siteId = queryMap.get("siteId");
		Object siteId_gt = queryMap.get("siteId_gt");
		Object siteId_ge = queryMap.get("siteId_ge");
		Object siteId_lt = queryMap.get("siteId_lt");
		Object siteId_le = queryMap.get("siteId_le");
		Object siteId_in = queryMap.get("siteId_in");
		Object siteName = queryMap.get("siteName");
		Object siteName_like = queryMap.get("siteName_like");
		Object siteName_isNull = queryMap.get("siteName_isNull");
		Object siteName_isNotNull = queryMap.get("siteName_isNotNull");
		Object siteName_in = queryMap.get("siteName_in");
		Object employeeId = queryMap.get("employeeId");
		Object employeeId_gt = queryMap.get("employeeId_gt");
		Object employeeId_ge = queryMap.get("employeeId_ge");
		Object employeeId_lt = queryMap.get("employeeId_lt");
		Object employeeId_le = queryMap.get("employeeId_le");
		Object employeeId_in = queryMap.get("employeeId_in");
		Object employeeName = queryMap.get("employeeName");
		Object employeeName_like = queryMap.get("employeeName_like");
		Object employeeName_isNull = queryMap.get("employeeName_isNull");
		Object employeeName_isNotNull = queryMap.get("employeeName_isNotNull");
		Object employeeName_in = queryMap.get("employeeName_in");
		Object estimatedReviewTime_gt = queryMap.get("estimatedReviewTime_gt");
		Object estimatedReviewTime_ge = queryMap.get("estimatedReviewTime_ge");
		Object estimatedReviewTime_lt = queryMap.get("estimatedReviewTime_lt");
		Object estimatedReviewTime_le = queryMap.get("estimatedReviewTime_le");
		Object realReviewTime_gt = queryMap.get("realReviewTime_gt");
		Object realReviewTime_ge = queryMap.get("realReviewTime_ge");
		Object realReviewTime_lt = queryMap.get("realReviewTime_lt");
		Object realReviewTime_le = queryMap.get("realReviewTime_le");
		Object question1 = queryMap.get("question1");
		Object question1_like = queryMap.get("question1_like");
		Object question1_isNull = queryMap.get("question1_isNull");
		Object question1_isNotNull = queryMap.get("question1_isNotNull");
		Object question1_in = queryMap.get("question1_in");
		Object question2 = queryMap.get("question2");
		Object question2_like = queryMap.get("question2_like");
		Object question2_isNull = queryMap.get("question2_isNull");
		Object question2_isNotNull = queryMap.get("question2_isNotNull");
		Object question2_in = queryMap.get("question2_in");
		Object question3 = queryMap.get("question3");
		Object question3_like = queryMap.get("question3_like");
		Object question3_isNull = queryMap.get("question3_isNull");
		Object question3_isNotNull = queryMap.get("question3_isNotNull");
		Object question3_in = queryMap.get("question3_in");
		Object question4 = queryMap.get("question4");
		Object question4_like = queryMap.get("question4_like");
		Object question4_isNull = queryMap.get("question4_isNull");
		Object question4_isNotNull = queryMap.get("question4_isNotNull");
		Object question4_in = queryMap.get("question4_in");
		Object question5 = queryMap.get("question5");
		Object question5_like = queryMap.get("question5_like");
		Object question5_isNull = queryMap.get("question5_isNull");
		Object question5_isNotNull = queryMap.get("question5_isNotNull");
		Object question5_in = queryMap.get("question5_in");
		Object question6 = queryMap.get("question6");
		Object question6_like = queryMap.get("question6_like");
		Object question6_isNull = queryMap.get("question6_isNull");
		Object question6_isNotNull = queryMap.get("question6_isNotNull");
		Object question6_in = queryMap.get("question6_in");
		Object question7 = queryMap.get("question7");
		Object question7_like = queryMap.get("question7_like");
		Object question7_isNull = queryMap.get("question7_isNull");
		Object question7_isNotNull = queryMap.get("question7_isNotNull");
		Object question7_in = queryMap.get("question7_in");
		Object question8 = queryMap.get("question8");
		Object question8_like = queryMap.get("question8_like");
		Object question8_isNull = queryMap.get("question8_isNull");
		Object question8_isNotNull = queryMap.get("question8_isNotNull");
		Object question8_in = queryMap.get("question8_in");
		Object satisfied = queryMap.get("satisfied");
		Object satisfied_like = queryMap.get("satisfied_like");
		Object satisfied_isNull = queryMap.get("satisfied_isNull");
		Object satisfied_isNotNull = queryMap.get("satisfied_isNotNull");
		Object satisfied_in = queryMap.get("satisfied_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");

		QueryCondition qc = new QueryCondition(ReviewEntity.ID, QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.ID, QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.ID, QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.ID, QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.ID, QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.ID, QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.ID, QueryCondition.in, id_in));
		}
		if (recordCode != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.RECORD_CODE, QueryCondition.eq, recordCode));
		}
		if (recordCode_like != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.RECORD_CODE, QueryCondition.like, recordCode_like));
		}
		if (recordCode_isNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.RECORD_CODE, QueryCondition.isNull, recordCode_isNull));
		}
		if (recordCode_isNotNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.RECORD_CODE, QueryCondition.isNotNull, recordCode_isNotNull));
		}
		if (recordCode_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.RECORD_CODE, QueryCondition.in, recordCode_in));
		}
		if (olderId != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.OLDER_ID, QueryCondition.eq, olderId));
		}
		if (olderId_gt != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.OLDER_ID, QueryCondition.gt, olderId_gt));
		}
		if (olderId_ge != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.OLDER_ID, QueryCondition.ge, olderId_ge));
		}
		if (olderId_lt != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.OLDER_ID, QueryCondition.lt, olderId_lt));
		}
		if (olderId_le != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.OLDER_ID, QueryCondition.le, olderId_le));
		}
		if (olderId_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.OLDER_ID, QueryCondition.in, olderId_in));
		}
		if (olderName != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.OLDER_NAME, QueryCondition.eq, olderName));
		}
		if (olderName_like != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.OLDER_NAME, QueryCondition.like, olderName_like));
		}
		if (olderName_isNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.OLDER_NAME, QueryCondition.isNull, olderName_isNull));
		}
		if (olderName_isNotNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.OLDER_NAME, QueryCondition.isNotNull, olderName_isNotNull));
		}
		if (olderName_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.OLDER_NAME, QueryCondition.in, olderName_in));
		}
		if (status != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.STATUS, QueryCondition.eq, status));
		}
		if (status_like != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.STATUS, QueryCondition.like, status_like));
		}
		if (status_isNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.STATUS, QueryCondition.isNull, status_isNull));
		}
		if (status_isNotNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.STATUS, QueryCondition.isNotNull, status_isNotNull));
		}
		if (status_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.STATUS, QueryCondition.in, status_in));
		}
		if (method != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.METHOD, QueryCondition.eq, method));
		}
		if (method_like != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.METHOD, QueryCondition.like, method_like));
		}
		if (method_isNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.METHOD, QueryCondition.isNull, method_isNull));
		}
		if (method_isNotNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.METHOD, QueryCondition.isNotNull, method_isNotNull));
		}
		if (method_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.METHOD, QueryCondition.in, method_in));
		}
		if (source != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SOURCE, QueryCondition.eq, source));
		}
		if (source_like != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SOURCE, QueryCondition.like, source_like));
		}
		if (source_isNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SOURCE, QueryCondition.isNull, source_isNull));
		}
		if (source_isNotNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SOURCE, QueryCondition.isNotNull, source_isNotNull));
		}
		if (source_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SOURCE, QueryCondition.in, source_in));
		}
		if (siteId != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SITE_ID, QueryCondition.eq, siteId));
		}
		if (siteId_gt != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SITE_ID, QueryCondition.gt, siteId_gt));
		}
		if (siteId_ge != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SITE_ID, QueryCondition.ge, siteId_ge));
		}
		if (siteId_lt != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SITE_ID, QueryCondition.lt, siteId_lt));
		}
		if (siteId_le != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SITE_ID, QueryCondition.le, siteId_le));
		}
		if (siteId_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SITE_ID, QueryCondition.in, siteId_in));
		}
		if (siteName != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SITE_NAME, QueryCondition.eq, siteName));
		}
		if (siteName_like != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SITE_NAME, QueryCondition.like, siteName_like));
		}
		if (siteName_isNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SITE_NAME, QueryCondition.isNull, siteName_isNull));
		}
		if (siteName_isNotNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SITE_NAME, QueryCondition.isNotNull, siteName_isNotNull));
		}
		if (siteName_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SITE_NAME, QueryCondition.in, siteName_in));
		}
		if (employeeId != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.EMPLOYEE_ID, QueryCondition.eq, employeeId));
		}
		if (employeeId_gt != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.EMPLOYEE_ID, QueryCondition.gt, employeeId_gt));
		}
		if (employeeId_ge != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.EMPLOYEE_ID, QueryCondition.ge, employeeId_ge));
		}
		if (employeeId_lt != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.EMPLOYEE_ID, QueryCondition.lt, employeeId_lt));
		}
		if (employeeId_le != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.EMPLOYEE_ID, QueryCondition.le, employeeId_le));
		}
		if (employeeId_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.EMPLOYEE_ID, QueryCondition.in, employeeId_in));
		}
		if (employeeName != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.EMPLOYEE_NAME, QueryCondition.eq, employeeName));
		}
		if (employeeName_like != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.EMPLOYEE_NAME, QueryCondition.like, employeeName_like));
		}
		if (employeeName_isNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.EMPLOYEE_NAME, QueryCondition.isNull, employeeName_isNull));
		}
		if (employeeName_isNotNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.EMPLOYEE_NAME, QueryCondition.isNotNull, employeeName_isNotNull));
		}
		if (employeeName_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.EMPLOYEE_NAME, QueryCondition.in, employeeName_in));
		}
		if (estimatedReviewTime_gt != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.ESTIMATED_REVIEW_TIME, QueryCondition.gt, estimatedReviewTime_gt));
		}
		if (estimatedReviewTime_ge != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.ESTIMATED_REVIEW_TIME, QueryCondition.ge, estimatedReviewTime_ge));
		}
		if (estimatedReviewTime_lt != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.ESTIMATED_REVIEW_TIME, QueryCondition.lt, estimatedReviewTime_lt));
		}
		if (estimatedReviewTime_le != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.ESTIMATED_REVIEW_TIME, QueryCondition.le, estimatedReviewTime_le));
		}
		if (realReviewTime_gt != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.REAL_REVIEW_TIME, QueryCondition.gt, realReviewTime_gt));
		}
		if (realReviewTime_ge != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.REAL_REVIEW_TIME, QueryCondition.ge, realReviewTime_ge));
		}
		if (realReviewTime_lt != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.REAL_REVIEW_TIME, QueryCondition.lt, realReviewTime_lt));
		}
		if (realReviewTime_le != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.REAL_REVIEW_TIME, QueryCondition.le, realReviewTime_le));
		}
		if (question1 != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION1, QueryCondition.eq, question1));
		}
		if (question1_like != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION1, QueryCondition.like, question1_like));
		}
		if (question1_isNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION1, QueryCondition.isNull, question1_isNull));
		}
		if (question1_isNotNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION1, QueryCondition.isNotNull, question1_isNotNull));
		}
		if (question1_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION1, QueryCondition.in, question1_in));
		}
		if (question2 != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION2, QueryCondition.eq, question2));
		}
		if (question2_like != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION2, QueryCondition.like, question2_like));
		}
		if (question2_isNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION2, QueryCondition.isNull, question2_isNull));
		}
		if (question2_isNotNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION2, QueryCondition.isNotNull, question2_isNotNull));
		}
		if (question2_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION2, QueryCondition.in, question2_in));
		}
		if (question3 != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION3, QueryCondition.eq, question3));
		}
		if (question3_like != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION3, QueryCondition.like, question3_like));
		}
		if (question3_isNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION3, QueryCondition.isNull, question3_isNull));
		}
		if (question3_isNotNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION3, QueryCondition.isNotNull, question3_isNotNull));
		}
		if (question3_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION3, QueryCondition.in, question3_in));
		}
		if (question4 != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION4, QueryCondition.eq, question4));
		}
		if (question4_like != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION4, QueryCondition.like, question4_like));
		}
		if (question4_isNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION4, QueryCondition.isNull, question4_isNull));
		}
		if (question4_isNotNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION4, QueryCondition.isNotNull, question4_isNotNull));
		}
		if (question4_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION4, QueryCondition.in, question4_in));
		}
		if (question5 != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION5, QueryCondition.eq, question5));
		}
		if (question5_like != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION5, QueryCondition.like, question5_like));
		}
		if (question5_isNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION5, QueryCondition.isNull, question5_isNull));
		}
		if (question5_isNotNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION5, QueryCondition.isNotNull, question5_isNotNull));
		}
		if (question5_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION5, QueryCondition.in, question5_in));
		}
		if (question6 != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION6, QueryCondition.eq, question6));
		}
		if (question6_like != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION6, QueryCondition.like, question6_like));
		}
		if (question6_isNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION6, QueryCondition.isNull, question6_isNull));
		}
		if (question6_isNotNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION6, QueryCondition.isNotNull, question6_isNotNull));
		}
		if (question6_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION6, QueryCondition.in, question6_in));
		}
		if (question7 != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION7, QueryCondition.eq, question7));
		}
		if (question7_like != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION7, QueryCondition.like, question7_like));
		}
		if (question7_isNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION7, QueryCondition.isNull, question7_isNull));
		}
		if (question7_isNotNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION7, QueryCondition.isNotNull, question7_isNotNull));
		}
		if (question7_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION7, QueryCondition.in, question7_in));
		}
		if (question8 != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION8, QueryCondition.eq, question8));
		}
		if (question8_like != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION8, QueryCondition.like, question8_like));
		}
		if (question8_isNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION8, QueryCondition.isNull, question8_isNull));
		}
		if (question8_isNotNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION8, QueryCondition.isNotNull, question8_isNotNull));
		}
		if (question8_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.QUESTION8, QueryCondition.in, question8_in));
		}
		if (satisfied != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SATISFIED, QueryCondition.eq, satisfied));
		}
		if (satisfied_like != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SATISFIED, QueryCondition.like, satisfied_like));
		}
		if (satisfied_isNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SATISFIED, QueryCondition.isNull, satisfied_isNull));
		}
		if (satisfied_isNotNull != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SATISFIED, QueryCondition.isNotNull, satisfied_isNotNull));
		}
		if (satisfied_in != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.SATISFIED, QueryCondition.in, satisfied_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.CREATE_TIME, QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.CREATE_TIME, QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.CREATE_TIME, QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(ReviewEntity.CREATE_TIME, QueryCondition.le, createTime_le));
		}
		return qc;
	}

}
