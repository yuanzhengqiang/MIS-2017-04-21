package fsk.controller.schedulingManagement;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.framework.system.common.entity.module.ModuleEntity;
import com.framework.system.common.service.SystemService;
import com.framework.system.util.JsonUtil;

import fsk.controller.rehabilitationEvaluation.RehabilitationEvaluationController;
import fsk.handler.softInfo.SoftInfoHandler;

@RequestMapping("/schedulingManagement")
@Controller	
public class SchedulingManagementController {
	private static Logger logger = Logger.getLogger(SchedulingManagementController.class);	
	private SoftInfoHandler softInfoHandler = SoftInfoHandler.getInstance();
	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();	
	
	/**
	 * 工单排班页
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "main")
	public ModelAndView center(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/schedulingManagement/SchedulingManagement");	
		Integer userId = (Integer) request.getSession().getAttribute("userId");// 登录用户ID
		//根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String)request.getSession().getAttribute("roleIds");
		if(roleIds!=null&&moduleId!=null){
			//获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if(htmlModules!=null&&htmlModules.size()>0){
				for(ModuleEntity module:htmlModules){
					request.setAttribute(module.getCode()+"_control", "yes");
				}
				//查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds,htmlModules);
				if(modules!=null&&modules.size()>0){
					for(ModuleEntity module:modules){
						request.setAttribute(module.getCode()+"_show", "yes");
					}
				}
			}			
		}
		mav.addObject("userId", userId);
		return mav;
	}
	
	/**
	 * 排班审核页
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "mainCheck")
	public ModelAndView centerCheck(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/schedulingManagement/SchedulingCheck");	
		Integer userId = (Integer) request.getSession().getAttribute("userId");// 登录用户ID
		//根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String)request.getSession().getAttribute("roleIds");
		if(roleIds!=null&&moduleId!=null){
			//获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if(htmlModules!=null&&htmlModules.size()>0){
				for(ModuleEntity module:htmlModules){
					request.setAttribute(module.getCode()+"_control", "yes");
				}
				//查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds,htmlModules);
				if(modules!=null&&modules.size()>0){
					for(ModuleEntity module:modules){
						request.setAttribute(module.getCode()+"_show", "yes");
					}
				}
			}			
		}
		mav.addObject("userId", userId);
		return mav;
	}
	/**
	 * 消息体格式请求处理
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handlercontent")
	public void queryApp(HttpServletRequest request,HttpServletResponse response) {
		try {			
			InputStream is = request.getInputStream();
  	        byte[] bis = IOUtils.toByteArray(is);
  	        String reqmsg = new String(bis, "UTF-8"); 	     
		    Map reqParams = JsonUtil.getMap4Json(reqmsg);
		    if (reqParams == null) {
		      return;
		    }
		    String action = (String)reqParams.get("action");
		    String rep = softInfoHandler.doHandler(1, action, reqmsg, request, response);
		    OutputStream os = response.getOutputStream();
		    os.write(rep.toString().getBytes("UTF-8"));
		} catch (Exception e) {
			logger.error(e.toString());
		}	
	}
}
