package fsk.controller.review;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.framework.system.common.entity.json.AjaxJson;

import fsk.entity.older.OlderEntity;
import fsk.entity.olderAddress.OlderAddressEntity;
import fsk.entity.olderContact.OlderContactEntity;
import fsk.entity.siteServiceArea.SiteServiceAreaEntity;
import fsk.handler.ReviewCountHandler;
import fsk.handler.review.ReviewHandler;
import fsk.service.review.ReviewService;
import com.framework.system.util.JsonUtil;
import com.framework.system.common.entity.module.ModuleEntity;
import com.framework.system.common.service.SystemService;
import com.framework.system.common.tools.Datetools;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.query.PageList;

import org.apache.commons.io.IOUtils;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;


@RequestMapping("/review")
@Controller	
public class ReviewController {
	private static Logger logger = Logger.getLogger(ReviewController.class);	
	/**
	 * 处理器
	 */
	private ReviewHandler reviewHandler = ReviewHandler.getInstance();
	/**
	 * 服务类
	 */
	private ReviewService reviewService = ReviewService.getInstance();
	
	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();	
		
	/**
	 * 已回访记录列表页
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "realReviewmain")
	public ModelAndView realReviewcenter(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/review/RealReviewList");			
		//根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String)request.getSession().getAttribute("roleIds");
		if(roleIds!=null&&moduleId!=null){
			//获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if(htmlModules!=null&&htmlModules.size()>0){
				for(ModuleEntity module:htmlModules){
					request.setAttribute(module.getCode()+"_control", "yes");
				}
				//查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds,htmlModules);
				if(modules!=null&&modules.size()>0){
					for(ModuleEntity module:modules){
						request.setAttribute(module.getCode()+"_show", "yes");
					}
				}
			}			
		}		
		return mav;
	}
	
	/**
	 * 待回访记录列表页
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "waitReviewmain")
	public ModelAndView waitReviewcenter(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/review/WaitReviewList");			
		//根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String)request.getSession().getAttribute("roleIds");
		if(roleIds!=null&&moduleId!=null){
			//获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if(htmlModules!=null&&htmlModules.size()>0){
				for(ModuleEntity module:htmlModules){
					request.setAttribute(module.getCode()+"_control", "yes");
				}
				//查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds,htmlModules);
				if(modules!=null&&modules.size()>0){
					for(ModuleEntity module:modules){
						request.setAttribute(module.getCode()+"_show", "yes");
					}
				}
			}			
		}		
		return mav;
	}
	
	/**
	 * 回访统计列表页
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "statisticsReviewmain")
	public ModelAndView statisticsReviewcenter(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/review/StatisticsReviewList");			
		//根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String)request.getSession().getAttribute("roleIds");
		if(roleIds!=null&&moduleId!=null){
			//获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if(htmlModules!=null&&htmlModules.size()>0){
				for(ModuleEntity module:htmlModules){
					request.setAttribute(module.getCode()+"_control", "yes");
				}
				//查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds,htmlModules);
				if(modules!=null&&modules.size()>0){
					for(ModuleEntity module:modules){
						request.setAttribute(module.getCode()+"_show", "yes");
					}
				}
			}			
		}		
		return mav;
	}
	
	/**
	 * 新增或者详情页
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "mainXQ")
	public ModelAndView centerXQ(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/review/ReviewDetails");	
		Integer userId = (Integer) request.getSession().getAttribute("userId");// 登录用户ID
		String olderId = "";
		if(request.getParameter("olderId") != null && !"".equals(request.getParameter("olderId"))){
			olderId = request.getParameter("olderId");
		}
		String id = "";
		if(request.getParameter("id") != null && !"".equals(request.getParameter("id"))){
			id = request.getParameter("id");
		}
		//根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String)request.getSession().getAttribute("roleIds");
		if(roleIds!=null&&moduleId!=null){
			//获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if(htmlModules!=null&&htmlModules.size()>0){
				for(ModuleEntity module:htmlModules){
					request.setAttribute(module.getCode()+"_control", "yes");
				}
				//查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds,htmlModules);
				if(modules!=null&&modules.size()>0){
					for(ModuleEntity module:modules){
						request.setAttribute(module.getCode()+"_show", "yes");
					}
				}
			}			
		}		
		mav.addObject("userId", userId);
		mav.addObject("olderId", olderId);
		mav.addObject("id", id);
		return mav;
	}
	
	/**
	 * 批量删除 ids英文逗号间隔
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "del")
	@ResponseBody
	public AjaxJson del(HttpServletRequest request) {
		AjaxJson j = new AjaxJson();		
		String result="failure";
		String des="删除失败";
		String ids = request.getParameter("ids");
		if(ids!=null&&!"".equals(ids)){
			boolean falg = reviewService.del(ids);	
			if(falg){
				result="success";
				des="删除成功";
			}
		}
		j.setResult(result);
        j.setDes(des);
		return j;
	}
	
	/**
	 * 消息体格式请求处理
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handler")
	@ResponseBody
	public String query(HttpServletRequest request,HttpServletResponse response) {
		String msg="";
		try {
			String reqmsg = request.getParameter("reqmsg");
		    Map reqParams = JsonUtil.getMap4Json(reqmsg);
		    if (reqParams == null) {
		      return msg;
		    }
		    String action = (String)reqParams.get("action");
		    String rep = reviewHandler.doHandler(1, action, reqmsg, request, response);
		    msg = new String(rep.getBytes("utf-8"), "iso-8859-1");
		} catch (Exception e) {
			logger.error(e.toString());
		}	

		return msg;
	}
	
	/**
	 * 消息体格式请求处理
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handlercontent")
	public void queryApp(HttpServletRequest request,HttpServletResponse response) {
		try {			
			InputStream is = request.getInputStream();
  	        byte[] bis = IOUtils.toByteArray(is);
  	        String reqmsg = new String(bis, "UTF-8"); 	     
		    Map reqParams = JsonUtil.getMap4Json(reqmsg);
		    if (reqParams == null) {
		      return;
		    }
		    String action = (String)reqParams.get("action");
		    String rep = reviewHandler.doHandler(1, action, reqmsg, request, response);
		    OutputStream os = response.getOutputStream();
		    os.write(rep.toString().getBytes("UTF-8"));
		} catch (Exception e) {
			logger.error(e.toString());
		}	
	}
	/**
	 * 回访统计
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "reviewCount")
	@ResponseBody
	public String reviewCount(HttpServletRequest request,HttpServletResponse response,String startTime,String endTime,Integer pageno,Integer pagesize) {
		String msg = ReviewCountHandler.reviewHandler(startTime, endTime,pageno,pagesize);
		try {
		    msg = new String(msg.getBytes("utf-8"), "iso-8859-1");
		} catch (Exception e) {
			logger.error(e.toString());
		}	
		return msg;
	}
	
	/**
	 * 满意度统计
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "satisfactionCount")
	@ResponseBody
	public String satisfactionCount(HttpServletRequest request,HttpServletResponse response,String siteId,String startTime,String endTime) {
		String msg = ReviewCountHandler.satisfactionHandler(siteId, startTime, endTime);
		try {
		    msg = new String(msg.getBytes("utf-8"), "iso-8859-1");
		} catch (Exception e) {
			logger.error(e.toString());
		}	
		return msg;
	}
	
	/**
	 * 导出回访率统计信息为 xls 文件
	 * @param request
	 * @param response
	 * @param timeStart
	 * @param timeEnd
	 */
	@RequestMapping(params = "exportxls")
	public void exportXls(HttpServletRequest request,
			HttpServletResponse response,String timeStart,String timeEnd) {
		try {
			String filepath = request.getSession().getServletContext()
					.getRealPath("/view/source");
			File file = new File(filepath, "回访率统计导出模板.xls");

			HSSFWorkbook workbook2003 = null;
			if (file.exists()) {
				String msg = ReviewCountHandler.reviewHandler(timeStart, timeEnd,1,10000000);
				if(msg != null && !"".equals(msg)){
					try {
						workbook2003 = new HSSFWorkbook(new FileInputStream(file));
					} catch (Exception e) {
						e.printStackTrace();
					}
					HSSFSheet sheet = workbook2003.getSheet("Sheet1");
				
				    Map reqParams = JsonUtil.getMap4Json(msg);
				    JSONObject contentreq = (JSONObject)reqParams.get("content");
				    if(contentreq != null){
				    	Object reviewListObj = (Object) contentreq.get("reviewList");
				    	JSONArray reviewLists = (JSONArray)reviewListObj;
						for(int i=0;i<reviewLists.size();i++){
							if(reviewLists.get(i) != null){
								String reviewListsString = reviewLists.get(i).toString();
								Map reviewListsStringMap = JsonUtil.getMap4Json(reviewListsString);
								HSSFRow row = sheet.createRow(i+1);
								// 开始创建单元格并赋值
								
								HSSFCell siteNameCell = row.createCell(0);
								if ((String)reviewListsStringMap.get("siteName") == null) {
									siteNameCell.setCellValue("无");
								} else {
									siteNameCell.setCellValue((String)reviewListsStringMap.get("siteName"));
								}
								
								HSSFCell yinghuifangCell = row.createCell(1);
								if (reviewListsStringMap.get("yinghuifang") == null) {
									yinghuifangCell.setCellValue("无");
								} else {
									yinghuifangCell.setCellValue(reviewListsStringMap.get("yinghuifang").toString());
								}
								
								HSSFCell zhandianhuifangallCell = row.createCell(2);
								if ((String)reviewListsStringMap.get("zhandianhuifangall") == null) {
									zhandianhuifangallCell.setCellValue("无");
								} else {
									zhandianhuifangallCell.setCellValue((String)reviewListsStringMap.get("zhandianhuifangall"));
								}
								
								HSSFCell zhandiandianhuaCell = row.createCell(3);
								if ((String)reviewListsStringMap.get("zhandiandianhua") == null) {
									zhandiandianhuaCell.setCellValue("无");
								} else {
									zhandiandianhuaCell.setCellValue((String)reviewListsStringMap.get("zhandiandianhua"));
								}
								
								HSSFCell zhandianjigouCell = row.createCell(4);
								if ((String)reviewListsStringMap.get("zhandianjigou") == null) {
									zhandianjigouCell.setCellValue("无");
								} else {
									zhandianjigouCell.setCellValue((String)reviewListsStringMap.get("zhandianjigou"));
								}
								
								HSSFCell zhandiantuhuCell = row.createCell(5);
								if ((String)reviewListsStringMap.get("zhandiantuhu") == null) {
									zhandiantuhuCell.setCellValue("无");
								} else {
									zhandiantuhuCell.setCellValue((String)reviewListsStringMap.get("zhandiantuhu"));
								}
								
								HSSFCell pinbaohuifangallCell = row.createCell(6);
								if ((String)reviewListsStringMap.get("pinbaohuifangall") == null) {
									pinbaohuifangallCell.setCellValue("无");
								} else {
									pinbaohuifangallCell.setCellValue((String)reviewListsStringMap.get("pinbaohuifangall"));
								}
								
								HSSFCell pinbaodianhuaCell = row.createCell(7);
								if ((String)reviewListsStringMap.get("pinbaodianhua") == null) {
									pinbaodianhuaCell.setCellValue("无");
								} else {
									pinbaodianhuaCell.setCellValue((String)reviewListsStringMap.get("pinbaodianhua"));
								}
								
								HSSFCell pinbaojigouCell = row.createCell(8);
								if ((String)reviewListsStringMap.get("pinbaojigou") == null) {
									pinbaojigouCell.setCellValue("无");
								} else {
									pinbaojigouCell.setCellValue((String)reviewListsStringMap.get("pinbaojigou"));
								}
								
								HSSFCell pinbaoruhuCell = row.createCell(9);
								if ((String)reviewListsStringMap.get("pinbaoruhu") == null) {
									pinbaoruhuCell.setCellValue("无");
								} else {
									pinbaoruhuCell.setCellValue((String)reviewListsStringMap.get("pinbaoruhu"));
								}
								
							}	
						}
				    }
				    response.setContentType("application/octet-stream");
					String time=Datetools.getCurrentDate();
					time=time.substring(0, 4) + "_" + time.substring(4, 6) + "_" + time.substring(6, 8) + " " + time.substring(8, 10) + "." + time.substring(10, 12) + "." + time.substring(12, 14);
					response.addHeader("Content-Disposition", "attachment; filename=returnRateStatistics_"
							+ time + ".xls");
					OutputStream os = response.getOutputStream();
					workbook2003.write(os);
				}
			}
		} catch (Exception e) {

		}
	}
}
