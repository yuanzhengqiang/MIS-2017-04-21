package fsk.handler.physiologicalParametersHistory;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.business.handler.BaseHandler;
import com.framework.system.common.service.SystemService;
import com.framework.system.db.query.OrderVO;
import com.framework.system.util.JsonUtil;

import fsk.entity.physiologicalParametersCurrent.PhysiologicalParametersCurrentEntity;
import fsk.entity.physiologicalParametersHistory.PhysiologicalParametersHistoryEntity;
import fsk.pack.physiologicalParametersHistory.PhysiologicalParametersHistoryPack;
import fsk.parse.physiologicalParametersHistory.PhysiologicalParametersHistoryParse;
import fsk.service.physiologicalParametersCurrent.PhysiologicalParametersCurrentService;
import fsk.service.physiologicalParametersHistory.PhysiologicalParametersHistoryService;
import fsk.util.ParameterStatisticsUtil;
import fsk.util.SqlUtil;

/**
 * @Title: Handler
 * @Description: 生理参数历史表业务处理器
 * @author feng.gu
 * @date 2016-07-07 17:49:09
 * @version V1.0
 * 
 */
public class PhysiologicalParametersHistoryHandler extends BaseHandler {
	private static Logger logger = Logger.getLogger(PhysiologicalParametersHistoryService.class);
	/**
	 * 解析器
	 */
	private PhysiologicalParametersHistoryParse physiologicalParametersHistoryParse = PhysiologicalParametersHistoryParse.getInstance();
	/**
	 * 业务处理器
	 */
	private static PhysiologicalParametersCurrentService physiologicalParametersCurrentService = PhysiologicalParametersCurrentService.getInstance();
	private PhysiologicalParametersHistoryService physiologicalParametersHistoryService = PhysiologicalParametersHistoryService.getInstance();
	/**
	 * 封装器
	 */
	private PhysiologicalParametersHistoryPack physiologicalParametersHistoryPack = PhysiologicalParametersHistoryPack.getInstance();

	private static PhysiologicalParametersHistoryHandler physiologicalParametersHistoryHandler;

	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();
	private static SimpleDateFormat formater = new SimpleDateFormat("yyyyMMddHHmmss");
	private static ParameterStatisticsUtil parameterStatistics = ParameterStatisticsUtil.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static PhysiologicalParametersHistoryHandler getInstance() {
		if (physiologicalParametersHistoryHandler == null) {
			physiologicalParametersHistoryHandler = new PhysiologicalParametersHistoryHandler();
		}
		return physiologicalParametersHistoryHandler;
	}

	/**
	 * 
	 * @param type
	 *            1-json 2-xml
	 * @param entityName
	 * @param command
	 * @param reqStr
	 * @param request
	 * @param response
	 */
	public String doHandler(int type, String command, String reqStr, HttpServletRequest request, HttpServletResponse response) {
		logger.debug("请求消息：" + reqStr);
		String resultStr = "";
		try {
			// 解析
			Map<String, Object> parseMap = physiologicalParametersHistoryParse.parse(type, command, reqStr, request);
			String action = (String) parseMap.get("action");
			PhysiologicalParametersHistoryEntity physiologicalParametersHistory = (PhysiologicalParametersHistoryEntity) parseMap
					.get("physiologicalParametersHistory");
			List<PhysiologicalParametersHistoryEntity> physiologicalParametersHistoryList = (List<PhysiologicalParametersHistoryEntity>) parseMap
					.get("physiologicalParametersHistoryList");
			Integer id = (Integer) parseMap.get("id");
			Map<String, Object> queryMap = (Map<String, Object>) parseMap.get("queryMap");
			int pageno = (Integer) parseMap.get("pageno");
			int pagesize = (Integer) parseMap.get("pagesize");
			List<OrderVO> orderList = (List<OrderVO>) parseMap.get("orderList");

			Boolean olderShow = (Boolean) parseMap.get("olderShow");
			Boolean delOlder = (Boolean) parseMap.get("delOlder");

			PhysiologicalParametersHistoryEntity physiologicalParametersHistory2 = null;
			String ids = "";
			JSONObject reqStrjson = JSONObject.fromObject(reqStr);
			JSONObject contentjson = (JSONObject) reqStrjson.get("content");
			// 业务处理
			Object result = null;
			if ("save".equals(action)) {
				// 更新历史数据表
				boolean flag = false;

				JSONArray phyjson = (JSONArray) contentjson.get("physiologicalParameters");
				Integer olderId = physiologicalParametersHistory.getOlderId();
				String measurePerson = physiologicalParametersHistory.getMeasurePerson();
				JSONArray jsonarray = new JSONArray();
				if (phyjson != null && phyjson.size() > 0) {
					for (int i = 0; i < phyjson.size(); i++) {
						JSONObject olderjson = (JSONObject) phyjson.get(i);
						Integer olderType = (Integer) olderjson.get("type");
						Integer status = (Integer) olderjson.get("status");
						// 数值状态判断 pei
						if (status != null && status == 0) {
							if (olderType == 1) {
								Double value = JsonUtil.getJSONDouble(olderjson, "value");
								Double value2 = JsonUtil.getJSONDouble(olderjson, "value2");
								Map<String, Object> queryMapcur = new HashMap<String, Object>();
								queryMapcur.put("olderId", olderId);
								queryMapcur.put("type", olderType);
								List<PhysiologicalParametersCurrentEntity> phyentityList = physiologicalParametersCurrentService
										.getListByCondition(queryMapcur);
								if (phyentityList != null && phyentityList.size() > 0) {
									PhysiologicalParametersCurrentEntity entity = phyentityList.get(0);
									BigDecimal max = entity.getMaxValue();
									BigDecimal min = entity.getMinValue();
									if (BigDecimal.valueOf(value).compareTo(max) == 1) {
										olderjson.put("status", 2);
									} else if (BigDecimal.valueOf(value).compareTo(min) == -1) {
										olderjson.put("status", 3);
									} else {
										olderjson.put("status", 1);
									}
									BigDecimal max2 = entity.getMaxValue2();
									BigDecimal min2 = entity.getMinValue2();
									if (BigDecimal.valueOf(value2).compareTo(max2) == 1) {
										olderjson.put("status2", 2);
									} else if (BigDecimal.valueOf(value2).compareTo(min2) == -1) {
										olderjson.put("status2", 3);
									} else {
										olderjson.put("status2", 1);
									}
								}
							} else {
								Double value = JsonUtil.getJSONDouble(olderjson, "value");
								Map<String, Object> queryMapcur = new HashMap<String, Object>();
								queryMapcur.put("olderId", olderId);
								queryMapcur.put("type", olderType);
								List<PhysiologicalParametersCurrentEntity> phyentityList = physiologicalParametersCurrentService
										.getListByCondition(queryMapcur);
								if (phyentityList != null && phyentityList.size() > 0) {
									PhysiologicalParametersCurrentEntity entity = phyentityList.get(0);
									BigDecimal max = entity.getMaxValue();
									BigDecimal min = entity.getMinValue();
									if (BigDecimal.valueOf(value).compareTo(max) == 1) {
										olderjson.put("status", 2);
									} else if (BigDecimal.valueOf(value).compareTo(min) == -1) {
										olderjson.put("status", 3);
									} else {
										olderjson.put("status", 1);
									}
								}
							}

						}
						//
						// 增加
						Double olderValue = JsonUtil.getJSONDouble(olderjson, "value");
						String olderUnit = (String) olderjson.get("unit");
						Integer olderStatus = (Integer) olderjson.get("status");
						String olderCreateTime = (String) olderjson.get("createTime");
						Double olderValue2 = JsonUtil.getJSONDouble(olderjson, "value2");
						Integer olderStatus2 = (Integer) olderjson.get("status2");
						Map<String, Object> queryMapcur = new HashMap<String, Object>();
						queryMapcur.put("olderId", olderId);
						queryMapcur.put("type", olderType);
						List<PhysiologicalParametersCurrentEntity> phyentityList = physiologicalParametersCurrentService.getListByCondition(queryMapcur);
						if (phyentityList != null && phyentityList.size() > 0) {
							PhysiologicalParametersCurrentEntity curentityTemp = phyentityList.get(0);
							String curTime = curentityTemp.getCreateTime();
							if (curTime == null) {
								curentityTemp.setOlderId(olderId);
								curentityTemp.setType(olderType);
								curentityTemp.setValue(BigDecimal.valueOf(olderValue));
								curentityTemp.setStatus(olderStatus);
								curentityTemp.setUnit(olderUnit);
								curentityTemp.setCreateTime(olderCreateTime);
								if (olderValue2 != null) {
									curentityTemp.setValue2(BigDecimal.valueOf(olderValue2));
								}
								if (olderStatus2 != null) {
									curentityTemp.setStatus2(olderStatus2);
								}
								curentityTemp.setMeasurePerson(measurePerson);
								result = physiologicalParametersCurrentService.save(curentityTemp);
							} else {
								Date dt1 = formater.parse(olderCreateTime);
								Date dt2 = formater.parse(curTime);
								if (dt1.getTime() > dt2.getTime()) {
									curentityTemp.setOlderId(olderId);
									curentityTemp.setType(olderType);
									curentityTemp.setValue(BigDecimal.valueOf(olderValue));
									curentityTemp.setStatus(olderStatus);
									curentityTemp.setUnit(olderUnit);
									curentityTemp.setCreateTime(olderCreateTime);
									if (olderValue2 != null) {
										curentityTemp.setValue2(BigDecimal.valueOf(olderValue2));
									}
									if (olderStatus2 != null) {
										curentityTemp.setStatus2(olderStatus2);
									}
									curentityTemp.setMeasurePerson(measurePerson);
									result = physiologicalParametersCurrentService.save(curentityTemp);
								}
							}
							physiologicalParametersHistory2 = new PhysiologicalParametersHistoryEntity();
							physiologicalParametersHistory2.setOlderId(olderId);
							physiologicalParametersHistory2.setType(olderType);
							physiologicalParametersHistory2.setValue(BigDecimal.valueOf(olderValue));
							physiologicalParametersHistory2.setUnit(olderUnit);
							physiologicalParametersHistory2.setStatus(olderStatus);
							physiologicalParametersHistory2.setCreateTime(olderCreateTime);
							physiologicalParametersHistory2.setMeasurePerson(measurePerson);
							if (olderValue2 != null) {
								physiologicalParametersHistory2.setValue2(BigDecimal.valueOf(olderValue2));
							}
							if (olderStatus2 != null) {
								physiologicalParametersHistory2.setStatus2(olderStatus2);
							}
							result = physiologicalParametersHistoryService.save(physiologicalParametersHistory2);
							if (result.equals(false)) {
								flag = true;
							} else if (result.equals(true)) {
								JSONObject jsonobject = new JSONObject();
								jsonobject.put("id", physiologicalParametersHistory2.getId());
								jsonobject.put("type", physiologicalParametersHistory2.getType());
								jsonarray.add(jsonobject);
							}
						} else {
							physiologicalParametersHistory2 = new PhysiologicalParametersHistoryEntity();
							physiologicalParametersHistory2.setOlderId(olderId);
							physiologicalParametersHistory2.setType(olderType);
							physiologicalParametersHistory2.setValue(BigDecimal.valueOf(olderValue));
							physiologicalParametersHistory2.setUnit(olderUnit);
							physiologicalParametersHistory2.setStatus(olderStatus);
							physiologicalParametersHistory2.setCreateTime(olderCreateTime);
							physiologicalParametersHistory2.setMeasurePerson(measurePerson);
							if (olderValue2 != null) {
								physiologicalParametersHistory2.setValue2(BigDecimal.valueOf(olderValue2));
							}
							if (olderStatus2 != null) {
								physiologicalParametersHistory2.setStatus2(olderStatus2);
							}
							result = physiologicalParametersHistoryService.save(physiologicalParametersHistory2);
							if (result.equals(false)) {
								flag = true;

							} else if (result.equals(true)) {
								JSONObject jsonobject = new JSONObject();
								jsonobject.put("id", physiologicalParametersHistory2.getId());
								jsonobject.put("type", physiologicalParametersHistory2.getType());
								jsonarray.add(jsonobject);
							}
							PhysiologicalParametersCurrentEntity curentityTemp = new PhysiologicalParametersCurrentEntity();
							curentityTemp.setOlderId(olderId);
							curentityTemp.setType(olderType);
							curentityTemp.setValue(BigDecimal.valueOf(olderValue));
							curentityTemp.setStatus(olderStatus);
							curentityTemp.setUnit(olderUnit);
							curentityTemp.setCreateTime(olderCreateTime);
							curentityTemp.setMeasurePerson(measurePerson);
							if (olderValue2 != null) {
								curentityTemp.setValue2(BigDecimal.valueOf(olderValue2));
							}
							if (olderStatus2 != null) {
								curentityTemp.setStatus2(olderStatus2);
							}
							if (olderType == 1 || olderType == 2) {
								curentityTemp.setMaxValue(BigDecimal.valueOf(140));
								curentityTemp.setMinValue(BigDecimal.valueOf(90));
								curentityTemp.setMaxValue2(BigDecimal.valueOf(90));
								curentityTemp.setMinValue2(BigDecimal.valueOf(60));
								curentityTemp.setThresholdPerson(measurePerson);
								curentityTemp.setThresholdPerson2(measurePerson);
								curentityTemp.setThresholdTime(olderCreateTime);
								curentityTemp.setThresholdTime2(olderCreateTime);
							} else if (olderType == 3) {
								curentityTemp.setMaxValue(BigDecimal.valueOf(6.1));
								curentityTemp.setMinValue(BigDecimal.valueOf(4));
								curentityTemp.setThresholdPerson(measurePerson);
								curentityTemp.setThresholdTime(olderCreateTime);
							} else if (olderType == 4) {
								curentityTemp.setMaxValue(BigDecimal.valueOf(7.8));
								curentityTemp.setMinValue(BigDecimal.valueOf(4));
								curentityTemp.setThresholdPerson(measurePerson);
								curentityTemp.setThresholdTime(olderCreateTime);
							} else if (olderType == 5) {
								curentityTemp.setMaxValue(BigDecimal.valueOf(100));
								curentityTemp.setMinValue(BigDecimal.valueOf(60));
								curentityTemp.setThresholdPerson(measurePerson);
								curentityTemp.setThresholdTime(olderCreateTime);
							} else if (olderType == 6) {
								curentityTemp.setMaxValue(BigDecimal.valueOf(37.4));
								curentityTemp.setMinValue(BigDecimal.valueOf(36));
								curentityTemp.setThresholdPerson(measurePerson);
								curentityTemp.setThresholdTime(olderCreateTime);
							} else if (olderType == 7) {
								curentityTemp.setMaxValue(BigDecimal.valueOf(80));
								curentityTemp.setMinValue(BigDecimal.valueOf(67));
								curentityTemp.setThresholdPerson(measurePerson);
								curentityTemp.setThresholdTime(olderCreateTime);
							} else if (olderType == 8) {
								curentityTemp.setMaxValue(BigDecimal.valueOf(100));
								curentityTemp.setMinValue(BigDecimal.valueOf(95));
								curentityTemp.setThresholdPerson(measurePerson);
								curentityTemp.setThresholdTime(olderCreateTime);
							} else if (olderType == 9) {
								curentityTemp.setMaxValue(BigDecimal.valueOf(1));
								curentityTemp.setMinValue(BigDecimal.valueOf(-1));
								curentityTemp.setThresholdPerson(measurePerson);
								curentityTemp.setThresholdTime(olderCreateTime);
							}
							//
							result = physiologicalParametersCurrentService.save(curentityTemp);
						}
					}
				}
				ids = jsonarray.toString();
				if (flag) {
					result = false;
				}
				if (result == null) {
					result = true;
				}
				//
			} else if ("saveList".equals(action)) {
				result = physiologicalParametersHistoryService.saveList(physiologicalParametersHistoryList);
			} else if ("getById".equals(action)) {
				result = physiologicalParametersHistoryService.getById(id, olderShow);
			} else if ("getListByCondition".equals(action)) {
				// 根据数据权限 增加查询条件
				Integer olderId = (Integer) contentjson.get("olderId");
				String type_in = (String) contentjson.get("type_in");
				String createTime_ge = (String) contentjson.get("createTime_ge");
				String createTime_le = (String) contentjson.get("createTime_le");// status_in
				String status_in = (String) contentjson.get("status_in");// status_in
				if ("1".equals(type_in) && "2,3".equals(status_in)) {
					resultStr = SqlUtil.getBloodPresure(pageno, pagesize, olderId, createTime_ge, createTime_le);
					logger.debug("返回消息：" + resultStr);
					return resultStr;
				}
				queryMap = systemService.addDataRule("PhysiologicalParametersHistoryEntity", queryMap, request);
				result = physiologicalParametersHistoryService.getListByCondition(queryMap, orderList, pageno, pagesize, olderShow);
			} else if ("del".equals(action)) {
				result = physiologicalParametersHistoryService.del(id, delOlder);
			} else if ("delList".equals(action)) {
				result = physiologicalParametersHistoryService.delList(queryMap, delOlder);
			}
			// 封装
			Map<String, Object> packMap = physiologicalParametersHistoryPack.pack(type, action, result, physiologicalParametersHistory2);
			String actionBack = (String) packMap.get("action");
			String resultBack = (String) packMap.get("result");
			String desBack = (String) packMap.get("des");
			JSONObject pageBack = (JSONObject) packMap.get("page");
			JSONObject contentBack = (JSONObject) packMap.get("content");
			// ids返回的加增
			if (!"".equals(ids)) {
				contentBack.put("ids", ids);
			}
			JSONObject repJson = new JSONObject();
			if (actionBack != null && !"".equals(actionBack)) {
				repJson.put("action", actionBack);
			}
			if (resultBack != null && !"".equals(resultBack)) {
				repJson.put("result", resultBack);
			}
			if (desBack != null && !"".equals(desBack)) {
				repJson.put("des", desBack);
			}
			if (pageBack != null) {
				repJson.put("page", pageBack);
			}
			if (contentBack != null && !"".equals(contentBack)) {
				// 添加返回信息
				if ("getListByCondition".equals(action)) {
					JSONObject json = parameterStatistics.getStatistics(queryMap, orderList);
					contentBack.put("tongji", json.toString());
					repJson.put("content", contentBack);
				}

			}
			logger.debug("返回消息：" + repJson.toString());
			resultStr = repJson.toString();
		} catch (Exception e) {
			logger.error(e);
		}
		return resultStr;
	}
}
