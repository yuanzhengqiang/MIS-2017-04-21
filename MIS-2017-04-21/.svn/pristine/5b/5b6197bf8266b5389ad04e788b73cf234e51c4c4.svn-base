package fsk.handler.physiologicalParametersCurrent;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.business.handler.BaseHandler;
import com.framework.system.common.service.SystemService;
import com.framework.system.db.query.OrderVO;
import com.framework.system.util.JsonUtil;

import fsk.entity.physiologicalParametersCurrent.PhysiologicalParametersCurrentEntity;
import fsk.pack.physiologicalParametersCurrent.PhysiologicalParametersCurrentPack;
import fsk.parse.physiologicalParametersCurrent.PhysiologicalParametersCurrentParse;
import fsk.service.physiologicalParametersCurrent.PhysiologicalParametersCurrentService;

/**
 * @Title: Handler
 * @Description: 生理参数当前表业务处理器
 * @author feng.gu
 * @date 2016-07-07 17:49:05
 * @version V1.0
 * 
 */
public class PhysiologicalParametersCurrentHandler extends BaseHandler {
	private static Logger logger = Logger.getLogger(PhysiologicalParametersCurrentService.class);
	/**
	 * 解析器
	 */
	private PhysiologicalParametersCurrentParse physiologicalParametersCurrentParse = PhysiologicalParametersCurrentParse.getInstance();
	/**
	 * 业务处理器
	 */
	private PhysiologicalParametersCurrentService physiologicalParametersCurrentService = PhysiologicalParametersCurrentService.getInstance();
	/**
	 * 封装器
	 */
	private PhysiologicalParametersCurrentPack physiologicalParametersCurrentPack = PhysiologicalParametersCurrentPack.getInstance();

	private static PhysiologicalParametersCurrentHandler physiologicalParametersCurrentHandler;

	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static PhysiologicalParametersCurrentHandler getInstance() {
		if (physiologicalParametersCurrentHandler == null) {
			physiologicalParametersCurrentHandler = new PhysiologicalParametersCurrentHandler();
		}
		return physiologicalParametersCurrentHandler;
	}

	/**
	 * 
	 * @param type
	 *            1-json 2-xml
	 * @param entityName
	 * @param command
	 * @param reqStr
	 * @param request
	 * @param response
	 */
	public String doHandler(int type, String command, String reqStr, HttpServletRequest request, HttpServletResponse response) {
		logger.debug("请求消息：" + reqStr);
		String resultStr = "";
		try {
			// 解析
			Map<String, Object> parseMap = physiologicalParametersCurrentParse.parse(type, command, reqStr, request);
			String action = (String) parseMap.get("action");
			PhysiologicalParametersCurrentEntity physiologicalParametersCurrent = (PhysiologicalParametersCurrentEntity) parseMap
					.get("physiologicalParametersCurrent");
			List<PhysiologicalParametersCurrentEntity> physiologicalParametersCurrentList = (List<PhysiologicalParametersCurrentEntity>) parseMap
					.get("physiologicalParametersCurrentList");
			Integer id = (Integer) parseMap.get("id");
			Map<String, Object> queryMap = (Map<String, Object>) parseMap.get("queryMap");
			int pageno = (Integer) parseMap.get("pageno");
			int pagesize = (Integer) parseMap.get("pagesize");
			List<OrderVO> orderList = (List<OrderVO>) parseMap.get("orderList");

			Boolean olderShow = (Boolean) parseMap.get("olderShow");
			Boolean delOlder = (Boolean) parseMap.get("delOlder");

			// 业务处理
			Object result = null;
			if ("save".equals(action)) {
				/* 保存 */
				Integer olderId = physiologicalParametersCurrent.getOlderId();
				JSONObject reqStrjson = JSONObject.fromObject(reqStr);
				JSONObject contentjson = (JSONObject) reqStrjson.get("content");
				JSONArray phyjson = (JSONArray) contentjson.get("physiologicalParameters");
				if (phyjson != null && phyjson.size() > 0) {
					for (int i = 0; i < phyjson.size(); i++) {
						JSONObject olderjson = (JSONObject) phyjson.get(i);
						Integer olderType = (Integer) olderjson.get("type");
						Double minValue = JsonUtil.getJSONDouble(olderjson, "minValue");
						Double maxValue = JsonUtil.getJSONDouble(olderjson, "maxValue");
						Integer status = (Integer) olderjson.get("status");
						String thresholdTime = (String) olderjson.get("thresholdTime");
						String thresholdPerson = (String) olderjson.get("thresholdPerson");
						Double minValue2 = JsonUtil.getJSONDouble(olderjson, "minValue2");
						Double maxValue2 = JsonUtil.getJSONDouble(olderjson, "maxValue2");
						Integer status2 = (Integer) olderjson.get("status2");
						String thresholdTime2 = (String) olderjson.get("thresholdTime2");
						String thresholdPerson2 = (String) olderjson.get("thresholdPerson2");
						Map<String, Object> queryMapcur = new HashMap<String, Object>();
						queryMapcur.put("olderId", olderId);
						queryMapcur.put("type", olderType);
						List<PhysiologicalParametersCurrentEntity> phyentityList = physiologicalParametersCurrentService.getListByCondition(queryMapcur);
						if (phyentityList != null && phyentityList.size() > 0) {
							PhysiologicalParametersCurrentEntity phyentity = phyentityList.get(0);
							if (olderType != null) {
								phyentity.setType(olderType);
							}
							if (minValue != null) {
								phyentity.setMinValue(BigDecimal.valueOf(minValue));
							}
							if (maxValue != null) {
								phyentity.setMaxValue(BigDecimal.valueOf(maxValue));
							}
							if (status != null) {
								phyentity.setStatus(status);
							}
							if (thresholdTime != null) {
								phyentity.setThresholdTime(thresholdTime);
							}
							if (thresholdPerson != null) {
								phyentity.setThresholdPerson(thresholdPerson);
							}

							if (minValue2 != null) {
								phyentity.setMinValue2(BigDecimal.valueOf(minValue2));
							}
							if (maxValue2 != null) {
								phyentity.setMaxValue2(BigDecimal.valueOf(maxValue2));
							}
							if (status2 != null) {
								phyentity.setStatus2(status2);
							}
							if (thresholdTime2 != null) {
								phyentity.setThresholdTime2(thresholdTime2);
							}
							if (thresholdPerson2 != null) {
								phyentity.setThresholdPerson2(thresholdPerson2);
							}
							result = physiologicalParametersCurrentService.save(phyentity);
						} else if (phyentityList == null) {
							PhysiologicalParametersCurrentEntity phyentity = new PhysiologicalParametersCurrentEntity();
							phyentity.setOlderId(olderId);
							phyentity.setType(olderType);
							phyentity.setMinValue(BigDecimal.valueOf(minValue));
							phyentity.setMaxValue(BigDecimal.valueOf(maxValue));
							phyentity.setStatus(status);
							phyentity.setThresholdTime(thresholdTime);
							phyentity.setThresholdPerson(thresholdPerson);

							if (minValue2 != null) {
								phyentity.setMinValue2(BigDecimal.valueOf(minValue2));
							}
							if (maxValue2 != null) {
								phyentity.setMaxValue2(BigDecimal.valueOf(maxValue2));
							}
							if (status2 != null) {
								phyentity.setStatus2(status2);
							}
							if (thresholdTime2 != null) {
								phyentity.setThresholdTime2(thresholdTime2);
							}
							if (thresholdPerson2 != null) {
								phyentity.setThresholdPerson2(thresholdPerson2);
							}
							result = physiologicalParametersCurrentService.save(phyentity);
						}

					}
				}
				//
			} else if ("saveList".equals(action)) {
				result = physiologicalParametersCurrentService.saveList(physiologicalParametersCurrentList);
			} else if ("getById".equals(action)) {
				result = physiologicalParametersCurrentService.getById(id, olderShow);
			} else if ("getListByCondition".equals(action)) {
				// 根据数据权限 增加查询条件
				queryMap = systemService.addDataRule("PhysiologicalParametersCurrentEntity", queryMap, request);
				result = physiologicalParametersCurrentService.getListByCondition(queryMap, orderList, pageno, pagesize, olderShow);
			} else if ("del".equals(action)) {
				result = physiologicalParametersCurrentService.del(id, delOlder);
			} else if ("delList".equals(action)) {
				result = physiologicalParametersCurrentService.delList(queryMap, delOlder);
			}
			// 封装
			Map<String, Object> packMap = physiologicalParametersCurrentPack.pack(type, action, result, physiologicalParametersCurrent);
			String actionBack = (String) packMap.get("action");
			String resultBack = (String) packMap.get("result");
			String desBack = (String) packMap.get("des");
			JSONObject pageBack = (JSONObject) packMap.get("page");
			JSONObject contentBack = (JSONObject) packMap.get("content");

			JSONObject repJson = new JSONObject();
			if (actionBack != null && !"".equals(actionBack)) {
				repJson.put("action", actionBack);
			}
			if (resultBack != null && !"".equals(resultBack)) {
				repJson.put("result", resultBack);
			}
			if (desBack != null && !"".equals(desBack)) {
				repJson.put("des", desBack);
			}
			if (pageBack != null) {
				repJson.put("page", pageBack);
			}
			if (contentBack != null && !"".equals(contentBack)) {
				repJson.put("content", contentBack);
			}
			logger.debug("返回消息：" + repJson.toString());
			resultStr = repJson.toString();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error(e);
		}
		return resultStr;
	}
}
