package fsk.handler.dev;

import java.io.File;
import java.math.BigDecimal;
import java.net.URLDecoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.imageio.stream.FileImageOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.business.handler.BaseHandler;
import com.framework.system.common.service.SystemService;
import com.framework.system.db.query.OrderVO;
import com.framework.system.util.JsonUtil;

import fsk.entity.dev.DevEntity;
import fsk.init.SystemInit;
import fsk.pack.dev.DevPack;
import fsk.parse.dev.DevParse;
import fsk.service.dev.DevService;
import fsk.util.Base64Utils;
import fsk.util.FileUtil;
import fsk.util.SendMessageUtil;

/**
 * @Title: Handler
 * @Description: 设备信息表业务处理器
 * @author feng.gu
 * @date 2016-09-22 11:12:57
 * @version V1.0
 * 
 */
public class DevHandler extends BaseHandler {
	private static Logger logger = Logger.getLogger(DevService.class);
	/**
	 * 解析器
	 */
	private DevParse devParse = DevParse.getInstance();
	/**
	 * 业务处理器
	 */
	private DevService devService = DevService.getInstance();
	/**
	 * 封装器
	 */
	private DevPack devPack = DevPack.getInstance();

	private static DevHandler devHandler;

	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static DevHandler getInstance() {
		if (devHandler == null) {
			devHandler = new DevHandler();
		}
		return devHandler;
	}

	/**
	 * 
	 * @param type
	 *            1-json 2-xml
	 * @param entityName
	 * @param command
	 * @param reqStr
	 * @param request
	 * @param response
	 */
	public String doHandler(int type, String command, String reqStr, HttpServletRequest request, HttpServletResponse response) {
		logger.debug("请求消息：" + reqStr);
		String resultStr = "";
		try {
			// 解析
			Map<String, Object> parseMap = devParse.parse(type, command, reqStr, request);
			String action = (String) parseMap.get("action");
			DevEntity dev = (DevEntity) parseMap.get("dev");
			List<DevEntity> devList = (List<DevEntity>) parseMap.get("devList");
			Integer id = (Integer) parseMap.get("id");
			Map<String, Object> queryMap = (Map<String, Object>) parseMap.get("queryMap");
			int pageno = (Integer) parseMap.get("pageno");
			int pagesize = (Integer) parseMap.get("pagesize");
			List<OrderVO> orderList = (List<OrderVO>) parseMap.get("orderList");

			Boolean olderShow = (Boolean) parseMap.get("olderShow");
			Boolean delOlder = (Boolean) parseMap.get("delOlder");

			// 业务处理
			Object result = null;
			if ("save".equals(action)) {
				// 新增或编辑设备号校验
				if (dev.getId() == null) {
					// 新增时只要检验设备号
					if (dev.getCode() != null) {
						Map<String, Object> devMapCode = new HashMap<String, Object>();
						devMapCode.put("code", dev.getCode());
						List<DevEntity> devAnhubaoList = devService.getListByCondition(devMapCode);
						if (devAnhubaoList != null && devAnhubaoList.size() > 0) {
							resultStr = "{\"action\":\"ADD_DEV_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"设备号已经存在!\"}";
							return resultStr;
						}
					}
				} else if (dev.getId() != null) {
					// 编辑时检验子设备号
					if (dev.getIrCode() != null) {
						// 子设备和父设备的互异校验
						if (dev.getCode().equals(dev.getIrCode())) {
							resultStr = "{\"action\":\"ADD_DEV_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"安护宝设备号与红外设备号重复!\"}";
							return resultStr;
						} else {// 设备号校验
							DevEntity entity = devService.getById(dev.getId());
							if (entity.getIrCode() == null || !entity.getIrCode().equals(dev.getIrCode())) {
								Map<String, Object> devMapIr = new HashMap<String, Object>();
								devMapIr.put("irCode", dev.getIrCode());
								List<DevEntity> devIrList = devService.getListByCondition(devMapIr);
								if (devIrList != null && devIrList.size() > 0) {
									resultStr = "{\"action\":\"ADD_DEV_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"红外设备号已经存在!\"}";
									return resultStr;
								}
								Map<String, Object> devMapIr2 = new HashMap<String, Object>();
								devMapIr2.put("doorCode", dev.getIrCode());
								List<DevEntity> devIrList2 = devService.getListByCondition(devMapIr2);
								if (devIrList2 != null && devIrList2.size() > 0) {
									resultStr = "{\"action\":\"ADD_DEV_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"红外设备号已经存在!\"}";
									return resultStr;
								}
								Map<String, Object> devMapIr3 = new HashMap<String, Object>();
								devMapIr3.put("code", dev.getIrCode());
								List<DevEntity> devIrList3 = devService.getListByCondition(devMapIr3);
								if (devIrList3 != null && devIrList3.size() > 0) {
									resultStr = "{\"action\":\"ADD_DEV_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"红外设备号已经存在!\"}";
									return resultStr;
								}
							}
						}
					}
					if (dev.getDoorCode() != null) {
						// 子设备和父设备的互异校验
						if (dev.getCode().equals(dev.getDoorCode())) {
							resultStr = "{\"action\":\"ADD_DEV_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"安护宝设备号与门磁设备号重复!\"}";
							return resultStr;
						} else {// 设备号校验
							DevEntity entity = devService.getById(dev.getId());
							if (entity.getDoorCode() == null || !entity.getDoorCode().equals(dev.getDoorCode())) {
								Map<String, Object> devMapDoor = new HashMap<String, Object>();
								devMapDoor.put("doorCode", dev.getDoorCode());
								List<DevEntity> devDoorList = devService.getListByCondition(devMapDoor);
								if (devDoorList != null && devDoorList.size() > 0) {
									resultStr = "{\"action\":\"ADD_DEV_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"门磁设备号已经存在!\"}";
									return resultStr;
								}
								Map<String, Object> devMapDoor2 = new HashMap<String, Object>();
								devMapDoor2.put("code", dev.getDoorCode());
								List<DevEntity> devDoorList2 = devService.getListByCondition(devMapDoor2);
								if (devDoorList2 != null && devDoorList2.size() > 0) {
									resultStr = "{\"action\":\"ADD_DEV_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"门磁设备号已经存在!\"}";
									return resultStr;
								}
								Map<String, Object> devMapDoor3 = new HashMap<String, Object>();
								devMapDoor3.put("irCode", dev.getDoorCode());
								List<DevEntity> devDoorList3 = devService.getListByCondition(devMapDoor3);
								if (devDoorList3 != null && devDoorList3.size() > 0) {
									resultStr = "{\"action\":\"ADD_DEV_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"门磁设备号已经存在!\"}";
									return resultStr;
								}
							}
						}
					}
					// 子设备和父设备的互异校验
					if (dev.getCode() != null && dev.getIrCode() != null && dev.getDoorCode() != null) {
						if (dev.getCode().equals(dev.getIrCode())) {
							resultStr = "{\"action\":\"ADD_DEV_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"安护宝设备号与红外设备号重复!\"}";
							return resultStr;
						} else if (dev.getCode().equals(dev.getDoorCode())) {
							resultStr = "{\"action\":\"ADD_DEV_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"安护宝设备号与门磁设备号重复!\"}";
							return resultStr;
						} else if (dev.getDoorCode().equals(dev.getIrCode())) {
							resultStr = "{\"action\":\"ADD_DEV_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"红外设备号与门磁设备号重复!\"}";
							return resultStr;
						}
					}
				}
				if (dev.getId() != null) {
					String column = "";
					boolean nextback = false;
					String errorcol = "";
					boolean errortemp = true;
					JSONObject reqStrjson = JSONObject.fromObject(reqStr);
					JSONObject conjson = (JSONObject) reqStrjson.get("content");
					errorcol = "id";
					// Integer id = (Integer) contentreq.get("id");
					errorcol = "code";
					String code = (String) conjson.get("code");
					errorcol = "name";
					String name = (String) conjson.get("name");
					errorcol = "olderId";
					Integer olderId = (Integer) conjson.get("olderId");
					errorcol = "type";
					Integer devtype = (Integer) conjson.get("type");
					errorcol = "status";
					String status = (String) conjson.get("status");
					errorcol = "address";
					String address = (String) conjson.get("address");
					errorcol = "addTime";
					String addTime = (String) conjson.get("addTime");
					errorcol = "flat";
					Double flat = JsonUtil.getJSONDouble(conjson, "flat");
					errorcol = "flong";
					Double flong = JsonUtil.getJSONDouble(conjson, "flong");
					errorcol = "fradius";
					Integer fradius = (Integer) conjson.get("fradius");
					errorcol = "posLong";
					Double posLong = JsonUtil.getJSONDouble(conjson, "posLong");
					errorcol = "posLat";
					Double posLat = JsonUtil.getJSONDouble(conjson, "posLat");
					errorcol = "photo";
					String photo = (String) conjson.get("photo");
					errorcol = "devPhone";
					String devPhone = (String) conjson.get("devPhone");
					errorcol = "doorAlarmDelay";
					String doorAlarmDelay = (String) conjson.get("doorAlarmDelay");
					errorcol = "doorAlarmStart";
					String doorAlarmStart = (String) conjson.get("doorAlarmStart");
					errorcol = "doorAlarmEnd";
					String doorAlarmEnd = (String) conjson.get("doorAlarmEnd");
					errorcol = "irAlarmDelay";
					String irAlarmDelay = (String) conjson.get("irAlarmDelay");
					errorcol = "irAlarmStart";
					String irAlarmStart = (String) conjson.get("irAlarmStart");
					errorcol = "irAlarmEnd";
					String irAlarmEnd = (String) conjson.get("irAlarmEnd");
					errorcol = "locationStatus";
					Integer locationStatus = (Integer) conjson.get("locationStatus");
					errorcol = "doorCode";
					String doorCode = (String) conjson.get("doorCode");
					errorcol = "irCode";
					String irCode = (String) conjson.get("irCode");
					errortemp = false;
					if (!nextback) {
						DevEntity entity = devService.getById(dev.getId());
						boolean isSendMsg = false;
						boolean isDoorSendMsg = false;
						boolean isIrSendMsg = false;
						boolean isDoorDelMsg = false;
						boolean isIrDelMsg = false;
						String sendContent = "";
						String sendPhone = "";
						if (code != null) {
							entity.setCode(code);
						}
						if (address != null) {
							entity.setAddress(address);
						}
						if (addTime != null) {
							entity.setAddTime(addTime);
						}
						if (flat != null) {
							entity.setFlat(BigDecimal.valueOf(flat.doubleValue()));
						}
						if (flong != null) {
							entity.setFlong(BigDecimal.valueOf(flong.doubleValue()));
						}
						if (fradius != null) {
							entity.setFradius(fradius);
						}
						if (name != null) {
							entity.setName(name);
						}

						if (posLat != null) {
							entity.setPosLat(BigDecimal.valueOf(posLat.doubleValue()));
						}
						if (posLong != null) {
							entity.setPosLong(BigDecimal.valueOf(posLong.doubleValue()));
						}
						if (devtype != null) {
							entity.setType(devtype);
						}
						if (status != null) {
							entity.setStatus(status);
						}
						if (devPhone != null) {
							entity.setDevPhone(devPhone);
						}
						if (doorAlarmDelay != null) {
							if (entity.getDoorAlarmDelay() == null || !entity.getDoorAlarmDelay().equals(doorAlarmDelay)) {
								isDoorSendMsg = true;
							}
							entity.setDoorAlarmDelay(doorAlarmDelay);
						}
						if (doorAlarmStart != null) {
							if (entity.getDoorAlarmStart() == null || !entity.getDoorAlarmStart().equals(doorAlarmStart)) {
								isDoorSendMsg = true;
							}
							entity.setDoorAlarmStart(doorAlarmStart);
						}
						if (doorAlarmEnd != null) {
							if (entity.getDoorAlarmEnd() == null || !entity.getDoorAlarmEnd().equals(doorAlarmEnd)) {
								isDoorSendMsg = true;
							}
							entity.setDoorAlarmEnd(doorAlarmEnd);
						}
						if (irAlarmDelay != null) {
							if (entity.getIrAlarmDelay() == null || !entity.getIrAlarmDelay().equals(irAlarmDelay)) {
								isIrSendMsg = true;
							}
							entity.setIrAlarmDelay(irAlarmDelay);
						}
						if (irAlarmStart != null) {
							if (entity.getIrAlarmStart() == null || !entity.getIrAlarmStart().equals(irAlarmStart)) {
								isIrSendMsg = true;
							}
							entity.setIrAlarmStart(irAlarmStart);
						}
						if (irAlarmEnd != null) {
							if (entity.getIrAlarmEnd() == null || !entity.getIrAlarmEnd().equals(irAlarmEnd)) {
								isIrSendMsg = true;
							}
							entity.setIrAlarmEnd(irAlarmEnd);
						}

						if (doorCode != null) {
							if (entity.getDoorCode() == null) {
								isDoorSendMsg = true;
							}
							if (!doorCode.equals(entity.getDoorCode())) {
								isDoorDelMsg = true;
								isDoorSendMsg = true;
							}
							if (isDoorDelMsg) {
								if (entity.getDevPhone() != null && !"".equals(entity.getDevPhone().trim())) {
									if (entity.getDoorCode() != null && !"".equals(entity.getDoorCode().trim())) {
										sendPhone = entity.getDevPhone();
										sendContent = "*,eq,d," + entity.getDoorCode() + "#";
										this.sendMsg(sendPhone, sendContent);
										Thread.sleep(500);
									}
								}
							}
							entity.setDoorCode(doorCode);
						}
						if (irCode != null) {
							if (entity.getIrCode() == null) {
								isIrSendMsg = true;
							}
							if (!irCode.equals(entity.getIrCode())) {
								isIrDelMsg = true;
								isIrSendMsg = true;
							}
							if (isIrDelMsg) {
								if (entity.getDevPhone() != null && !"".equals(entity.getDevPhone().trim())) {
									if (entity.getIrCode() != null && !"".equals(entity.getIrCode().trim())) {
										sendPhone = entity.getDevPhone();
										sendContent = "*,eq,d," + entity.getIrCode() + "#";
										this.sendMsg(sendPhone, sendContent);
										Thread.sleep(500);
									}
								}
							}
							entity.setIrCode(irCode);
						}
						if (locationStatus != null) {
							if (entity.getLocationStatus() == null || entity.getLocationStatus().intValue() != locationStatus.intValue()) {
								// 数据库不为空 且数据发生改变 发送配置短信
								isSendMsg = true;
								sendPhone = entity.getDevPhone();
								if (locationStatus.intValue() == 0) {
									// 普通模式30分钟
									sendContent = "#tm#1800#";
								} else if (locationStatus.intValue() == 1) {
									// 紧急模式5分钟
									sendContent = "#tm#0300#";
								}
							}
							entity.setLocationStatus(locationStatus);
						}
						devService.save(entity);
						if (photo != null) {
							String fileName = "Dev" + entity.getId() + ".jpg";

							String photourl = savePhoto(photo, fileName);
							if (photourl != null) {
								entity.setPhoto(photourl);
								devService.save(entity);
							}
						}
						if (isSendMsg && sendPhone != null && !"".equals(sendPhone) && sendContent != null && !"".equals(sendContent)) {
							this.sendMsg(sendPhone, sendContent);
						}
						if (isDoorSendMsg) {
							if (entity.getDevPhone() != null && !"".equals(entity.getDevPhone().trim())) {
								if (entity.getDoorCode() != null && !"".equals(entity.getDoorCode().trim())) {
									if (entity.getDoorAlarmStart() != null && !"".equals(entity.getDoorAlarmStart().trim())) {
										if (entity.getDoorAlarmEnd() != null && !"".equals(entity.getDoorAlarmEnd().trim())) {
											if (entity.getDoorAlarmDelay() != null && !"".equals(entity.getDoorAlarmDelay().trim())) {
												sendPhone = entity.getDevPhone();
												sendContent = "*,eq,e," + entity.getDoorCode() + "," + entity.getDoorAlarmStart() + ","
														+ entity.getDoorAlarmEnd() + "," + entity.getDoorAlarmDelay() + "#";
												this.sendMsg(sendPhone, sendContent);
											}
										}
									}
								}
							}
						}
						if (isIrSendMsg) {
							if (entity.getDevPhone() != null && !"".equals(entity.getDevPhone().trim())) {
								if (entity.getIrCode() != null && !"".equals(entity.getIrCode().trim())) {
									if (entity.getIrAlarmStart() != null && !"".equals(entity.getIrAlarmStart().trim())) {
										if (entity.getIrAlarmEnd() != null && !"".equals(entity.getIrAlarmEnd().trim())) {
											if (entity.getIrAlarmDelay() != null && !"".equals(entity.getIrAlarmDelay().trim())) {
												sendPhone = entity.getDevPhone();
												sendContent = "*,eq,e," + entity.getIrCode() + "," + entity.getIrAlarmStart() + "," + entity.getIrAlarmEnd()
														+ "," + entity.getIrAlarmDelay() + "#";
												this.sendMsg(sendPhone, sendContent);
											}
										}
									}
								}
							}
						}
					}
				}
				result = devService.save(dev);
			} else if ("saveList".equals(action)) {
				result = devService.saveList(devList);
			} else if ("getById".equals(action)) {
				result = devService.getById(id, olderShow);
			} else if ("getListByCondition".equals(action)) {
				// 根据数据权限 增加查询条件
				queryMap = systemService.addDataRuleByRoles("DevEntity", queryMap, request);
				result = devService.getListByCondition(queryMap, orderList, pageno, pagesize, olderShow);
			} else if ("del".equals(action)) {
				result = devService.del(id, delOlder);
			} else if ("delList".equals(action)) {
				result = devService.delList(queryMap, delOlder);
			}
			// 封装
			Map<String, Object> packMap = devPack.pack(type, action, result, dev);
			String actionBack = (String) packMap.get("action");
			String resultBack = (String) packMap.get("result");
			String desBack = (String) packMap.get("des");
			JSONObject pageBack = (JSONObject) packMap.get("page");
			JSONObject contentBack = (JSONObject) packMap.get("content");
			JSONObject repJson = new JSONObject();
			if (actionBack != null && !"".equals(actionBack)) {
				repJson.put("action", actionBack);
			}
			if (resultBack != null && !"".equals(resultBack)) {
				repJson.put("result", resultBack);
			}
			if (desBack != null && !"".equals(desBack)) {
				repJson.put("des", desBack);
			}
			if (pageBack != null) {
				repJson.put("page", pageBack);
			}
			if (contentBack != null && !"".equals(contentBack)) {
				repJson.put("content", contentBack);
			}
			logger.debug("返回消息：" + repJson.toString());
			resultStr = repJson.toString();
		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e);
		}
		return resultStr;
	}

	private boolean sendMsg(String phone, String smsContent) {
		boolean result = true;
		logger.debug("配置手机号:" + phone + " 配置内容:" + smsContent);
		int code = SendMessageUtil.sendMsg(phone, smsContent);
		if (code != 0) {
			result = false;
		}
		return result;
	}

	public static String savePhoto(String photo, String fileName) {
		String returnPath = null;
		try {
			photo = photo.replaceAll("\n", "");
			byte[] photobyte = Base64Utils.decode(photo);

			String path = DevHandler.class.getResource("DevHandler.class").toString();
			String separator = FileUtil.getFileSeparator();
			if ("file".equals(path.substring(0, 4))) {
				if ("\\".equals(separator))
					path = path.substring(6);
				else {
					path = path.substring(5);
				}
			}
			String localPath = path.substring(0, path.indexOf("WEB-INF")) + "photo" + separator + fileName;
			localPath = URLDecoder.decode(localPath);
			localPath = localPath.replace("/", separator);
			localPath = localPath.replace("\\", separator);

			returnPath = SystemInit.photourl + "/photo/" + fileName;

			byte2image(photobyte, localPath);
		} catch (Exception e) {
			logger.error(e.toString());
		}
		return returnPath;
	}

	public static void byte2image(byte[] data, String path) {
		if ((data.length < 3) || (path.equals("")))
			return;
		try {
			FileImageOutputStream imageOutput = new FileImageOutputStream(new File(path));
			imageOutput.write(data, 0, data.length);
			imageOutput.close();
			logger.debug("Make Picture success,Please find image in " + path);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
}
