package fsk.service.serviceTask;

import java.io.File;
import java.math.BigDecimal;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.imageio.stream.FileImageOutputStream;

import org.apache.log4j.Logger;

import weixin.servlet.pushMessage;

import com.framework.system.common.entity.dataDic.DataDicEntity;
import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

import fsk.entity.dailyLife.DailyLifeEntity;
import fsk.entity.dailyLifeAsk.DailyLifeAskEntity;
import fsk.entity.edemaCondition.EdemaConditionEntity;
import fsk.entity.older.OlderEntity;
import fsk.entity.olderWechat.OlderWechatEntity;
import fsk.entity.physiologicalParametersHistory.PhysiologicalParametersHistoryEntity;
import fsk.entity.recharge.RechargeEntity;
import fsk.entity.service.ServiceEntity;
import fsk.entity.serviceEmployee.ServiceEmployeeEntity;
import fsk.entity.serviceLog.ServiceLogEntity;
import fsk.entity.serviceTask.ServiceTaskEntity;
import fsk.entity.serviceTaskPhoto.ServiceTaskPhotoEntity;
import fsk.entity.serviceTaskPhysiologicalParametersHistory.ServiceTaskPhysiologicalParametersHistoryEntity;
import fsk.entity.serviceTaskService.ServiceTaskServiceEntity;
import fsk.entity.site.SiteEntity;
import fsk.entity.situationObservation.SituationObservationEntity;
import fsk.entity.wechat.WechatEntity;
import fsk.handler.serviceTask.ServiceTaskHandler;
import fsk.init.SystemInit;
import fsk.service.edemaCondition.EdemaConditionService;
import fsk.service.serviceEmployee.ServiceEmployeeService;
import fsk.service.serviceLog.ServiceLogService;
import fsk.service.serviceTaskPhoto.ServiceTaskPhotoService;
import fsk.service.serviceTaskPhysiologicalParametersHistory.ServiceTaskPhysiologicalParametersHistoryService;
import fsk.service.serviceTaskService.ServiceTaskServiceService;
import fsk.util.Base64Utils;
import fsk.util.CodeCreateUtil;
import fsk.util.FileUtil;
import fsk.util.RandomUtil;

/**
 * @Title: Service
 * @Description: 服务工单服务类
 * @author feng.gu
 * @date 2016-10-19 10:24:23
 * @version V1.0
 * 
 */
public class ServiceTaskService {
	private static Logger logger = Logger.getLogger(ServiceTaskService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static ServiceTaskService serviceTaskService;
	private static ServiceLogService serviceLogService = ServiceLogService
			.getInstance();
	private static ServiceEmployeeService serviceEmployeeService = ServiceEmployeeService
			.getInstance();
	private static ServiceTaskServiceService serviceTaskServiceService = ServiceTaskServiceService
			.getInstance();
	private static EdemaConditionService edemaConditionService = EdemaConditionService
			.getInstance();
	private static ServiceTaskPhotoService serviceTaskPhotoService = ServiceTaskPhotoService
			.getInstance();
	private static ServiceTaskPhysiologicalParametersHistoryService serviceTaskPhysiologicalParametersHistoryService = ServiceTaskPhysiologicalParametersHistoryService
			.getInstance();
	private static SimpleDateFormat formater = new SimpleDateFormat(
			"yyyyMMddHHmmss");

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static ServiceTaskService getInstance() {
		if (serviceTaskService == null) {
			serviceTaskService = new ServiceTaskService();
		}
		return serviceTaskService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(ServiceTaskEntity serviceTask) {
		boolean result = false;
		if (serviceTask != null) {

			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				Integer serviceTaskOlderStatus = null;
				Integer serviceTaskId = serviceTask.getId();
				// 微信推送和服务扣除价格
				// 工单改变前的状态
				if (serviceTask.getId() != null) {
					Integer olderStatus = null;
					QueryCondition qcserviceTask = new QueryCondition(ServiceTaskEntity.ID, QueryCondition.eq, serviceTask.getId());
					List<Object> serviceTaskList = dbManager.queryByConditionNoTransaction(ServiceTaskEntity.class, qcserviceTask);
					if (serviceTaskList != null && serviceTaskList.size() > 0) {
						ServiceTaskEntity serviceTaskOlder = (ServiceTaskEntity) serviceTaskList .get(0);
						if (serviceTaskOlder != null) {
							olderStatus = serviceTaskOlder.getStatus();
							serviceTaskOlderStatus = serviceTaskOlder.getStatus();
						}
					}
					if (olderStatus != null && olderStatus == 5 && serviceTask.getStatus() != null && serviceTask.getStatus() == 6) {// g
						if (serviceTask.getHasPay() == null || "N".equals(serviceTask.getHasPay())) {// 工单状态为空或者工单为尚未扣款
							// 查询老人的账户余额
							Integer olderId = serviceTask.getOlderId();
							String soucer = null;
							OlderEntity older = null;
							BigDecimal acount = null;// 老人的余额
							if (olderId != null) {
								QueryCondition qcserviceTOlder = new QueryCondition(OlderEntity.ID, QueryCondition.eq, olderId);
								List<Object> olderList = dbManager.queryByConditionNoTransaction(OlderEntity.class, qcserviceTOlder);
								if (olderList != null && olderList.size() > 0) {
									older = (OlderEntity) olderList.get(0);
									soucer = older.getMemberSource();// 老人的市场来源
									if (older != null) {
										acount = older.getAccountNum();
										if (acount == null) {
											acount = new BigDecimal(0);// 无余额时置为0
										}
									}
								}
							}
							// 查一下工单的服务项目以及价格
							BigDecimal money = null;// 要被扣除的金额
							Integer serviceId = null;// 服务项目id
							String servicename = null;
							QueryCondition qc = new QueryCondition(ServiceTaskServiceEntity.SERVICE_TASK_ID, QueryCondition.eq, serviceTask.getId());
							List<Object> serviceTaskServiceList = dbManager.queryByConditionNoTransaction(ServiceTaskServiceEntity.class, qc);
							if (serviceTaskServiceList != null && serviceTaskServiceList.size() > 0) {
								ServiceTaskServiceEntity serviceTaskServiceen = (ServiceTaskServiceEntity) serviceTaskServiceList.get(0);
								serviceId = serviceTaskServiceen.getServiceId();
								if (serviceId != null) {
									QueryCondition qcservice = new QueryCondition(ServiceEntity.ID, QueryCondition.eq, serviceId);
									List<Object> serviceList = dbManager.queryByConditionNoTransaction(ServiceEntity.class, qcservice);
									if (serviceList != null && serviceList.size() > 0) {
										ServiceEntity service = (ServiceEntity) serviceList.get(0);
										if (service != null && serviceTask.getHealthInsurance() != null) {
											if (serviceTask.getHealthInsurance().intValue()==1) {
												money = service.getMedicalPrice();
												if (money != null) {
													money = money.multiply(new BigDecimal(0.1));// 医保乘以价格的10%
												}
											} else if(serviceTask.getHealthInsurance().intValue()==2) {
												money = service.getMarketPrice();// 市场
											}
											servicename = service.getName();// 服务项目名称
										}
									}
								}
							}
							if (acount != null && money != null) {
								BigDecimal newcount = acount.subtract(money);// 扣除本次服务价格
								older.setAccountNum(newcount);
								boolean saveOlder = dbManager.saveNoTransaction(older);
								serviceTask.setHasPay("Y");
								boolean saveTask = dbManager.saveNoTransaction(serviceTask);
								if (saveOlder && saveTask) {// 老人和工单都保存成功时进行保存log日志
									RechargeEntity recharge = new RechargeEntity();
									recharge.setSerialNumber(CodeCreateUtil.creatrechargeNum());
									recharge.setOlderId(olderId);
									recharge.setOlderName(older.getName());
									recharge.setOlderMemberNum(older.getMemberNum());
									recharge.setCreateTime(formater.format(new Date()));
									recharge.setType(2);// 类型为消费-2
									recharge.setAmount(money);
									recharge.setServiceTaskCode(serviceTask.getServiceCode());
									recharge.setServiceId(serviceId);
									recharge.setServiceName(servicename);
									recharge.setServiceSiteId(serviceTask.getSiteId());
									recharge.setServiceSiteName(serviceTask.getSiteName());
									recharge.setRechargeMethod(1);// 工单完成时自动扣款-1
									dbManager.saveNoTransaction(recharge);
								}
							}
						}
					}
				}

				// 关联信息保存
				OlderEntity older = serviceTask.getOlder();
				if (older != null) {
					dbManager.saveNoTransaction(older);
					serviceTask.setOlderId(older.getId());
				}
				// 关联信息保存
				WechatEntity addPersonWechat = serviceTask.getAddPersonWechat();
				if (addPersonWechat != null) {
					dbManager.saveNoTransaction(addPersonWechat);
					serviceTask.setAddPersonWechatId(addPersonWechat.getId());
				}
				// 关联信息保存
				SiteEntity site = serviceTask.getSite();
				if (site != null) {
					dbManager.saveNoTransaction(site);
					serviceTask.setSiteId(site.getId());
				}
				// 关联信息保存
				DataDicEntity serviceArea = serviceTask.getServiceArea();
				if (serviceArea != null) {
					dbManager.saveNoTransaction(serviceArea);
					serviceTask.setServiceAreaId(serviceArea.getId());
				}
				// 关联信息保存
				DataDicEntity serviceStreet = serviceTask.getServiceStreet();
				if (serviceStreet != null) {
					dbManager.saveNoTransaction(serviceStreet);
					serviceTask.setServiceStreetId(serviceStreet.getId());
				}
				if (serviceTask.getServiceTaskPhotoList() != null
						&& serviceTask.getServiceTaskPhotoList().size() > 0) {
					// 关联信息保存
					if (serviceTask.getId() == null) {
						dbManager.saveNoTransaction(serviceTask);
					}
					/* 保存照片 pei */
					ArrayList number = new ArrayList();
					number.add(0, 1);
					number.add(1, 2);
					number.add(2, 3);
					number.add(3, 4);
					number.add(4, 5);
					number.add(5, 6);
					number.add(6, 7);
					int n = 0;
					for (ServiceTaskPhotoEntity serviceTaskPhotoEntity : serviceTask
							.getServiceTaskPhotoList()) {
						String photourl = serviceTaskPhotoEntity.getPhotoUrl();
						if (photourl != null) {
							if (photourl.startsWith("http")) {
								int index = -1;
								String str = photourl.substring(
										photourl.length() - 5,
										photourl.length() - 4);
								int numberindex = Integer.parseInt(str);
								index = number.indexOf(numberindex);
								if (index != -1) {
									number.remove(index);
								}
							}
						}
					}
					for (ServiceTaskPhotoEntity serviceTaskPhotoEntity : serviceTask
							.getServiceTaskPhotoList()) {

						String photourl = (String) serviceTaskPhotoEntity
								.getPhotoUrl();
						if (photourl != null) {
							if (!photourl.startsWith("http")) {
								String fileName = "serviceTaskPhoto_"
										+ serviceTask.getId() + "_"
										+ number.get(n) + ".jpg";
								photourl = savePhoto(photourl, fileName);
								n++;
							}
							serviceTaskPhotoEntity.setServiceTaskId(serviceTask
									.getId());
							serviceTaskPhotoEntity.setPhotoUrl(photourl);
							dbManager.saveNoTransaction(serviceTaskPhotoEntity);
						}
					}
					// ////
				}
				if (serviceTask.getEdemaConditionList() != null
						&& serviceTask.getEdemaConditionList().size() > 0) {
					// 关联信息保存
					if (serviceTask.getId() == null) {
						dbManager.saveNoTransaction(serviceTask);
					}
					for (EdemaConditionEntity edemaConditionEntity : serviceTask
							.getEdemaConditionList()) {
						edemaConditionEntity.setServiceTaskId(serviceTask
								.getId());
						dbManager.saveNoTransaction(edemaConditionEntity);
					}
				}
				if (serviceTask.getSituationObservationList() != null
						&& serviceTask.getSituationObservationList().size() > 0) {
					// 关联信息保存
					if (serviceTask.getId() == null) {
						dbManager.saveNoTransaction(serviceTask);
					}
					for (SituationObservationEntity situationObservationEntity : serviceTask
							.getSituationObservationList()) {
						situationObservationEntity.setServiceTaskId(serviceTask
								.getId());
						dbManager.saveNoTransaction(situationObservationEntity);
					}
				}
				if (serviceTask.getServiceLogList() != null
						&& serviceTask.getServiceLogList().size() > 0) {
					// 关联信息保存
					if (serviceTask.getId() == null) {
						dbManager.saveNoTransaction(serviceTask);
					}
					for (ServiceLogEntity serviceLogEntity : serviceTask
							.getServiceLogList()) {
						serviceLogEntity.setServiceTaskId(serviceTask.getId());
						dbManager.saveNoTransaction(serviceLogEntity);
					}
				}
				if (serviceTask.getDailyLifeAskList() != null
						&& serviceTask.getDailyLifeAskList().size() > 0) {
					// 关联信息保存
					if (serviceTask.getId() == null) {
						dbManager.saveNoTransaction(serviceTask);
					}
					for (DailyLifeAskEntity dailyLifeAskEntity : serviceTask
							.getDailyLifeAskList()) {
						dailyLifeAskEntity
								.setServiceTaskId(serviceTask.getId());
						dbManager.saveNoTransaction(dailyLifeAskEntity);
						// 更新老人表和daily表pei
						DailyLifeEntity dailyLife = new DailyLifeEntity();
						dailyLife.setOlderId(serviceTask.getOlder().getId());
						dailyLife.setCreatePerson(dailyLifeAskEntity
								.getCreatePerson());
						dailyLife.setCreateTime(dailyLifeAskEntity
								.getCreateTime());
						dailyLife.setDailyWater(dailyLifeAskEntity
								.getDailyWater1());
						dailyLife.setDailyDrinking(dailyLifeAskEntity
								.getDailyWater2());
						dailyLife
								.setMainFood(dailyLifeAskEntity.getDailyFood());
						dailyLife.setUrine(dailyLifeAskEntity.getUrine());
						dailyLife.setUrineNum(dailyLifeAskEntity.getUrineNum());
						dailyLife.setShit(dailyLifeAskEntity.getShit());
						dailyLife.setShitDay(dailyLifeAskEntity.getShitDay());
						dailyLife.setSleepHour(dailyLifeAskEntity
								.getSleepHour());
						dailyLife.setSleepQuality(dailyLifeAskEntity
								.getSleepQuality());
						dailyLife.setMorningSpirit(dailyLifeAskEntity
								.getMorningSpirit());
						boolean flag = dbManager.saveNoTransaction(dailyLife);
						if (flag) {
							QueryCondition qc = new QueryCondition(
									DailyLifeEntity.OLDER_ID,
									QueryCondition.eq, serviceTask.getOlder()
											.getId());
							qc.andCondition(new QueryCondition(
									DailyLifeEntity.CREATE_TIME,
									QueryCondition.gt, dailyLifeAskEntity
											.getCreateTime()));
							List<Object> dailtList = dbManager
									.queryByCondition(DailyLifeEntity.class, qc);
							if (dailtList == null) {
								QueryCondition qcserviceTOlder = new QueryCondition(
										OlderEntity.ID, QueryCondition.eq,
										serviceTask.getOlder().getId());
								List<Object> olderList = dbManager
										.queryByConditionNoTransaction(
												OlderEntity.class,
												qcserviceTOlder);
								if (olderList != null && olderList.size() > 0) {
									OlderEntity older2 = (OlderEntity) olderList
											.get(0);
									older2.setDailyWater(dailyLifeAskEntity
											.getDailyWater1());
									older2.setDailyDrinking(dailyLifeAskEntity
											.getDailyWater2());
									older2.setMainFood(dailyLifeAskEntity
											.getDailyFood());
									older2.setUrine(dailyLifeAskEntity
											.getUrine());
									older2.setUrineNum(dailyLifeAskEntity
											.getUrineNum());
									older2.setShit(dailyLifeAskEntity.getShit());
									older2.setShitDay(dailyLifeAskEntity
											.getShitDay());
									older2.setSleepHour(dailyLifeAskEntity
											.getSleepHour());
									older2.setMorningSpirit(dailyLifeAskEntity
											.getMorningSpirit());
									older2.setSleepQuality(dailyLifeAskEntity
											.getSleepQuality());
									older2.setFruitsVegetables(null);
									older2.setSalt(null);
									older2.setOil(null);
									older2.setFish(null);
									older2.setMeat(null);
									older2.setBeanProducts(null);
									older2.setMilk(null);
									dbManager.saveNoTransaction(older2);
								}

							}
							// ///
						}
					}
				}
				if (serviceTask.getServiceEmployeeList() != null
						&& serviceTask.getServiceEmployeeList().size() > 0) {
					// 关联信息保存
					if (serviceTask.getId() == null) {
						dbManager.saveNoTransaction(serviceTask);
					}
					for (ServiceEmployeeEntity serviceEmployeeEntity : serviceTask
							.getServiceEmployeeList()) {
						serviceEmployeeEntity.setServiceTaskId(serviceTask
								.getId());
						dbManager.saveNoTransaction(serviceEmployeeEntity);
					}
				}
				dbManager.saveNoTransaction(serviceTask);
				if (serviceTask.getServiceList() != null
						&& serviceTask.getServiceList().size() > 0) {
					// 先删除原先绑定关系
					QueryCondition qc = new QueryCondition(
							ServiceTaskServiceEntity.SERVICE_TASK_ID,
							QueryCondition.eq, serviceTask.getId());
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ServiceTaskServiceEntity.class, qc);
					if ((list != null) && (list.size() > 0)) {
						for (Object obj : list) {
							ServiceTaskServiceEntity entity = (ServiceTaskServiceEntity) obj;
							dbManager.delNoTransaction(entity.getId(),
									ServiceTaskServiceEntity.class);
						}
					}
					// 绑定现在的关系
					for (ServiceEntity service : serviceTask.getServiceList()) {
						Integer serviceId = service.getId();
						if (serviceId != null) {
							ServiceTaskServiceEntity entity = new ServiceTaskServiceEntity();
							entity.setServiceTaskId(serviceTask.getId());
							entity.setServiceId(serviceId);
							// 服务子项与预计服务时长pei
							entity.setServiceChilds(service.getFuwuSonNames());
							entity.setExpectedServiceTime(service
									.getYjfuwuTime());
							entity.setServiceChildsComplete(service
									.getServiceChildsComplete());
							// /
							dbManager.saveNoTransaction(entity);
						}
					}
				}
				dbManager.saveNoTransaction(serviceTask);
				if (serviceTask.getPhysiologicalParametersHistoryList() != null
						&& serviceTask.getPhysiologicalParametersHistoryList()
								.size() > 0) {
					// 先删除原先绑定关系
					QueryCondition qc = new QueryCondition(
							ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID,
							QueryCondition.eq, serviceTask.getId());
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ServiceTaskPhysiologicalParametersHistoryEntity.class,
									qc);
					if ((list != null) && (list.size() > 0)) {
						for (Object obj : list) {
							ServiceTaskPhysiologicalParametersHistoryEntity entity = (ServiceTaskPhysiologicalParametersHistoryEntity) obj;
							dbManager
									.delNoTransaction(
											entity.getId(),
											ServiceTaskPhysiologicalParametersHistoryEntity.class);
						}
					}
					// 绑定现在的关系
					for (PhysiologicalParametersHistoryEntity physiologicalParametersHistory : serviceTask
							.getPhysiologicalParametersHistoryList()) {
						Integer physiologicalParametersHistoryId = physiologicalParametersHistory
								.getId();
						if (physiologicalParametersHistoryId != null) {
							ServiceTaskPhysiologicalParametersHistoryEntity entity = new ServiceTaskPhysiologicalParametersHistoryEntity();
							entity.setServiceTaskId(serviceTask.getId());
							entity.setPhysiologicalParametersHistoryId(physiologicalParametersHistoryId);
							dbManager.saveNoTransaction(entity);
						}
					}
				}
				result = dbManager.saveNoTransaction(serviceTask);
				// 保存成功后进行微信推送
				if (result) {
					wechatPush(serviceTaskId, serviceTaskOlderStatus,
							serviceTask);
				}

				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(List<ServiceTaskEntity> serviceTaskList) {
		boolean result = false;
		if (serviceTaskList != null && serviceTaskList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (ServiceTaskEntity serviceTask : serviceTaskList) {
					if (serviceTask != null) {
						// 关联信息保存
						OlderEntity older = serviceTask.getOlder();
						if (older != null) {
							dbManager.saveNoTransaction(older);
							serviceTask.setOlderId(older.getId());
						}
						// 关联信息保存
						WechatEntity addPersonWechat = serviceTask
								.getAddPersonWechat();
						if (addPersonWechat != null) {
							dbManager.saveNoTransaction(addPersonWechat);
							serviceTask.setAddPersonWechatId(addPersonWechat
									.getId());
						}
						// 关联信息保存
						SiteEntity site = serviceTask.getSite();
						if (site != null) {
							dbManager.saveNoTransaction(site);
							serviceTask.setSiteId(site.getId());
						}
						// 关联信息保存
						DataDicEntity serviceArea = serviceTask
								.getServiceArea();
						if (serviceArea != null) {
							dbManager.saveNoTransaction(serviceArea);
							serviceTask.setServiceAreaId(serviceArea.getId());
						}
						// 关联信息保存
						DataDicEntity serviceStreet = serviceTask
								.getServiceStreet();
						if (serviceStreet != null) {
							dbManager.saveNoTransaction(serviceStreet);
							serviceTask.setServiceStreetId(serviceStreet
									.getId());
						}
						// 关联信息保存
						if (serviceTask.getServiceTaskPhotoList() != null
								&& serviceTask.getServiceTaskPhotoList().size() > 0) {
							if (serviceTask.getId() == null) {
								dbManager.saveNoTransaction(serviceTask);
							}
							for (ServiceTaskPhotoEntity serviceTaskPhotoEntity : serviceTask
									.getServiceTaskPhotoList()) {
								serviceTaskPhotoEntity
										.setServiceTaskId(serviceTask.getId());
								dbManager
										.saveNoTransaction(serviceTaskPhotoEntity);
							}
						}
						// 关联信息保存
						if (serviceTask.getEdemaConditionList() != null
								&& serviceTask.getEdemaConditionList().size() > 0) {
							if (serviceTask.getId() == null) {
								dbManager.saveNoTransaction(serviceTask);
							}
							for (EdemaConditionEntity edemaConditionEntity : serviceTask
									.getEdemaConditionList()) {
								edemaConditionEntity
										.setServiceTaskId(serviceTask.getId());
								dbManager
										.saveNoTransaction(edemaConditionEntity);
							}
						}
						// 关联信息保存
						if (serviceTask.getSituationObservationList() != null
								&& serviceTask.getSituationObservationList()
										.size() > 0) {
							if (serviceTask.getId() == null) {
								dbManager.saveNoTransaction(serviceTask);
							}
							for (SituationObservationEntity situationObservationEntity : serviceTask
									.getSituationObservationList()) {
								situationObservationEntity
										.setServiceTaskId(serviceTask.getId());
								dbManager
										.saveNoTransaction(situationObservationEntity);
							}
						}
						// 关联信息保存
						if (serviceTask.getServiceLogList() != null
								&& serviceTask.getServiceLogList().size() > 0) {
							if (serviceTask.getId() == null) {
								dbManager.saveNoTransaction(serviceTask);
							}
							for (ServiceLogEntity serviceLogEntity : serviceTask
									.getServiceLogList()) {
								serviceLogEntity.setServiceTaskId(serviceTask
										.getId());
								dbManager.saveNoTransaction(serviceLogEntity);
							}
						}
						// 关联信息保存
						if (serviceTask.getDailyLifeAskList() != null
								&& serviceTask.getDailyLifeAskList().size() > 0) {
							if (serviceTask.getId() == null) {
								dbManager.saveNoTransaction(serviceTask);
							}
							for (DailyLifeAskEntity dailyLifeAskEntity : serviceTask
									.getDailyLifeAskList()) {
								dailyLifeAskEntity.setServiceTaskId(serviceTask
										.getId());
								dbManager.saveNoTransaction(dailyLifeAskEntity);
							}
						}
						// 关联信息保存
						if (serviceTask.getServiceEmployeeList() != null
								&& serviceTask.getServiceEmployeeList().size() > 0) {
							if (serviceTask.getId() == null) {
								dbManager.saveNoTransaction(serviceTask);
							}
							for (ServiceEmployeeEntity serviceEmployeeEntity : serviceTask
									.getServiceEmployeeList()) {
								serviceEmployeeEntity
										.setServiceTaskId(serviceTask.getId());
								dbManager
										.saveNoTransaction(serviceEmployeeEntity);
							}
						}
						if (serviceTask.getServiceList() != null
								&& serviceTask.getServiceList().size() > 0) {
							// 先删除原先绑定关系
							QueryCondition qc = new QueryCondition(
									ServiceTaskServiceEntity.SERVICE_TASK_ID,
									QueryCondition.eq, serviceTask.getId());
							List<Object> list = dbManager
									.queryByConditionNoTransaction(
											ServiceTaskServiceEntity.class, qc);
							if ((list != null) && (list.size() > 0)) {
								for (Object obj : list) {
									ServiceTaskServiceEntity entity = (ServiceTaskServiceEntity) obj;
									dbManager.delNoTransaction(entity.getId(),
											ServiceTaskServiceEntity.class);
								}
							}
							// 绑定现在的关系
							for (ServiceEntity service : serviceTask
									.getServiceList()) {
								Integer serviceId = service.getId();
								if (serviceId != null) {
									ServiceTaskServiceEntity entity = new ServiceTaskServiceEntity();
									entity.setServiceTaskId(serviceTask.getId());
									entity.setServiceId(serviceId);
									dbManager.saveNoTransaction(entity);
								}
							}
						}
						if (serviceTask.getPhysiologicalParametersHistoryList() != null
								&& serviceTask
										.getPhysiologicalParametersHistoryList()
										.size() > 0) {
							// 先删除原先绑定关系
							QueryCondition qc = new QueryCondition(
									ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID,
									QueryCondition.eq, serviceTask.getId());
							List<Object> list = dbManager
									.queryByConditionNoTransaction(
											ServiceTaskPhysiologicalParametersHistoryEntity.class,
											qc);
							if ((list != null) && (list.size() > 0)) {
								for (Object obj : list) {
									ServiceTaskPhysiologicalParametersHistoryEntity entity = (ServiceTaskPhysiologicalParametersHistoryEntity) obj;
									dbManager
											.delNoTransaction(
													entity.getId(),
													ServiceTaskPhysiologicalParametersHistoryEntity.class);
								}
							}
							// 绑定现在的关系
							for (PhysiologicalParametersHistoryEntity physiologicalParametersHistory : serviceTask
									.getPhysiologicalParametersHistoryList()) {
								Integer physiologicalParametersHistoryId = physiologicalParametersHistory
										.getId();
								if (physiologicalParametersHistoryId != null) {
									ServiceTaskPhysiologicalParametersHistoryEntity entity = new ServiceTaskPhysiologicalParametersHistoryEntity();
									entity.setServiceTaskId(serviceTask.getId());
									entity.setPhysiologicalParametersHistoryId(physiologicalParametersHistoryId);
									dbManager.saveNoTransaction(entity);
								}
							}
						}
						result = dbManager.saveNoTransaction(serviceTask);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public ServiceTaskEntity getById(Integer id) {
		ServiceTaskEntity obj = null;
		if (id != null) {
			obj = (ServiceTaskEntity) dbManager.getById(id,
					ServiceTaskEntity.class);
		}
		return obj;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param olderShow
	 *            是否查询关联信息
	 * @param addPersonWechatShow
	 *            是否查询关联信息
	 * @param siteShow
	 *            是否查询关联信息
	 * @param serviceAreaShow
	 *            是否查询关联信息
	 * @param serviceStreetShow
	 *            是否查询关联信息
	 * @param serviceTaskPhotoListShow
	 *            是否查询关联信息
	 * @param edemaConditionListShow
	 *            是否查询关联信息
	 * @param situationObservationListShow
	 *            是否查询关联信息
	 * @param serviceLogListShow
	 *            是否查询关联信息
	 * @param dailyLifeAskListShow
	 *            是否查询关联信息
	 * @param serviceEmployeeListShow
	 *            是否查询关联信息
	 * @param serviceListShow
	 *            是否查询关联信息
	 * @param physiologicalParametersHistoryListShow
	 *            是否查询关联信息
	 * @param obj
	 */
	public ServiceTaskEntity getById(Integer id, Boolean olderShow,
			Boolean addPersonWechatShow, Boolean siteShow,
			Boolean serviceAreaShow, Boolean serviceStreetShow,
			Boolean serviceTaskPhotoListShow, Boolean edemaConditionListShow,
			Boolean situationObservationListShow, Boolean serviceLogListShow,
			Boolean dailyLifeAskListShow, Boolean serviceEmployeeListShow,
			Boolean serviceListShow,
			Boolean physiologicalParametersHistoryListShow) {
		ServiceTaskEntity obj = null;
		if (id != null) {
			obj = (ServiceTaskEntity) dbManager.getById(id,
					ServiceTaskEntity.class);
			// 查询关联内容
			if (olderShow != null && olderShow.booleanValue() && obj != null
					&& obj.getOlderId() != null && obj.getOlderId() > 0) {
				OlderEntity older = (OlderEntity) dbManager.getById(
						obj.getOlderId(), OlderEntity.class);
				obj.setOlder(older);
			}
			// 查询关联内容
			if (addPersonWechatShow != null
					&& addPersonWechatShow.booleanValue() && obj != null
					&& obj.getAddPersonWechatId() != null
					&& obj.getAddPersonWechatId() > 0) {
				WechatEntity addPersonWechat = (WechatEntity) dbManager
						.getById(obj.getAddPersonWechatId(), WechatEntity.class);
				obj.setAddPersonWechat(addPersonWechat);
			}
			// 查询关联内容
			if (siteShow != null && siteShow.booleanValue() && obj != null
					&& obj.getSiteId() != null && obj.getSiteId() > 0) {
				SiteEntity site = (SiteEntity) dbManager.getById(
						obj.getSiteId(), SiteEntity.class);
				obj.setSite(site);
			}
			// 查询关联内容
			if (serviceAreaShow != null && serviceAreaShow.booleanValue()
					&& obj != null && obj.getServiceAreaId() != null
					&& obj.getServiceAreaId() > 0) {
				DataDicEntity serviceArea = (DataDicEntity) dbManager.getById(
						obj.getServiceAreaId(), DataDicEntity.class);
				obj.setServiceArea(serviceArea);
			}
			// 查询关联内容
			if (serviceStreetShow != null && serviceStreetShow.booleanValue()
					&& obj != null && obj.getServiceStreetId() != null
					&& obj.getServiceStreetId() > 0) {
				DataDicEntity serviceStreet = (DataDicEntity) dbManager
						.getById(obj.getServiceStreetId(), DataDicEntity.class);
				obj.setServiceStreet(serviceStreet);
			}
			// 查询关联内容
			if (serviceTaskPhotoListShow != null
					&& serviceTaskPhotoListShow.booleanValue() && obj != null
					&& obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(
						ServiceTaskPhotoEntity.class,
						ServiceTaskPhotoEntity.SERVICE_TASK_ID,
						String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<ServiceTaskPhotoEntity> serviceTaskPhotoList = new ArrayList<ServiceTaskPhotoEntity>();
					for (Object o : list) {
						serviceTaskPhotoList.add((ServiceTaskPhotoEntity) o);
					}
					obj.setServiceTaskPhotoList(serviceTaskPhotoList);
				}
			}
			// 查询关联内容
			if (edemaConditionListShow != null
					&& edemaConditionListShow.booleanValue() && obj != null
					&& obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(
						EdemaConditionEntity.class,
						EdemaConditionEntity.SERVICE_TASK_ID,
						String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<EdemaConditionEntity> edemaConditionList = new ArrayList<EdemaConditionEntity>();
					for (Object o : list) {
						edemaConditionList.add((EdemaConditionEntity) o);
					}
					obj.setEdemaConditionList(edemaConditionList);
				}
			}
			// 查询关联内容
			if (situationObservationListShow != null
					&& situationObservationListShow.booleanValue()
					&& obj != null && obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(
						SituationObservationEntity.class,
						SituationObservationEntity.SERVICE_TASK_ID,
						String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<SituationObservationEntity> situationObservationList = new ArrayList<SituationObservationEntity>();
					for (Object o : list) {
						situationObservationList
								.add((SituationObservationEntity) o);
					}
					obj.setSituationObservationList(situationObservationList);
				}
			}
			// 查询关联内容
			if (serviceLogListShow != null && serviceLogListShow.booleanValue()
					&& obj != null && obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(
						ServiceLogEntity.class,
						ServiceLogEntity.SERVICE_TASK_ID, String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<ServiceLogEntity> serviceLogList = new ArrayList<ServiceLogEntity>();
					for (Object o : list) {
						serviceLogList.add((ServiceLogEntity) o);
					}
					obj.setServiceLogList(serviceLogList);
				}
			}
			// 查询关联内容
			if (dailyLifeAskListShow != null
					&& dailyLifeAskListShow.booleanValue() && obj != null
					&& obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(
						DailyLifeAskEntity.class,
						DailyLifeAskEntity.SERVICE_TASK_ID, String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<DailyLifeAskEntity> dailyLifeAskList = new ArrayList<DailyLifeAskEntity>();
					for (Object o : list) {
						dailyLifeAskList.add((DailyLifeAskEntity) o);
					}
					obj.setDailyLifeAskList(dailyLifeAskList);
				}
			}
			// 查询关联内容
			if (serviceEmployeeListShow != null
					&& serviceEmployeeListShow.booleanValue() && obj != null
					&& obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(
						ServiceEmployeeEntity.class,
						ServiceEmployeeEntity.SERVICE_TASK_ID,
						String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<ServiceEmployeeEntity> serviceEmployeeList = new ArrayList<ServiceEmployeeEntity>();
					for (Object o : list) {
						serviceEmployeeList.add((ServiceEmployeeEntity) o);
					}
					obj.setServiceEmployeeList(serviceEmployeeList);
				}
			}
			// 查询关联内容
			if (serviceListShow != null && serviceListShow.booleanValue()
					&& obj != null && obj.getId() != null && obj.getId() > 0) {
				List<Object> rlist = dbManager.searchListByColumn(
						ServiceTaskServiceEntity.class,
						ServiceTaskServiceEntity.SERVICE_TASK_ID,
						String.valueOf(id));
				if (rlist != null && rlist.size() > 0) {
					for (Object robj : rlist) {
						ServiceTaskServiceEntity robject = (ServiceTaskServiceEntity) robj;
						Integer serviceId = robject.getServiceId();
						if (serviceId != null) {
							ServiceEntity service = (ServiceEntity) dbManager
									.getById(serviceId, ServiceEntity.class);
							List<ServiceEntity> serviceList = obj
									.getServiceList();
							if (serviceList == null || serviceList.size() == 0) {
								serviceList = new ArrayList<ServiceEntity>();
							}
							serviceList.add(service);
							obj.setServiceList(serviceList);
						}
					}
				}
			}
			// 查询关联内容
			if (physiologicalParametersHistoryListShow != null
					&& physiologicalParametersHistoryListShow.booleanValue()
					&& obj != null && obj.getId() != null && obj.getId() > 0) {
				List<Object> rlist = dbManager
						.searchListByColumn(
								ServiceTaskPhysiologicalParametersHistoryEntity.class,
								ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID,
								String.valueOf(id));
				if (rlist != null && rlist.size() > 0) {
					for (Object robj : rlist) {
						ServiceTaskPhysiologicalParametersHistoryEntity robject = (ServiceTaskPhysiologicalParametersHistoryEntity) robj;
						Integer physiologicalParametersHistoryId = robject
								.getPhysiologicalParametersHistoryId();
						if (physiologicalParametersHistoryId != null) {
							PhysiologicalParametersHistoryEntity physiologicalParametersHistory = (PhysiologicalParametersHistoryEntity) dbManager
									.getById(
											physiologicalParametersHistoryId,
											PhysiologicalParametersHistoryEntity.class);
							List<PhysiologicalParametersHistoryEntity> physiologicalParametersHistoryList = obj
									.getPhysiologicalParametersHistoryList();
							if (physiologicalParametersHistoryList == null
									|| physiologicalParametersHistoryList
											.size() == 0) {
								physiologicalParametersHistoryList = new ArrayList<PhysiologicalParametersHistoryEntity>();
							}
							physiologicalParametersHistoryList
									.add(physiologicalParametersHistory);
							obj.setPhysiologicalParametersHistoryList(physiologicalParametersHistoryList);
						}
					}
				}
			}
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<ServiceTaskEntity> getListByCondition(
			Map<String, Object> queryMap) {
		List<ServiceTaskEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		Object serviceId = queryMap.get("serviceId");
		Object physiologicalParametersHistoryId = queryMap
				.get("physiologicalParametersHistoryId");
		if (serviceId != null) {
			QueryCondition qc1 = new QueryCondition(
					ServiceTaskServiceEntity.SERVICE_ID, QueryCondition.eq,
					serviceId);
			List<Object> rlist = dbManager.queryByCondition(
					ServiceTaskServiceEntity.class, qc1);
			if (rlist != null && rlist.size() > 0) {
				String strIds = "";
				for (int i = 0; i < rlist.size(); i++) {
					ServiceTaskServiceEntity entity = (ServiceTaskServiceEntity) rlist
							.get(i);
					Integer temp = entity.getServiceTaskId();
					if (temp != null) {
						if (i == rlist.size() - 1)
							strIds = strIds + temp;
						else {
							strIds = strIds + temp + ",";
						}
					}
				}
				if (strIds != null && !"".equals(strIds)) {
					qc.andCondition(new QueryCondition(ServiceTaskEntity.ID,
							QueryCondition.in, strIds));
				}
			} else {
				return returnlist;
			}
		}
		if (physiologicalParametersHistoryId != null) {
			QueryCondition qc1 = new QueryCondition(
					ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID,
					QueryCondition.eq, physiologicalParametersHistoryId);
			List<Object> rlist = dbManager.queryByCondition(
					ServiceTaskPhysiologicalParametersHistoryEntity.class, qc1);
			if (rlist != null && rlist.size() > 0) {
				String strIds = "";
				for (int i = 0; i < rlist.size(); i++) {
					ServiceTaskPhysiologicalParametersHistoryEntity entity = (ServiceTaskPhysiologicalParametersHistoryEntity) rlist
							.get(i);
					Integer temp = entity.getServiceTaskId();
					if (temp != null) {
						if (i == rlist.size() - 1)
							strIds = strIds + temp;
						else {
							strIds = strIds + temp + ",";
						}
					}
				}
				if (strIds != null && !"".equals(strIds)) {
					qc.andCondition(new QueryCondition(ServiceTaskEntity.ID,
							QueryCondition.in, strIds));
				}
			} else {
				return returnlist;
			}
		}
		list = dbManager.queryByCondition(ServiceTaskEntity.class, qc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<ServiceTaskEntity>();
			for (Object obj : list) {
				returnlist.add((ServiceTaskEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param olderShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param addPersonWechatShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param siteShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param serviceAreaShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param serviceStreetShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param serviceTaskPhotoListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param edemaConditionListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param situationObservationListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param serviceLogListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param dailyLifeAskListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param serviceEmployeeListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param serviceListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param physiologicalParametersHistoryListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public List<ServiceTaskEntity> getListByCondition(
			Map<String, Object> queryMap, List<OrderVO> orderList,
			Boolean olderShow, Boolean addPersonWechatShow, Boolean siteShow,
			Boolean serviceAreaShow, Boolean serviceStreetShow,
			Boolean serviceTaskPhotoListShow, Boolean edemaConditionListShow,
			Boolean situationObservationListShow, Boolean serviceLogListShow,
			Boolean dailyLifeAskListShow, Boolean serviceEmployeeListShow,
			Boolean serviceListShow,
			Boolean physiologicalParametersHistoryListShow) {
		List<ServiceTaskEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		Object serviceId = queryMap.get("serviceId");
		Object physiologicalParametersHistoryId = queryMap
				.get("physiologicalParametersHistoryId");
		if (serviceId != null) {
			QueryCondition qc1 = new QueryCondition(
					ServiceTaskServiceEntity.SERVICE_ID, QueryCondition.eq,
					serviceId);
			List<Object> rlist = dbManager.queryByCondition(
					ServiceTaskServiceEntity.class, qc1);
			if (rlist != null && rlist.size() > 0) {
				String strIds = "";
				for (int i = 0; i < rlist.size(); i++) {
					ServiceTaskServiceEntity entity = (ServiceTaskServiceEntity) rlist
							.get(i);
					Integer temp = entity.getServiceTaskId();
					if (temp != null) {
						if (i == rlist.size() - 1)
							strIds = strIds + temp;
						else {
							strIds = strIds + temp + ",";
						}
					}
				}
				if (strIds != null && !"".equals(strIds)) {
					qc.andCondition(new QueryCondition(ServiceTaskEntity.ID,
							QueryCondition.in, strIds));
				}
			} else {
				return returnlist;
			}
		}
		if (physiologicalParametersHistoryId != null) {
			QueryCondition qc1 = new QueryCondition(
					ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID,
					QueryCondition.eq, physiologicalParametersHistoryId);
			List<Object> rlist = dbManager.queryByCondition(
					ServiceTaskPhysiologicalParametersHistoryEntity.class, qc1);
			if (rlist != null && rlist.size() > 0) {
				String strIds = "";
				for (int i = 0; i < rlist.size(); i++) {
					ServiceTaskPhysiologicalParametersHistoryEntity entity = (ServiceTaskPhysiologicalParametersHistoryEntity) rlist
							.get(i);
					Integer temp = entity.getServiceTaskId();
					if (temp != null) {
						if (i == rlist.size() - 1)
							strIds = strIds + temp;
						else {
							strIds = strIds + temp + ",";
						}
					}
				}
				if (strIds != null && !"".equals(strIds)) {
					qc.andCondition(new QueryCondition(ServiceTaskEntity.ID,
							QueryCondition.in, strIds));
				}
			} else {
				return returnlist;
			}
		}
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(ServiceTaskEntity.class, qc, oc);
		int a = 0;
		if (olderShow != null && olderShow.booleanValue()) {
			a++;
		}
		if (addPersonWechatShow != null && addPersonWechatShow.booleanValue()) {
			a++;
		}
		if (siteShow != null && siteShow.booleanValue()) {
			a++;
		}
		if (serviceAreaShow != null && serviceAreaShow.booleanValue()) {
			a++;
		}
		if (serviceStreetShow != null && serviceStreetShow.booleanValue()) {
			a++;
		}
		if (serviceTaskPhotoListShow != null
				&& serviceTaskPhotoListShow.booleanValue()) {
			a++;
		}
		if (edemaConditionListShow != null
				&& edemaConditionListShow.booleanValue()) {
			a++;
		}
		if (situationObservationListShow != null
				&& situationObservationListShow.booleanValue()) {
			a++;
		}
		if (serviceLogListShow != null && serviceLogListShow.booleanValue()) {
			a++;
		}
		if (dailyLifeAskListShow != null && dailyLifeAskListShow.booleanValue()) {
			a++;
		}
		if (serviceEmployeeListShow != null
				&& serviceEmployeeListShow.booleanValue()) {
			a++;
		}
		if (serviceListShow != null && serviceListShow.booleanValue()) {
			a++;
		}
		if (physiologicalParametersHistoryListShow != null
				&& physiologicalParametersHistoryListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && list != null && list.size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < list.size(); i++) {
				ServiceTaskEntity obj = (ServiceTaskEntity) list.get(i);
				// 查询关联内容
				if (olderShow != null && olderShow.booleanValue()
						&& obj != null && obj.getOlderId() != null
						&& obj.getOlderId() > 0) {
					OlderEntity older = (OlderEntity) dbManager.getById(
							obj.getOlderId(), OlderEntity.class);
					obj.setOlder(older);
				}
				// 查询关联内容
				if (addPersonWechatShow != null
						&& addPersonWechatShow.booleanValue() && obj != null
						&& obj.getAddPersonWechatId() != null
						&& obj.getAddPersonWechatId() > 0) {
					WechatEntity addPersonWechat = (WechatEntity) dbManager
							.getById(obj.getAddPersonWechatId(),
									WechatEntity.class);
					obj.setAddPersonWechat(addPersonWechat);
				}
				// 查询关联内容
				if (siteShow != null && siteShow.booleanValue() && obj != null
						&& obj.getSiteId() != null && obj.getSiteId() > 0) {
					SiteEntity site = (SiteEntity) dbManager.getById(
							obj.getSiteId(), SiteEntity.class);
					obj.setSite(site);
				}
				// 查询关联内容
				if (serviceAreaShow != null && serviceAreaShow.booleanValue()
						&& obj != null && obj.getServiceAreaId() != null
						&& obj.getServiceAreaId() > 0) {
					DataDicEntity serviceArea = (DataDicEntity) dbManager
							.getById(obj.getServiceAreaId(),
									DataDicEntity.class);
					obj.setServiceArea(serviceArea);
				}
				// 查询关联内容
				if (serviceStreetShow != null
						&& serviceStreetShow.booleanValue() && obj != null
						&& obj.getServiceStreetId() != null
						&& obj.getServiceStreetId() > 0) {
					DataDicEntity serviceStreet = (DataDicEntity) dbManager
							.getById(obj.getServiceStreetId(),
									DataDicEntity.class);
					obj.setServiceStreet(serviceStreet);
				}
				// 查询关联内容
				if (serviceTaskPhotoListShow != null
						&& serviceTaskPhotoListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							ServiceTaskPhotoEntity.class,
							ServiceTaskPhotoEntity.SERVICE_TASK_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<ServiceTaskPhotoEntity> serviceTaskPhotoList = new ArrayList<ServiceTaskPhotoEntity>();
						for (Object o : objList) {
							serviceTaskPhotoList
									.add((ServiceTaskPhotoEntity) o);
						}
						obj.setServiceTaskPhotoList(serviceTaskPhotoList);
					}
				}
				// 查询关联内容
				if (edemaConditionListShow != null
						&& edemaConditionListShow.booleanValue() && obj != null
						&& obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							EdemaConditionEntity.class,
							EdemaConditionEntity.SERVICE_TASK_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<EdemaConditionEntity> edemaConditionList = new ArrayList<EdemaConditionEntity>();
						for (Object o : objList) {
							edemaConditionList.add((EdemaConditionEntity) o);
						}
						obj.setEdemaConditionList(edemaConditionList);
					}
				}
				// 查询关联内容
				if (situationObservationListShow != null
						&& situationObservationListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							SituationObservationEntity.class,
							SituationObservationEntity.SERVICE_TASK_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<SituationObservationEntity> situationObservationList = new ArrayList<SituationObservationEntity>();
						for (Object o : objList) {
							situationObservationList
									.add((SituationObservationEntity) o);
						}
						obj.setSituationObservationList(situationObservationList);
					}
				}
				// 查询关联内容
				if (serviceLogListShow != null
						&& serviceLogListShow.booleanValue() && obj != null
						&& obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							ServiceLogEntity.class,
							ServiceLogEntity.SERVICE_TASK_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<ServiceLogEntity> serviceLogList = new ArrayList<ServiceLogEntity>();
						for (Object o : objList) {
							serviceLogList.add((ServiceLogEntity) o);
						}
						obj.setServiceLogList(serviceLogList);
					}
				}
				// 查询关联内容
				if (dailyLifeAskListShow != null
						&& dailyLifeAskListShow.booleanValue() && obj != null
						&& obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							DailyLifeAskEntity.class,
							DailyLifeAskEntity.SERVICE_TASK_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<DailyLifeAskEntity> dailyLifeAskList = new ArrayList<DailyLifeAskEntity>();
						for (Object o : objList) {
							dailyLifeAskList.add((DailyLifeAskEntity) o);
						}
						obj.setDailyLifeAskList(dailyLifeAskList);
					}
				}
				// 查询关联内容
				if (serviceEmployeeListShow != null
						&& serviceEmployeeListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							ServiceEmployeeEntity.class,
							ServiceEmployeeEntity.SERVICE_TASK_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<ServiceEmployeeEntity> serviceEmployeeList = new ArrayList<ServiceEmployeeEntity>();
						for (Object o : objList) {
							serviceEmployeeList.add((ServiceEmployeeEntity) o);
						}
						obj.setServiceEmployeeList(serviceEmployeeList);
					}
				}
				// 查询关联内容
				if (serviceListShow != null && serviceListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> rlist = dbManager.searchListByColumn(
							ServiceTaskServiceEntity.class,
							ServiceTaskServiceEntity.SERVICE_TASK_ID,
							String.valueOf(obj.getId()));
					if (rlist != null && rlist.size() > 0) {
						for (Object robj : rlist) {
							ServiceTaskServiceEntity robject = (ServiceTaskServiceEntity) robj;
							Integer objId = robject.getServiceId();
							if (objId != null) {
								ServiceEntity service = (ServiceEntity) dbManager
										.getById(objId, ServiceEntity.class);
								List<ServiceEntity> serviceList = obj
										.getServiceList();
								if (serviceList == null
										|| serviceList.size() == 0) {
									serviceList = new ArrayList<ServiceEntity>();
								}
								serviceList.add(service);
								obj.setServiceList(serviceList);
							}
						}
					}
				}
				// 查询关联内容
				if (physiologicalParametersHistoryListShow != null
						&& physiologicalParametersHistoryListShow
								.booleanValue() && obj != null
						&& obj.getId() != null && obj.getId() > 0) {
					List<Object> rlist = dbManager
							.searchListByColumn(
									ServiceTaskPhysiologicalParametersHistoryEntity.class,
									ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID,
									String.valueOf(obj.getId()));
					if (rlist != null && rlist.size() > 0) {
						for (Object robj : rlist) {
							ServiceTaskPhysiologicalParametersHistoryEntity robject = (ServiceTaskPhysiologicalParametersHistoryEntity) robj;
							Integer objId = robject
									.getPhysiologicalParametersHistoryId();
							if (objId != null) {
								PhysiologicalParametersHistoryEntity physiologicalParametersHistory = (PhysiologicalParametersHistoryEntity) dbManager
										.getById(
												objId,
												PhysiologicalParametersHistoryEntity.class);
								List<PhysiologicalParametersHistoryEntity> physiologicalParametersHistoryList = obj
										.getPhysiologicalParametersHistoryList();
								if (physiologicalParametersHistoryList == null
										|| physiologicalParametersHistoryList
												.size() == 0) {
									physiologicalParametersHistoryList = new ArrayList<PhysiologicalParametersHistoryEntity>();
								}
								physiologicalParametersHistoryList
										.add(physiologicalParametersHistory);
								obj.setPhysiologicalParametersHistoryList(physiologicalParametersHistoryList);
							}
						}
					}
				}
				result.add(obj);
			}
			list = result;
		}
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<ServiceTaskEntity>();
			for (Object obj : list) {
				returnlist.add((ServiceTaskEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		Object serviceId = queryMap.get("serviceId");
		Object physiologicalParametersHistoryId = queryMap
				.get("physiologicalParametersHistoryId");
		if (serviceId != null) {
			QueryCondition qc1 = new QueryCondition(
					ServiceTaskServiceEntity.SERVICE_ID, QueryCondition.eq,
					serviceId);
			List<Object> rlist = dbManager.queryByCondition(
					ServiceTaskServiceEntity.class, qc1);
			if (rlist != null && rlist.size() > 0) {
				String strIds = "";
				for (int i = 0; i < rlist.size(); i++) {
					ServiceTaskServiceEntity entity = (ServiceTaskServiceEntity) rlist
							.get(i);
					Integer temp = entity.getServiceTaskId();
					if (temp != null) {
						if (i == rlist.size() - 1)
							strIds = strIds + temp;
						else {
							strIds = strIds + temp + ",";
						}
					}
				}
				if (strIds != null && !"".equals(strIds)) {
					qc.andCondition(new QueryCondition(ServiceTaskEntity.ID,
							QueryCondition.in, strIds));
				}
			} else {
				return pagelist;
			}
		}
		if (physiologicalParametersHistoryId != null) {
			QueryCondition qc1 = new QueryCondition(
					ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID,
					QueryCondition.eq, physiologicalParametersHistoryId);
			List<Object> rlist = dbManager.queryByCondition(
					ServiceTaskPhysiologicalParametersHistoryEntity.class, qc1);
			if (rlist != null && rlist.size() > 0) {
				String strIds = "";
				for (int i = 0; i < rlist.size(); i++) {
					ServiceTaskPhysiologicalParametersHistoryEntity entity = (ServiceTaskPhysiologicalParametersHistoryEntity) rlist
							.get(i);
					Integer temp = entity.getServiceTaskId();
					if (temp != null) {
						if (i == rlist.size() - 1)
							strIds = strIds + temp;
						else {
							strIds = strIds + temp + ",";
						}
					}
				}
				if (strIds != null && !"".equals(strIds)) {
					qc.andCondition(new QueryCondition(ServiceTaskEntity.ID,
							QueryCondition.in, strIds));
				}
			} else {
				return pagelist;
			}
		}
		pagelist = dbManager.queryByCondition(ServiceTaskEntity.class, qc,
				pageno, pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @param olderShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param addPersonWechatShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param siteShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param serviceAreaShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param serviceStreetShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param serviceTaskPhotoListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param edemaConditionListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param situationObservationListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param serviceLogListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param dailyLifeAskListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param serviceEmployeeListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param serviceListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param physiologicalParametersHistoryListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, int pageno, int pagesize,
			Boolean olderShow, Boolean addPersonWechatShow, Boolean siteShow,
			Boolean serviceAreaShow, Boolean serviceStreetShow,
			Boolean serviceTaskPhotoListShow, Boolean edemaConditionListShow,
			Boolean situationObservationListShow, Boolean serviceLogListShow,
			Boolean dailyLifeAskListShow, Boolean serviceEmployeeListShow,
			Boolean serviceListShow,
			Boolean physiologicalParametersHistoryListShow) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		Object serviceId = queryMap.get("serviceId");
		Object physiologicalParametersHistoryId = queryMap
				.get("physiologicalParametersHistoryId");
		if (serviceId != null) {
			QueryCondition qc1 = new QueryCondition(
					ServiceTaskServiceEntity.SERVICE_ID, QueryCondition.eq,
					serviceId);
			List<Object> rlist = dbManager.queryByCondition(
					ServiceTaskServiceEntity.class, qc1);
			if (rlist != null && rlist.size() > 0) {
				String strIds = "";
				for (int i = 0; i < rlist.size(); i++) {
					ServiceTaskServiceEntity entity = (ServiceTaskServiceEntity) rlist
							.get(i);
					Integer temp = entity.getServiceTaskId();
					if (temp != null) {
						if (i == rlist.size() - 1)
							strIds = strIds + temp;
						else {
							strIds = strIds + temp + ",";
						}
					}
				}
				if (strIds != null && !"".equals(strIds)) {
					qc.andCondition(new QueryCondition(ServiceTaskEntity.ID,
							QueryCondition.in, strIds));
				}
			} else {
				return pagelist;
			}
		}
		if (physiologicalParametersHistoryId != null) {
			QueryCondition qc1 = new QueryCondition(
					ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID,
					QueryCondition.eq, physiologicalParametersHistoryId);
			List<Object> rlist = dbManager.queryByCondition(
					ServiceTaskPhysiologicalParametersHistoryEntity.class, qc1);
			if (rlist != null && rlist.size() > 0) {
				String strIds = "";
				for (int i = 0; i < rlist.size(); i++) {
					ServiceTaskPhysiologicalParametersHistoryEntity entity = (ServiceTaskPhysiologicalParametersHistoryEntity) rlist
							.get(i);
					Integer temp = entity.getServiceTaskId();
					if (temp != null) {
						if (i == rlist.size() - 1)
							strIds = strIds + temp;
						else {
							strIds = strIds + temp + ",";
						}
					}
				}
				if (strIds != null && !"".equals(strIds)) {
					qc.andCondition(new QueryCondition(ServiceTaskEntity.ID,
							QueryCondition.in, strIds));
				}
			} else {
				return pagelist;
			}
		}
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		// 数据权限
		List<QueryCondition> dataRuleQclist = null;
		List<Map<String, Object>> dataRuleMapList = (List<Map<String, Object>>) queryMap
				.get("dataRuleMapList");
		if (dataRuleMapList != null && dataRuleMapList.size() > 0) {
			dataRuleQclist = new ArrayList<QueryCondition>();
			for (Map<String, Object> dataRuleMap : dataRuleMapList) {
				QueryCondition dataRuleQc = changeMapToQc(dataRuleMap);
				dataRuleQclist.add(dataRuleQc);
			}
		}
		pagelist = dbManager.queryByConditions(ServiceTaskEntity.class, qc,
				dataRuleQclist, oc, pageno, pagesize);
		int a = 0;
		if (olderShow != null && olderShow.booleanValue()) {
			a++;
		}
		if (addPersonWechatShow != null && addPersonWechatShow.booleanValue()) {
			a++;
		}
		if (siteShow != null && siteShow.booleanValue()) {
			a++;
		}
		if (serviceAreaShow != null && serviceAreaShow.booleanValue()) {
			a++;
		}
		if (serviceStreetShow != null && serviceStreetShow.booleanValue()) {
			a++;
		}
		if (serviceTaskPhotoListShow != null
				&& serviceTaskPhotoListShow.booleanValue()) {
			a++;
		}
		if (edemaConditionListShow != null
				&& edemaConditionListShow.booleanValue()) {
			a++;
		}
		if (situationObservationListShow != null
				&& situationObservationListShow.booleanValue()) {
			a++;
		}
		if (serviceLogListShow != null && serviceLogListShow.booleanValue()) {
			a++;
		}
		if (dailyLifeAskListShow != null && dailyLifeAskListShow.booleanValue()) {
			a++;
		}
		if (serviceEmployeeListShow != null
				&& serviceEmployeeListShow.booleanValue()) {
			a++;
		}
		if (serviceListShow != null && serviceListShow.booleanValue()) {
			a++;
		}
		if (physiologicalParametersHistoryListShow != null
				&& physiologicalParametersHistoryListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && pagelist != null && pagelist.getResultList() != null
				&& pagelist.getResultList().size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < pagelist.getResultList().size(); i++) {
				ServiceTaskEntity obj = (ServiceTaskEntity) pagelist
						.getResultList().get(i);
				// 查询关联内容
				if (olderShow != null && olderShow.booleanValue()
						&& obj != null && obj.getOlderId() != null
						&& obj.getOlderId() > 0) {
					OlderEntity older = (OlderEntity) dbManager.getById(
							obj.getOlderId(), OlderEntity.class);
					obj.setOlder(older);
				}
				// 查询关联内容
				if (addPersonWechatShow != null
						&& addPersonWechatShow.booleanValue() && obj != null
						&& obj.getAddPersonWechatId() != null
						&& obj.getAddPersonWechatId() > 0) {
					WechatEntity addPersonWechat = (WechatEntity) dbManager
							.getById(obj.getAddPersonWechatId(),
									WechatEntity.class);
					obj.setAddPersonWechat(addPersonWechat);
				}
				// 查询关联内容
				if (siteShow != null && siteShow.booleanValue() && obj != null
						&& obj.getSiteId() != null && obj.getSiteId() > 0) {
					SiteEntity site = (SiteEntity) dbManager.getById(
							obj.getSiteId(), SiteEntity.class);
					obj.setSite(site);
				}
				// 查询关联内容
				if (serviceAreaShow != null && serviceAreaShow.booleanValue()
						&& obj != null && obj.getServiceAreaId() != null
						&& obj.getServiceAreaId() > 0) {
					DataDicEntity serviceArea = (DataDicEntity) dbManager
							.getById(obj.getServiceAreaId(),
									DataDicEntity.class);
					obj.setServiceArea(serviceArea);
				}
				// 查询关联内容
				if (serviceStreetShow != null
						&& serviceStreetShow.booleanValue() && obj != null
						&& obj.getServiceStreetId() != null
						&& obj.getServiceStreetId() > 0) {
					DataDicEntity serviceStreet = (DataDicEntity) dbManager
							.getById(obj.getServiceStreetId(),
									DataDicEntity.class);
					obj.setServiceStreet(serviceStreet);
				}
				// 查询关联内容
				if (serviceTaskPhotoListShow != null
						&& serviceTaskPhotoListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							ServiceTaskPhotoEntity.class,
							ServiceTaskPhotoEntity.SERVICE_TASK_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<ServiceTaskPhotoEntity> serviceTaskPhotoList = new ArrayList<ServiceTaskPhotoEntity>();
						for (Object o : objList) {
							serviceTaskPhotoList
									.add((ServiceTaskPhotoEntity) o);
						}
						obj.setServiceTaskPhotoList(serviceTaskPhotoList);
					}
				}
				// 查询关联内容
				if (edemaConditionListShow != null
						&& edemaConditionListShow.booleanValue() && obj != null
						&& obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							EdemaConditionEntity.class,
							EdemaConditionEntity.SERVICE_TASK_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<EdemaConditionEntity> edemaConditionList = new ArrayList<EdemaConditionEntity>();
						for (Object o : objList) {
							edemaConditionList.add((EdemaConditionEntity) o);
						}
						obj.setEdemaConditionList(edemaConditionList);
					}
				}
				// 查询关联内容
				if (situationObservationListShow != null
						&& situationObservationListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							SituationObservationEntity.class,
							SituationObservationEntity.SERVICE_TASK_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<SituationObservationEntity> situationObservationList = new ArrayList<SituationObservationEntity>();
						for (Object o : objList) {
							situationObservationList
									.add((SituationObservationEntity) o);
						}
						obj.setSituationObservationList(situationObservationList);
					}
				}
				// 查询关联内容
				if (serviceLogListShow != null
						&& serviceLogListShow.booleanValue() && obj != null
						&& obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							ServiceLogEntity.class,
							ServiceLogEntity.SERVICE_TASK_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<ServiceLogEntity> serviceLogList = new ArrayList<ServiceLogEntity>();
						for (Object o : objList) {
							serviceLogList.add((ServiceLogEntity) o);
						}
						obj.setServiceLogList(serviceLogList);
					}
				}
				// 查询关联内容
				if (dailyLifeAskListShow != null
						&& dailyLifeAskListShow.booleanValue() && obj != null
						&& obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							DailyLifeAskEntity.class,
							DailyLifeAskEntity.SERVICE_TASK_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<DailyLifeAskEntity> dailyLifeAskList = new ArrayList<DailyLifeAskEntity>();
						for (Object o : objList) {
							dailyLifeAskList.add((DailyLifeAskEntity) o);
						}
						obj.setDailyLifeAskList(dailyLifeAskList);
					}
				}
				// 查询关联内容
				if (serviceEmployeeListShow != null
						&& serviceEmployeeListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							ServiceEmployeeEntity.class,
							ServiceEmployeeEntity.SERVICE_TASK_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<ServiceEmployeeEntity> serviceEmployeeList = new ArrayList<ServiceEmployeeEntity>();
						for (Object o : objList) {
							serviceEmployeeList.add((ServiceEmployeeEntity) o);
						}
						obj.setServiceEmployeeList(serviceEmployeeList);
					}
				}
				// 查询关联内容
				if (serviceListShow != null && serviceListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> rlist = dbManager.searchListByColumn(
							ServiceTaskServiceEntity.class,
							ServiceTaskServiceEntity.SERVICE_TASK_ID,
							String.valueOf(obj.getId()));
					if (rlist != null && rlist.size() > 0) {
						for (Object robj : rlist) {
							ServiceTaskServiceEntity robject = (ServiceTaskServiceEntity) robj;
							Integer objId = robject.getServiceId();
							if (objId != null) {
								ServiceEntity service = (ServiceEntity) dbManager
										.getById(objId, ServiceEntity.class);
								List<ServiceEntity> serviceList = obj
										.getServiceList();
								if (serviceList == null
										|| serviceList.size() == 0) {
									serviceList = new ArrayList<ServiceEntity>();
								}
								serviceList.add(service);
								obj.setServiceList(serviceList);
							}
						}
					}
				}
				// 查询关联内容
				if (physiologicalParametersHistoryListShow != null
						&& physiologicalParametersHistoryListShow
								.booleanValue() && obj != null
						&& obj.getId() != null && obj.getId() > 0) {
					List<Object> rlist = dbManager
							.searchListByColumn(
									ServiceTaskPhysiologicalParametersHistoryEntity.class,
									ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID,
									String.valueOf(obj.getId()));
					if (rlist != null && rlist.size() > 0) {
						for (Object robj : rlist) {
							ServiceTaskPhysiologicalParametersHistoryEntity robject = (ServiceTaskPhysiologicalParametersHistoryEntity) robj;
							Integer objId = robject
									.getPhysiologicalParametersHistoryId();
							if (objId != null) {
								PhysiologicalParametersHistoryEntity physiologicalParametersHistory = (PhysiologicalParametersHistoryEntity) dbManager
										.getById(
												objId,
												PhysiologicalParametersHistoryEntity.class);
								List<PhysiologicalParametersHistoryEntity> physiologicalParametersHistoryList = obj
										.getPhysiologicalParametersHistoryList();
								if (physiologicalParametersHistoryList == null
										|| physiologicalParametersHistoryList
												.size() == 0) {
									physiologicalParametersHistoryList = new ArrayList<PhysiologicalParametersHistoryEntity>();
								}
								physiologicalParametersHistoryList
										.add(physiologicalParametersHistory);
								obj.setPhysiologicalParametersHistoryList(physiologicalParametersHistoryList);
							}
						}
					}
				}
				result.add(obj);
			}
			pagelist.setResultList(result);
		}
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id, Boolean delOlder,
			Boolean delAddPersonWechat, Boolean delSite,
			Boolean delServiceArea, Boolean delServiceStreet,
			Boolean delServiceTaskPhotoList, Boolean delEdemaConditionList,
			Boolean delSituationObservationList, Boolean delServiceLogList,
			Boolean delDailyLifeAskList, Boolean delServiceEmployeeList,
			Boolean delServiceTaskServiceList,
			Boolean delServiceTaskPhysiologicalParametersHistoryList) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delOlder != null && delOlder.booleanValue()) {
					ServiceTaskEntity serviceTask = (ServiceTaskEntity) dbManager
							.getById(id, ServiceTaskEntity.class);
					if (serviceTask != null && serviceTask.getOlderId() != null) {
						dbManager.delNoTransaction(serviceTask.getOlderId(),
								OlderEntity.class);
					}
				}
				// 删除关联信息
				if (delAddPersonWechat != null
						&& delAddPersonWechat.booleanValue()) {
					ServiceTaskEntity serviceTask = (ServiceTaskEntity) dbManager
							.getById(id, ServiceTaskEntity.class);
					if (serviceTask != null
							&& serviceTask.getAddPersonWechatId() != null) {
						dbManager.delNoTransaction(
								serviceTask.getAddPersonWechatId(),
								WechatEntity.class);
					}
				}
				// 删除关联信息
				if (delSite != null && delSite.booleanValue()) {
					ServiceTaskEntity serviceTask = (ServiceTaskEntity) dbManager
							.getById(id, ServiceTaskEntity.class);
					if (serviceTask != null && serviceTask.getSiteId() != null) {
						dbManager.delNoTransaction(serviceTask.getSiteId(),
								SiteEntity.class);
					}
				}
				// 删除关联信息
				if (delServiceArea != null && delServiceArea.booleanValue()) {
					ServiceTaskEntity serviceTask = (ServiceTaskEntity) dbManager
							.getById(id, ServiceTaskEntity.class);
					if (serviceTask != null
							&& serviceTask.getServiceAreaId() != null) {
						dbManager.delNoTransaction(
								serviceTask.getServiceAreaId(),
								DataDicEntity.class);
					}
				}
				// 删除关联信息
				if (delServiceStreet != null && delServiceStreet.booleanValue()) {
					ServiceTaskEntity serviceTask = (ServiceTaskEntity) dbManager
							.getById(id, ServiceTaskEntity.class);
					if (serviceTask != null
							&& serviceTask.getServiceStreetId() != null) {
						dbManager.delNoTransaction(
								serviceTask.getServiceStreetId(),
								DataDicEntity.class);
					}
				}
				// 删除关联信息
				if (delServiceTaskPhotoList != null
						&& delServiceTaskPhotoList.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							ServiceTaskPhotoEntity.SERVICE_TASK_ID,
							QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(
							ServiceTaskPhotoEntity.class, qc);
				}
				// 删除关联信息
				if (delEdemaConditionList != null
						&& delEdemaConditionList.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							EdemaConditionEntity.SERVICE_TASK_ID,
							QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(
							EdemaConditionEntity.class, qc);
				}
				// 删除关联信息
				if (delSituationObservationList != null
						&& delSituationObservationList.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							SituationObservationEntity.SERVICE_TASK_ID,
							QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(
							SituationObservationEntity.class, qc);
				}
				// 删除关联信息
				if (delServiceLogList != null
						&& delServiceLogList.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							ServiceLogEntity.SERVICE_TASK_ID,
							QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(
							ServiceLogEntity.class, qc);
				}
				// 删除关联信息
				if (delDailyLifeAskList != null
						&& delDailyLifeAskList.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							DailyLifeAskEntity.SERVICE_TASK_ID,
							QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(
							DailyLifeAskEntity.class, qc);
				}
				// 删除关联信息
				if (delServiceEmployeeList != null
						&& delServiceEmployeeList.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							ServiceEmployeeEntity.SERVICE_TASK_ID,
							QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(
							ServiceEmployeeEntity.class, qc);
				}
				// 删除关联信息
				if (delServiceTaskServiceList != null
						&& delServiceTaskServiceList.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							ServiceTaskServiceEntity.SERVICE_TASK_ID,
							QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(
							ServiceTaskServiceEntity.class, qc);
				}
				// 删除关联信息
				if (delServiceTaskPhysiologicalParametersHistoryList != null
						&& delServiceTaskPhysiologicalParametersHistoryList
								.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID,
							QueryCondition.eq, id);
					dbManager
							.delByConditionsNoTransaction(
									ServiceTaskPhysiologicalParametersHistoryEntity.class,
									qc);
				}
				result = dbManager
						.delNoTransaction(id, ServiceTaskEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(ServiceTaskEntity.ID,
						QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(
						ServiceTaskEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		// *删除关联表的信息 pei
		Map<String, Object> queryMapServiceLog = new HashMap<String, Object>();
		queryMapServiceLog.put("serviceTaskId_in", ids);
		List<ServiceLogEntity> serviceLogList = serviceLogService
				.getListByCondition(queryMapServiceLog);
		if (serviceLogList != null && serviceLogList.size() > 0) {
			for (ServiceLogEntity entyty : serviceLogList) {
				Integer id = entyty.getId();
				dbManager.del(id, ServiceLogEntity.class);
			}
		}
		Map<String, Object> queryMapServiceEmp = new HashMap<String, Object>();
		queryMapServiceEmp.put("serviceTaskId_in", ids);
		List<ServiceEmployeeEntity> entytyList = serviceEmployeeService
				.getListByCondition(queryMapServiceEmp);
		if (entytyList != null && entytyList.size() > 0) {
			for (ServiceEmployeeEntity entity : entytyList) {
				Integer id = entity.getId();
				dbManager.del(id, ServiceEmployeeEntity.class);
			}
		}
		Map<String, Object> queryMapServiceSer = new HashMap<String, Object>();
		queryMapServiceSer.put("serviceTaskId_in", ids);
		List<ServiceTaskServiceEntity> entrLIst = serviceTaskServiceService
				.getListByCondition(queryMapServiceSer);
		if (entrLIst != null && entrLIst.size() > 0) {
			for (ServiceTaskServiceEntity entity : entrLIst) {
				Integer id = entity.getId();
				dbManager.del(id, ServiceTaskServiceEntity.class);
			}
		}
		Map<String, Object> queryMapServiceede = new HashMap<String, Object>();
		queryMapServiceede.put("serviceTaskId_in", ids);
		List<EdemaConditionEntity> eneList = edemaConditionService
				.getListByCondition(queryMapServiceede);
		if (eneList != null && eneList.size() > 0) {
			for (EdemaConditionEntity entity : eneList) {
				Integer id = entity.getId();
				dbManager.del(id, EdemaConditionEntity.class);
			}
		}
		Map<String, Object> queryMapServicephoto = new HashMap<String, Object>();
		queryMapServicephoto.put("serviceTaskId_in", ids);
		List<ServiceTaskPhotoEntity> photoList = serviceTaskPhotoService
				.getListByCondition(queryMapServicephoto);
		if (photoList != null && photoList.size() > 0) {
			for (ServiceTaskPhotoEntity entity : photoList) {
				Integer id = entity.getId();
				dbManager.del(id, ServiceTaskPhotoEntity.class);
			}
		}
		Map<String, Object> queryMapServicephy = new HashMap<String, Object>();
		queryMapServicephy.put("serviceTaskId_in", ids);
		List<ServiceTaskPhysiologicalParametersHistoryEntity> phyList = serviceTaskPhysiologicalParametersHistoryService
				.getListByCondition(queryMapServicephy);
		if (phyList != null && phyList.size() > 0) {
			for (ServiceTaskPhysiologicalParametersHistoryEntity entity : phyList) {
				Integer id = entity.getId();
				dbManager.del(id,
						ServiceTaskPhysiologicalParametersHistoryEntity.class);
			}
		}
		// //////////////////////////
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap, Boolean delOlder,
			Boolean delAddPersonWechat, Boolean delSite,
			Boolean delServiceArea, Boolean delServiceStreet,
			Boolean delServiceTaskPhotoList, Boolean delEdemaConditionList,
			Boolean delSituationObservationList, Boolean delServiceLogList,
			Boolean delDailyLifeAskList, Boolean delServiceEmployeeList,
			Boolean delServiceTaskServiceList,
			Boolean delServiceTaskPhysiologicalParametersHistoryList) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		Object serviceId = queryMap.get("serviceId");
		Object physiologicalParametersHistoryId = queryMap
				.get("physiologicalParametersHistoryId");
		if (serviceId != null) {
			QueryCondition qc1 = new QueryCondition(
					ServiceTaskServiceEntity.SERVICE_ID, QueryCondition.eq,
					serviceId);
			List<Object> rlist = dbManager.queryByCondition(
					ServiceTaskServiceEntity.class, qc1);
			if (rlist != null && rlist.size() > 0) {
				String strIds = "";
				for (int i = 0; i < rlist.size(); i++) {
					ServiceTaskServiceEntity entity = (ServiceTaskServiceEntity) rlist
							.get(i);
					Integer temp = entity.getServiceTaskId();
					if (temp != null) {
						if (i == rlist.size() - 1)
							strIds = strIds + temp;
						else {
							strIds = strIds + temp + ",";
						}
					}
				}
				if (strIds != null && !"".equals(strIds)) {
					qc.andCondition(new QueryCondition(ServiceTaskEntity.ID,
							QueryCondition.in, strIds));
				}
			} else {
				return result;
			}
		}
		if (physiologicalParametersHistoryId != null) {
			QueryCondition qc1 = new QueryCondition(
					ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID,
					QueryCondition.eq, physiologicalParametersHistoryId);
			List<Object> rlist = dbManager.queryByCondition(
					ServiceTaskPhysiologicalParametersHistoryEntity.class, qc1);
			if (rlist != null && rlist.size() > 0) {
				String strIds = "";
				for (int i = 0; i < rlist.size(); i++) {
					ServiceTaskPhysiologicalParametersHistoryEntity entity = (ServiceTaskPhysiologicalParametersHistoryEntity) rlist
							.get(i);
					Integer temp = entity.getServiceTaskId();
					if (temp != null) {
						if (i == rlist.size() - 1)
							strIds = strIds + temp;
						else {
							strIds = strIds + temp + ",";
						}
					}
				}
				if (strIds != null && !"".equals(strIds)) {
					qc.andCondition(new QueryCondition(ServiceTaskEntity.ID,
							QueryCondition.in, strIds));
				}
			} else {
				return result;
			}
		}
		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delOlder != null && delOlder.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ServiceTaskEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ServiceTaskEntity entity = (ServiceTaskEntity) obj;
							strIds += entity.getOlderId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(OlderEntity.ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								OlderEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delAddPersonWechat != null
						&& delAddPersonWechat.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ServiceTaskEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ServiceTaskEntity entity = (ServiceTaskEntity) obj;
							strIds += entity.getAddPersonWechatId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								WechatEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								WechatEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delSite != null && delSite.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ServiceTaskEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ServiceTaskEntity entity = (ServiceTaskEntity) obj;
							strIds += entity.getSiteId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(SiteEntity.ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								SiteEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delServiceArea != null && delServiceArea.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ServiceTaskEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ServiceTaskEntity entity = (ServiceTaskEntity) obj;
							strIds += entity.getServiceAreaId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								DataDicEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								DataDicEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delServiceStreet != null && delServiceStreet.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ServiceTaskEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ServiceTaskEntity entity = (ServiceTaskEntity) obj;
							strIds += entity.getServiceStreetId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								DataDicEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								DataDicEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delServiceTaskPhotoList != null
						&& delServiceTaskPhotoList.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ServiceTaskEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ServiceTaskEntity entity = (ServiceTaskEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								ServiceTaskPhotoEntity.SERVICE_TASK_ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								ServiceTaskPhotoEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delEdemaConditionList != null
						&& delEdemaConditionList.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ServiceTaskEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ServiceTaskEntity entity = (ServiceTaskEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								EdemaConditionEntity.SERVICE_TASK_ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								EdemaConditionEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delSituationObservationList != null
						&& delSituationObservationList.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ServiceTaskEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ServiceTaskEntity entity = (ServiceTaskEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								SituationObservationEntity.SERVICE_TASK_ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								SituationObservationEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delServiceLogList != null
						&& delServiceLogList.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ServiceTaskEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ServiceTaskEntity entity = (ServiceTaskEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								ServiceLogEntity.SERVICE_TASK_ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								ServiceLogEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delDailyLifeAskList != null
						&& delDailyLifeAskList.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ServiceTaskEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ServiceTaskEntity entity = (ServiceTaskEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								DailyLifeAskEntity.SERVICE_TASK_ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								DailyLifeAskEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delServiceEmployeeList != null
						&& delServiceEmployeeList.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ServiceTaskEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ServiceTaskEntity entity = (ServiceTaskEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								ServiceEmployeeEntity.SERVICE_TASK_ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								ServiceEmployeeEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delServiceTaskServiceList != null
						&& delServiceTaskServiceList.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ServiceTaskEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ServiceTaskEntity entity = (ServiceTaskEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								ServiceTaskServiceEntity.SERVICE_TASK_ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								ServiceTaskServiceEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delServiceTaskPhysiologicalParametersHistoryList != null
						&& delServiceTaskPhysiologicalParametersHistoryList
								.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ServiceTaskEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ServiceTaskEntity entity = (ServiceTaskEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID,
								QueryCondition.in, strIds);
						dbManager
								.delByConditionsNoTransaction(
										ServiceTaskPhysiologicalParametersHistoryEntity.class,
										qc1);
					}

				}
				result = dbManager.delByConditionsNoTransaction(
						ServiceTaskEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/* pei */
	public static String savePhoto(String photo, String fileName) {
		String returnPath = null;
		try {
			photo = photo.replaceAll("\n", "");
			byte[] photobyte = Base64Utils.decode(photo);

			String path = ServiceTaskHandler.class.getResource(
					"ServiceTaskHandler.class").toString();
			String separator = FileUtil.getFileSeparator();
			if ("file".equals(path.substring(0, 4))) {
				if ("\\".equals(separator))
					path = path.substring(6);
				else {
					path = path.substring(5);
				}
			}
			String localPath = path.substring(0, path.indexOf("WEB-INF"))
					+ "photos" + separator + "serviceTaskPhotos" + separator
					+ fileName;
			localPath = URLDecoder.decode(localPath);
			localPath = localPath.replace("/", separator);
			localPath = localPath.replace("\\", separator);

			returnPath = SystemInit.photourl + "/photos/"
					+ "serviceTaskPhotos/" + fileName;

			byte2image(photobyte, localPath);
		} catch (Exception e) {
			logger.error(e.toString());
		}
		return returnPath;
	}

	public static void byte2image(byte[] data, String path) {
		if ((data.length < 3) || (path.equals("")))
			return;
		try {
			FileImageOutputStream imageOutput = new FileImageOutputStream(
					new File(path));
			imageOutput.write(data, 0, data.length);
			imageOutput.close();
			System.out.println("Make Picture success,Please find image in "
					+ path);
		} catch (Exception ex) {
			System.out.println("Exception: " + ex);
			ex.printStackTrace();
		}
	}

	private QueryCondition changeMapToQc(Map<String, Object> queryMap) {
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object serviceCode = queryMap.get("serviceCode");
		Object serviceCode_like = queryMap.get("serviceCode_like");
		Object serviceCode_isNull = queryMap.get("serviceCode_isNull");
		Object serviceCode_isNotNull = queryMap.get("serviceCode_isNotNull");
		Object serviceCode_in = queryMap.get("serviceCode_in");
		Object olderId = queryMap.get("olderId");
		Object olderId_gt = queryMap.get("olderId_gt");
		Object olderId_ge = queryMap.get("olderId_ge");
		Object olderId_lt = queryMap.get("olderId_lt");
		Object olderId_le = queryMap.get("olderId_le");
		Object olderId_in = queryMap.get("olderId_in");
		Object olderMemberNum = queryMap.get("olderMemberNum");
		Object olderMemberNum_like = queryMap.get("olderMemberNum_like");
		Object olderMemberNum_isNull = queryMap.get("olderMemberNum_isNull");
		Object olderMemberNum_isNotNull = queryMap
				.get("olderMemberNum_isNotNull");
		Object olderMemberNum_in = queryMap.get("olderMemberNum_in");
		Object olderName = queryMap.get("olderName");
		Object olderName_like = queryMap.get("olderName_like");
		Object olderName_isNull = queryMap.get("olderName_isNull");
		Object olderName_isNotNull = queryMap.get("olderName_isNotNull");
		Object olderName_in = queryMap.get("olderName_in");
		Object olderBirthdate_gt = queryMap.get("olderBirthdate_gt");
		Object olderBirthdate_ge = queryMap.get("olderBirthdate_ge");
		Object olderBirthdate_lt = queryMap.get("olderBirthdate_lt");
		Object olderBirthdate_le = queryMap.get("olderBirthdate_le");
		Object serviceAreaId = queryMap.get("serviceAreaId");
		Object serviceAreaId_gt = queryMap.get("serviceAreaId_gt");
		Object serviceAreaId_ge = queryMap.get("serviceAreaId_ge");
		Object serviceAreaId_lt = queryMap.get("serviceAreaId_lt");
		Object serviceAreaId_le = queryMap.get("serviceAreaId_le");
		Object serviceAreaId_in = queryMap.get("serviceAreaId_in");
		Object serviceStreetId = queryMap.get("serviceStreetId");
		Object serviceStreetId_gt = queryMap.get("serviceStreetId_gt");
		Object serviceStreetId_ge = queryMap.get("serviceStreetId_ge");
		Object serviceStreetId_lt = queryMap.get("serviceStreetId_lt");
		Object serviceStreetId_le = queryMap.get("serviceStreetId_le");
		Object serviceStreetId_in = queryMap.get("serviceStreetId_in");
		Object contactName = queryMap.get("contactName");
		Object contactName_like = queryMap.get("contactName_like");
		Object contactName_isNull = queryMap.get("contactName_isNull");
		Object contactName_isNotNull = queryMap.get("contactName_isNotNull");
		Object contactName_in = queryMap.get("contactName_in");
		Object contactTel = queryMap.get("contactTel");
		Object contactTel_like = queryMap.get("contactTel_like");
		Object contactTel_isNull = queryMap.get("contactTel_isNull");
		Object contactTel_isNotNull = queryMap.get("contactTel_isNotNull");
		Object contactTel_in = queryMap.get("contactTel_in");
		Object address = queryMap.get("address");
		Object address_like = queryMap.get("address_like");
		Object address_isNull = queryMap.get("address_isNull");
		Object address_isNotNull = queryMap.get("address_isNotNull");
		Object address_in = queryMap.get("address_in");
		Object addressLong = queryMap.get("addressLong");
		Object addressLong_gt = queryMap.get("addressLong_gt");
		Object addressLong_ge = queryMap.get("addressLong_ge");
		Object addressLong_lt = queryMap.get("addressLong_lt");
		Object addressLong_le = queryMap.get("addressLong_le");
		Object addressLong_in = queryMap.get("addressLong_in");
		Object addressLat = queryMap.get("addressLat");
		Object addressLat_gt = queryMap.get("addressLat_gt");
		Object addressLat_ge = queryMap.get("addressLat_ge");
		Object addressLat_lt = queryMap.get("addressLat_lt");
		Object addressLat_le = queryMap.get("addressLat_le");
		Object addressLat_in = queryMap.get("addressLat_in");
		Object serviceExpectTime_gt = queryMap.get("serviceExpectTime_gt");
		Object serviceExpectTime_ge = queryMap.get("serviceExpectTime_ge");
		Object serviceExpectTime_lt = queryMap.get("serviceExpectTime_lt");
		Object serviceExpectTime_le = queryMap.get("serviceExpectTime_le");
		Object serviceStartTime_gt = queryMap.get("serviceStartTime_gt");
		Object serviceStartTime_ge = queryMap.get("serviceStartTime_ge");
		Object serviceStartTime_lt = queryMap.get("serviceStartTime_lt");
		Object serviceStartTime_le = queryMap.get("serviceStartTime_le");
		Object serviceEndTime_gt = queryMap.get("serviceEndTime_gt");
		Object serviceEndTime_ge = queryMap.get("serviceEndTime_ge");
		Object serviceEndTime_lt = queryMap.get("serviceEndTime_lt");
		Object serviceEndTime_le = queryMap.get("serviceEndTime_le");
		Object serviceTimeCount = queryMap.get("serviceTimeCount");
		Object serviceTimeCount_gt = queryMap.get("serviceTimeCount_gt");
		Object serviceTimeCount_ge = queryMap.get("serviceTimeCount_ge");
		Object serviceTimeCount_lt = queryMap.get("serviceTimeCount_lt");
		Object serviceTimeCount_le = queryMap.get("serviceTimeCount_le");
		Object serviceTimeCount_in = queryMap.get("serviceTimeCount_in");
		Object serviceTimeStatus = queryMap.get("serviceTimeStatus");
		Object serviceTimeStatus_gt = queryMap.get("serviceTimeStatus_gt");
		Object serviceTimeStatus_ge = queryMap.get("serviceTimeStatus_ge");
		Object serviceTimeStatus_lt = queryMap.get("serviceTimeStatus_lt");
		Object serviceTimeStatus_le = queryMap.get("serviceTimeStatus_le");
		Object serviceTimeStatus_in = queryMap.get("serviceTimeStatus_in");
		Object siteId = queryMap.get("siteId");
		Object siteId_gt = queryMap.get("siteId_gt");
		Object siteId_ge = queryMap.get("siteId_ge");
		Object siteId_lt = queryMap.get("siteId_lt");
		Object siteId_le = queryMap.get("siteId_le");
		Object siteId_in = queryMap.get("siteId_in");
		Object siteName = queryMap.get("siteName");
		Object siteName_like = queryMap.get("siteName_like");
		Object siteName_isNull = queryMap.get("siteName_isNull");
		Object siteName_isNotNull = queryMap.get("siteName_isNotNull");
		Object siteName_in = queryMap.get("siteName_in");
		Object nursingRecord = queryMap.get("nursingRecord");
		Object nursingRecord_like = queryMap.get("nursingRecord_like");
		Object nursingRecord_isNull = queryMap.get("nursingRecord_isNull");
		Object nursingRecord_isNotNull = queryMap
				.get("nursingRecord_isNotNull");
		Object nursingRecord_in = queryMap.get("nursingRecord_in");
		Object customerInformed = queryMap.get("customerInformed");
		Object customerInformed_like = queryMap.get("customerInformed_like");
		Object customerInformed_isNull = queryMap
				.get("customerInformed_isNull");
		Object customerInformed_isNotNull = queryMap
				.get("customerInformed_isNotNull");
		Object customerInformed_in = queryMap.get("customerInformed_in");
		Object qualityEvaluation = queryMap.get("qualityEvaluation");
		Object qualityEvaluation_gt = queryMap.get("qualityEvaluation_gt");
		Object qualityEvaluation_ge = queryMap.get("qualityEvaluation_ge");
		Object qualityEvaluation_lt = queryMap.get("qualityEvaluation_lt");
		Object qualityEvaluation_le = queryMap.get("qualityEvaluation_le");
		Object qualityEvaluation_in = queryMap.get("qualityEvaluation_in");
		Object attitudeEvaluation = queryMap.get("attitudeEvaluation");
		Object attitudeEvaluation_gt = queryMap.get("attitudeEvaluation_gt");
		Object attitudeEvaluation_ge = queryMap.get("attitudeEvaluation_ge");
		Object attitudeEvaluation_lt = queryMap.get("attitudeEvaluation_lt");
		Object attitudeEvaluation_le = queryMap.get("attitudeEvaluation_le");
		Object attitudeEvaluation_in = queryMap.get("attitudeEvaluation_in");
		Object courseNumber = queryMap.get("courseNumber");
		Object courseNumber_gt = queryMap.get("courseNumber_gt");
		Object courseNumber_ge = queryMap.get("courseNumber_ge");
		Object courseNumber_lt = queryMap.get("courseNumber_lt");
		Object courseNumber_le = queryMap.get("courseNumber_le");
		Object courseNumber_in = queryMap.get("courseNumber_in");
		Object serviceNumber = queryMap.get("serviceNumber");
		Object serviceNumber_gt = queryMap.get("serviceNumber_gt");
		Object serviceNumber_ge = queryMap.get("serviceNumber_ge");
		Object serviceNumber_lt = queryMap.get("serviceNumber_lt");
		Object serviceNumber_le = queryMap.get("serviceNumber_le");
		Object serviceNumber_in = queryMap.get("serviceNumber_in");
		Object price = queryMap.get("price");
		Object price_gt = queryMap.get("price_gt");
		Object price_ge = queryMap.get("price_ge");
		Object price_lt = queryMap.get("price_lt");
		Object price_le = queryMap.get("price_le");
		Object price_in = queryMap.get("price_in");
		Object source = queryMap.get("source");
		Object source_like = queryMap.get("source_like");
		Object source_isNull = queryMap.get("source_isNull");
		Object source_isNotNull = queryMap.get("source_isNotNull");
		Object source_in = queryMap.get("source_in");
		Object healthInsurance = queryMap.get("healthInsurance");
		Object healthInsurance_gt = queryMap.get("healthInsurance_gt");
		Object healthInsurance_ge = queryMap.get("healthInsurance_ge");
		Object healthInsurance_lt = queryMap.get("healthInsurance_lt");
		Object healthInsurance_le = queryMap.get("healthInsurance_le");
		Object healthInsurance_in = queryMap.get("healthInsurance_in");
		Object status = queryMap.get("status");
		Object status_gt = queryMap.get("status_gt");
		Object status_ge = queryMap.get("status_ge");
		Object status_lt = queryMap.get("status_lt");
		Object status_le = queryMap.get("status_le");
		Object status_in = queryMap.get("status_in");
		Object des = queryMap.get("des");
		Object des_like = queryMap.get("des_like");
		Object des_isNull = queryMap.get("des_isNull");
		Object des_isNotNull = queryMap.get("des_isNotNull");
		Object des_in = queryMap.get("des_in");
		Object addPerson = queryMap.get("addPerson");
		Object addPerson_like = queryMap.get("addPerson_like");
		Object addPerson_isNull = queryMap.get("addPerson_isNull");
		Object addPerson_isNotNull = queryMap.get("addPerson_isNotNull");
		Object addPerson_in = queryMap.get("addPerson_in");
		Object addTime_gt = queryMap.get("addTime_gt");
		Object addTime_ge = queryMap.get("addTime_ge");
		Object addTime_lt = queryMap.get("addTime_lt");
		Object addTime_le = queryMap.get("addTime_le");
		Object visitPerson = queryMap.get("visitPerson");
		Object visitPerson_like = queryMap.get("visitPerson_like");
		Object visitPerson_isNull = queryMap.get("visitPerson_isNull");
		Object visitPerson_isNotNull = queryMap.get("visitPerson_isNotNull");
		Object visitPerson_in = queryMap.get("visitPerson_in");
		Object visitTime_gt = queryMap.get("visitTime_gt");
		Object visitTime_ge = queryMap.get("visitTime_ge");
		Object visitTime_lt = queryMap.get("visitTime_lt");
		Object visitTime_le = queryMap.get("visitTime_le");
		Object satisfactionEvaluation = queryMap.get("satisfactionEvaluation");
		Object satisfactionEvaluation_gt = queryMap
				.get("satisfactionEvaluation_gt");
		Object satisfactionEvaluation_ge = queryMap
				.get("satisfactionEvaluation_ge");
		Object satisfactionEvaluation_lt = queryMap
				.get("satisfactionEvaluation_lt");
		Object satisfactionEvaluation_le = queryMap
				.get("satisfactionEvaluation_le");
		Object satisfactionEvaluation_in = queryMap
				.get("satisfactionEvaluation_in");
		Object visitRecord = queryMap.get("visitRecord");
		Object visitRecord_like = queryMap.get("visitRecord_like");
		Object visitRecord_isNull = queryMap.get("visitRecord_isNull");
		Object visitRecord_isNotNull = queryMap.get("visitRecord_isNotNull");
		Object visitRecord_in = queryMap.get("visitRecord_in");
		Object physiologicalParametersDes = queryMap
				.get("physiologicalParametersDes");
		Object physiologicalParametersDes_like = queryMap
				.get("physiologicalParametersDes_like");
		Object physiologicalParametersDes_isNull = queryMap
				.get("physiologicalParametersDes_isNull");
		Object physiologicalParametersDes_isNotNull = queryMap
				.get("physiologicalParametersDes_isNotNull");
		Object physiologicalParametersDes_in = queryMap
				.get("physiologicalParametersDes_in");
		Object visitServiceTime_gt = queryMap.get("visitServiceTime_gt");
		Object visitServiceTime_ge = queryMap.get("visitServiceTime_ge");
		Object visitServiceTime_lt = queryMap.get("visitServiceTime_lt");
		Object visitServiceTime_le = queryMap.get("visitServiceTime_le");
		Object visitServiceAttitude = queryMap.get("visitServiceAttitude");
		Object visitServiceAttitude_like = queryMap
				.get("visitServiceAttitude_like");
		Object visitServiceAttitude_isNull = queryMap
				.get("visitServiceAttitude_isNull");
		Object visitServiceAttitude_isNotNull = queryMap
				.get("visitServiceAttitude_isNotNull");
		Object visitServiceAttitude_in = queryMap
				.get("visitServiceAttitude_in");
		Object visitServiceQuality = queryMap.get("visitServiceQuality");
		Object visitServiceQuality_like = queryMap
				.get("visitServiceQuality_like");
		Object visitServiceQuality_isNull = queryMap
				.get("visitServiceQuality_isNull");
		Object visitServiceQuality_isNotNull = queryMap
				.get("visitServiceQuality_isNotNull");
		Object visitServiceQuality_in = queryMap.get("visitServiceQuality_in");
		Object chargeEmployeeId = queryMap.get("chargeEmployeeId");
		Object chargeEmployeeId_gt = queryMap.get("chargeEmployeeId_gt");
		Object chargeEmployeeId_ge = queryMap.get("chargeEmployeeId_ge");
		Object chargeEmployeeId_lt = queryMap.get("chargeEmployeeId_lt");
		Object chargeEmployeeId_le = queryMap.get("chargeEmployeeId_le");
		Object chargeEmployeeId_in = queryMap.get("chargeEmployeeId_in");
		Object addType = queryMap.get("addType");
		Object addType_like = queryMap.get("addType_like");
		Object addType_isNull = queryMap.get("addType_isNull");
		Object addType_isNotNull = queryMap.get("addType_isNotNull");
		Object addType_in = queryMap.get("addType_in");
		Object addPersonWechatId = queryMap.get("addPersonWechatId");
		Object addPersonWechatId_gt = queryMap.get("addPersonWechatId_gt");
		Object addPersonWechatId_ge = queryMap.get("addPersonWechatId_ge");
		Object addPersonWechatId_lt = queryMap.get("addPersonWechatId_lt");
		Object addPersonWechatId_le = queryMap.get("addPersonWechatId_le");
		Object addPersonWechatId_in = queryMap.get("addPersonWechatId_in");
		Object addPersonWechatName = queryMap.get("addPersonWechatName");
		Object addPersonWechatName_like = queryMap
				.get("addPersonWechatName_like");
		Object addPersonWechatName_isNull = queryMap
				.get("addPersonWechatName_isNull");
		Object addPersonWechatName_isNotNull = queryMap
				.get("addPersonWechatName_isNotNull");
		Object addPersonWechatName_in = queryMap.get("addPersonWechatName_in");
		Object hasPay = queryMap.get("hasPay");
		Object hasPay_like = queryMap.get("hasPay_like");
		Object hasPay_isNull = queryMap.get("hasPay_isNull");
		Object hasPay_isNotNull = queryMap.get("hasPay_isNotNull");
		Object hasPay_in = queryMap.get("hasPay_in");
		Object payNum = queryMap.get("payNum");
		Object payNum_gt = queryMap.get("payNum_gt");
		Object payNum_ge = queryMap.get("payNum_ge");
		Object payNum_lt = queryMap.get("payNum_lt");
		Object payNum_le = queryMap.get("payNum_le");
		Object payNum_in = queryMap.get("payNum_in");

		Object serviceId = queryMap.get("serviceId");
		Object physiologicalParametersHistoryId = queryMap
				.get("physiologicalParametersHistoryId");

		QueryCondition qc = new QueryCondition(ServiceTaskEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ID,
					QueryCondition.in, id_in));
		}
		if (serviceCode != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SERVICE_CODE,
					QueryCondition.eq, serviceCode));
		}
		if (serviceCode_like != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SERVICE_CODE,
					QueryCondition.like, serviceCode_like));
		}
		if (serviceCode_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SERVICE_CODE,
					QueryCondition.isNull, serviceCode_isNull));
		}
		if (serviceCode_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SERVICE_CODE,
					QueryCondition.isNotNull, serviceCode_isNotNull));
		}
		if (serviceCode_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SERVICE_CODE,
					QueryCondition.in, serviceCode_in));
		}
		if (olderId != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.OLDER_ID,
					QueryCondition.eq, olderId));
		}
		if (olderId_gt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.OLDER_ID,
					QueryCondition.gt, olderId_gt));
		}
		if (olderId_ge != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.OLDER_ID,
					QueryCondition.ge, olderId_ge));
		}
		if (olderId_lt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.OLDER_ID,
					QueryCondition.lt, olderId_lt));
		}
		if (olderId_le != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.OLDER_ID,
					QueryCondition.le, olderId_le));
		}
		if (olderId_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.OLDER_ID,
					QueryCondition.in, olderId_in));
		}
		if (olderMemberNum != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.OLDER_MEMBER_NUM, QueryCondition.eq,
					olderMemberNum));
		}
		if (olderMemberNum_like != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.OLDER_MEMBER_NUM, QueryCondition.like,
					olderMemberNum_like));
		}
		if (olderMemberNum_isNull != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.OLDER_MEMBER_NUM, QueryCondition.isNull,
					olderMemberNum_isNull));
		}
		if (olderMemberNum_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.OLDER_MEMBER_NUM,
					QueryCondition.isNotNull, olderMemberNum_isNotNull));
		}
		if (olderMemberNum_in != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.OLDER_MEMBER_NUM, QueryCondition.in,
					olderMemberNum_in));
		}
		if (olderName != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.OLDER_NAME,
					QueryCondition.eq, olderName));
		}
		if (olderName_like != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.OLDER_NAME,
					QueryCondition.like, olderName_like));
		}
		if (olderName_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.OLDER_NAME,
					QueryCondition.isNull, olderName_isNull));
		}
		if (olderName_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.OLDER_NAME,
					QueryCondition.isNotNull, olderName_isNotNull));
		}
		if (olderName_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.OLDER_NAME,
					QueryCondition.in, olderName_in));
		}
		if (olderBirthdate_gt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.OLDER_BIRTHDATE, QueryCondition.gt,
					olderBirthdate_gt));
		}
		if (olderBirthdate_ge != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.OLDER_BIRTHDATE, QueryCondition.ge,
					olderBirthdate_ge));
		}
		if (olderBirthdate_lt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.OLDER_BIRTHDATE, QueryCondition.lt,
					olderBirthdate_lt));
		}
		if (olderBirthdate_le != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.OLDER_BIRTHDATE, QueryCondition.le,
					olderBirthdate_le));
		}
		if (serviceAreaId != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_AREA_ID, QueryCondition.eq,
					serviceAreaId));
		}
		if (serviceAreaId_gt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_AREA_ID, QueryCondition.gt,
					serviceAreaId_gt));
		}
		if (serviceAreaId_ge != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_AREA_ID, QueryCondition.ge,
					serviceAreaId_ge));
		}
		if (serviceAreaId_lt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_AREA_ID, QueryCondition.lt,
					serviceAreaId_lt));
		}
		if (serviceAreaId_le != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_AREA_ID, QueryCondition.le,
					serviceAreaId_le));
		}
		if (serviceAreaId_in != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_AREA_ID, QueryCondition.in,
					serviceAreaId_in));
		}
		if (serviceStreetId != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_STREET_ID, QueryCondition.eq,
					serviceStreetId));
		}
		if (serviceStreetId_gt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_STREET_ID, QueryCondition.gt,
					serviceStreetId_gt));
		}
		if (serviceStreetId_ge != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_STREET_ID, QueryCondition.ge,
					serviceStreetId_ge));
		}
		if (serviceStreetId_lt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_STREET_ID, QueryCondition.lt,
					serviceStreetId_lt));
		}
		if (serviceStreetId_le != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_STREET_ID, QueryCondition.le,
					serviceStreetId_le));
		}
		if (serviceStreetId_in != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_STREET_ID, QueryCondition.in,
					serviceStreetId_in));
		}
		if (contactName != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.CONTACT_NAME,
					QueryCondition.eq, contactName));
		}
		if (contactName_like != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.CONTACT_NAME,
					QueryCondition.like, contactName_like));
		}
		if (contactName_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.CONTACT_NAME,
					QueryCondition.isNull, contactName_isNull));
		}
		if (contactName_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.CONTACT_NAME,
					QueryCondition.isNotNull, contactName_isNotNull));
		}
		if (contactName_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.CONTACT_NAME,
					QueryCondition.in, contactName_in));
		}
		if (contactTel != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.CONTACT_TEL,
					QueryCondition.eq, contactTel));
		}
		if (contactTel_like != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.CONTACT_TEL,
					QueryCondition.like, contactTel_like));
		}
		if (contactTel_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.CONTACT_TEL,
					QueryCondition.isNull, contactTel_isNull));
		}
		if (contactTel_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.CONTACT_TEL,
					QueryCondition.isNotNull, contactTel_isNotNull));
		}
		if (contactTel_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.CONTACT_TEL,
					QueryCondition.in, contactTel_in));
		}
		if (address != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADDRESS,
					QueryCondition.eq, address));
		}
		if (address_like != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADDRESS,
					QueryCondition.like, address_like));
		}
		if (address_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADDRESS,
					QueryCondition.isNull, address_isNull));
		}
		if (address_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADDRESS,
					QueryCondition.isNotNull, address_isNotNull));
		}
		if (address_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADDRESS,
					QueryCondition.in, address_in));
		}
		if (addressLong != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADDRESS_LONG,
					QueryCondition.eq, addressLong));
		}
		if (addressLong_gt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADDRESS_LONG,
					QueryCondition.gt, addressLong_gt));
		}
		if (addressLong_ge != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADDRESS_LONG,
					QueryCondition.ge, addressLong_ge));
		}
		if (addressLong_lt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADDRESS_LONG,
					QueryCondition.lt, addressLong_lt));
		}
		if (addressLong_le != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADDRESS_LONG,
					QueryCondition.le, addressLong_le));
		}
		if (addressLong_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADDRESS_LONG,
					QueryCondition.in, addressLong_in));
		}
		if (addressLat != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADDRESS_LAT,
					QueryCondition.eq, addressLat));
		}
		if (addressLat_gt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADDRESS_LAT,
					QueryCondition.gt, addressLat_gt));
		}
		if (addressLat_ge != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADDRESS_LAT,
					QueryCondition.ge, addressLat_ge));
		}
		if (addressLat_lt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADDRESS_LAT,
					QueryCondition.lt, addressLat_lt));
		}
		if (addressLat_le != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADDRESS_LAT,
					QueryCondition.le, addressLat_le));
		}
		if (addressLat_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADDRESS_LAT,
					QueryCondition.in, addressLat_in));
		}
		if (serviceExpectTime_gt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_EXPECT_TIME, QueryCondition.gt,
					serviceExpectTime_gt));
		}
		if (serviceExpectTime_ge != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_EXPECT_TIME, QueryCondition.ge,
					serviceExpectTime_ge));
		}
		if (serviceExpectTime_lt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_EXPECT_TIME, QueryCondition.lt,
					serviceExpectTime_lt));
		}
		if (serviceExpectTime_le != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_EXPECT_TIME, QueryCondition.le,
					serviceExpectTime_le));
		}
		if (serviceStartTime_gt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_START_TIME, QueryCondition.gt,
					serviceStartTime_gt));
		}
		if (serviceStartTime_ge != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_START_TIME, QueryCondition.ge,
					serviceStartTime_ge));
		}
		if (serviceStartTime_lt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_START_TIME, QueryCondition.lt,
					serviceStartTime_lt));
		}
		if (serviceStartTime_le != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_START_TIME, QueryCondition.le,
					serviceStartTime_le));
		}
		if (serviceEndTime_gt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_END_TIME, QueryCondition.gt,
					serviceEndTime_gt));
		}
		if (serviceEndTime_ge != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_END_TIME, QueryCondition.ge,
					serviceEndTime_ge));
		}
		if (serviceEndTime_lt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_END_TIME, QueryCondition.lt,
					serviceEndTime_lt));
		}
		if (serviceEndTime_le != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_END_TIME, QueryCondition.le,
					serviceEndTime_le));
		}
		if (serviceTimeCount != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_TIME_COUNT, QueryCondition.eq,
					serviceTimeCount));
		}
		if (serviceTimeCount_gt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_TIME_COUNT, QueryCondition.gt,
					serviceTimeCount_gt));
		}
		if (serviceTimeCount_ge != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_TIME_COUNT, QueryCondition.ge,
					serviceTimeCount_ge));
		}
		if (serviceTimeCount_lt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_TIME_COUNT, QueryCondition.lt,
					serviceTimeCount_lt));
		}
		if (serviceTimeCount_le != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_TIME_COUNT, QueryCondition.le,
					serviceTimeCount_le));
		}
		if (serviceTimeCount_in != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_TIME_COUNT, QueryCondition.in,
					serviceTimeCount_in));
		}
		if (serviceTimeStatus != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_TIME_STATUS, QueryCondition.eq,
					serviceTimeStatus));
		}
		if (serviceTimeStatus_gt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_TIME_STATUS, QueryCondition.gt,
					serviceTimeStatus_gt));
		}
		if (serviceTimeStatus_ge != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_TIME_STATUS, QueryCondition.ge,
					serviceTimeStatus_ge));
		}
		if (serviceTimeStatus_lt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_TIME_STATUS, QueryCondition.lt,
					serviceTimeStatus_lt));
		}
		if (serviceTimeStatus_le != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_TIME_STATUS, QueryCondition.le,
					serviceTimeStatus_le));
		}
		if (serviceTimeStatus_in != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_TIME_STATUS, QueryCondition.in,
					serviceTimeStatus_in));
		}
		if (siteId != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SITE_ID,
					QueryCondition.eq, siteId));
		}
		if (siteId_gt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SITE_ID,
					QueryCondition.gt, siteId_gt));
		}
		if (siteId_ge != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SITE_ID,
					QueryCondition.ge, siteId_ge));
		}
		if (siteId_lt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SITE_ID,
					QueryCondition.lt, siteId_lt));
		}
		if (siteId_le != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SITE_ID,
					QueryCondition.le, siteId_le));
		}
		if (siteId_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SITE_ID,
					QueryCondition.in, siteId_in));
		}
		if (siteName != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SITE_NAME,
					QueryCondition.eq, siteName));
		}
		if (siteName_like != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SITE_NAME,
					QueryCondition.like, siteName_like));
		}
		if (siteName_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SITE_NAME,
					QueryCondition.isNull, siteName_isNull));
		}
		if (siteName_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SITE_NAME,
					QueryCondition.isNotNull, siteName_isNotNull));
		}
		if (siteName_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SITE_NAME,
					QueryCondition.in, siteName_in));
		}
		if (nursingRecord != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.NURSING_RECORD, QueryCondition.eq,
					nursingRecord));
		}
		if (nursingRecord_like != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.NURSING_RECORD, QueryCondition.like,
					nursingRecord_like));
		}
		if (nursingRecord_isNull != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.NURSING_RECORD, QueryCondition.isNull,
					nursingRecord_isNull));
		}
		if (nursingRecord_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.NURSING_RECORD, QueryCondition.isNotNull,
					nursingRecord_isNotNull));
		}
		if (nursingRecord_in != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.NURSING_RECORD, QueryCondition.in,
					nursingRecord_in));
		}
		if (customerInformed != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.CUSTOMER_INFORMED, QueryCondition.eq,
					customerInformed));
		}
		if (customerInformed_like != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.CUSTOMER_INFORMED, QueryCondition.like,
					customerInformed_like));
		}
		if (customerInformed_isNull != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.CUSTOMER_INFORMED, QueryCondition.isNull,
					customerInformed_isNull));
		}
		if (customerInformed_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.CUSTOMER_INFORMED,
					QueryCondition.isNotNull, customerInformed_isNotNull));
		}
		if (customerInformed_in != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.CUSTOMER_INFORMED, QueryCondition.in,
					customerInformed_in));
		}
		if (qualityEvaluation != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.QUALITY_EVALUATION, QueryCondition.eq,
					qualityEvaluation));
		}
		if (qualityEvaluation_gt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.QUALITY_EVALUATION, QueryCondition.gt,
					qualityEvaluation_gt));
		}
		if (qualityEvaluation_ge != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.QUALITY_EVALUATION, QueryCondition.ge,
					qualityEvaluation_ge));
		}
		if (qualityEvaluation_lt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.QUALITY_EVALUATION, QueryCondition.lt,
					qualityEvaluation_lt));
		}
		if (qualityEvaluation_le != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.QUALITY_EVALUATION, QueryCondition.le,
					qualityEvaluation_le));
		}
		if (qualityEvaluation_in != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.QUALITY_EVALUATION, QueryCondition.in,
					qualityEvaluation_in));
		}
		if (attitudeEvaluation != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.ATTITUDE_EVALUATION, QueryCondition.eq,
					attitudeEvaluation));
		}
		if (attitudeEvaluation_gt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.ATTITUDE_EVALUATION, QueryCondition.gt,
					attitudeEvaluation_gt));
		}
		if (attitudeEvaluation_ge != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.ATTITUDE_EVALUATION, QueryCondition.ge,
					attitudeEvaluation_ge));
		}
		if (attitudeEvaluation_lt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.ATTITUDE_EVALUATION, QueryCondition.lt,
					attitudeEvaluation_lt));
		}
		if (attitudeEvaluation_le != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.ATTITUDE_EVALUATION, QueryCondition.le,
					attitudeEvaluation_le));
		}
		if (attitudeEvaluation_in != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.ATTITUDE_EVALUATION, QueryCondition.in,
					attitudeEvaluation_in));
		}
		if (courseNumber != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.COURSE_NUMBER,
					QueryCondition.eq, courseNumber));
		}
		if (courseNumber_gt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.COURSE_NUMBER,
					QueryCondition.gt, courseNumber_gt));
		}
		if (courseNumber_ge != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.COURSE_NUMBER,
					QueryCondition.ge, courseNumber_ge));
		}
		if (courseNumber_lt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.COURSE_NUMBER,
					QueryCondition.lt, courseNumber_lt));
		}
		if (courseNumber_le != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.COURSE_NUMBER,
					QueryCondition.le, courseNumber_le));
		}
		if (courseNumber_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.COURSE_NUMBER,
					QueryCondition.in, courseNumber_in));
		}
		if (serviceNumber != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_NUMBER, QueryCondition.eq,
					serviceNumber));
		}
		if (serviceNumber_gt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_NUMBER, QueryCondition.gt,
					serviceNumber_gt));
		}
		if (serviceNumber_ge != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_NUMBER, QueryCondition.ge,
					serviceNumber_ge));
		}
		if (serviceNumber_lt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_NUMBER, QueryCondition.lt,
					serviceNumber_lt));
		}
		if (serviceNumber_le != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_NUMBER, QueryCondition.le,
					serviceNumber_le));
		}
		if (serviceNumber_in != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SERVICE_NUMBER, QueryCondition.in,
					serviceNumber_in));
		}
		if (price != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.PRICE,
					QueryCondition.eq, price));
		}
		if (price_gt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.PRICE,
					QueryCondition.gt, price_gt));
		}
		if (price_ge != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.PRICE,
					QueryCondition.ge, price_ge));
		}
		if (price_lt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.PRICE,
					QueryCondition.lt, price_lt));
		}
		if (price_le != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.PRICE,
					QueryCondition.le, price_le));
		}
		if (price_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.PRICE,
					QueryCondition.in, price_in));
		}
		if (source != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SOURCE,
					QueryCondition.eq, source));
		}
		if (source_like != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SOURCE,
					QueryCondition.like, source_like));
		}
		if (source_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SOURCE,
					QueryCondition.isNull, source_isNull));
		}
		if (source_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SOURCE,
					QueryCondition.isNotNull, source_isNotNull));
		}
		if (source_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.SOURCE,
					QueryCondition.in, source_in));
		}
		if (healthInsurance != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.HEALTH_INSURANCE, QueryCondition.eq,
					healthInsurance));
		}
		if (healthInsurance_gt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.HEALTH_INSURANCE, QueryCondition.gt,
					healthInsurance_gt));
		}
		if (healthInsurance_ge != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.HEALTH_INSURANCE, QueryCondition.ge,
					healthInsurance_ge));
		}
		if (healthInsurance_lt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.HEALTH_INSURANCE, QueryCondition.lt,
					healthInsurance_lt));
		}
		if (healthInsurance_le != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.HEALTH_INSURANCE, QueryCondition.le,
					healthInsurance_le));
		}
		if (healthInsurance_in != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.HEALTH_INSURANCE, QueryCondition.in,
					healthInsurance_in));
		}
		if (status != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.STATUS,
					QueryCondition.eq, status));
		}
		if (status_gt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.STATUS,
					QueryCondition.gt, status_gt));
		}
		if (status_ge != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.STATUS,
					QueryCondition.ge, status_ge));
		}
		if (status_lt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.STATUS,
					QueryCondition.lt, status_lt));
		}
		if (status_le != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.STATUS,
					QueryCondition.le, status_le));
		}
		if (status_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.STATUS,
					QueryCondition.in, status_in));
		}
		if (des != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.DES,
					QueryCondition.eq, des));
		}
		if (des_like != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.DES,
					QueryCondition.like, des_like));
		}
		if (des_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.DES,
					QueryCondition.isNull, des_isNull));
		}
		if (des_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.DES,
					QueryCondition.isNotNull, des_isNotNull));
		}
		if (des_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.DES,
					QueryCondition.in, des_in));
		}
		if (addPerson != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADD_PERSON,
					QueryCondition.eq, addPerson));
		}
		if (addPerson_like != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADD_PERSON,
					QueryCondition.like, addPerson_like));
		}
		if (addPerson_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADD_PERSON,
					QueryCondition.isNull, addPerson_isNull));
		}
		if (addPerson_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADD_PERSON,
					QueryCondition.isNotNull, addPerson_isNotNull));
		}
		if (addPerson_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADD_PERSON,
					QueryCondition.in, addPerson_in));
		}
		if (addTime_gt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADD_TIME,
					QueryCondition.gt, addTime_gt));
		}
		if (addTime_ge != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADD_TIME,
					QueryCondition.ge, addTime_ge));
		}
		if (addTime_lt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADD_TIME,
					QueryCondition.lt, addTime_lt));
		}
		if (addTime_le != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADD_TIME,
					QueryCondition.le, addTime_le));
		}
		if (visitPerson != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.VISIT_PERSON,
					QueryCondition.eq, visitPerson));
		}
		if (visitPerson_like != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.VISIT_PERSON,
					QueryCondition.like, visitPerson_like));
		}
		if (visitPerson_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.VISIT_PERSON,
					QueryCondition.isNull, visitPerson_isNull));
		}
		if (visitPerson_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.VISIT_PERSON,
					QueryCondition.isNotNull, visitPerson_isNotNull));
		}
		if (visitPerson_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.VISIT_PERSON,
					QueryCondition.in, visitPerson_in));
		}
		if (visitTime_gt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.VISIT_TIME,
					QueryCondition.gt, visitTime_gt));
		}
		if (visitTime_ge != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.VISIT_TIME,
					QueryCondition.ge, visitTime_ge));
		}
		if (visitTime_lt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.VISIT_TIME,
					QueryCondition.lt, visitTime_lt));
		}
		if (visitTime_le != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.VISIT_TIME,
					QueryCondition.le, visitTime_le));
		}
		if (satisfactionEvaluation != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SATISFACTION_EVALUATION,
					QueryCondition.eq, satisfactionEvaluation));
		}
		if (satisfactionEvaluation_gt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SATISFACTION_EVALUATION,
					QueryCondition.gt, satisfactionEvaluation_gt));
		}
		if (satisfactionEvaluation_ge != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SATISFACTION_EVALUATION,
					QueryCondition.ge, satisfactionEvaluation_ge));
		}
		if (satisfactionEvaluation_lt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SATISFACTION_EVALUATION,
					QueryCondition.lt, satisfactionEvaluation_lt));
		}
		if (satisfactionEvaluation_le != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SATISFACTION_EVALUATION,
					QueryCondition.le, satisfactionEvaluation_le));
		}
		if (satisfactionEvaluation_in != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.SATISFACTION_EVALUATION,
					QueryCondition.in, satisfactionEvaluation_in));
		}
		if (visitRecord != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.VISIT_RECORD,
					QueryCondition.eq, visitRecord));
		}
		if (visitRecord_like != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.VISIT_RECORD,
					QueryCondition.like, visitRecord_like));
		}
		if (visitRecord_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.VISIT_RECORD,
					QueryCondition.isNull, visitRecord_isNull));
		}
		if (visitRecord_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.VISIT_RECORD,
					QueryCondition.isNotNull, visitRecord_isNotNull));
		}
		if (visitRecord_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.VISIT_RECORD,
					QueryCondition.in, visitRecord_in));
		}
		if (physiologicalParametersDes != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.PHYSIOLOGICAL_PARAMETERS_DES,
					QueryCondition.eq, physiologicalParametersDes));
		}
		if (physiologicalParametersDes_like != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.PHYSIOLOGICAL_PARAMETERS_DES,
					QueryCondition.like, physiologicalParametersDes_like));
		}
		if (physiologicalParametersDes_isNull != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.PHYSIOLOGICAL_PARAMETERS_DES,
					QueryCondition.isNull, physiologicalParametersDes_isNull));
		}
		if (physiologicalParametersDes_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.PHYSIOLOGICAL_PARAMETERS_DES,
					QueryCondition.isNotNull,
					physiologicalParametersDes_isNotNull));
		}
		if (physiologicalParametersDes_in != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.PHYSIOLOGICAL_PARAMETERS_DES,
					QueryCondition.in, physiologicalParametersDes_in));
		}
		if (visitServiceTime_gt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.VISIT_SERVICE_TIME, QueryCondition.gt,
					visitServiceTime_gt));
		}
		if (visitServiceTime_ge != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.VISIT_SERVICE_TIME, QueryCondition.ge,
					visitServiceTime_ge));
		}
		if (visitServiceTime_lt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.VISIT_SERVICE_TIME, QueryCondition.lt,
					visitServiceTime_lt));
		}
		if (visitServiceTime_le != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.VISIT_SERVICE_TIME, QueryCondition.le,
					visitServiceTime_le));
		}
		if (visitServiceAttitude != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.VISIT_SERVICE_ATTITUDE,
					QueryCondition.eq, visitServiceAttitude));
		}
		if (visitServiceAttitude_like != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.VISIT_SERVICE_ATTITUDE,
					QueryCondition.like, visitServiceAttitude_like));
		}
		if (visitServiceAttitude_isNull != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.VISIT_SERVICE_ATTITUDE,
					QueryCondition.isNull, visitServiceAttitude_isNull));
		}
		if (visitServiceAttitude_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.VISIT_SERVICE_ATTITUDE,
					QueryCondition.isNotNull, visitServiceAttitude_isNotNull));
		}
		if (visitServiceAttitude_in != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.VISIT_SERVICE_ATTITUDE,
					QueryCondition.in, visitServiceAttitude_in));
		}
		if (visitServiceQuality != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.VISIT_SERVICE_QUALITY, QueryCondition.eq,
					visitServiceQuality));
		}
		if (visitServiceQuality_like != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.VISIT_SERVICE_QUALITY,
					QueryCondition.like, visitServiceQuality_like));
		}
		if (visitServiceQuality_isNull != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.VISIT_SERVICE_QUALITY,
					QueryCondition.isNull, visitServiceQuality_isNull));
		}
		if (visitServiceQuality_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.VISIT_SERVICE_QUALITY,
					QueryCondition.isNotNull, visitServiceQuality_isNotNull));
		}
		if (visitServiceQuality_in != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.VISIT_SERVICE_QUALITY, QueryCondition.in,
					visitServiceQuality_in));
		}
		if (chargeEmployeeId != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.CHARGE_EMPLOYEE_ID, QueryCondition.eq,
					chargeEmployeeId));
		}
		if (chargeEmployeeId_gt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.CHARGE_EMPLOYEE_ID, QueryCondition.gt,
					chargeEmployeeId_gt));
		}
		if (chargeEmployeeId_ge != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.CHARGE_EMPLOYEE_ID, QueryCondition.ge,
					chargeEmployeeId_ge));
		}
		if (chargeEmployeeId_lt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.CHARGE_EMPLOYEE_ID, QueryCondition.lt,
					chargeEmployeeId_lt));
		}
		if (chargeEmployeeId_le != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.CHARGE_EMPLOYEE_ID, QueryCondition.le,
					chargeEmployeeId_le));
		}
		if (chargeEmployeeId_in != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.CHARGE_EMPLOYEE_ID, QueryCondition.in,
					chargeEmployeeId_in));
		}
		if (addType != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADD_TYPE,
					QueryCondition.eq, addType));
		}
		if (addType_like != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADD_TYPE,
					QueryCondition.like, addType_like));
		}
		if (addType_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADD_TYPE,
					QueryCondition.isNull, addType_isNull));
		}
		if (addType_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADD_TYPE,
					QueryCondition.isNotNull, addType_isNotNull));
		}
		if (addType_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.ADD_TYPE,
					QueryCondition.in, addType_in));
		}
		if (addPersonWechatId != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.ADD_PERSON_WECHAT_ID, QueryCondition.eq,
					addPersonWechatId));
		}
		if (addPersonWechatId_gt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.ADD_PERSON_WECHAT_ID, QueryCondition.gt,
					addPersonWechatId_gt));
		}
		if (addPersonWechatId_ge != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.ADD_PERSON_WECHAT_ID, QueryCondition.ge,
					addPersonWechatId_ge));
		}
		if (addPersonWechatId_lt != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.ADD_PERSON_WECHAT_ID, QueryCondition.lt,
					addPersonWechatId_lt));
		}
		if (addPersonWechatId_le != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.ADD_PERSON_WECHAT_ID, QueryCondition.le,
					addPersonWechatId_le));
		}
		if (addPersonWechatId_in != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.ADD_PERSON_WECHAT_ID, QueryCondition.in,
					addPersonWechatId_in));
		}
		if (addPersonWechatName != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.ADD_PERSON_WECHAT_NAME,
					QueryCondition.eq, addPersonWechatName));
		}
		if (addPersonWechatName_like != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.ADD_PERSON_WECHAT_NAME,
					QueryCondition.like, addPersonWechatName_like));
		}
		if (addPersonWechatName_isNull != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.ADD_PERSON_WECHAT_NAME,
					QueryCondition.isNull, addPersonWechatName_isNull));
		}
		if (addPersonWechatName_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.ADD_PERSON_WECHAT_NAME,
					QueryCondition.isNotNull, addPersonWechatName_isNotNull));
		}
		if (addPersonWechatName_in != null) {
			qc.andCondition(new QueryCondition(
					ServiceTaskEntity.ADD_PERSON_WECHAT_NAME,
					QueryCondition.in, addPersonWechatName_in));
		}
		if (hasPay != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.HAS_PAY,
					QueryCondition.eq, hasPay));
		}
		if (hasPay_like != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.HAS_PAY,
					QueryCondition.like, hasPay_like));
		}
		if (hasPay_isNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.HAS_PAY,
					QueryCondition.isNull, hasPay_isNull));
		}
		if (hasPay_isNotNull != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.HAS_PAY,
					QueryCondition.isNotNull, hasPay_isNotNull));
		}
		if (hasPay_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.HAS_PAY,
					QueryCondition.in, hasPay_in));
		}
		if (payNum != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.PAY_NUM,
					QueryCondition.eq, payNum));
		}
		if (payNum_gt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.PAY_NUM,
					QueryCondition.gt, payNum_gt));
		}
		if (payNum_ge != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.PAY_NUM,
					QueryCondition.ge, payNum_ge));
		}
		if (payNum_lt != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.PAY_NUM,
					QueryCondition.lt, payNum_lt));
		}
		if (payNum_le != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.PAY_NUM,
					QueryCondition.le, payNum_le));
		}
		if (payNum_in != null) {
			qc.andCondition(new QueryCondition(ServiceTaskEntity.PAY_NUM,
					QueryCondition.in, payNum_in));
		}
		return qc;
	}

	// 微信推送
	private void wechatPush(Integer serviceTaskId, Integer olderStatus,
			ServiceTaskEntity serviceTask) {
		String openIdstr = "";// openid
		String nickNamestr = "";// 微信昵称
		Integer olderIdint = null;// 老人id
		String olderNamestr = "";// 老人名字
		String serviceTaskCode = "";// 工单编号
		String serciveStr = "";// 服务项目
		boolean flag = false;
		if(serviceTaskId==null && serviceTask.getStatus().intValue()==8){
			flag = true;
		}
		if (serviceTaskId != null || flag) {// 非新增时进入下一步判断
			// 查工单编号
			serviceTaskCode = serviceTask.getServiceCode();
			Integer statusnew = serviceTask.getStatus();
			boolean flag2= false;
			if(statusnew!=null && olderStatus!=null){
				if(statusnew.intValue() != olderStatus.intValue()){
					flag2 = true;
				}
			}
			if (flag2||flag) {// 状态发生了变化,则进行推送
				// 查服务项目
				QueryCondition qc = new QueryCondition(ServiceTaskServiceEntity.SERVICE_TASK_ID, QueryCondition.eq, serviceTask.getId());
				List<Object> serviceTaskServiceList = dbManager.queryByConditionNoTransaction(ServiceTaskServiceEntity.class, qc);
				if (serviceTaskServiceList != null && serviceTaskServiceList.size() > 0) {
					ServiceTaskServiceEntity serviceTaskServiceen = (ServiceTaskServiceEntity) serviceTaskServiceList.get(0);
					Integer serviceId = serviceTaskServiceen.getServiceId();
					if (serviceId != null) {
						QueryCondition qcservice = new QueryCondition(ServiceEntity.ID, QueryCondition.eq, serviceId);
						List<Object> serviceList = dbManager.queryByConditionNoTransaction(ServiceEntity.class, qcservice);
						if (serviceList != null && serviceList.size() > 0) {
							ServiceEntity service = (ServiceEntity) serviceList.get(0);
							if (service != null) {
								serciveStr = service.getName();// 服务项目名称
							}
						}
					}
				}
				Integer olderId = serviceTask.getOlderId();
				if (olderId != null) {
					QueryCondition qcserviceTOlder = new QueryCondition(OlderEntity.ID, QueryCondition.eq, olderId);
					List<Object> olderList = dbManager.queryByConditionNoTransaction(OlderEntity.class, qcserviceTOlder);
					if (olderList != null && olderList.size() > 0) {
						OlderEntity older = (OlderEntity) olderList.get(0);
						if (older != null) {
							if (older.getName() != null) {
								olderIdint = older.getId();
								olderNamestr = older.getName();
							}
							QueryCondition qcwechat = new QueryCondition(OlderWechatEntity.OLDER_ID, QueryCondition.eq, olderId);
							List<Object> olderWechatList = dbManager.queryByConditionNoTransaction(OlderWechatEntity.class, qcwechat);
							if (olderWechatList != null && olderWechatList.size() > 0) {
								for(Object olderWechatObj:olderWechatList){
									OlderWechatEntity olderWechat = (OlderWechatEntity) olderWechatObj;
									Integer weChatId = olderWechat.getWechatId();
									if (weChatId != null) {
										QueryCondition qcWechat = new QueryCondition(WechatEntity.ID, QueryCondition.eq, weChatId);
										List<Object> wechatList = dbManager.queryByConditionNoTransaction(WechatEntity.class, qcWechat);
										if(wechatList!=null && wechatList.size()>0){
											WechatEntity wechat = (WechatEntity)wechatList.get(0);
												if (wechat != null) {
													openIdstr = wechat.getOpenid();
													nickNamestr = wechat.getNickname();
													if (!"".equals(openIdstr) && !"".equals(nickNamestr)
															&& olderIdint!=null && !"".equals(olderNamestr)
															&& serviceTask.getId()!=null
															&& !"".equals(serviceTaskCode)
															&& !"".equals(serciveStr) && statusnew!=null) {
														pushMessage.sendSingleState(openIdstr, nickNamestr,
																olderIdint, olderNamestr, serviceTask.getId(),
																serviceTaskCode, serciveStr, statusnew);
														logger.debug("工单状态变化微信推送: " + "**openid: " + openIdstr
																+ "**微信昵称: " + nickNamestr + "**老人id: " + olderIdint
																+ "**老人姓名: " + olderNamestr + "**服务工单id: "
																+ serviceTask.getId() + "**服务工单编号:" + serviceTaskCode
																+ "**服务项目: " + serciveStr + "**工单状态: " + statusnew
																+ "..");
													}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
