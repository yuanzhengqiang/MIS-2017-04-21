package fsk.handler.dailyLifeAsk;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.business.handler.BaseHandler;
import com.framework.system.common.service.SystemService;
import com.framework.system.db.query.OrderVO;

import fsk.entity.dailyLife.DailyLifeEntity;
import fsk.entity.dailyLifeAsk.DailyLifeAskEntity;
import fsk.entity.older.OlderEntity;
import fsk.pack.dailyLifeAsk.DailyLifeAskPack;
import fsk.parse.dailyLifeAsk.DailyLifeAskParse;
import fsk.service.dailyLife.DailyLifeService;
import fsk.service.dailyLifeAsk.DailyLifeAskService;
import fsk.service.older.OlderService;

/**
 * @Title: Handler
 * @Description: 日常生活问询业务处理器
 * @author feng.gu
 * @date 2016-08-11 13:55:11
 * @version V1.0
 * 
 */
public class DailyLifeAskHandler extends BaseHandler {
	private static Logger logger = Logger.getLogger(DailyLifeAskService.class);
	/**
	 * 解析器
	 */
	private DailyLifeAskParse dailyLifeAskParse = DailyLifeAskParse.getInstance();
	/**
	 * 业务处理器
	 */
	private DailyLifeAskService dailyLifeAskService = DailyLifeAskService.getInstance();
	private static DailyLifeService dailyLifeService = DailyLifeService.getInstance();
	private static OlderService olderService = OlderService.getInstance();
	/**
	 * 封装器
	 */
	private DailyLifeAskPack dailyLifeAskPack = DailyLifeAskPack.getInstance();

	private static DailyLifeAskHandler dailyLifeAskHandler;

	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static DailyLifeAskHandler getInstance() {
		if (dailyLifeAskHandler == null) {
			dailyLifeAskHandler = new DailyLifeAskHandler();
		}
		return dailyLifeAskHandler;
	}

	/**
	 * 
	 * @param type
	 *            1-json 2-xml
	 * @param entityName
	 * @param command
	 * @param reqStr
	 * @param request
	 * @param response
	 */
	public String doHandler(int type, String command, String reqStr, HttpServletRequest request, HttpServletResponse response) {
		logger.debug("请求消息：" + reqStr);
		String resultStr = "";
		try {
			// 解析
			Map<String, Object> parseMap = dailyLifeAskParse.parse(type, command, reqStr, request);
			String action = (String) parseMap.get("action");
			DailyLifeAskEntity dailyLifeAsk = (DailyLifeAskEntity) parseMap.get("dailyLifeAsk");
			List<DailyLifeAskEntity> dailyLifeAskList = (List<DailyLifeAskEntity>) parseMap.get("dailyLifeAskList");
			Integer id = (Integer) parseMap.get("id");
			Map<String, Object> queryMap = (Map<String, Object>) parseMap.get("queryMap");
			int pageno = (Integer) parseMap.get("pageno");
			int pagesize = (Integer) parseMap.get("pagesize");
			List<OrderVO> orderList = (List<OrderVO>) parseMap.get("orderList");

			Boolean serviceTaskShow = (Boolean) parseMap.get("serviceTaskShow");
			Boolean delServiceTask = (Boolean) parseMap.get("delServiceTask");
			JSONObject reqStrjson = JSONObject.fromObject(reqStr);
			JSONObject conjson = (JSONObject) reqStrjson.get("content");
			Integer oldId = (Integer) conjson.get("oldId");
			// 业务处理
			Object result = null;
			if ("save".equals(action)) {
				result = dailyLifeAskService.save(dailyLifeAsk);
				// * 更新到老人表和Dailiy表 pei
				if (result.equals(true)) {
					DailyLifeEntity dailyLife = new DailyLifeEntity();
					dailyLife.setOlderId(oldId);
					dailyLife.setCreatePerson(dailyLifeAsk.getCreatePerson());
					dailyLife.setCreateTime(dailyLifeAsk.getCreateTime());
					dailyLife.setDailyWater(dailyLifeAsk.getDailyWater1());
					dailyLife.setDailyDrinking(dailyLifeAsk.getDailyWater2());
					dailyLife.setMainFood(dailyLifeAsk.getDailyFood());
					dailyLife.setUrine(dailyLifeAsk.getUrine());
					dailyLife.setUrineNum(dailyLifeAsk.getUrineNum());
					dailyLife.setShit(dailyLifeAsk.getShit());
					dailyLife.setShitDay(dailyLifeAsk.getShitDay());
					dailyLife.setSleepHour(dailyLifeAsk.getSleepHour());
					dailyLife.setSleepQuality(dailyLifeAsk.getSleepQuality());
					dailyLife.setMorningSpirit(dailyLifeAsk.getMorningSpirit());
					boolean flag = dailyLifeService.save(dailyLife);
					if (flag) {
						Map<String, Object> queryMapDaily = new HashMap<String, Object>();
						queryMapDaily.put("olderId", oldId);
						String createTime = dailyLifeAsk.getCreateTime();
						queryMapDaily.put("createTime_gt", createTime);
						List<DailyLifeEntity> dailtList = dailyLifeService.getListByCondition(queryMapDaily);
						if (dailtList == null) {
							OlderEntity older = olderService.getById(oldId);
							older.setDailyWater(dailyLifeAsk.getDailyWater1());
							older.setDailyDrinking(dailyLifeAsk.getDailyWater2());
							older.setMainFood(dailyLifeAsk.getDailyFood());
							older.setUrine(dailyLifeAsk.getUrine());
							older.setUrineNum(dailyLifeAsk.getUrineNum());
							older.setShit(dailyLifeAsk.getShit());
							older.setShitDay(dailyLifeAsk.getShitDay());
							older.setSleepHour(dailyLifeAsk.getSleepHour());
							older.setMorningSpirit(dailyLifeAsk.getMorningSpirit());
							older.setSleepQuality(dailyLifeAsk.getSleepQuality());
							older.setFruitsVegetables(null);
							older.setSalt(null);
							older.setOil(null);
							older.setFish(null);
							older.setMeat(null);
							older.setBeanProducts(null);
							older.setMilk(null);
							olderService.save(older);
						}
					}
				}
			} else if ("saveList".equals(action)) {
				result = dailyLifeAskService.saveList(dailyLifeAskList);
			} else if ("getById".equals(action)) {
				result = dailyLifeAskService.getById(id, serviceTaskShow);
			} else if ("getListByCondition".equals(action)) {
				// 根据数据权限 增加查询条件
				queryMap = systemService.addDataRule("DailyLifeAskEntity", queryMap, request);
				result = dailyLifeAskService.getListByCondition(queryMap, orderList, pageno, pagesize, serviceTaskShow);
			} else if ("del".equals(action)) {
				result = dailyLifeAskService.del(id, delServiceTask);
			} else if ("delList".equals(action)) {
				result = dailyLifeAskService.delList(queryMap, delServiceTask);
			}
			// 封装
			Map<String, Object> packMap = dailyLifeAskPack.pack(type, action, result, dailyLifeAsk);
			String actionBack = (String) packMap.get("action");
			String resultBack = (String) packMap.get("result");
			String desBack = (String) packMap.get("des");
			JSONObject pageBack = (JSONObject) packMap.get("page");
			JSONObject contentBack = (JSONObject) packMap.get("content");

			JSONObject repJson = new JSONObject();
			if (actionBack != null && !"".equals(actionBack)) {
				repJson.put("action", actionBack);
			}
			if (resultBack != null && !"".equals(resultBack)) {
				repJson.put("result", resultBack);
			}
			if (desBack != null && !"".equals(desBack)) {
				repJson.put("des", desBack);
			}
			if (pageBack != null) {
				repJson.put("page", pageBack);
			}
			if (contentBack != null && !"".equals(contentBack)) {
				repJson.put("content", contentBack);
			}
			logger.debug("返回消息：" + repJson.toString());
			resultStr = repJson.toString();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error(e);
		}
		return resultStr;
	}
}
