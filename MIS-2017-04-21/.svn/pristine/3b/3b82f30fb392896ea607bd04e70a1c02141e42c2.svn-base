package com.framework.system.common.service.privilege;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import org.apache.log4j.Logger;

import com.framework.system.common.entity.role.RoleEntity;
import com.framework.system.common.entity.module.ModuleEntity;
import com.framework.system.common.entity.user.UserEntity;
import com.framework.system.common.entity.userRole.UserRoleEntity;

import com.framework.system.common.entity.privilege.PrivilegeEntity;
import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

/**
 * @Title: Service
 * @Description: 系统权限服务类
 * @author feng.gu
 * @date 2015-12-03 17:36:54
 * @version V1.0
 * 
 */
public class PrivilegeService {
	private static Logger logger = Logger.getLogger(PrivilegeService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static PrivilegeService privilegeService;
	
	private static SimpleDateFormat formater = new SimpleDateFormat("yyyyMMddHHmmss");

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static PrivilegeService getInstance() {
		if (privilegeService == null) {
			privilegeService = new PrivilegeService();
		}
		return privilegeService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(PrivilegeEntity privilege) {
		boolean result = false;
		if (privilege != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 关联信息保存
				RoleEntity role = privilege.getRole();
				if (role != null) {
					dbManager.saveNoTransaction(role);
					privilege.setRoleId(role.getId());
				}
				// 关联信息保存
				ModuleEntity module = privilege.getModule();
				if (module != null) {
					dbManager.saveNoTransaction(module);
					privilege.setModuleId(module.getId());
				}
				// 关联信息保存
				UserEntity createUser = privilege.getCreateUser();
				if (createUser != null) {
					dbManager.saveNoTransaction(createUser);
					privilege.setCreateUserId(createUser.getId());
				}
				result = dbManager.saveNoTransaction(privilege);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(List<PrivilegeEntity> privilegeList) {
		boolean result = false;
		if (privilegeList != null && privilegeList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (PrivilegeEntity privilege : privilegeList) {
					if (privilege != null) {
						// 关联信息保存
						RoleEntity role = privilege.getRole();
						if (role != null) {
							dbManager.saveNoTransaction(role);
							privilege.setRoleId(role.getId());
						}
						// 关联信息保存
						ModuleEntity module = privilege.getModule();
						if (module != null) {
							dbManager.saveNoTransaction(module);
							privilege.setModuleId(module.getId());
						}
						// 关联信息保存
						UserEntity createUser = privilege.getCreateUser();
						if (createUser != null) {
							dbManager.saveNoTransaction(createUser);
							privilege.setCreateUserId(createUser.getId());
						}
						result = dbManager.saveNoTransaction(privilege);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public PrivilegeEntity getById(Integer id) {
		PrivilegeEntity obj = null;
		if (id != null) {
			obj = (PrivilegeEntity) dbManager
					.getById(id, PrivilegeEntity.class);
		}
		return obj;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param roleShow
	 *            是否查询关联信息
	 * @param moduleShow
	 *            是否查询关联信息
	 * @param createUserShow
	 *            是否查询关联信息
	 * @param obj
	 */
	public PrivilegeEntity getById(Integer id, Boolean roleShow,
			Boolean moduleShow, Boolean createUserShow) {
		PrivilegeEntity obj = null;
		if (id != null) {
			obj = (PrivilegeEntity) dbManager
					.getById(id, PrivilegeEntity.class);
			// 查询关联内容
			if (roleShow != null && roleShow.booleanValue() && obj != null
					&& obj.getRoleId() > 0) {
				RoleEntity role = (RoleEntity) dbManager.getById(
						obj.getRoleId(), RoleEntity.class);
				obj.setRole(role);
			}
			// 查询关联内容
			if (moduleShow != null && moduleShow.booleanValue() && obj != null
					&& obj.getModuleId() > 0) {
				ModuleEntity module = (ModuleEntity) dbManager.getById(
						obj.getModuleId(), ModuleEntity.class);
				obj.setModule(module);
			}
			// 查询关联内容
			if (createUserShow != null && createUserShow.booleanValue()
					&& obj != null && obj.getCreateUserId() > 0) {
				UserEntity createUser = (UserEntity) dbManager.getById(
						obj.getCreateUserId(), UserEntity.class);
				obj.setCreateUser(createUser);
			}
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<Object> getListByCondition(Map<String, Object> queryMap) {
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object roleId = queryMap.get("roleId");
		Object roleId_gt = queryMap.get("roleId_gt");
		Object roleId_ge = queryMap.get("roleId_ge");
		Object roleId_lt = queryMap.get("roleId_lt");
		Object roleId_le = queryMap.get("roleId_le");
		Object roleId_in = queryMap.get("roleId_in");
		Object moduleId = queryMap.get("moduleId");
		Object moduleId_gt = queryMap.get("moduleId_gt");
		Object moduleId_ge = queryMap.get("moduleId_ge");
		Object moduleId_lt = queryMap.get("moduleId_lt");
		Object moduleId_le = queryMap.get("moduleId_le");
		Object moduleId_in = queryMap.get("moduleId_in");
		Object funcitonType = queryMap.get("funcitonType");
		Object funcitonType_like = queryMap.get("funcitonType_like");
		Object funcitonType_isNull = queryMap.get("funcitonType_isNull");
		Object funcitonType_isNotNull = queryMap.get("funcitonType_isNotNull");
		Object funcitonType_in = queryMap.get("funcitonType_in");
		Object functionId = queryMap.get("functionId");
		Object functionId_gt = queryMap.get("functionId_gt");
		Object functionId_ge = queryMap.get("functionId_ge");
		Object functionId_lt = queryMap.get("functionId_lt");
		Object functionId_le = queryMap.get("functionId_le");
		Object functionId_in = queryMap.get("functionId_in");
		Object createUserId = queryMap.get("createUserId");
		Object createUserId_gt = queryMap.get("createUserId_gt");
		Object createUserId_ge = queryMap.get("createUserId_ge");
		Object createUserId_lt = queryMap.get("createUserId_lt");
		Object createUserId_le = queryMap.get("createUserId_le");
		Object createUserId_in = queryMap.get("createUserId_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");

		QueryCondition qc = new QueryCondition(PrivilegeEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.in, id_in));
		}
		if (roleId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.eq, roleId));
		}
		if (roleId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.gt, roleId_gt));
		}
		if (roleId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.ge, roleId_ge));
		}
		if (roleId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.lt, roleId_lt));
		}
		if (roleId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.le, roleId_le));
		}
		if (roleId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.in, roleId_in));
		}
		if (moduleId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.eq, moduleId));
		}
		if (moduleId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.gt, moduleId_gt));
		}
		if (moduleId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.ge, moduleId_ge));
		}
		if (moduleId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.lt, moduleId_lt));
		}
		if (moduleId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.le, moduleId_le));
		}
		if (moduleId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.in, moduleId_in));
		}
		if (funcitonType != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.eq, funcitonType));
		}
		if (funcitonType_like != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.like, funcitonType_like));
		}
		if (funcitonType_isNull != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.isNull, funcitonType_isNull));
		}
		if (funcitonType_isNotNull != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.isNotNull, funcitonType_isNotNull));
		}
		if (funcitonType_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.in, funcitonType_in));
		}
		if (functionId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.eq, functionId));
		}
		if (functionId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.gt, functionId_gt));
		}
		if (functionId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.ge, functionId_ge));
		}
		if (functionId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.lt, functionId_lt));
		}
		if (functionId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.le, functionId_le));
		}
		if (functionId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.in, functionId_in));
		}
		if (createUserId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.eq, createUserId));
		}
		if (createUserId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.gt, createUserId_gt));
		}
		if (createUserId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.ge, createUserId_ge));
		}
		if (createUserId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.lt, createUserId_lt));
		}
		if (createUserId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.le, createUserId_le));
		}
		if (createUserId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.in, createUserId_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}

		list = dbManager.queryByCondition(PrivilegeEntity.class, qc);
		return list;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param roleShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param moduleShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param createUserShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public List<Object> getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, Boolean roleShow, Boolean moduleShow,
			Boolean createUserShow) {
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object roleId = queryMap.get("roleId");
		Object roleId_gt = queryMap.get("roleId_gt");
		Object roleId_ge = queryMap.get("roleId_ge");
		Object roleId_lt = queryMap.get("roleId_lt");
		Object roleId_le = queryMap.get("roleId_le");
		Object roleId_in = queryMap.get("roleId_in");
		Object moduleId = queryMap.get("moduleId");
		Object moduleId_gt = queryMap.get("moduleId_gt");
		Object moduleId_ge = queryMap.get("moduleId_ge");
		Object moduleId_lt = queryMap.get("moduleId_lt");
		Object moduleId_le = queryMap.get("moduleId_le");
		Object moduleId_in = queryMap.get("moduleId_in");
		Object funcitonType = queryMap.get("funcitonType");
		Object funcitonType_like = queryMap.get("funcitonType_like");
		Object funcitonType_isNull = queryMap.get("funcitonType_isNull");
		Object funcitonType_isNotNull = queryMap.get("funcitonType_isNotNull");
		Object funcitonType_in = queryMap.get("funcitonType_in");
		Object functionId = queryMap.get("functionId");
		Object functionId_gt = queryMap.get("functionId_gt");
		Object functionId_ge = queryMap.get("functionId_ge");
		Object functionId_lt = queryMap.get("functionId_lt");
		Object functionId_le = queryMap.get("functionId_le");
		Object functionId_in = queryMap.get("functionId_in");
		Object createUserId = queryMap.get("createUserId");
		Object createUserId_gt = queryMap.get("createUserId_gt");
		Object createUserId_ge = queryMap.get("createUserId_ge");
		Object createUserId_lt = queryMap.get("createUserId_lt");
		Object createUserId_le = queryMap.get("createUserId_le");
		Object createUserId_in = queryMap.get("createUserId_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");

		QueryCondition qc = new QueryCondition(PrivilegeEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.in, id_in));
		}
		if (roleId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.eq, roleId));
		}
		if (roleId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.gt, roleId_gt));
		}
		if (roleId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.ge, roleId_ge));
		}
		if (roleId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.lt, roleId_lt));
		}
		if (roleId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.le, roleId_le));
		}
		if (roleId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.in, roleId_in));
		}
		if (moduleId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.eq, moduleId));
		}
		if (moduleId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.gt, moduleId_gt));
		}
		if (moduleId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.ge, moduleId_ge));
		}
		if (moduleId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.lt, moduleId_lt));
		}
		if (moduleId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.le, moduleId_le));
		}
		if (moduleId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.in, moduleId_in));
		}
		if (funcitonType != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.eq, funcitonType));
		}
		if (funcitonType_like != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.like, funcitonType_like));
		}
		if (funcitonType_isNull != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.isNull, funcitonType_isNull));
		}
		if (funcitonType_isNotNull != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.isNotNull, funcitonType_isNotNull));
		}
		if (funcitonType_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.in, funcitonType_in));
		}
		if (functionId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.eq, functionId));
		}
		if (functionId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.gt, functionId_gt));
		}
		if (functionId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.ge, functionId_ge));
		}
		if (functionId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.lt, functionId_lt));
		}
		if (functionId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.le, functionId_le));
		}
		if (functionId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.in, functionId_in));
		}
		if (createUserId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.eq, createUserId));
		}
		if (createUserId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.gt, createUserId_gt));
		}
		if (createUserId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.ge, createUserId_ge));
		}
		if (createUserId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.lt, createUserId_lt));
		}
		if (createUserId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.le, createUserId_le));
		}
		if (createUserId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.in, createUserId_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}

		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(PrivilegeEntity.class, qc, oc);
		int a = 0;
		if (roleShow != null && roleShow.booleanValue()) {
			a++;
		}
		if (moduleShow != null && moduleShow.booleanValue()) {
			a++;
		}
		if (createUserShow != null && createUserShow.booleanValue()) {
			a++;
		}
		if (a > 0 && list != null && list.size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < list.size(); i++) {
				PrivilegeEntity obj = (PrivilegeEntity) list.get(i);
				// 查询关联内容
				if (roleShow != null && roleShow.booleanValue() && obj != null
						&& obj.getRoleId() > 0) {
					RoleEntity role = (RoleEntity) dbManager.getById(
							obj.getRoleId(), RoleEntity.class);
					obj.setRole(role);
				}
				// 查询关联内容
				if (moduleShow != null && moduleShow.booleanValue()
						&& obj != null && obj.getModuleId() > 0) {
					ModuleEntity module = (ModuleEntity) dbManager.getById(
							obj.getModuleId(), ModuleEntity.class);
					obj.setModule(module);
				}
				// 查询关联内容
				if (createUserShow != null && createUserShow.booleanValue()
						&& obj != null && obj.getCreateUserId() > 0) {
					UserEntity createUser = (UserEntity) dbManager.getById(
							obj.getCreateUserId(), UserEntity.class);
					obj.setCreateUser(createUser);
				}
				result.add(obj);
			}
			list = result;
		}
		return list;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object roleId = queryMap.get("roleId");
		Object roleId_gt = queryMap.get("roleId_gt");
		Object roleId_ge = queryMap.get("roleId_ge");
		Object roleId_lt = queryMap.get("roleId_lt");
		Object roleId_le = queryMap.get("roleId_le");
		Object roleId_in = queryMap.get("roleId_in");
		Object moduleId = queryMap.get("moduleId");
		Object moduleId_gt = queryMap.get("moduleId_gt");
		Object moduleId_ge = queryMap.get("moduleId_ge");
		Object moduleId_lt = queryMap.get("moduleId_lt");
		Object moduleId_le = queryMap.get("moduleId_le");
		Object moduleId_in = queryMap.get("moduleId_in");
		Object funcitonType = queryMap.get("funcitonType");
		Object funcitonType_like = queryMap.get("funcitonType_like");
		Object funcitonType_isNull = queryMap.get("funcitonType_isNull");
		Object funcitonType_isNotNull = queryMap.get("funcitonType_isNotNull");
		Object funcitonType_in = queryMap.get("funcitonType_in");
		Object functionId = queryMap.get("functionId");
		Object functionId_gt = queryMap.get("functionId_gt");
		Object functionId_ge = queryMap.get("functionId_ge");
		Object functionId_lt = queryMap.get("functionId_lt");
		Object functionId_le = queryMap.get("functionId_le");
		Object functionId_in = queryMap.get("functionId_in");
		Object createUserId = queryMap.get("createUserId");
		Object createUserId_gt = queryMap.get("createUserId_gt");
		Object createUserId_ge = queryMap.get("createUserId_ge");
		Object createUserId_lt = queryMap.get("createUserId_lt");
		Object createUserId_le = queryMap.get("createUserId_le");
		Object createUserId_in = queryMap.get("createUserId_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");

		QueryCondition qc = new QueryCondition(PrivilegeEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.in, id_in));
		}
		if (roleId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.eq, roleId));
		}
		if (roleId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.gt, roleId_gt));
		}
		if (roleId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.ge, roleId_ge));
		}
		if (roleId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.lt, roleId_lt));
		}
		if (roleId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.le, roleId_le));
		}
		if (roleId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.in, roleId_in));
		}
		if (moduleId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.eq, moduleId));
		}
		if (moduleId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.gt, moduleId_gt));
		}
		if (moduleId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.ge, moduleId_ge));
		}
		if (moduleId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.lt, moduleId_lt));
		}
		if (moduleId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.le, moduleId_le));
		}
		if (moduleId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.in, moduleId_in));
		}
		if (funcitonType != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.eq, funcitonType));
		}
		if (funcitonType_like != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.like, funcitonType_like));
		}
		if (funcitonType_isNull != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.isNull, funcitonType_isNull));
		}
		if (funcitonType_isNotNull != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.isNotNull, funcitonType_isNotNull));
		}
		if (funcitonType_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.in, funcitonType_in));
		}
		if (functionId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.eq, functionId));
		}
		if (functionId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.gt, functionId_gt));
		}
		if (functionId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.ge, functionId_ge));
		}
		if (functionId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.lt, functionId_lt));
		}
		if (functionId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.le, functionId_le));
		}
		if (functionId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.in, functionId_in));
		}
		if (createUserId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.eq, createUserId));
		}
		if (createUserId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.gt, createUserId_gt));
		}
		if (createUserId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.ge, createUserId_ge));
		}
		if (createUserId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.lt, createUserId_lt));
		}
		if (createUserId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.le, createUserId_le));
		}
		if (createUserId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.in, createUserId_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}

		pagelist = dbManager.queryByCondition(PrivilegeEntity.class, qc,
				pageno, pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @param roleShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param moduleShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param createUserShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, int pageno, int pagesize,
			Boolean roleShow, Boolean moduleShow, Boolean createUserShow) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object roleId = queryMap.get("roleId");
		Object roleId_gt = queryMap.get("roleId_gt");
		Object roleId_ge = queryMap.get("roleId_ge");
		Object roleId_lt = queryMap.get("roleId_lt");
		Object roleId_le = queryMap.get("roleId_le");
		Object roleId_in = queryMap.get("roleId_in");
		Object moduleId = queryMap.get("moduleId");
		Object moduleId_gt = queryMap.get("moduleId_gt");
		Object moduleId_ge = queryMap.get("moduleId_ge");
		Object moduleId_lt = queryMap.get("moduleId_lt");
		Object moduleId_le = queryMap.get("moduleId_le");
		Object moduleId_in = queryMap.get("moduleId_in");
		Object funcitonType = queryMap.get("funcitonType");
		Object funcitonType_like = queryMap.get("funcitonType_like");
		Object funcitonType_isNull = queryMap.get("funcitonType_isNull");
		Object funcitonType_isNotNull = queryMap.get("funcitonType_isNotNull");
		Object funcitonType_in = queryMap.get("funcitonType_in");
		Object functionId = queryMap.get("functionId");
		Object functionId_gt = queryMap.get("functionId_gt");
		Object functionId_ge = queryMap.get("functionId_ge");
		Object functionId_lt = queryMap.get("functionId_lt");
		Object functionId_le = queryMap.get("functionId_le");
		Object functionId_in = queryMap.get("functionId_in");
		Object createUserId = queryMap.get("createUserId");
		Object createUserId_gt = queryMap.get("createUserId_gt");
		Object createUserId_ge = queryMap.get("createUserId_ge");
		Object createUserId_lt = queryMap.get("createUserId_lt");
		Object createUserId_le = queryMap.get("createUserId_le");
		Object createUserId_in = queryMap.get("createUserId_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");

		QueryCondition qc = new QueryCondition(PrivilegeEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.in, id_in));
		}
		if (roleId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.eq, roleId));
		}
		if (roleId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.gt, roleId_gt));
		}
		if (roleId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.ge, roleId_ge));
		}
		if (roleId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.lt, roleId_lt));
		}
		if (roleId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.le, roleId_le));
		}
		if (roleId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.in, roleId_in));
		}
		if (moduleId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.eq, moduleId));
		}
		if (moduleId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.gt, moduleId_gt));
		}
		if (moduleId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.ge, moduleId_ge));
		}
		if (moduleId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.lt, moduleId_lt));
		}
		if (moduleId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.le, moduleId_le));
		}
		if (moduleId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.in, moduleId_in));
		}
		if (funcitonType != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.eq, funcitonType));
		}
		if (funcitonType_like != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.like, funcitonType_like));
		}
		if (funcitonType_isNull != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.isNull, funcitonType_isNull));
		}
		if (funcitonType_isNotNull != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.isNotNull, funcitonType_isNotNull));
		}
		if (funcitonType_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.in, funcitonType_in));
		}
		if (functionId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.eq, functionId));
		}
		if (functionId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.gt, functionId_gt));
		}
		if (functionId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.ge, functionId_ge));
		}
		if (functionId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.lt, functionId_lt));
		}
		if (functionId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.le, functionId_le));
		}
		if (functionId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.in, functionId_in));
		}
		if (createUserId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.eq, createUserId));
		}
		if (createUserId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.gt, createUserId_gt));
		}
		if (createUserId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.ge, createUserId_ge));
		}
		if (createUserId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.lt, createUserId_lt));
		}
		if (createUserId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.le, createUserId_le));
		}
		if (createUserId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.in, createUserId_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}

		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		pagelist = dbManager.queryByConditions(PrivilegeEntity.class, qc, oc,
				pageno, pagesize);
		int a = 0;
		if (roleShow != null && roleShow.booleanValue()) {
			a++;
		}
		if (moduleShow != null && moduleShow.booleanValue()) {
			a++;
		}
		if (createUserShow != null && createUserShow.booleanValue()) {
			a++;
		}
		if (a > 0 && pagelist != null && pagelist.getResultList() != null
				&& pagelist.getResultList().size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < pagelist.getResultList().size(); i++) {
				PrivilegeEntity obj = (PrivilegeEntity) pagelist
						.getResultList().get(i);
				// 查询关联内容
				if (roleShow != null && roleShow.booleanValue() && obj != null
						&& obj.getRoleId() > 0) {
					RoleEntity role = (RoleEntity) dbManager.getById(
							obj.getRoleId(), RoleEntity.class);
					obj.setRole(role);
				}
				// 查询关联内容
				if (moduleShow != null && moduleShow.booleanValue()
						&& obj != null && obj.getModuleId() > 0) {
					ModuleEntity module = (ModuleEntity) dbManager.getById(
							obj.getModuleId(), ModuleEntity.class);
					obj.setModule(module);
				}
				// 查询关联内容
				if (createUserShow != null && createUserShow.booleanValue()
						&& obj != null && obj.getCreateUserId() > 0) {
					UserEntity createUser = (UserEntity) dbManager.getById(
							obj.getCreateUserId(), UserEntity.class);
					obj.setCreateUser(createUser);
				}
				result.add(obj);
			}
			pagelist.setResultList(result);
		}
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id, Boolean delRole, Boolean delModule,
			Boolean delCreateUser) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delRole != null && delRole.booleanValue()) {
					PrivilegeEntity privilege = (PrivilegeEntity) dbManager
							.getById(id, PrivilegeEntity.class);
					if (privilege != null && privilege.getRoleId() != null) {
						dbManager.delNoTransaction(privilege.getRoleId(),
								RoleEntity.class);
					}
				}
				// 删除关联信息
				if (delModule != null && delModule.booleanValue()) {
					PrivilegeEntity privilege = (PrivilegeEntity) dbManager
							.getById(id, PrivilegeEntity.class);
					if (privilege != null && privilege.getModuleId() != null) {
						dbManager.delNoTransaction(privilege.getModuleId(),
								ModuleEntity.class);
					}
				}
				// 删除关联信息
				if (delCreateUser != null && delCreateUser.booleanValue()) {
					PrivilegeEntity privilege = (PrivilegeEntity) dbManager
							.getById(id, PrivilegeEntity.class);
					if (privilege != null
							&& privilege.getCreateUserId() != null) {
						dbManager.delNoTransaction(privilege.getCreateUserId(),
								UserEntity.class);
					}
				}
				result = dbManager.delNoTransaction(id, PrivilegeEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(PrivilegeEntity.ID,
						QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(
						PrivilegeEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap, Boolean delRole,
			Boolean delModule, Boolean delCreateUser) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object roleId = queryMap.get("roleId");
		Object roleId_gt = queryMap.get("roleId_gt");
		Object roleId_ge = queryMap.get("roleId_ge");
		Object roleId_lt = queryMap.get("roleId_lt");
		Object roleId_le = queryMap.get("roleId_le");
		Object roleId_in = queryMap.get("roleId_in");
		Object moduleId = queryMap.get("moduleId");
		Object moduleId_gt = queryMap.get("moduleId_gt");
		Object moduleId_ge = queryMap.get("moduleId_ge");
		Object moduleId_lt = queryMap.get("moduleId_lt");
		Object moduleId_le = queryMap.get("moduleId_le");
		Object moduleId_in = queryMap.get("moduleId_in");
		Object funcitonType = queryMap.get("funcitonType");
		Object funcitonType_like = queryMap.get("funcitonType_like");
		Object funcitonType_isNull = queryMap.get("funcitonType_isNull");
		Object funcitonType_isNotNull = queryMap.get("funcitonType_isNotNull");
		Object funcitonType_in = queryMap.get("funcitonType_in");
		Object functionId = queryMap.get("functionId");
		Object functionId_gt = queryMap.get("functionId_gt");
		Object functionId_ge = queryMap.get("functionId_ge");
		Object functionId_lt = queryMap.get("functionId_lt");
		Object functionId_le = queryMap.get("functionId_le");
		Object functionId_in = queryMap.get("functionId_in");
		Object createUserId = queryMap.get("createUserId");
		Object createUserId_gt = queryMap.get("createUserId_gt");
		Object createUserId_ge = queryMap.get("createUserId_ge");
		Object createUserId_lt = queryMap.get("createUserId_lt");
		Object createUserId_le = queryMap.get("createUserId_le");
		Object createUserId_in = queryMap.get("createUserId_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");

		QueryCondition qc = new QueryCondition(PrivilegeEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ID,
					QueryCondition.in, id_in));
		}
		if (roleId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.eq, roleId));
		}
		if (roleId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.gt, roleId_gt));
		}
		if (roleId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.ge, roleId_ge));
		}
		if (roleId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.lt, roleId_lt));
		}
		if (roleId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.le, roleId_le));
		}
		if (roleId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.ROLE_ID,
					QueryCondition.in, roleId_in));
		}
		if (moduleId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.eq, moduleId));
		}
		if (moduleId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.gt, moduleId_gt));
		}
		if (moduleId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.ge, moduleId_ge));
		}
		if (moduleId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.lt, moduleId_lt));
		}
		if (moduleId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.le, moduleId_le));
		}
		if (moduleId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.MODULE_ID,
					QueryCondition.in, moduleId_in));
		}
		if (funcitonType != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.eq, funcitonType));
		}
		if (funcitonType_like != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.like, funcitonType_like));
		}
		if (funcitonType_isNull != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.isNull, funcitonType_isNull));
		}
		if (funcitonType_isNotNull != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.isNotNull, funcitonType_isNotNull));
		}
		if (funcitonType_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,
					QueryCondition.in, funcitonType_in));
		}
		if (functionId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.eq, functionId));
		}
		if (functionId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.gt, functionId_gt));
		}
		if (functionId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.ge, functionId_ge));
		}
		if (functionId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.lt, functionId_lt));
		}
		if (functionId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.le, functionId_le));
		}
		if (functionId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCTION_ID,
					QueryCondition.in, functionId_in));
		}
		if (createUserId != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.eq, createUserId));
		}
		if (createUserId_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.gt, createUserId_gt));
		}
		if (createUserId_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.ge, createUserId_ge));
		}
		if (createUserId_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.lt, createUserId_lt));
		}
		if (createUserId_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.le, createUserId_le));
		}
		if (createUserId_in != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_USER_ID,
					QueryCondition.in, createUserId_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(PrivilegeEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}

		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delRole != null && delRole.booleanValue()) {
					List<Object> list = dbManager.queryByCondition(
							PrivilegeEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							PrivilegeEntity entity = (PrivilegeEntity) obj;
							strIds += entity.getRoleId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(RoleEntity.ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								RoleEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delModule != null && delModule.booleanValue()) {
					List<Object> list = dbManager.queryByCondition(
							PrivilegeEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							PrivilegeEntity entity = (PrivilegeEntity) obj;
							strIds += entity.getModuleId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								ModuleEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								ModuleEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delCreateUser != null && delCreateUser.booleanValue()) {
					List<Object> list = dbManager.queryByCondition(
							PrivilegeEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							PrivilegeEntity entity = (PrivilegeEntity) obj;
							strIds += entity.getCreateUserId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(UserEntity.ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								UserEntity.class, qc1);
					}

				}
				result = dbManager.delByConditionsNoTransaction(
						PrivilegeEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	public boolean saveList(String roleId, String moduleId, String roleIds,
			String moduleIds, String functionType, String functionId,Integer userId) {
		boolean result = false;
		if (roleId!=null||moduleId!=null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				if(roleId!=null&&!"".equals(roleId)){
					QueryCondition qc = new QueryCondition(PrivilegeEntity.ROLE_ID,QueryCondition.eq, roleId);
					qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,QueryCondition.eq, functionType));
					result = dbManager.delByConditionsNoTransaction(PrivilegeEntity.class, qc);	
					if(result){
						if(moduleIds!=null&&!"".equals(moduleIds)){
							String[] sage = moduleIds.split(",");
							if(sage!=null&&sage.length>0){
								for(int i=0;i<sage.length;i++){
									PrivilegeEntity entity = new PrivilegeEntity();
									entity.setRoleId(Integer.valueOf(roleId));		
									entity.setModuleId(Integer.valueOf(sage[i]));
									entity.setFuncitonType(functionType);
									entity.setFunctionId(Integer.valueOf(functionId));		
									Date date = new Date();
									entity.setCreateUserId(userId);
									entity.setCreateTime(formater.format(date));
									result = dbManager.saveNoTransaction(entity);
								}
							}
						}						
					}					
				}
				if(moduleId!=null&&!"".equals(moduleId)){
					QueryCondition qc = new QueryCondition(PrivilegeEntity.MODULE_ID,QueryCondition.eq, moduleId);
					qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,QueryCondition.eq, functionType));
					result = dbManager.delByConditionsNoTransaction(PrivilegeEntity.class, qc);	
					if(result){
						if(roleIds!=null&&!"".equals(roleIds)){
							String[] sage = roleIds.split(",");
							if(sage!=null&&sage.length>0){
								for(int i=0;i<sage.length;i++){
									PrivilegeEntity entity = new PrivilegeEntity();
									entity.setRoleId(Integer.valueOf(sage[i]));		
									entity.setModuleId(Integer.valueOf(moduleId));
									entity.setFuncitonType(functionType);
									entity.setFunctionId(Integer.valueOf(functionId));		
									Date date = new Date();
									entity.setCreateUserId(userId);
									entity.setCreateTime(formater.format(date));
									result = dbManager.saveNoTransaction(entity);
								}
							}
						}					
					}					
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}
	
	/**
	 * 保存权限集合
	 * @param roleId
	 * @param functionType
	 * @param functionIds
	 * @param userId
	 * @return
	 */
	public boolean saveRoleFunctionList(String roleId,String functionType, String functionIds,Integer userId) {
		boolean result = false;
		if (roleId!=null||functionIds!=null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				if(roleId!=null&&!"".equals(roleId)){
					QueryCondition qc = new QueryCondition(PrivilegeEntity.ROLE_ID,QueryCondition.eq, roleId);
					qc.andCondition(new QueryCondition(PrivilegeEntity.FUNCITON_TYPE,QueryCondition.eq, functionType));
					result = dbManager.delByConditionsNoTransaction(PrivilegeEntity.class, qc);	
					if(result){
						if(functionIds!=null&&!"".equals(functionIds)){
							String[] sage = functionIds.split(",");
							if(sage!=null&&sage.length>0){
								for(int i=0;i<sage.length;i++){
									PrivilegeEntity entity = new PrivilegeEntity();
									entity.setRoleId(Integer.valueOf(roleId));		
									entity.setModuleId(0);
									entity.setFuncitonType(functionType);
									entity.setFunctionId(Integer.valueOf(sage[i]));		
									Date date = new Date();
									entity.setCreateUserId(userId);
									entity.setCreateTime(formater.format(date));
									result = dbManager.saveNoTransaction(entity);
								}
							}
						}						
					}					
				}				
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

}
