package fsk.handler;

import java.net.URLEncoder;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import fsk.entity.dev.DevEntity;
import fsk.entity.devAlarm.DevAlarmEntity;
import fsk.entity.older.OlderEntity;
import fsk.entity.olderWechat.OlderWechatEntity;
import fsk.entity.vo.gateway.FAlarm;
import fsk.entity.vo.gateway.FAlarms;
import fsk.entity.vo.gateway.FBed;
import fsk.entity.vo.gateway.FBeds;
import fsk.entity.vo.gateway.FDoor;
import fsk.entity.vo.gateway.FDoors;
import fsk.entity.vo.gateway.FInfrared;
import fsk.entity.vo.gateway.FInfrareds;
import fsk.entity.vo.gateway.FOlder;
import fsk.entity.vo.gateway.FOlders;
import fsk.entity.vo.gateway.FQuickAlarm;
import fsk.entity.vo.gateway.FQuickAlarms;
import fsk.entity.vo.gateway.FUrinedetect;
import fsk.entity.vo.gateway.FUrinedetects;
import fsk.entity.vo.gateway.FWristband;
import fsk.entity.vo.gateway.FWristbands;
import fsk.entity.vo.gateway.Frame;
import fsk.entity.wechat.WechatEntity;
import fsk.handler.parse.GateWayXmlParse;
import fsk.init.SystemInit;
import fsk.service.dev.DevService;
import fsk.service.devAlarm.DevAlarmService;
import fsk.service.older.OlderService;
import fsk.service.olderWechat.OlderWechatService;
import fsk.service.wechat.WechatService;
import fsk.util.HttpUtil;

public class JTWGTCPMessageHandler
{
  private static Logger logger = Logger.getLogger(JTWGTCPMessageHandler.class);
  private static SimpleDateFormat formater = new SimpleDateFormat("yyyyMMddHHmmss");
  private static GateWayXmlParse parse = new GateWayXmlParse();
  
  private DevService devService = DevService.getInstance();
  private DevAlarmService devAlarmService = DevAlarmService.getInstance();
  private OlderService olderService = OlderService.getInstance();
  private OlderWechatService olderWechatService = OlderWechatService.getInstance();
  private WechatService wechatService = WechatService.getInstance();

  public String hanlder(String data)
  {
    String returnmessage = "";

    Frame frame = parse.parseXml(data);
    if (frame == null)
      logger.error("webservice请求内容解析错误！");
    try
    {
      String action = frame.getAction();
      if ((action == null) || ("".equals(action.trim()))) {
        logger.error("action非法！");
      }
      if (!"data".equals(action))
      {
        if ("alarm".equals(action))
          doAlarmHandler(frame);
      }
    } catch (Exception e) {
      logger.error(e.toString());
    }
    return returnmessage;
  }

  private void queryAndPush(String gatewayid, String content, String item, String time, int alarm)
  {
    try
    {
      if ((alarm == 1) && (("报警器".equals(item)) || ("门磁".equals(item)) || ("腕带".equals(item)) || ("生命感应器".equals(item))))
      {   
        Map<String, Object> queryMap = new HashMap<String, Object>();
		queryMap.put("code", gatewayid);
		queryMap.put("type", Integer.valueOf(2));
		List<DevEntity> list = devService.getListByCondition(queryMap);       
        
        if ((list != null) && (list.size() > 0)) {
          DevEntity dev = (DevEntity)list.get(0);
          //判断报警时间
          if("门磁".equals(item)){
        	  String doorAlarmStart = dev.getDoorAlarmStart();
        	  String doorAlarmEnd = dev.getDoorAlarmEnd();
        	  boolean temp =this.check_time(doorAlarmStart,doorAlarmEnd);
        	  if(temp){
        		  logger.debug("门磁:不在报警时间段内："+doorAlarmStart+"-"+doorAlarmEnd);
        		  return;
        	  }
          }else if("生命感应器".equals(item)){
        	  Date date = new Date();
        	  String irAlarmStart = dev.getIrAlarmStart();
        	  String irAlarmEnd = dev.getIrAlarmEnd();
        	  boolean temp =this.check_time(irAlarmStart,irAlarmEnd);
        	  if(temp){
        		  logger.debug("生命感应器:不在报警时间段内："+irAlarmStart+"-"+irAlarmEnd);
        		  return;
        	  }
          }
          
          Integer olderid = dev.getOlderId();
          if (olderid != null) {
            OlderEntity older = olderService.getById(olderid);        
            if (older != null)
            {
              String alarmContent = "";
              Integer alarmType = Integer.valueOf(-1);

              if (("报警器".equals(item)) && (content.indexOf("设备低电压报警")>-1)) {
                alarmType = Integer.valueOf(10);
              }
              else if (("报警器".equals(item)) && (content.indexOf("设备离线报警")>-1)) {
                alarmType = Integer.valueOf(11);
              }
              else if (("报警器".equals(item)) && (content.indexOf("设备故障报警")>-1)) {
                alarmType = Integer.valueOf(12);
              }
              else if (("门磁".equals(item)) && (content.indexOf("门磁未接入网络")>-1)) {
                alarmType = Integer.valueOf(21);
              }
              else if (("门磁".equals(item)) && (content.indexOf("电量不足")>-1)) {
                alarmType = Integer.valueOf(22);
              }
              else if (("门磁".equals(item)) && (content.indexOf("设备离线报警")>-1)) {
                alarmType = Integer.valueOf(23);
              }
              else if (("门磁".equals(item)) && (content.indexOf("预警")>-1)) {
                alarmType = Integer.valueOf(24);
              }
              else if (("门磁".equals(item)) && (content.indexOf("门未关")>-1)) {
                alarmType = Integer.valueOf(25);
              }
              else if (("腕带".equals(item)) && (content.indexOf("设备故障报警")>-1)) {
                alarmType = Integer.valueOf(31);
              }
              else if (("腕带".equals(item)) && (content.indexOf("设备低电压报警")>-1)) {
                alarmType = Integer.valueOf(32);
              }
              else if (("腕带".equals(item)) && (content.indexOf("紧急求助")>-1)) {
                alarmType = Integer.valueOf(33);
              }
              else if (("生命感应器".equals(item)) && (content.indexOf("未接入网络")>-1)) {
                alarmType = Integer.valueOf(41);
              }
              else if (("生命感应器".equals(item)) && (content.indexOf("电量不足")>-1)) {
                alarmType = Integer.valueOf(42);
              }
              else if (("生命感应器".equals(item)) && (content.indexOf("区域内无人")>-1)) {
                alarmType = Integer.valueOf(43);
              }

              if (alarmType.intValue() != -1) {
                alarmContent = content;
                DevAlarmEntity devAlarmEntity = new DevAlarmEntity();           
                devAlarmEntity.setDevId(dev.getId());
    			devAlarmEntity.setDevType(dev.getType());
                devAlarmEntity.setAlarmContent(alarmContent);
                devAlarmEntity.setAlarmTime(time);
                devAlarmEntity.setAlarmType(alarmType);
                devAlarmEntity.setAlarmStatus(0);
                devAlarmEntity.setOlderId(older.getId());
                devAlarmEntity.setOlderName(older.getName());
                devAlarmEntity.setPosLat(dev.getPosLat());
                devAlarmEntity.setPosLong(dev.getPosLong());
                devAlarmEntity.setAddress(dev.getAddress());
                devAlarmEntity.setDeviation(0);
                devAlarmService.save(devAlarmEntity);

                if (dev.getOlderId() != null) {
                  Map<String, Object> queryMap2 = new HashMap<String, Object>();
            	  queryMap2.put("olderId", dev.getOlderId());
            	  List<OlderWechatEntity> olderwechatlist = olderWechatService.getListByCondition(queryMap2);      
                  if ((olderwechatlist != null) && (olderwechatlist.size() > 0)) {
                    for (int i = 0; i < olderwechatlist.size(); i++) {
                      OlderWechatEntity olderwechat = olderwechatlist.get(i);
                      if (olderwechat.getWechatId() != null) {
                    	WechatEntity wechat =  wechatService.getById(olderwechat.getWechatId());
                        if ((wechat != null) && (wechat.getOpenid() != null) && (!"".equals(wechat.getOpenid())) && (SystemInit.weixinurl != null) && (!"".equals(SystemInit.weixinurl)))
                        {
                          String first = URLEncoder.encode("亲爱的" + wechat.getLoginname() + "：您关注的老人" + (String)older.getName() + "发生报警\\n", "UTF-8");
                          String keyword1 = URLEncoder.encode(alarmContent, "UTF-8");
                          String keyword2 = URLEncoder.encode("紧急处理", "UTF-8");
                          String remark = URLEncoder.encode("\\n\\n如果疑问，请拨打热线电话", "UTF-8");
                          String url = SystemInit.weixinurl + "/Send_Alarm.ashx?openid=" + wechat.getOpenid() + "&first=" + first + "&keyword1=" + keyword1 + "&keyword2=" + keyword2 + "&remark=" + remark + "&stype=template" + "&olderid=" + dev.getOlderId();

                          HttpUtil.doURLGet(url);
                        } else {
                          logger.debug("不推送拼装URL为空");
                        }
                      } else {
                        logger.debug("不推送olderwechat.getWechatId()为空");
                      }
                    }
                  }
                  else
                    logger.debug("不推送olderwechatlist为空");
                }
                else {
                  logger.debug("不推送dev.getOlderId()为空");
                }
              }
            }
            else
            {
              logger.error("JTWG信息监听: 设备绑定的老人不存在 olderid：" + olderid);
            }
          } else {
            logger.error("JTWG信息监听: 设备未绑定老人老人 devid：" + dev.getId());
          }
        } else {
          logger.error("JTWG信息监听: 未找到符合的设备 devcode：" + gatewayid);
        }
      }
    } catch (Exception e) {
      logger.error(e);
    }
  }

  private boolean check_time(String alarmStart, String alarmEnd) {
	boolean temp = false;
	
	try {
		if(alarmStart==null||"".equals(alarmStart)){
			return temp;
		}
		if(alarmEnd==null||"".equals(alarmEnd)){
			return temp;
		}
		Date date = new Date();
		String nowtime = formater.format(date);
		alarmStart = nowtime.substring(0,8)+alarmStart+"00";
		alarmEnd = nowtime.substring(0,8)+alarmEnd+"00";
		Date start = formater.parse(alarmStart);
		Date end = formater.parse(alarmEnd);
		if(start.getTime()<end.getTime()){
			//不跨天
			if(date.getTime()<start.getTime()||date.getTime()>end.getTime()){
				//不报警
				temp = true;
			}
		}else{
			//跨天
			if(date.getTime()<start.getTime()&&date.getTime()>end.getTime()){
				//不报警
				temp = true;
			}
		}
	} catch (ParseException e) {
		logger.error(e);
	}
	return temp;
  }
  

private void doAlarmHandler(Frame frame)
  {
    FOlders objs = frame.getOlders();
    String gatewayid;
    if (objs != null) {
      List<FOlder> list = objs.getOlders();
      if ((list != null) && (list.size() > 0)) {
        for (FOlder obj : list) {
          gatewayid = obj.getAlarm();
          String content = "";
          String item = "园区一卡通";
          String time = obj.getTime();
          String mode = obj.getMode();
          int alarm = 0;
          if ("manul".equals(mode))
            mode = "手动";
          else if ("auto".equals(mode))
            mode = "自动";
          else {
            mode = "";
          }

          String type = obj.getType();
          if ("device".equals(type)) {
            if ((obj.getNormal() != null) || (obj.getVoltage() != null) || (obj.getOffline() != null)) {
              if ("Y".equals(obj.getNormal())) {
                content = item + mode + "取消设备故障报警";
              } else if ("N".equals(obj.getNormal())) {
                content = item + mode + "设备故障报警";
                alarm = 1;
              }
              if ("N".equals(obj.getVoltage())) {
                content = item + mode + "取消设备低电压报警";
              } else if ("Y".equals(obj.getVoltage())) {
                content = item + mode + "设备低电压报警";
                alarm = 1;
              }
              if ("N".equals(obj.getOffline())) {
                content = item + mode + "取消设备离线报警";
              } else if ("Y".equals(obj.getOffline())) {
                content = item + mode + "设备离线报警";
                alarm = 1;
              }
            }
            if (obj.getSeparate() != null) {
              if ("N".equals(obj.getSeparate())) {
                content = item + mode + "取消设备人卡分离报警";
              } else if ("Y".equals(obj.getSeparate())) {
                content = item + mode + "设备人卡分离报警";
                alarm = 1;
              }
            } else if ("value".equals(type)) {
              if ((obj.getSlip() != null) || (obj.getManualarm() != null) || (obj.getOverstep() != null)) {
                if (("N".equals(obj.getSlip())) || ("Y".equals(obj.getSlip()))) {
                  if ("N".equals(obj.getSlip())) {
                    content = item + mode + "取消摔倒报警";
                  } else if ("Y".equals(obj.getSlip())) {
                    content = item + mode + "摔倒报警";
                    alarm = 1;
                  }
                }
                if (("N".equals(obj.getManualarm())) || ("Y".equals(obj.getManualarm()))) {
                  if ("N".equals(obj.getManualarm())) {
                    content = item + mode + "取消主动报警";
                  } else if ("Y".equals(obj.getManualarm())) {
                    content = item + mode + "主动报警";
                    alarm = 1;
                  }
                }
                if (("N".equals(obj.getOverstep())) || ("Y".equals(obj.getOverstep())))
                  if ("N".equals(obj.getOverstep())) {
                    content = item + mode + "取消越界报警";
                  } else if ("Y".equals(obj.getOverstep())) {
                    content = item + mode + "越界报警";
                    alarm = 1;
                  }
              }
            }
            else {
              logger.debug("报警数据处理-被监护人:type非法！");
              continue;
            }
          }
          queryAndPush(gatewayid, content, item, time, alarm);
        }
      }

    }

    FAlarms alarms = frame.getAlarms();

    if (alarms != null) {
      List<FAlarm> list = alarms.getAlarms();
      if ((list != null) && (list.size() > 0)) {
        for (FAlarm obj : list) {
          gatewayid = obj.getId();
          String content = "";
          String item = "报警器";
          String time = obj.getTime();
          String mode = obj.getMode();
          int alarm = 0;
          if ("manul".equals(mode))
            mode = "手动";
          else if ("auto".equals(mode))
            mode = "自动";
          else {
            mode = "";
          }
          if ("N".equals(obj.getVoltage())) {
            content = item + mode + "取消设备低电压报警";
          } else if ("Y".equals(obj.getVoltage())) {
            content = item + mode + "设备低电压报警";
            alarm = 1;
          }
          if ("N".equals(obj.getOffline())) {
            content = item + mode + "取消设备离线报警";
          } else if ("Y".equals(obj.getOffline())) {
            content = item + mode + "设备离线报警";
            alarm = 1;
          }
          if ("Y".equals(obj.getNormal())) {
            content = item + mode + "取消设备故障报警";
          } else if ("N".equals(obj.getNormal())) {
            content = item + mode + "设备故障报警";
            alarm = 1;
          }
          if ("Y".equals(obj.getStatus()))
            content = "安护宝布防成功";
          else if ("N".equals(obj.getStatus())) {
            content = "安护宝撤防成功";
          }
          queryAndPush(gatewayid, content, item, time, alarm);
        }
      }

    }

    FBeds beds = frame.getBeds();
    if (beds != null) {
      List<FBed> list = beds.getBeds();
      if ((list != null) && (list.size() > 0)) {
        for (FBed obj : list) {
          gatewayid = obj.getAlarm();
          String content = "";
          String item = "床垫";
          String time = obj.getTime();
          String mode = obj.getMode();
          int alarm = 0;
          if ("manul".equals(mode))
            mode = "手动";
          else if ("auto".equals(mode))
            mode = "自动";
          else {
            mode = "";
          }
          String type = obj.getType();
          if ("device".equals(type)) {
            if ((obj.getNormal() != null) || (obj.getVoltage() != null) || (obj.getOffline() != null)) {
              if ("Y".equals(obj.getNormal())) {
                content = item + mode + "取消设备故障报警";
              } else if ("N".equals(obj.getNormal())) {
                content = item + mode + "设备故障报警";
                alarm = 1;
              }
              if ("N".equals(obj.getVoltage())) {
                content = item + mode + "取消设备低电压报警";
              } else if ("Y".equals(obj.getVoltage())) {
                content = item + mode + "设备低电压报警";
                alarm = 1;
              }
              if ("N".equals(obj.getOffline())) {
                content = item + mode + "取消设备离线报警";
              } else if ("Y".equals(obj.getOffline())) {
                content = item + mode + "设备离线报警";
                alarm = 1;
              }
            }
          } else if ("value".equals(type))
          {
            if (obj.getStatus() != null)
              if ("normal".equals(obj.getStatus())) {
                content = item + mode + "取消报警";
              } else if ("warning".equals(obj.getStatus())) {
                content = item + mode + "离床预警";
                alarm = 1;
              } else if ("alarm".equals(obj.getStatus())) {
                content = item + mode + "离床报警";
                alarm = 1;
              } else if ("deadalarm".equals(obj.getStatus())) {
                content = item + mode + "猝死报警";
                alarm = 1;
              }
          }
          else {
            logger.debug("报警数据处理-床:type非法！");
            continue;
          }
          queryAndPush(gatewayid, content, item, time, alarm);
        }
      }

    }

    FUrinedetects urinedetects = frame.getUrinedetects();
    if (urinedetects != null) {
      List<FUrinedetect> list = urinedetects.getUrinedetects();
      if ((list != null) && (list.size() > 0)) {
        for (FUrinedetect obj : list) {
          gatewayid = obj.getAlarm();
          String content = "";
          String item = "尿湿";
          String time = obj.getTime();
          String mode = obj.getMode();
          int alarm = 0;
          if ("manul".equals(mode))
            mode = "手动";
          else if ("auto".equals(mode))
            mode = "自动";
          else {
            mode = "";
          }
          String type = obj.getType();
          if ("device".equals(type)) {
            if (obj.getNormal() != null)
              if ("Y".equals(obj.getNormal())) {
                content = item + mode + "取消设备故障报警";
              } else if ("N".equals(obj.getNormal())) {
                content = item + mode + "设备故障报警";
                alarm = 1;
              }
          }
          else if ("value".equals(type)) {
            if (obj.getStatus() != null)
              if ("normal".equals(obj.getStatus())) {
                content = item + mode + "取消尿湿报警";
              } else if ("alarm".equals(obj.getStatus())) {
                content = item + mode + "尿湿报警";
                alarm = 1;
              }
          }
          else {
            logger.debug("报警数据处理-尿湿:type非法！");
            continue;
          }
          queryAndPush(gatewayid, content, item, time, alarm);
        }
      }

    }

    FDoors doors = frame.getDoors();
    if (doors != null) {
      List<FDoor> list = doors.getDoors();
      if ((list != null) && (list.size() > 0)) {
        for (FDoor obj : list) {
          gatewayid = obj.getAlarm();
          String content = "";
          String item = "门磁";
          String time = obj.getTime();
          String mode = obj.getMode();
          int alarm = 0;
          if ("manul".equals(mode))
            mode = "手动";
          else if ("auto".equals(mode))
            mode = "自动";
          else {
            mode = "";
          }
          String type = obj.getType();
          if ("device".equals(type)) {
            if ((obj.getNormal() != null) || (obj.getVoltage() != null) || (obj.getOffline() != null)) {
              if ("Y".equals(obj.getNormal())) {
                content = "门磁已接入网络";
              } else if ("N".equals(obj.getNormal())) {
                content = "门磁未接入网络";
                alarm = 1;
              }
              if ("N".equals(obj.getVoltage())) {
                content = item + mode + "电量正常";
              } else if ("Y".equals(obj.getVoltage())) {
                content = item + mode + "电量不足";
                alarm = 1;
              }
              if ("N".equals(obj.getOffline())) {
                content = item + mode + "取消设备离线报警";
              } else if ("Y".equals(obj.getOffline())) {
                content = item + mode + "设备离线报警";
                alarm = 1;
              }
            }
          } else if ("value".equals(type)) {
            if (obj.getStatus() != null)
              if ("normal".equals(obj.getStatus())) {
                if ("手动".equals(mode))
                  content = "门未关警报被手动取消";
                else if ("自动".equals(mode))
                  content = "门已关";
                else
                  content = item + mode + "取消报警";
              }
              else if ("warning".equals(obj.getStatus())) {
                content = item + mode + "预警";
                alarm = 1;
              } else if ("alarm".equals(obj.getStatus())) {
                content = item + mode + "门未关";
                alarm = 1;
              }
          }
          else {
            logger.debug("报警数据处理-门磁:type非法！");
            continue;
          }
          queryAndPush(gatewayid, content, item, time, alarm);
        }

      }

    }

    FQuickAlarms quickAlarms = frame.getQuickAlarms();
    if (quickAlarms != null) {
      List<FQuickAlarm> list = quickAlarms.getQuickAlarms();
      if ((list != null) && (list.size() > 0)) {
        for (FQuickAlarm obj : list) {
          gatewayid = obj.getAlarm();
          String content = "";
          String item = "一键报警";
          String time = obj.getTime();
          String mode = obj.getMode();
          int alarm = 0;
          if ("manul".equals(mode))
            mode = "手动";
          else if ("auto".equals(mode))
            mode = "自动";
          else {
            mode = "";
          }
          String type = obj.getType();
          if ("device".equals(type)) {
            if ((obj.getNormal() != null) || (obj.getVoltage() != null) || (obj.getOffline() != null)) {
              if ("Y".equals(obj.getNormal())) {
                content = item + mode + "取消设备故障报警";
              } else if ("N".equals(obj.getNormal())) {
                content = item + mode + "设备故障报警";
                alarm = 1;
              }
              if ("N".equals(obj.getVoltage())) {
                content = item + mode + "取消设备低电压报警";
              } else if ("Y".equals(obj.getVoltage())) {
                content = item + mode + "设备低电压报警";
                alarm = 1;
              }
              if ("N".equals(obj.getOffline())) {
                content = item + mode + "取消设备离线报警";
              } else if ("Y".equals(obj.getOffline())) {
                content = item + mode + "设备离线报警";
                alarm = 1;
              }
            }
          } else if ("value".equals(type)) {
            if (obj.getStatus() != null)
              if ("alarm".equals(obj.getStatus())) {
                content = item + mode + "报警";
                alarm = 1;
              } else if ("normal".equals(obj.getStatus())) {
                content = item + mode + "取消报警";
              }
          }
          else {
            logger.debug("报警数据处理-一键报警:type非法！");
            continue;
          }
          queryAndPush(gatewayid, content, item, time, alarm);
        }
      }

    }

    FWristbands wristbands = frame.getWristbands();
    if (wristbands != null) {
      List<FWristband> list = wristbands.getWristbands();
      if ((list != null) && (list.size() > 0)) {
        for (FWristband obj : list) {
          gatewayid = obj.getAlarm();
          String content = "";
          String item = "腕带";
          String time = obj.getTime();
          String mode = obj.getMode();
          int alarm = 0;
          if ("manul".equals(mode))
            mode = "手动";
          else if ("auto".equals(mode))
            mode = "自动";
          else {
            mode = "";
          }
          String type = obj.getType();
          if ("device".equals(type)) {
            if ((obj.getNormal() != null) || (obj.getVoltage() != null)) {
              if ("Y".equals(obj.getNormal())) {
                content = item + mode + "取消设备故障报警";
              } else if ("N".equals(obj.getNormal())) {
                content = item + mode + "设备故障报警";
                alarm = 1;
              }
              if ("N".equals(obj.getVoltage())) {
                content = item + mode + "取消设备低电压报警";
              } else if ("Y".equals(obj.getVoltage())) {
                content = item + mode + "设备低电压报警";
                alarm = 1;
              }
            }
          } else if ("value".equals(type)) {
            if (obj.getStatus() != null)
              if ("normal".equals(obj.getStatus())) {
                if ("手动".equals(mode))
                  content = "紧急求助警报被手动取消";
                else
                  content = item + mode + "取消报警";
              }
              else if ("alarm".equals(obj.getStatus())) {
                content = item + mode + "紧急求助";
                alarm = 1;
              }
          }
          else {
            logger.debug("报警数据处理-腕带:type非法！");
            continue;
          }
          queryAndPush(gatewayid, content, item, time, alarm);
        }
      }

    }

    FInfrareds infrareds = frame.getInfrareds();
    if (infrareds != null) {
      List<FInfrared> list = infrareds.getInfrareds();
      if ((list != null) && (list.size() > 0))
        for (FInfrared obj : list) {
          gatewayid = obj.getAlarm();
          String content = "";
          String item = "生命感应器";
          String time = obj.getTime();
          String mode = obj.getMode();
          int alarm = 0;
          if ("manul".equals(mode))
            mode = "手动";
          else if ("auto".equals(mode))
            mode = "自动";
          else {
            mode = "";
          }
          String type = obj.getType();
          if ("device".equals(type)) {
            if ((obj.getNormal() != null) || (obj.getVoltage() != null)) {
              if ("Y".equals(obj.getNormal())) {
                content = "生命感应器已接入网络";
              } else if ("N".equals(obj.getNormal())) {
                content = "生命感应器未接入网络";
                alarm = 1;
              }
              if ("N".equals(obj.getVoltage())) {
                content = item + mode + "电量正常";
              } else if ("Y".equals(obj.getVoltage())) {
                content = item + mode + "电量不足";
                alarm = 1;
              }
            }
          } else if ("value".equals(type)) {
            if (obj.getStatus() != null)
              if ("normal".equals(obj.getStatus())) {
                if ("手动".equals(mode))
                  content = "生命感应器区域内无人警报被手动取消";
                else if ("自动".equals(mode))
                  content = "生命感应器区域内有人";
                else {
                  content = item + mode + "取消报警";
                }
              }
              else if ("alarm".equals(obj.getStatus())) {
                content = item + mode +"区域内无人";
                alarm = 1;
              }
          }
          else {
            logger.debug("报警数据处理-生命感应器:type非法！");
            continue;
          }
          queryAndPush(gatewayid, content, item, time, alarm);
        }
    }
  }
}