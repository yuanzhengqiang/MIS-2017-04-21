package fsk.service.sendReceive;

import java.io.File;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.imageio.stream.FileImageOutputStream;

import org.apache.log4j.Logger;

import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

import fsk.entity.employee.EmployeeEntity;
import fsk.entity.sendReceive.SendReceiveEntity;
import fsk.entity.sendReceiveCareful.SendReceiveCarefulEntity;
import fsk.entity.sendReceiveCarefulPhoto.SendReceiveCarefulPhotoEntity;
import fsk.entity.sendReceivePhoto.SendReceivePhotoEntity;
import fsk.entity.site.SiteEntity;
import fsk.handler.older.OlderHandler;
import fsk.init.SystemInit;
import fsk.util.Base64Utils;
import fsk.util.FileUtil;

/**
 * @Title: Service
 * @Description: 交接班记录服务类
 * @author feng.gu
 * @date 2016-10-19 13:13:09
 * @version V1.0
 * 
 */
public class SendReceiveService {
	private static Logger logger = Logger.getLogger(SendReceiveService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static SendReceiveService sendReceiveService;

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static SendReceiveService getInstance() {
		if (sendReceiveService == null) {
			sendReceiveService = new SendReceiveService();
		}
		return sendReceiveService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(SendReceiveEntity sendReceive) {
		boolean result = false;
		if (sendReceive != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 关联信息保存
				SiteEntity serviceSite = sendReceive.getServiceSite();
				if (serviceSite != null) {
					dbManager.saveNoTransaction(serviceSite);
					sendReceive.setServiceSiteId(serviceSite.getId());
				}
				// 关联信息保存
				EmployeeEntity sendEmployee = sendReceive.getSendEmployee();
				if (sendEmployee != null) {
					dbManager.saveNoTransaction(sendEmployee);
					sendReceive.setSendEmployeeId(sendEmployee.getId());
				}
				// 关联信息保存
				EmployeeEntity receiveEmployee = sendReceive
						.getReceiveEmployee();
				if (receiveEmployee != null) {
					dbManager.saveNoTransaction(receiveEmployee);
					sendReceive.setReceiveEmployeeId(receiveEmployee.getId());
				}
				// 关联信息保存
				EmployeeEntity superviseEmployee = sendReceive
						.getSuperviseEmployee();
				if (superviseEmployee != null) {
					dbManager.saveNoTransaction(superviseEmployee);
					sendReceive.setSuperviseEmployeeId(superviseEmployee
							.getId());
				}
				// 保存照片

				// 先过滤已经使用的照片编号
				ArrayList<Integer> number = new ArrayList<Integer>();
				number.add(0, 0);
				number.add(1, 1);
				number.add(2, 2);
				number.add(3, 3);
				number.add(4, 4);
				number.add(5, 5);
				number.add(6, 6);
				if (sendReceive.getSendReceivePhotoList() != null
						&& sendReceive.getSendReceivePhotoList().size() > 0) {
					for (SendReceivePhotoEntity sendReceivePhotoEntity : sendReceive
							.getSendReceivePhotoList()) {
						String photourl = sendReceivePhotoEntity.getUrl();
						if (photourl.startsWith("http")) {// http开头直接保存
							int index = -1;
							String str = photourl.substring(
									photourl.length() - 5,
									photourl.length() - 4);
							int numberindex = Integer.parseInt(str);
							index = number.indexOf(numberindex);
							if (index != -1) {
								number.remove(index);
							}
						}
					}
				}
				if (sendReceive.getSendReceivePhotoList() != null
						&& sendReceive.getSendReceivePhotoList().size() > 0) {
					// 关联信息保存
					if (sendReceive.getId() == null) {
						dbManager.saveNoTransaction(sendReceive);
					}
					
					int n = 0;// 在剩余的编号中取
					for (SendReceivePhotoEntity sendReceivePhotoEntity : sendReceive
							.getSendReceivePhotoList()) {

						String url = sendReceivePhotoEntity.getUrl();
						String fileName = "sendReceivePhoto_"
								+ sendReceive.getId() + "_" + number.get(n)
								+ ".jpg";
						if (!url.startsWith("http")) {
							url = savePhoto(url, fileName);
							sendReceivePhotoEntity.setUrl(url);
						}
						n++;
						sendReceivePhotoEntity.setSendReceiveId(sendReceive
								.getId());
						dbManager.saveNoTransaction(sendReceivePhotoEntity);
					}
				}
				if (sendReceive.getSendReceiveCarefulList() != null
						&& sendReceive.getSendReceiveCarefulList().size() > 0) {
					// 关联信息保存
					if (sendReceive.getId() == null) {
						dbManager.saveNoTransaction(sendReceive);
					}
					for (SendReceiveCarefulEntity sendReceiveCarefulEntity : sendReceive
							.getSendReceiveCarefulList()) {
						sendReceiveCarefulEntity.setSendReceiveId(sendReceive
								.getId());
						dbManager.saveNoTransaction(sendReceiveCarefulEntity);
						if(sendReceiveCarefulEntity.getSendReceiveCarefulPhotoList()!=null &&sendReceiveCarefulEntity.getSendReceiveCarefulPhotoList().size()>0){

							// 先过滤已经使用的照片编号
							ArrayList<Integer> numbercare = new ArrayList<Integer>();
							numbercare.add(0, 0);
							numbercare.add(1, 1);
							numbercare.add(2, 2);
							numbercare.add(3, 3);
							numbercare.add(4, 4);
							numbercare.add(5, 5);
							numbercare.add(6, 6);
							for(SendReceiveCarefulPhotoEntity sendReceiveCarefulPhoto:sendReceiveCarefulEntity.getSendReceiveCarefulPhotoList()){
								String photourl = sendReceiveCarefulPhoto.getUrl();
								if (photourl.startsWith("http")) {// http开头直接保存
									int index = -1;
									String str = photourl.substring(
											photourl.length() - 5,
											photourl.length() - 4);
									int numberindex = Integer.parseInt(str);
									index = numbercare.indexOf(numberindex);
									if (index != -1) {
										numbercare.remove(index);
									}
								}
							}
							int n = 0;// 在剩余的编号中取
							for(SendReceiveCarefulPhotoEntity sendReceiveCarefulPhoto:sendReceiveCarefulEntity.getSendReceiveCarefulPhotoList()){
								String url = sendReceiveCarefulPhoto.getUrl();
								String fileName = "sendReceiveCarefulPhoto_"
										+ sendReceiveCarefulEntity.getId() + "_" + number.get(n)
										+ ".jpg";
								if (!url.startsWith("http")) {
									url = savePhoto(url, fileName);
									sendReceiveCarefulPhoto.setUrl(url);
								}
								n++;
								sendReceiveCarefulPhoto.setSendReceiveCarefulId(sendReceiveCarefulEntity.getId());
								dbManager.saveNoTransaction(sendReceiveCarefulPhoto);
							}
						}
					}
				}
				result = dbManager.saveNoTransaction(sendReceive);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(List<SendReceiveEntity> sendReceiveList) {
		boolean result = false;
		if (sendReceiveList != null && sendReceiveList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (SendReceiveEntity sendReceive : sendReceiveList) {
					if (sendReceive != null) {
						// 关联信息保存
						SiteEntity serviceSite = sendReceive.getServiceSite();
						if (serviceSite != null) {
							dbManager.saveNoTransaction(serviceSite);
							sendReceive.setServiceSiteId(serviceSite.getId());
						}
						// 关联信息保存
						EmployeeEntity sendEmployee = sendReceive
								.getSendEmployee();
						if (sendEmployee != null) {
							dbManager.saveNoTransaction(sendEmployee);
							sendReceive.setSendEmployeeId(sendEmployee.getId());
						}
						// 关联信息保存
						EmployeeEntity receiveEmployee = sendReceive
								.getReceiveEmployee();
						if (receiveEmployee != null) {
							dbManager.saveNoTransaction(receiveEmployee);
							sendReceive.setReceiveEmployeeId(receiveEmployee
									.getId());
						}
						// 关联信息保存
						EmployeeEntity superviseEmployee = sendReceive
								.getSuperviseEmployee();
						if (superviseEmployee != null) {
							dbManager.saveNoTransaction(superviseEmployee);
							sendReceive
									.setSuperviseEmployeeId(superviseEmployee
											.getId());
						}
						// 关联信息保存
						if (sendReceive.getSendReceivePhotoList() != null
								&& sendReceive.getSendReceivePhotoList().size() > 0) {
							if (sendReceive.getId() == null) {
								dbManager.saveNoTransaction(sendReceive);
							}
							for (SendReceivePhotoEntity sendReceivePhotoEntity : sendReceive
									.getSendReceivePhotoList()) {
								sendReceivePhotoEntity
										.setSendReceiveId(sendReceive.getId());
								dbManager
										.saveNoTransaction(sendReceivePhotoEntity);
							}
						}
						// 关联信息保存
						if (sendReceive.getSendReceiveCarefulList() != null
								&& sendReceive.getSendReceiveCarefulList()
										.size() > 0) {
							if (sendReceive.getId() == null) {
								dbManager.saveNoTransaction(sendReceive);
							}
							for (SendReceiveCarefulEntity sendReceiveCarefulEntity : sendReceive
									.getSendReceiveCarefulList()) {
								sendReceiveCarefulEntity
										.setSendReceiveId(sendReceive.getId());
								dbManager
										.saveNoTransaction(sendReceiveCarefulEntity);
							}
						}
						result = dbManager.saveNoTransaction(sendReceive);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public SendReceiveEntity getById(Integer id) {
		SendReceiveEntity obj = null;
		if (id != null) {
			obj = (SendReceiveEntity) dbManager.getById(id,
					SendReceiveEntity.class);
		}
		return obj;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param serviceSiteShow
	 *            是否查询关联信息
	 * @param sendEmployeeShow
	 *            是否查询关联信息
	 * @param receiveEmployeeShow
	 *            是否查询关联信息
	 * @param superviseEmployeeShow
	 *            是否查询关联信息
	 * @param sendReceivePhotoListShow
	 *            是否查询关联信息
	 * @param sendReceiveCarefulListShow
	 *            是否查询关联信息
	 * @param obj
	 */
	public SendReceiveEntity getById(Integer id, Boolean serviceSiteShow,
			Boolean sendEmployeeShow, Boolean receiveEmployeeShow,
			Boolean superviseEmployeeShow, Boolean sendReceivePhotoListShow,
			Boolean sendReceiveCarefulListShow) {
		SendReceiveEntity obj = null;
		if (id != null) {
			obj = (SendReceiveEntity) dbManager.getById(id,
					SendReceiveEntity.class);
			// 查询关联内容
			if (serviceSiteShow != null && serviceSiteShow.booleanValue()
					&& obj != null && obj.getServiceSiteId() != null
					&& obj.getServiceSiteId() > 0) {
				SiteEntity serviceSite = (SiteEntity) dbManager.getById(
						obj.getServiceSiteId(), SiteEntity.class);
				obj.setServiceSite(serviceSite);
			}
			// 查询关联内容
			if (sendEmployeeShow != null && sendEmployeeShow.booleanValue()
					&& obj != null && obj.getSendEmployeeId() != null
					&& obj.getSendEmployeeId() > 0) {
				EmployeeEntity sendEmployee = (EmployeeEntity) dbManager
						.getById(obj.getSendEmployeeId(), EmployeeEntity.class);
				obj.setSendEmployee(sendEmployee);
			}
			// 查询关联内容
			if (receiveEmployeeShow != null
					&& receiveEmployeeShow.booleanValue() && obj != null
					&& obj.getReceiveEmployeeId() != null
					&& obj.getReceiveEmployeeId() > 0) {
				EmployeeEntity receiveEmployee = (EmployeeEntity) dbManager
						.getById(obj.getReceiveEmployeeId(),
								EmployeeEntity.class);
				obj.setReceiveEmployee(receiveEmployee);
			}
			// 查询关联内容
			if (superviseEmployeeShow != null
					&& superviseEmployeeShow.booleanValue() && obj != null
					&& obj.getSuperviseEmployeeId() != null
					&& obj.getSuperviseEmployeeId() > 0) {
				EmployeeEntity superviseEmployee = (EmployeeEntity) dbManager
						.getById(obj.getSuperviseEmployeeId(),
								EmployeeEntity.class);
				obj.setSuperviseEmployee(superviseEmployee);
			}
			// 查询关联内容
			if (sendReceivePhotoListShow != null
					&& sendReceivePhotoListShow.booleanValue() && obj != null
					&& obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(
						SendReceivePhotoEntity.class,
						SendReceivePhotoEntity.SEND_RECEIVE_ID,
						String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<SendReceivePhotoEntity> sendReceivePhotoList = new ArrayList<SendReceivePhotoEntity>();
					for (Object o : list) {
						sendReceivePhotoList.add((SendReceivePhotoEntity) o);
					}
					obj.setSendReceivePhotoList(sendReceivePhotoList);
				}
			}
			// 查询关联内容
			if (sendReceiveCarefulListShow != null
					&& sendReceiveCarefulListShow.booleanValue() && obj != null
					&& obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(
						SendReceiveCarefulEntity.class,
						SendReceiveCarefulEntity.SEND_RECEIVE_ID,
						String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<SendReceiveCarefulEntity> sendReceiveCarefulList = new ArrayList<SendReceiveCarefulEntity>();
					for (Object o : list) {
						sendReceiveCarefulList
								.add((SendReceiveCarefulEntity) o);
					}
					obj.setSendReceiveCarefulList(sendReceiveCarefulList);
				}
			}
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<SendReceiveEntity> getListByCondition(
			Map<String, Object> queryMap) {
		List<SendReceiveEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		list = dbManager.queryByCondition(SendReceiveEntity.class, qc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<SendReceiveEntity>();
			for (Object obj : list) {
				returnlist.add((SendReceiveEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param serviceSiteShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param sendEmployeeShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param receiveEmployeeShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param superviseEmployeeShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param sendReceivePhotoListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param sendReceiveCarefulListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public List<SendReceiveEntity> getListByCondition(
			Map<String, Object> queryMap, List<OrderVO> orderList,
			Boolean serviceSiteShow, Boolean sendEmployeeShow,
			Boolean receiveEmployeeShow, Boolean superviseEmployeeShow,
			Boolean sendReceivePhotoListShow, Boolean sendReceiveCarefulListShow) {
		List<SendReceiveEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(SendReceiveEntity.class, qc, oc);
		int a = 0;
		if (serviceSiteShow != null && serviceSiteShow.booleanValue()) {
			a++;
		}
		if (sendEmployeeShow != null && sendEmployeeShow.booleanValue()) {
			a++;
		}
		if (receiveEmployeeShow != null && receiveEmployeeShow.booleanValue()) {
			a++;
		}
		if (superviseEmployeeShow != null
				&& superviseEmployeeShow.booleanValue()) {
			a++;
		}
		if (sendReceivePhotoListShow != null
				&& sendReceivePhotoListShow.booleanValue()) {
			a++;
		}
		if (sendReceiveCarefulListShow != null
				&& sendReceiveCarefulListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && list != null && list.size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < list.size(); i++) {
				SendReceiveEntity obj = (SendReceiveEntity) list.get(i);
				// 查询关联内容
				if (serviceSiteShow != null && serviceSiteShow.booleanValue()
						&& obj != null && obj.getServiceSiteId() != null
						&& obj.getServiceSiteId() > 0) {
					SiteEntity serviceSite = (SiteEntity) dbManager.getById(
							obj.getServiceSiteId(), SiteEntity.class);
					obj.setServiceSite(serviceSite);
				}
				// 查询关联内容
				if (sendEmployeeShow != null && sendEmployeeShow.booleanValue()
						&& obj != null && obj.getSendEmployeeId() != null
						&& obj.getSendEmployeeId() > 0) {
					EmployeeEntity sendEmployee = (EmployeeEntity) dbManager
							.getById(obj.getSendEmployeeId(),
									EmployeeEntity.class);
					obj.setSendEmployee(sendEmployee);
				}
				// 查询关联内容
				if (receiveEmployeeShow != null
						&& receiveEmployeeShow.booleanValue() && obj != null
						&& obj.getReceiveEmployeeId() != null
						&& obj.getReceiveEmployeeId() > 0) {
					EmployeeEntity receiveEmployee = (EmployeeEntity) dbManager
							.getById(obj.getReceiveEmployeeId(),
									EmployeeEntity.class);
					obj.setReceiveEmployee(receiveEmployee);
				}
				// 查询关联内容
				if (superviseEmployeeShow != null
						&& superviseEmployeeShow.booleanValue() && obj != null
						&& obj.getSuperviseEmployeeId() != null
						&& obj.getSuperviseEmployeeId() > 0) {
					EmployeeEntity superviseEmployee = (EmployeeEntity) dbManager
							.getById(obj.getSuperviseEmployeeId(),
									EmployeeEntity.class);
					obj.setSuperviseEmployee(superviseEmployee);
				}
				// 查询关联内容
				if (sendReceivePhotoListShow != null
						&& sendReceivePhotoListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							SendReceivePhotoEntity.class,
							SendReceivePhotoEntity.SEND_RECEIVE_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<SendReceivePhotoEntity> sendReceivePhotoList = new ArrayList<SendReceivePhotoEntity>();
						for (Object o : objList) {
							sendReceivePhotoList
									.add((SendReceivePhotoEntity) o);
						}
						obj.setSendReceivePhotoList(sendReceivePhotoList);
					}
				}
				// 查询关联内容
				if (sendReceiveCarefulListShow != null
						&& sendReceiveCarefulListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							SendReceiveCarefulEntity.class,
							SendReceiveCarefulEntity.SEND_RECEIVE_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<SendReceiveCarefulEntity> sendReceiveCarefulList = new ArrayList<SendReceiveCarefulEntity>();
						for (Object o : objList) {
							sendReceiveCarefulList
									.add((SendReceiveCarefulEntity) o);
						}
						obj.setSendReceiveCarefulList(sendReceiveCarefulList);
					}
				}
				result.add(obj);
			}
			list = result;
		}
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<SendReceiveEntity>();
			for (Object obj : list) {
				returnlist.add((SendReceiveEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		pagelist = dbManager.queryByCondition(SendReceiveEntity.class, qc,
				pageno, pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @param serviceSiteShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param sendEmployeeShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param receiveEmployeeShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param superviseEmployeeShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param sendReceivePhotoListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param sendReceiveCarefulListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, int pageno, int pagesize,
			Boolean serviceSiteShow, Boolean sendEmployeeShow,
			Boolean receiveEmployeeShow, Boolean superviseEmployeeShow,
			Boolean sendReceivePhotoListShow, Boolean sendReceiveCarefulListShow) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		// 数据权限
		List<QueryCondition> dataRuleQclist = null;
		List<Map<String, Object>> dataRuleMapList = (List<Map<String, Object>>) queryMap
				.get("dataRuleMapList");
		if (dataRuleMapList != null && dataRuleMapList.size() > 0) {
			dataRuleQclist = new ArrayList<QueryCondition>();
			for (Map<String, Object> dataRuleMap : dataRuleMapList) {
				QueryCondition dataRuleQc = changeMapToQc(dataRuleMap);
				dataRuleQclist.add(dataRuleQc);
			}
		}
		pagelist = dbManager.queryByConditions(SendReceiveEntity.class, qc,
				dataRuleQclist, oc, pageno, pagesize);
		int a = 0;
		if (serviceSiteShow != null && serviceSiteShow.booleanValue()) {
			a++;
		}
		if (sendEmployeeShow != null && sendEmployeeShow.booleanValue()) {
			a++;
		}
		if (receiveEmployeeShow != null && receiveEmployeeShow.booleanValue()) {
			a++;
		}
		if (superviseEmployeeShow != null
				&& superviseEmployeeShow.booleanValue()) {
			a++;
		}
		if (sendReceivePhotoListShow != null
				&& sendReceivePhotoListShow.booleanValue()) {
			a++;
		}
		if (sendReceiveCarefulListShow != null
				&& sendReceiveCarefulListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && pagelist != null && pagelist.getResultList() != null
				&& pagelist.getResultList().size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < pagelist.getResultList().size(); i++) {
				SendReceiveEntity obj = (SendReceiveEntity) pagelist
						.getResultList().get(i);
				// 查询关联内容
				if (serviceSiteShow != null && serviceSiteShow.booleanValue()
						&& obj != null && obj.getServiceSiteId() != null
						&& obj.getServiceSiteId() > 0) {
					SiteEntity serviceSite = (SiteEntity) dbManager.getById(
							obj.getServiceSiteId(), SiteEntity.class);
					obj.setServiceSite(serviceSite);
				}
				// 查询关联内容
				if (sendEmployeeShow != null && sendEmployeeShow.booleanValue()
						&& obj != null && obj.getSendEmployeeId() != null
						&& obj.getSendEmployeeId() > 0) {
					EmployeeEntity sendEmployee = (EmployeeEntity) dbManager
							.getById(obj.getSendEmployeeId(),
									EmployeeEntity.class);
					obj.setSendEmployee(sendEmployee);
				}
				// 查询关联内容
				if (receiveEmployeeShow != null
						&& receiveEmployeeShow.booleanValue() && obj != null
						&& obj.getReceiveEmployeeId() != null
						&& obj.getReceiveEmployeeId() > 0) {
					EmployeeEntity receiveEmployee = (EmployeeEntity) dbManager
							.getById(obj.getReceiveEmployeeId(),
									EmployeeEntity.class);
					obj.setReceiveEmployee(receiveEmployee);
				}
				// 查询关联内容
				if (superviseEmployeeShow != null
						&& superviseEmployeeShow.booleanValue() && obj != null
						&& obj.getSuperviseEmployeeId() != null
						&& obj.getSuperviseEmployeeId() > 0) {
					EmployeeEntity superviseEmployee = (EmployeeEntity) dbManager
							.getById(obj.getSuperviseEmployeeId(),
									EmployeeEntity.class);
					obj.setSuperviseEmployee(superviseEmployee);
				}
				// 查询关联内容
				if (sendReceivePhotoListShow != null
						&& sendReceivePhotoListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							SendReceivePhotoEntity.class,
							SendReceivePhotoEntity.SEND_RECEIVE_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<SendReceivePhotoEntity> sendReceivePhotoList = new ArrayList<SendReceivePhotoEntity>();
						for (Object o : objList) {
							sendReceivePhotoList
									.add((SendReceivePhotoEntity) o);
						}
						obj.setSendReceivePhotoList(sendReceivePhotoList);
					}
				}
				// 查询关联内容
				if (sendReceiveCarefulListShow != null
						&& sendReceiveCarefulListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							SendReceiveCarefulEntity.class,
							SendReceiveCarefulEntity.SEND_RECEIVE_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<SendReceiveCarefulEntity> sendReceiveCarefulList = new ArrayList<SendReceiveCarefulEntity>();
						for (Object o : objList) {
							sendReceiveCarefulList
									.add((SendReceiveCarefulEntity) o);
						}
						obj.setSendReceiveCarefulList(sendReceiveCarefulList);
					}
				}
				result.add(obj);
			}
			pagelist.setResultList(result);
		}
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id, Boolean delServiceSite,
			Boolean delSendEmployee, Boolean delReceiveEmployee,
			Boolean delSuperviseEmployee, Boolean delSendReceivePhotoList,
			Boolean delSendReceiveCarefulList) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delServiceSite != null && delServiceSite.booleanValue()) {
					SendReceiveEntity sendReceive = (SendReceiveEntity) dbManager
							.getById(id, SendReceiveEntity.class);
					if (sendReceive != null
							&& sendReceive.getServiceSiteId() != null) {
						dbManager.delNoTransaction(
								sendReceive.getServiceSiteId(),
								SiteEntity.class);
					}
				}
				// 删除关联信息
				if (delSendEmployee != null && delSendEmployee.booleanValue()) {
					SendReceiveEntity sendReceive = (SendReceiveEntity) dbManager
							.getById(id, SendReceiveEntity.class);
					if (sendReceive != null
							&& sendReceive.getSendEmployeeId() != null) {
						dbManager.delNoTransaction(
								sendReceive.getSendEmployeeId(),
								EmployeeEntity.class);
					}
				}
				// 删除关联信息
				if (delReceiveEmployee != null
						&& delReceiveEmployee.booleanValue()) {
					SendReceiveEntity sendReceive = (SendReceiveEntity) dbManager
							.getById(id, SendReceiveEntity.class);
					if (sendReceive != null
							&& sendReceive.getReceiveEmployeeId() != null) {
						dbManager.delNoTransaction(
								sendReceive.getReceiveEmployeeId(),
								EmployeeEntity.class);
					}
				}
				// 删除关联信息
				if (delSuperviseEmployee != null
						&& delSuperviseEmployee.booleanValue()) {
					SendReceiveEntity sendReceive = (SendReceiveEntity) dbManager
							.getById(id, SendReceiveEntity.class);
					if (sendReceive != null
							&& sendReceive.getSuperviseEmployeeId() != null) {
						dbManager.delNoTransaction(
								sendReceive.getSuperviseEmployeeId(),
								EmployeeEntity.class);
					}
				}
				// 删除关联信息
				if (delSendReceivePhotoList != null
						&& delSendReceivePhotoList.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							SendReceivePhotoEntity.SEND_RECEIVE_ID,
							QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(
							SendReceivePhotoEntity.class, qc);
				}
				// 删除关联信息
				if (delSendReceiveCarefulList != null
						&& delSendReceiveCarefulList.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							SendReceiveCarefulEntity.SEND_RECEIVE_ID,
							QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(
							SendReceiveCarefulEntity.class, qc);
				}
				result = dbManager
						.delNoTransaction(id, SendReceiveEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(SendReceiveEntity.ID,
						QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(
						SendReceiveEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap,
			Boolean delServiceSite, Boolean delSendEmployee,
			Boolean delReceiveEmployee, Boolean delSuperviseEmployee,
			Boolean delSendReceivePhotoList, Boolean delSendReceiveCarefulList) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delServiceSite != null && delServiceSite.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									SendReceiveEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							SendReceiveEntity entity = (SendReceiveEntity) obj;
							strIds += entity.getServiceSiteId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(SiteEntity.ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								SiteEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delSendEmployee != null && delSendEmployee.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									SendReceiveEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							SendReceiveEntity entity = (SendReceiveEntity) obj;
							strIds += entity.getSendEmployeeId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								EmployeeEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								EmployeeEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delReceiveEmployee != null
						&& delReceiveEmployee.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									SendReceiveEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							SendReceiveEntity entity = (SendReceiveEntity) obj;
							strIds += entity.getReceiveEmployeeId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								EmployeeEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								EmployeeEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delSuperviseEmployee != null
						&& delSuperviseEmployee.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									SendReceiveEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							SendReceiveEntity entity = (SendReceiveEntity) obj;
							strIds += entity.getSuperviseEmployeeId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								EmployeeEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								EmployeeEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delSendReceivePhotoList != null
						&& delSendReceivePhotoList.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									SendReceiveEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							SendReceiveEntity entity = (SendReceiveEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								SendReceivePhotoEntity.SEND_RECEIVE_ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								SendReceivePhotoEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delSendReceiveCarefulList != null
						&& delSendReceiveCarefulList.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									SendReceiveEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							SendReceiveEntity entity = (SendReceiveEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								SendReceiveCarefulEntity.SEND_RECEIVE_ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								SendReceiveCarefulEntity.class, qc1);
					}

				}
				result = dbManager.delByConditionsNoTransaction(
						SendReceiveEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	private QueryCondition changeMapToQc(Map<String, Object> queryMap) {
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object serviceSiteId = queryMap.get("serviceSiteId");
		Object serviceSiteId_gt = queryMap.get("serviceSiteId_gt");
		Object serviceSiteId_ge = queryMap.get("serviceSiteId_ge");
		Object serviceSiteId_lt = queryMap.get("serviceSiteId_lt");
		Object serviceSiteId_le = queryMap.get("serviceSiteId_le");
		Object serviceSiteId_in = queryMap.get("serviceSiteId_in");
		Object serviceSiteName = queryMap.get("serviceSiteName");
		Object serviceSiteName_like = queryMap.get("serviceSiteName_like");
		Object serviceSiteName_isNull = queryMap.get("serviceSiteName_isNull");
		Object serviceSiteName_isNotNull = queryMap
				.get("serviceSiteName_isNotNull");
		Object serviceSiteName_in = queryMap.get("serviceSiteName_in");
		Object sendEmployeeId = queryMap.get("sendEmployeeId");
		Object sendEmployeeId_gt = queryMap.get("sendEmployeeId_gt");
		Object sendEmployeeId_ge = queryMap.get("sendEmployeeId_ge");
		Object sendEmployeeId_lt = queryMap.get("sendEmployeeId_lt");
		Object sendEmployeeId_le = queryMap.get("sendEmployeeId_le");
		Object sendEmployeeId_in = queryMap.get("sendEmployeeId_in");
		Object sendEmployeeName = queryMap.get("sendEmployeeName");
		Object sendEmployeeName_like = queryMap.get("sendEmployeeName_like");
		Object sendEmployeeName_isNull = queryMap
				.get("sendEmployeeName_isNull");
		Object sendEmployeeName_isNotNull = queryMap
				.get("sendEmployeeName_isNotNull");
		Object sendEmployeeName_in = queryMap.get("sendEmployeeName_in");
		Object sendEmployeeIndexNum = queryMap.get("sendEmployeeIndexNum");
		Object sendEmployeeIndexNum_like = queryMap
				.get("sendEmployeeIndexNum_like");
		Object sendEmployeeIndexNum_isNull = queryMap
				.get("sendEmployeeIndexNum_isNull");
		Object sendEmployeeIndexNum_isNotNull = queryMap
				.get("sendEmployeeIndexNum_isNotNull");
		Object sendEmployeeIndexNum_in = queryMap
				.get("sendEmployeeIndexNum_in");
		Object sendEmployeeSignatureTime_gt = queryMap
				.get("sendEmployeeSignatureTime_gt");
		Object sendEmployeeSignatureTime_ge = queryMap
				.get("sendEmployeeSignatureTime_ge");
		Object sendEmployeeSignatureTime_lt = queryMap
				.get("sendEmployeeSignatureTime_lt");
		Object sendEmployeeSignatureTime_le = queryMap
				.get("sendEmployeeSignatureTime_le");
		Object receiveEmployeeId = queryMap.get("receiveEmployeeId");
		Object receiveEmployeeId_gt = queryMap.get("receiveEmployeeId_gt");
		Object receiveEmployeeId_ge = queryMap.get("receiveEmployeeId_ge");
		Object receiveEmployeeId_lt = queryMap.get("receiveEmployeeId_lt");
		Object receiveEmployeeId_le = queryMap.get("receiveEmployeeId_le");
		Object receiveEmployeeId_in = queryMap.get("receiveEmployeeId_in");
		Object receiveEmployeeName = queryMap.get("receiveEmployeeName");
		Object receiveEmployeeName_like = queryMap
				.get("receiveEmployeeName_like");
		Object receiveEmployeeName_isNull = queryMap
				.get("receiveEmployeeName_isNull");
		Object receiveEmployeeName_isNotNull = queryMap
				.get("receiveEmployeeName_isNotNull");
		Object receiveEmployeeName_in = queryMap.get("receiveEmployeeName_in");
		Object receiveEmployeeIndexNum = queryMap
				.get("receiveEmployeeIndexNum");
		Object receiveEmployeeIndexNum_like = queryMap
				.get("receiveEmployeeIndexNum_like");
		Object receiveEmployeeIndexNum_isNull = queryMap
				.get("receiveEmployeeIndexNum_isNull");
		Object receiveEmployeeIndexNum_isNotNull = queryMap
				.get("receiveEmployeeIndexNum_isNotNull");
		Object receiveEmployeeIndexNum_in = queryMap
				.get("receiveEmployeeIndexNum_in");
		Object receiveEmployeeSignatureTime_gt = queryMap
				.get("receiveEmployeeSignatureTime_gt");
		Object receiveEmployeeSignatureTime_ge = queryMap
				.get("receiveEmployeeSignatureTime_ge");
		Object receiveEmployeeSignatureTime_lt = queryMap
				.get("receiveEmployeeSignatureTime_lt");
		Object receiveEmployeeSignatureTime_le = queryMap
				.get("receiveEmployeeSignatureTime_le");
		Object superviseEmployeeId = queryMap.get("superviseEmployeeId");
		Object superviseEmployeeId_gt = queryMap.get("superviseEmployeeId_gt");
		Object superviseEmployeeId_ge = queryMap.get("superviseEmployeeId_ge");
		Object superviseEmployeeId_lt = queryMap.get("superviseEmployeeId_lt");
		Object superviseEmployeeId_le = queryMap.get("superviseEmployeeId_le");
		Object superviseEmployeeId_in = queryMap.get("superviseEmployeeId_in");
		Object superviseEmployeeName = queryMap.get("superviseEmployeeName");
		Object superviseEmployeeName_like = queryMap
				.get("superviseEmployeeName_like");
		Object superviseEmployeeName_isNull = queryMap
				.get("superviseEmployeeName_isNull");
		Object superviseEmployeeName_isNotNull = queryMap
				.get("superviseEmployeeName_isNotNull");
		Object superviseEmployeeName_in = queryMap
				.get("superviseEmployeeName_in");
		Object superviseEmployeeIndexNum = queryMap
				.get("superviseEmployeeIndexNum");
		Object superviseEmployeeIndexNum_like = queryMap
				.get("superviseEmployeeIndexNum_like");
		Object superviseEmployeeIndexNum_isNull = queryMap
				.get("superviseEmployeeIndexNum_isNull");
		Object superviseEmployeeIndexNum_isNotNull = queryMap
				.get("superviseEmployeeIndexNum_isNotNull");
		Object superviseEmployeeIndexNum_in = queryMap
				.get("superviseEmployeeIndexNum_in");
		Object superviseEmployeeSignatureTime_gt = queryMap
				.get("superviseEmployeeSignatureTime_gt");
		Object superviseEmployeeSignatureTime_ge = queryMap
				.get("superviseEmployeeSignatureTime_ge");
		Object superviseEmployeeSignatureTime_lt = queryMap
				.get("superviseEmployeeSignatureTime_lt");
		Object superviseEmployeeSignatureTime_le = queryMap
				.get("superviseEmployeeSignatureTime_le");
		Object reason = queryMap.get("reason");
		Object reason_like = queryMap.get("reason_like");
		Object reason_isNull = queryMap.get("reason_isNull");
		Object reason_isNotNull = queryMap.get("reason_isNotNull");
		Object reason_in = queryMap.get("reason_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");
		Object status = queryMap.get("status");
		Object status_gt = queryMap.get("status_gt");
		Object status_ge = queryMap.get("status_ge");
		Object status_lt = queryMap.get("status_lt");
		Object status_le = queryMap.get("status_le");
		Object status_in = queryMap.get("status_in");
		Object serialNumber = queryMap.get("serialNumber");
		Object serialNumber_like = queryMap.get("serialNumber_like");
		Object serialNumber_isNull = queryMap.get("serialNumber_isNull");
		Object serialNumber_isNotNull = queryMap.get("serialNumber_isNotNull");
		Object serialNumber_in = queryMap.get("serialNumber_in");

		QueryCondition qc = new QueryCondition(SendReceiveEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.ID,
					QueryCondition.in, id_in));
		}
		if (serviceSiteId != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SERVICE_SITE_ID, QueryCondition.eq,
					serviceSiteId));
		}
		if (serviceSiteId_gt != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SERVICE_SITE_ID, QueryCondition.gt,
					serviceSiteId_gt));
		}
		if (serviceSiteId_ge != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SERVICE_SITE_ID, QueryCondition.ge,
					serviceSiteId_ge));
		}
		if (serviceSiteId_lt != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SERVICE_SITE_ID, QueryCondition.lt,
					serviceSiteId_lt));
		}
		if (serviceSiteId_le != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SERVICE_SITE_ID, QueryCondition.le,
					serviceSiteId_le));
		}
		if (serviceSiteId_in != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SERVICE_SITE_ID, QueryCondition.in,
					serviceSiteId_in));
		}
		if (serviceSiteName != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SERVICE_SITE_NAME, QueryCondition.eq,
					serviceSiteName));
		}
		if (serviceSiteName_like != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SERVICE_SITE_NAME, QueryCondition.like,
					serviceSiteName_like));
		}
		if (serviceSiteName_isNull != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SERVICE_SITE_NAME, QueryCondition.isNull,
					serviceSiteName_isNull));
		}
		if (serviceSiteName_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SERVICE_SITE_NAME,
					QueryCondition.isNotNull, serviceSiteName_isNotNull));
		}
		if (serviceSiteName_in != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SERVICE_SITE_NAME, QueryCondition.in,
					serviceSiteName_in));
		}
		if (sendEmployeeId != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_ID, QueryCondition.eq,
					sendEmployeeId));
		}
		if (sendEmployeeId_gt != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_ID, QueryCondition.gt,
					sendEmployeeId_gt));
		}
		if (sendEmployeeId_ge != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_ID, QueryCondition.ge,
					sendEmployeeId_ge));
		}
		if (sendEmployeeId_lt != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_ID, QueryCondition.lt,
					sendEmployeeId_lt));
		}
		if (sendEmployeeId_le != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_ID, QueryCondition.le,
					sendEmployeeId_le));
		}
		if (sendEmployeeId_in != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_ID, QueryCondition.in,
					sendEmployeeId_in));
		}
		if (sendEmployeeName != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_NAME, QueryCondition.eq,
					sendEmployeeName));
		}
		if (sendEmployeeName_like != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_NAME, QueryCondition.like,
					sendEmployeeName_like));
		}
		if (sendEmployeeName_isNull != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_NAME,
					QueryCondition.isNull, sendEmployeeName_isNull));
		}
		if (sendEmployeeName_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_NAME,
					QueryCondition.isNotNull, sendEmployeeName_isNotNull));
		}
		if (sendEmployeeName_in != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_NAME, QueryCondition.in,
					sendEmployeeName_in));
		}
		if (sendEmployeeIndexNum != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_INDEX_NUM,
					QueryCondition.eq, sendEmployeeIndexNum));
		}
		if (sendEmployeeIndexNum_like != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_INDEX_NUM,
					QueryCondition.like, sendEmployeeIndexNum_like));
		}
		if (sendEmployeeIndexNum_isNull != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_INDEX_NUM,
					QueryCondition.isNull, sendEmployeeIndexNum_isNull));
		}
		if (sendEmployeeIndexNum_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_INDEX_NUM,
					QueryCondition.isNotNull, sendEmployeeIndexNum_isNotNull));
		}
		if (sendEmployeeIndexNum_in != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_INDEX_NUM,
					QueryCondition.in, sendEmployeeIndexNum_in));
		}
		if (sendEmployeeSignatureTime_gt != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_SIGNATURE_TIME,
					QueryCondition.gt, sendEmployeeSignatureTime_gt));
		}
		if (sendEmployeeSignatureTime_ge != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_SIGNATURE_TIME,
					QueryCondition.ge, sendEmployeeSignatureTime_ge));
		}
		if (sendEmployeeSignatureTime_lt != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_SIGNATURE_TIME,
					QueryCondition.lt, sendEmployeeSignatureTime_lt));
		}
		if (sendEmployeeSignatureTime_le != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SEND_EMPLOYEE_SIGNATURE_TIME,
					QueryCondition.le, sendEmployeeSignatureTime_le));
		}
		if (receiveEmployeeId != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_ID, QueryCondition.eq,
					receiveEmployeeId));
		}
		if (receiveEmployeeId_gt != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_ID, QueryCondition.gt,
					receiveEmployeeId_gt));
		}
		if (receiveEmployeeId_ge != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_ID, QueryCondition.ge,
					receiveEmployeeId_ge));
		}
		if (receiveEmployeeId_lt != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_ID, QueryCondition.lt,
					receiveEmployeeId_lt));
		}
		if (receiveEmployeeId_le != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_ID, QueryCondition.le,
					receiveEmployeeId_le));
		}
		if (receiveEmployeeId_in != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_ID, QueryCondition.in,
					receiveEmployeeId_in));
		}
		if (receiveEmployeeName != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_NAME, QueryCondition.eq,
					receiveEmployeeName));
		}
		if (receiveEmployeeName_like != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_NAME,
					QueryCondition.like, receiveEmployeeName_like));
		}
		if (receiveEmployeeName_isNull != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_NAME,
					QueryCondition.isNull, receiveEmployeeName_isNull));
		}
		if (receiveEmployeeName_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_NAME,
					QueryCondition.isNotNull, receiveEmployeeName_isNotNull));
		}
		if (receiveEmployeeName_in != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_NAME, QueryCondition.in,
					receiveEmployeeName_in));
		}
		if (receiveEmployeeIndexNum != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_INDEX_NUM,
					QueryCondition.eq, receiveEmployeeIndexNum));
		}
		if (receiveEmployeeIndexNum_like != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_INDEX_NUM,
					QueryCondition.like, receiveEmployeeIndexNum_like));
		}
		if (receiveEmployeeIndexNum_isNull != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_INDEX_NUM,
					QueryCondition.isNull, receiveEmployeeIndexNum_isNull));
		}
		if (receiveEmployeeIndexNum_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_INDEX_NUM,
					QueryCondition.isNotNull, receiveEmployeeIndexNum_isNotNull));
		}
		if (receiveEmployeeIndexNum_in != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_INDEX_NUM,
					QueryCondition.in, receiveEmployeeIndexNum_in));
		}
		if (receiveEmployeeSignatureTime_gt != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_SIGNATURE_TIME,
					QueryCondition.gt, receiveEmployeeSignatureTime_gt));
		}
		if (receiveEmployeeSignatureTime_ge != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_SIGNATURE_TIME,
					QueryCondition.ge, receiveEmployeeSignatureTime_ge));
		}
		if (receiveEmployeeSignatureTime_lt != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_SIGNATURE_TIME,
					QueryCondition.lt, receiveEmployeeSignatureTime_lt));
		}
		if (receiveEmployeeSignatureTime_le != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.RECEIVE_EMPLOYEE_SIGNATURE_TIME,
					QueryCondition.le, receiveEmployeeSignatureTime_le));
		}
		if (superviseEmployeeId != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_ID, QueryCondition.eq,
					superviseEmployeeId));
		}
		if (superviseEmployeeId_gt != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_ID, QueryCondition.gt,
					superviseEmployeeId_gt));
		}
		if (superviseEmployeeId_ge != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_ID, QueryCondition.ge,
					superviseEmployeeId_ge));
		}
		if (superviseEmployeeId_lt != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_ID, QueryCondition.lt,
					superviseEmployeeId_lt));
		}
		if (superviseEmployeeId_le != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_ID, QueryCondition.le,
					superviseEmployeeId_le));
		}
		if (superviseEmployeeId_in != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_ID, QueryCondition.in,
					superviseEmployeeId_in));
		}
		if (superviseEmployeeName != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_NAME,
					QueryCondition.eq, superviseEmployeeName));
		}
		if (superviseEmployeeName_like != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_NAME,
					QueryCondition.like, superviseEmployeeName_like));
		}
		if (superviseEmployeeName_isNull != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_NAME,
					QueryCondition.isNull, superviseEmployeeName_isNull));
		}
		if (superviseEmployeeName_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_NAME,
					QueryCondition.isNotNull, superviseEmployeeName_isNotNull));
		}
		if (superviseEmployeeName_in != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_NAME,
					QueryCondition.in, superviseEmployeeName_in));
		}
		if (superviseEmployeeIndexNum != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_INDEX_NUM,
					QueryCondition.eq, superviseEmployeeIndexNum));
		}
		if (superviseEmployeeIndexNum_like != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_INDEX_NUM,
					QueryCondition.like, superviseEmployeeIndexNum_like));
		}
		if (superviseEmployeeIndexNum_isNull != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_INDEX_NUM,
					QueryCondition.isNull, superviseEmployeeIndexNum_isNull));
		}
		if (superviseEmployeeIndexNum_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_INDEX_NUM,
					QueryCondition.isNotNull,
					superviseEmployeeIndexNum_isNotNull));
		}
		if (superviseEmployeeIndexNum_in != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_INDEX_NUM,
					QueryCondition.in, superviseEmployeeIndexNum_in));
		}
		if (superviseEmployeeSignatureTime_gt != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_SIGNATURE_TIME,
					QueryCondition.gt, superviseEmployeeSignatureTime_gt));
		}
		if (superviseEmployeeSignatureTime_ge != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_SIGNATURE_TIME,
					QueryCondition.ge, superviseEmployeeSignatureTime_ge));
		}
		if (superviseEmployeeSignatureTime_lt != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_SIGNATURE_TIME,
					QueryCondition.lt, superviseEmployeeSignatureTime_lt));
		}
		if (superviseEmployeeSignatureTime_le != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveEntity.SUPERVISE_EMPLOYEE_SIGNATURE_TIME,
					QueryCondition.le, superviseEmployeeSignatureTime_le));
		}
		if (reason != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.REASON,
					QueryCondition.eq, reason));
		}
		if (reason_like != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.REASON,
					QueryCondition.like, reason_like));
		}
		if (reason_isNull != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.REASON,
					QueryCondition.isNull, reason_isNull));
		}
		if (reason_isNotNull != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.REASON,
					QueryCondition.isNotNull, reason_isNotNull));
		}
		if (reason_in != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.REASON,
					QueryCondition.in, reason_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}
		if (status != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.STATUS,
					QueryCondition.eq, status));
		}
		if (status_gt != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.STATUS,
					QueryCondition.gt, status_gt));
		}
		if (status_ge != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.STATUS,
					QueryCondition.ge, status_ge));
		}
		if (status_lt != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.STATUS,
					QueryCondition.lt, status_lt));
		}
		if (status_le != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.STATUS,
					QueryCondition.le, status_le));
		}
		if (status_in != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.STATUS,
					QueryCondition.in, status_in));
		}
		if (serialNumber != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.SERIAL_NUMBER,
					QueryCondition.eq, serialNumber));
		}
		if (serialNumber_like != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.SERIAL_NUMBER,
					QueryCondition.like, serialNumber_like));
		}
		if (serialNumber_isNull != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.SERIAL_NUMBER,
					QueryCondition.isNull, serialNumber_isNull));
		}
		if (serialNumber_isNotNull != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.SERIAL_NUMBER,
					QueryCondition.isNotNull, serialNumber_isNotNull));
		}
		if (serialNumber_in != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.SERIAL_NUMBER,
					QueryCondition.in, serialNumber_in));
		}
		return qc;
	}

	/* pei */
	public static String savePhoto(String photo, String fileName) {
		String returnPath = null;
		try {
			photo = photo.replaceAll("\n", "");
			byte[] photobyte = Base64Utils.decode(photo);

			String path = OlderHandler.class.getResource("OlderHandler.class")
					.toString();
			String separator = FileUtil.getFileSeparator();
			if ("file".equals(path.substring(0, 4))) {
				if ("\\".equals(separator))
					path = path.substring(6);
				else {
					path = path.substring(5);
				}
			}
			String localPath = path.substring(0, path.indexOf("WEB-INF"))
					+ "photos" + separator + "jiaojiebanPhotos" + separator
					+ fileName;
			localPath = URLDecoder.decode(localPath);
			localPath = localPath.replace("/", separator);
			localPath = localPath.replace("\\", separator);

			returnPath = SystemInit.photourl + "/photos/" + "jiaojiebanPhotos/"
					+ fileName;

			byte2image(photobyte, localPath);
		} catch (Exception e) {
			logger.error(e.toString());
		}
		return returnPath;
	}

	public static void byte2image(byte[] data, String path) {
		if ((data.length < 3) || (path.equals("")))
			return;
		try {
			FileImageOutputStream imageOutput = new FileImageOutputStream(
					new File(path));
			imageOutput.write(data, 0, data.length);
			imageOutput.close();
			logger.debug("Make Picture success,Please find image in "
					+ path);
		} catch (Exception ex) {
			System.out.println("Exception: " + ex);
			ex.printStackTrace();
		}
	}
	
	
	/**
	 * 根据接班人或交班人获取交接班记录列表信息
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList queryByName(Map<String, Object> queryMap,
			List<OrderVO> orderList, int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object name = queryMap.get("name");
		Object status = queryMap.get("status");
		Object sendEmployeeId = queryMap.get("sendEmployeeId");
		Object createTime_gt = queryMap.get("createTime_gt");
		
		QueryCondition qc = new QueryCondition(SendReceiveEntity.ID,
				QueryCondition.gt, "0");
		if (name != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.SEND_EMPLOYEE_NAME,
					QueryCondition.like, name));
			qc.orCondition(new QueryCondition(SendReceiveEntity.RECEIVE_EMPLOYEE_NAME,
					QueryCondition.like, name));
		}
		if (status != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.STATUS,
					QueryCondition.eq, status));
		}
		if (sendEmployeeId != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.SEND_EMPLOYEE_ID,
					QueryCondition.eq, sendEmployeeId));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(SendReceiveEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		
		
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		// 数据权限
		List<QueryCondition> dataRuleQclist = null;
		List<Map<String, Object>> dataRuleMapList = (List<Map<String, Object>>) queryMap
				.get("dataRuleMapList");
		if (dataRuleMapList != null && dataRuleMapList.size() > 0) {
			dataRuleQclist = new ArrayList<QueryCondition>();
			for (Map<String, Object> dataRuleMap : dataRuleMapList) {
				QueryCondition dataRuleQc = changeMapToQc(dataRuleMap);
				dataRuleQclist.add(dataRuleQc);
			}
		}
		pagelist = dbManager.queryByConditions(SendReceiveEntity.class, qc,
				dataRuleQclist, oc, pageno, pagesize);
		
		return pagelist;
	}
}
