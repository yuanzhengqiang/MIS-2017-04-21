package fsk.service.assessmentTask;

import java.math.BigDecimal;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import org.apache.log4j.Logger;

import fsk.entity.older.OlderEntity;
import fsk.entity.healthAssessment.HealthAssessmentEntity;
import fsk.entity.employee.EmployeeEntity;
import fsk.entity.employee.EmployeeEntity;
import fsk.entity.assessmentLog.AssessmentLogEntity;

import fsk.entity.assessmentTask.AssessmentTaskEntity;
import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

/**
 * @Title: Service
 * @Description: 评估任务服务类
 * @author feng.gu
 * @date 2016-07-19 11:09:30
 * @version V1.0
 * 
 */
public class AssessmentTaskService {
	private static Logger logger = Logger
			.getLogger(AssessmentTaskService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static AssessmentTaskService assessmentTaskService;

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static AssessmentTaskService getInstance() {
		if (assessmentTaskService == null) {
			assessmentTaskService = new AssessmentTaskService();
		}
		return assessmentTaskService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(AssessmentTaskEntity assessmentTask) {
		boolean result = false;
		if (assessmentTask != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 关联信息保存
				OlderEntity older = assessmentTask.getOlder();
				if (older != null) {
					dbManager.saveNoTransaction(older);
					assessmentTask.setOlderId(older.getId());
				}
				// 关联信息保存
				HealthAssessmentEntity healthAssessment = assessmentTask
						.getHealthAssessment();
				if (healthAssessment != null) {
					dbManager.saveNoTransaction(healthAssessment);
					assessmentTask.setHealthAssessmentId(healthAssessment
							.getId());
				}
				// 关联信息保存
				EmployeeEntity distributeEmployee = assessmentTask
						.getDistributeEmployee();
				if (distributeEmployee != null) {
					dbManager.saveNoTransaction(distributeEmployee);
					assessmentTask.setDistributeEmployeeId(distributeEmployee
							.getId());
				}
				// 关联信息保存
				EmployeeEntity assessmentEmployee = assessmentTask
						.getAssessmentEmployee();
				if (assessmentEmployee != null) {
					dbManager.saveNoTransaction(assessmentEmployee);
					assessmentTask.setAssessmentEmployeeId(assessmentEmployee
							.getId());
				}
				if (assessmentTask.getAssessmentLogList() != null
						&& assessmentTask.getAssessmentLogList().size() > 0) {
					// 关联信息保存
					if (assessmentTask.getId() == null) {
						dbManager.saveNoTransaction(assessmentTask);
					}
					for (AssessmentLogEntity assessmentLogEntity : assessmentTask
							.getAssessmentLogList()) {
						assessmentLogEntity.setAssessmentTaskId(assessmentTask
								.getId());
						dbManager.saveNoTransaction(assessmentLogEntity);
					}
				}
				result = dbManager.saveNoTransaction(assessmentTask);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(List<AssessmentTaskEntity> assessmentTaskList) {
		boolean result = false;
		if (assessmentTaskList != null && assessmentTaskList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (AssessmentTaskEntity assessmentTask : assessmentTaskList) {
					if (assessmentTask != null) {
						// 关联信息保存
						OlderEntity older = assessmentTask.getOlder();
						if (older != null) {
							dbManager.saveNoTransaction(older);
							assessmentTask.setOlderId(older.getId());
						}
						// 关联信息保存
						HealthAssessmentEntity healthAssessment = assessmentTask
								.getHealthAssessment();
						if (healthAssessment != null) {
							dbManager.saveNoTransaction(healthAssessment);
							assessmentTask
									.setHealthAssessmentId(healthAssessment
											.getId());
						}
						// 关联信息保存
						EmployeeEntity distributeEmployee = assessmentTask
								.getDistributeEmployee();
						if (distributeEmployee != null) {
							dbManager.saveNoTransaction(distributeEmployee);
							assessmentTask
									.setDistributeEmployeeId(distributeEmployee
											.getId());
						}
						// 关联信息保存
						EmployeeEntity assessmentEmployee = assessmentTask
								.getAssessmentEmployee();
						if (assessmentEmployee != null) {
							dbManager.saveNoTransaction(assessmentEmployee);
							assessmentTask
									.setAssessmentEmployeeId(assessmentEmployee
											.getId());
						}
						// 关联信息保存
						if (assessmentTask.getAssessmentLogList() != null
								&& assessmentTask.getAssessmentLogList().size() > 0) {
							if (assessmentTask.getId() == null) {
								dbManager.saveNoTransaction(assessmentTask);
							}
							for (AssessmentLogEntity assessmentLogEntity : assessmentTask
									.getAssessmentLogList()) {
								assessmentLogEntity
										.setAssessmentTaskId(assessmentTask
												.getId());
								dbManager
										.saveNoTransaction(assessmentLogEntity);
							}
						}
						result = dbManager.saveNoTransaction(assessmentTask);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public AssessmentTaskEntity getById(Integer id) {
		AssessmentTaskEntity obj = null;
		if (id != null) {
			obj = (AssessmentTaskEntity) dbManager.getById(id,
					AssessmentTaskEntity.class);
		}
		return obj;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param olderShow
	 *            是否查询关联信息
	 * @param healthAssessmentShow
	 *            是否查询关联信息
	 * @param distributeEmployeeShow
	 *            是否查询关联信息
	 * @param assessmentEmployeeShow
	 *            是否查询关联信息
	 * @param assessmentLogListShow
	 *            是否查询关联信息
	 * @param obj
	 */
	public AssessmentTaskEntity getById(Integer id, Boolean olderShow,
			Boolean healthAssessmentShow, Boolean distributeEmployeeShow,
			Boolean assessmentEmployeeShow, Boolean assessmentLogListShow) {
		AssessmentTaskEntity obj = null;
		if (id != null) {
			obj = (AssessmentTaskEntity) dbManager.getById(id,
					AssessmentTaskEntity.class);
			// 查询关联内容
			if (olderShow != null && olderShow.booleanValue() && obj != null
					&& obj.getOlderId() != null && obj.getOlderId() > 0) {
				OlderEntity older = (OlderEntity) dbManager.getById(
						obj.getOlderId(), OlderEntity.class);
				obj.setOlder(older);
			}
			// 查询关联内容
			if (healthAssessmentShow != null
					&& healthAssessmentShow.booleanValue() && obj != null
					&& obj.getHealthAssessmentId() != null
					&& obj.getHealthAssessmentId() > 0) {
				HealthAssessmentEntity healthAssessment = (HealthAssessmentEntity) dbManager
						.getById(obj.getHealthAssessmentId(),
								HealthAssessmentEntity.class);
				obj.setHealthAssessment(healthAssessment);
			}
			// 查询关联内容
			if (distributeEmployeeShow != null
					&& distributeEmployeeShow.booleanValue() && obj != null
					&& obj.getDistributeEmployeeId() != null
					&& obj.getDistributeEmployeeId() > 0) {
				EmployeeEntity distributeEmployee = (EmployeeEntity) dbManager
						.getById(obj.getDistributeEmployeeId(),
								EmployeeEntity.class);
				obj.setDistributeEmployee(distributeEmployee);
			}
			// 查询关联内容
			if (assessmentEmployeeShow != null
					&& assessmentEmployeeShow.booleanValue() && obj != null
					&& obj.getAssessmentEmployeeId() != null
					&& obj.getAssessmentEmployeeId() > 0) {
				EmployeeEntity assessmentEmployee = (EmployeeEntity) dbManager
						.getById(obj.getAssessmentEmployeeId(),
								EmployeeEntity.class);
				obj.setAssessmentEmployee(assessmentEmployee);
			}
			// 查询关联内容
			if (assessmentLogListShow != null
					&& assessmentLogListShow.booleanValue() && obj != null
					&& obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(
						AssessmentLogEntity.class,
						AssessmentLogEntity.ASSESSMENT_TASK_ID,
						String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<AssessmentLogEntity> assessmentLogList = new ArrayList<AssessmentLogEntity>();
					for (Object o : list) {
						assessmentLogList.add((AssessmentLogEntity) o);
					}
					obj.setAssessmentLogList(assessmentLogList);
				}
			}
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<AssessmentTaskEntity> getListByCondition(
			Map<String, Object> queryMap) {
		List<AssessmentTaskEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);

		list = dbManager.queryByCondition(AssessmentTaskEntity.class, qc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<AssessmentTaskEntity>();
			for (Object obj : list) {
				returnlist.add((AssessmentTaskEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param olderShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param healthAssessmentShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param distributeEmployeeShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param assessmentEmployeeShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param assessmentLogListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public List<AssessmentTaskEntity> getListByCondition(
			Map<String, Object> queryMap, List<OrderVO> orderList,
			Boolean olderShow, Boolean healthAssessmentShow,
			Boolean distributeEmployeeShow, Boolean assessmentEmployeeShow,
			Boolean assessmentLogListShow) {
		List<AssessmentTaskEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);

		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(AssessmentTaskEntity.class, qc, oc);
		int a = 0;
		if (olderShow != null && olderShow.booleanValue()) {
			a++;
		}
		if (healthAssessmentShow != null && healthAssessmentShow.booleanValue()) {
			a++;
		}
		if (distributeEmployeeShow != null
				&& distributeEmployeeShow.booleanValue()) {
			a++;
		}
		if (assessmentEmployeeShow != null
				&& assessmentEmployeeShow.booleanValue()) {
			a++;
		}
		if (assessmentLogListShow != null
				&& assessmentLogListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && list != null && list.size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < list.size(); i++) {
				AssessmentTaskEntity obj = (AssessmentTaskEntity) list.get(i);
				// 查询关联内容
				if (olderShow != null && olderShow.booleanValue()
						&& obj != null && obj.getOlderId() != null
						&& obj.getOlderId() > 0) {
					OlderEntity older = (OlderEntity) dbManager.getById(
							obj.getOlderId(), OlderEntity.class);
					obj.setOlder(older);
				}
				// 查询关联内容
				if (healthAssessmentShow != null
						&& healthAssessmentShow.booleanValue() && obj != null
						&& obj.getHealthAssessmentId() != null
						&& obj.getHealthAssessmentId() > 0) {
					HealthAssessmentEntity healthAssessment = (HealthAssessmentEntity) dbManager
							.getById(obj.getHealthAssessmentId(),
									HealthAssessmentEntity.class);
					obj.setHealthAssessment(healthAssessment);
				}
				// 查询关联内容
				if (distributeEmployeeShow != null
						&& distributeEmployeeShow.booleanValue() && obj != null
						&& obj.getDistributeEmployeeId() != null
						&& obj.getDistributeEmployeeId() > 0) {
					EmployeeEntity distributeEmployee = (EmployeeEntity) dbManager
							.getById(obj.getDistributeEmployeeId(),
									EmployeeEntity.class);
					obj.setDistributeEmployee(distributeEmployee);
				}
				// 查询关联内容
				if (assessmentEmployeeShow != null
						&& assessmentEmployeeShow.booleanValue() && obj != null
						&& obj.getAssessmentEmployeeId() != null
						&& obj.getAssessmentEmployeeId() > 0) {
					EmployeeEntity assessmentEmployee = (EmployeeEntity) dbManager
							.getById(obj.getAssessmentEmployeeId(),
									EmployeeEntity.class);
					obj.setAssessmentEmployee(assessmentEmployee);
				}
				// 查询关联内容
				if (assessmentLogListShow != null
						&& assessmentLogListShow.booleanValue() && obj != null
						&& obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							AssessmentLogEntity.class,
							AssessmentLogEntity.ASSESSMENT_TASK_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<AssessmentLogEntity> assessmentLogList = new ArrayList<AssessmentLogEntity>();
						for (Object o : objList) {
							assessmentLogList.add((AssessmentLogEntity) o);
						}
						obj.setAssessmentLogList(assessmentLogList);
					}
				}
				result.add(obj);
			}
			list = result;
		}
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<AssessmentTaskEntity>();
			for (Object obj : list) {
				returnlist.add((AssessmentTaskEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);

		pagelist = dbManager.queryByCondition(AssessmentTaskEntity.class, qc,
				pageno, pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @param olderShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param healthAssessmentShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param distributeEmployeeShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param assessmentEmployeeShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param assessmentLogListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, int pageno, int pagesize,
			Boolean olderShow, Boolean healthAssessmentShow,
			Boolean distributeEmployeeShow, Boolean assessmentEmployeeShow,
			Boolean assessmentLogListShow) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);

		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		
		//数据权限
		List<QueryCondition> dataRuleQclist = null;
		List<Map<String, Object>> dataRuleMapList = (List<Map<String, Object>>)queryMap.get("dataRuleMapList");
		if(dataRuleMapList!=null&&dataRuleMapList.size()>0){
			dataRuleQclist = new ArrayList<QueryCondition>();
			for(Map<String, Object> dataRuleMap:dataRuleMapList){
				QueryCondition dataRuleQc = changeMapToQc(dataRuleMap);	
				dataRuleQclist.add(dataRuleQc);
			}
		}
		pagelist = dbManager.queryByConditions(AssessmentTaskEntity.class, qc,dataRuleQclist,
				oc, pageno, pagesize);
		int a = 0;
		if (olderShow != null && olderShow.booleanValue()) {
			a++;
		}
		if (healthAssessmentShow != null && healthAssessmentShow.booleanValue()) {
			a++;
		}
		if (distributeEmployeeShow != null
				&& distributeEmployeeShow.booleanValue()) {
			a++;
		}
		if (assessmentEmployeeShow != null
				&& assessmentEmployeeShow.booleanValue()) {
			a++;
		}
		if (assessmentLogListShow != null
				&& assessmentLogListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && pagelist != null && pagelist.getResultList() != null
				&& pagelist.getResultList().size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < pagelist.getResultList().size(); i++) {
				AssessmentTaskEntity obj = (AssessmentTaskEntity) pagelist
						.getResultList().get(i);
				// 查询关联内容
				if (olderShow != null && olderShow.booleanValue()
						&& obj != null && obj.getOlderId() != null
						&& obj.getOlderId() > 0) {
					OlderEntity older = (OlderEntity) dbManager.getById(
							obj.getOlderId(), OlderEntity.class);
					obj.setOlder(older);
				}
				// 查询关联内容
				if (healthAssessmentShow != null
						&& healthAssessmentShow.booleanValue() && obj != null
						&& obj.getHealthAssessmentId() != null
						&& obj.getHealthAssessmentId() > 0) {
					HealthAssessmentEntity healthAssessment = (HealthAssessmentEntity) dbManager
							.getById(obj.getHealthAssessmentId(),
									HealthAssessmentEntity.class);
					obj.setHealthAssessment(healthAssessment);
				}
				// 查询关联内容
				if (distributeEmployeeShow != null
						&& distributeEmployeeShow.booleanValue() && obj != null
						&& obj.getDistributeEmployeeId() != null
						&& obj.getDistributeEmployeeId() > 0) {
					EmployeeEntity distributeEmployee = (EmployeeEntity) dbManager
							.getById(obj.getDistributeEmployeeId(),
									EmployeeEntity.class);
					obj.setDistributeEmployee(distributeEmployee);
				}
				// 查询关联内容
				if (assessmentEmployeeShow != null
						&& assessmentEmployeeShow.booleanValue() && obj != null
						&& obj.getAssessmentEmployeeId() != null
						&& obj.getAssessmentEmployeeId() > 0) {
					EmployeeEntity assessmentEmployee = (EmployeeEntity) dbManager
							.getById(obj.getAssessmentEmployeeId(),
									EmployeeEntity.class);
					obj.setAssessmentEmployee(assessmentEmployee);
				}
				// 查询关联内容
				if (assessmentLogListShow != null
						&& assessmentLogListShow.booleanValue() && obj != null
						&& obj.getId() != null && obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							AssessmentLogEntity.class,
							AssessmentLogEntity.ASSESSMENT_TASK_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<AssessmentLogEntity> assessmentLogList = new ArrayList<AssessmentLogEntity>();
						for (Object o : objList) {
							assessmentLogList.add((AssessmentLogEntity) o);
						}
						obj.setAssessmentLogList(assessmentLogList);
					}
				}
				result.add(obj);
			}
			pagelist.setResultList(result);
		}
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id, Boolean delOlder,
			Boolean delHealthAssessment, Boolean delDistributeEmployee,
			Boolean delAssessmentEmployee, Boolean delAssessmentLogList) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delOlder != null && delOlder.booleanValue()) {
					AssessmentTaskEntity assessmentTask = (AssessmentTaskEntity) dbManager
							.getById(id, AssessmentTaskEntity.class);
					if (assessmentTask != null
							&& assessmentTask.getOlderId() != null) {
						dbManager.delNoTransaction(assessmentTask.getOlderId(),
								OlderEntity.class);
					}
				}
				// 删除关联信息
				if (delHealthAssessment != null
						&& delHealthAssessment.booleanValue()) {
					AssessmentTaskEntity assessmentTask = (AssessmentTaskEntity) dbManager
							.getById(id, AssessmentTaskEntity.class);
					if (assessmentTask != null
							&& assessmentTask.getHealthAssessmentId() != null) {
						dbManager.delNoTransaction(
								assessmentTask.getHealthAssessmentId(),
								HealthAssessmentEntity.class);
					}
				}
				// 删除关联信息
				if (delDistributeEmployee != null
						&& delDistributeEmployee.booleanValue()) {
					AssessmentTaskEntity assessmentTask = (AssessmentTaskEntity) dbManager
							.getById(id, AssessmentTaskEntity.class);
					if (assessmentTask != null
							&& assessmentTask.getDistributeEmployeeId() != null) {
						dbManager.delNoTransaction(
								assessmentTask.getDistributeEmployeeId(),
								EmployeeEntity.class);
					}
				}
				// 删除关联信息
				if (delAssessmentEmployee != null
						&& delAssessmentEmployee.booleanValue()) {
					AssessmentTaskEntity assessmentTask = (AssessmentTaskEntity) dbManager
							.getById(id, AssessmentTaskEntity.class);
					if (assessmentTask != null
							&& assessmentTask.getAssessmentEmployeeId() != null) {
						dbManager.delNoTransaction(
								assessmentTask.getAssessmentEmployeeId(),
								EmployeeEntity.class);
					}
				}
				// 删除关联信息
				if (delAssessmentLogList != null
						&& delAssessmentLogList.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							AssessmentLogEntity.ASSESSMENT_TASK_ID,
							QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(
							AssessmentLogEntity.class, qc);
				}
				result = dbManager.delNoTransaction(id,
						AssessmentTaskEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(AssessmentTaskEntity.ID,
						QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(
						AssessmentTaskEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap, Boolean delOlder,
			Boolean delHealthAssessment, Boolean delDistributeEmployee,
			Boolean delAssessmentEmployee, Boolean delAssessmentLogList) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);

		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delOlder != null && delOlder.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									AssessmentTaskEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							AssessmentTaskEntity entity = (AssessmentTaskEntity) obj;
							strIds += entity.getOlderId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(OlderEntity.ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								OlderEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delHealthAssessment != null
						&& delHealthAssessment.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									AssessmentTaskEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							AssessmentTaskEntity entity = (AssessmentTaskEntity) obj;
							strIds += entity.getHealthAssessmentId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								HealthAssessmentEntity.ID, QueryCondition.in,
								strIds);
						dbManager.delByConditionsNoTransaction(
								HealthAssessmentEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delDistributeEmployee != null
						&& delDistributeEmployee.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									AssessmentTaskEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							AssessmentTaskEntity entity = (AssessmentTaskEntity) obj;
							strIds += entity.getDistributeEmployeeId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								EmployeeEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								EmployeeEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delAssessmentEmployee != null
						&& delAssessmentEmployee.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									AssessmentTaskEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							AssessmentTaskEntity entity = (AssessmentTaskEntity) obj;
							strIds += entity.getAssessmentEmployeeId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								EmployeeEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								EmployeeEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delAssessmentLogList != null
						&& delAssessmentLogList.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									AssessmentTaskEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							AssessmentTaskEntity entity = (AssessmentTaskEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								AssessmentLogEntity.ASSESSMENT_TASK_ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								AssessmentLogEntity.class, qc1);
					}

				}
				result = dbManager.delByConditionsNoTransaction(
						AssessmentTaskEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}
	
    private QueryCondition changeMapToQc(Map<String, Object> queryMap) {		
    	Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object olderId = queryMap.get("olderId");
		Object olderId_gt = queryMap.get("olderId_gt");
		Object olderId_ge = queryMap.get("olderId_ge");
		Object olderId_lt = queryMap.get("olderId_lt");
		Object olderId_le = queryMap.get("olderId_le");
		Object olderId_in = queryMap.get("olderId_in");
		Object olderName = queryMap.get("olderName");
		Object olderName_like = queryMap.get("olderName_like");
		Object olderName_isNull = queryMap.get("olderName_isNull");
		Object olderName_isNotNull = queryMap.get("olderName_isNotNull");
		Object olderName_in = queryMap.get("olderName_in");
		Object distributeTime_gt = queryMap.get("distributeTime_gt");
		Object distributeTime_ge = queryMap.get("distributeTime_ge");
		Object distributeTime_lt = queryMap.get("distributeTime_lt");
		Object distributeTime_le = queryMap.get("distributeTime_le");
		Object distributeEmployeeId = queryMap.get("distributeEmployeeId");
		Object distributeEmployeeId_gt = queryMap
				.get("distributeEmployeeId_gt");
		Object distributeEmployeeId_ge = queryMap
				.get("distributeEmployeeId_ge");
		Object distributeEmployeeId_lt = queryMap
				.get("distributeEmployeeId_lt");
		Object distributeEmployeeId_le = queryMap
				.get("distributeEmployeeId_le");
		Object distributeEmployeeId_in = queryMap
				.get("distributeEmployeeId_in");
		Object distributeName = queryMap.get("distributeName");
		Object distributeName_like = queryMap.get("distributeName_like");
		Object distributeName_isNull = queryMap.get("distributeName_isNull");
		Object distributeName_isNotNull = queryMap
				.get("distributeName_isNotNull");
		Object distributeName_in = queryMap.get("distributeName_in");
		Object expectedCompletionTime_gt = queryMap
				.get("expectedCompletionTime_gt");
		Object expectedCompletionTime_ge = queryMap
				.get("expectedCompletionTime_ge");
		Object expectedCompletionTime_lt = queryMap
				.get("expectedCompletionTime_lt");
		Object expectedCompletionTime_le = queryMap
				.get("expectedCompletionTime_le");
		Object healthAssessmentType = queryMap.get("healthAssessmentType");
		Object healthAssessmentType_gt = queryMap
				.get("healthAssessmentType_gt");
		Object healthAssessmentType_ge = queryMap
				.get("healthAssessmentType_ge");
		Object healthAssessmentType_lt = queryMap
				.get("healthAssessmentType_lt");
		Object healthAssessmentType_le = queryMap
				.get("healthAssessmentType_le");
		Object healthAssessmentType_in = queryMap
				.get("healthAssessmentType_in");
		Object healthAssessmentId = queryMap.get("healthAssessmentId");
		Object healthAssessmentId_gt = queryMap.get("healthAssessmentId_gt");
		Object healthAssessmentId_ge = queryMap.get("healthAssessmentId_ge");
		Object healthAssessmentId_lt = queryMap.get("healthAssessmentId_lt");
		Object healthAssessmentId_le = queryMap.get("healthAssessmentId_le");
		Object healthAssessmentId_in = queryMap.get("healthAssessmentId_in");
		Object healthAssessmentStatus = queryMap.get("healthAssessmentStatus");
		Object healthAssessmentStatus_gt = queryMap
				.get("healthAssessmentStatus_gt");
		Object healthAssessmentStatus_ge = queryMap
				.get("healthAssessmentStatus_ge");
		Object healthAssessmentStatus_lt = queryMap
				.get("healthAssessmentStatus_lt");
		Object healthAssessmentStatus_le = queryMap
				.get("healthAssessmentStatus_le");
		Object healthAssessmentStatus_in = queryMap
				.get("healthAssessmentStatus_in");
		Object des = queryMap.get("des");
		Object des_like = queryMap.get("des_like");
		Object des_isNull = queryMap.get("des_isNull");
		Object des_isNotNull = queryMap.get("des_isNotNull");
		Object des_in = queryMap.get("des_in");
		Object assessmentEmployeeId = queryMap.get("assessmentEmployeeId");
		Object assessmentEmployeeId_gt = queryMap
				.get("assessmentEmployeeId_gt");
		Object assessmentEmployeeId_ge = queryMap
				.get("assessmentEmployeeId_ge");
		Object assessmentEmployeeId_lt = queryMap
				.get("assessmentEmployeeId_lt");
		Object assessmentEmployeeId_le = queryMap
				.get("assessmentEmployeeId_le");
		Object assessmentEmployeeId_in = queryMap
				.get("assessmentEmployeeId_in");
		Object assessmentName = queryMap.get("assessmentName");
		Object assessmentName_like = queryMap.get("assessmentName_like");
		Object assessmentName_isNull = queryMap.get("assessmentName_isNull");
		Object assessmentName_isNotNull = queryMap
				.get("assessmentName_isNotNull");
		Object assessmentName_in = queryMap.get("assessmentName_in");
		Object taskStatus = queryMap.get("taskStatus");
		Object taskStatus_gt = queryMap.get("taskStatus_gt");
		Object taskStatus_ge = queryMap.get("taskStatus_ge");
		Object taskStatus_lt = queryMap.get("taskStatus_lt");
		Object taskStatus_le = queryMap.get("taskStatus_le");
		Object taskStatus_in = queryMap.get("taskStatus_in");
		Object auditPassTime_gt = queryMap.get("auditPassTime_gt");
		Object auditPassTime_ge = queryMap.get("auditPassTime_ge");
		Object auditPassTime_lt = queryMap.get("auditPassTime_lt");
		Object auditPassTime_le = queryMap.get("auditPassTime_le");

		QueryCondition qc = new QueryCondition(AssessmentTaskEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.ID,
					QueryCondition.in, id_in));
		}
		if (olderId != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.OLDER_ID,
					QueryCondition.eq, olderId));
		}
		if (olderId_gt != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.OLDER_ID,
					QueryCondition.gt, olderId_gt));
		}
		if (olderId_ge != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.OLDER_ID,
					QueryCondition.ge, olderId_ge));
		}
		if (olderId_lt != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.OLDER_ID,
					QueryCondition.lt, olderId_lt));
		}
		if (olderId_le != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.OLDER_ID,
					QueryCondition.le, olderId_le));
		}
		if (olderId_in != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.OLDER_ID,
					QueryCondition.in, olderId_in));
		}
		if (olderName != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.OLDER_NAME,
					QueryCondition.eq, olderName));
		}
		if (olderName_like != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.OLDER_NAME,
					QueryCondition.like, olderName_like));
		}
		if (olderName_isNull != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.OLDER_NAME,
					QueryCondition.isNull, olderName_isNull));
		}
		if (olderName_isNotNull != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.OLDER_NAME,
					QueryCondition.isNotNull, olderName_isNotNull));
		}
		if (olderName_in != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.OLDER_NAME,
					QueryCondition.in, olderName_in));
		}
		if (distributeTime_gt != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.DISTRIBUTE_TIME, QueryCondition.gt,
					distributeTime_gt));
		}
		if (distributeTime_ge != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.DISTRIBUTE_TIME, QueryCondition.ge,
					distributeTime_ge));
		}
		if (distributeTime_lt != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.DISTRIBUTE_TIME, QueryCondition.lt,
					distributeTime_lt));
		}
		if (distributeTime_le != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.DISTRIBUTE_TIME, QueryCondition.le,
					distributeTime_le));
		}
		if (distributeEmployeeId != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.DISTRIBUTE_EMPLOYEE_ID,
					QueryCondition.eq, distributeEmployeeId));
		}
		if (distributeEmployeeId_gt != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.DISTRIBUTE_EMPLOYEE_ID,
					QueryCondition.gt, distributeEmployeeId_gt));
		}
		if (distributeEmployeeId_ge != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.DISTRIBUTE_EMPLOYEE_ID,
					QueryCondition.ge, distributeEmployeeId_ge));
		}
		if (distributeEmployeeId_lt != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.DISTRIBUTE_EMPLOYEE_ID,
					QueryCondition.lt, distributeEmployeeId_lt));
		}
		if (distributeEmployeeId_le != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.DISTRIBUTE_EMPLOYEE_ID,
					QueryCondition.le, distributeEmployeeId_le));
		}
		if (distributeEmployeeId_in != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.DISTRIBUTE_EMPLOYEE_ID,
					QueryCondition.in, distributeEmployeeId_in));
		}
		if (distributeName != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.DISTRIBUTE_NAME, QueryCondition.eq,
					distributeName));
		}
		if (distributeName_like != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.DISTRIBUTE_NAME, QueryCondition.like,
					distributeName_like));
		}
		if (distributeName_isNull != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.DISTRIBUTE_NAME,
					QueryCondition.isNull, distributeName_isNull));
		}
		if (distributeName_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.DISTRIBUTE_NAME,
					QueryCondition.isNotNull, distributeName_isNotNull));
		}
		if (distributeName_in != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.DISTRIBUTE_NAME, QueryCondition.in,
					distributeName_in));
		}
		if (expectedCompletionTime_gt != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.EXPECTED_COMPLETION_TIME,
					QueryCondition.gt, expectedCompletionTime_gt));
		}
		if (expectedCompletionTime_ge != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.EXPECTED_COMPLETION_TIME,
					QueryCondition.ge, expectedCompletionTime_ge));
		}
		if (expectedCompletionTime_lt != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.EXPECTED_COMPLETION_TIME,
					QueryCondition.lt, expectedCompletionTime_lt));
		}
		if (expectedCompletionTime_le != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.EXPECTED_COMPLETION_TIME,
					QueryCondition.le, expectedCompletionTime_le));
		}
		if (healthAssessmentType != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.HEALTH_ASSESSMENT_TYPE,
					QueryCondition.eq, healthAssessmentType));
		}
		if (healthAssessmentType_gt != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.HEALTH_ASSESSMENT_TYPE,
					QueryCondition.gt, healthAssessmentType_gt));
		}
		if (healthAssessmentType_ge != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.HEALTH_ASSESSMENT_TYPE,
					QueryCondition.ge, healthAssessmentType_ge));
		}
		if (healthAssessmentType_lt != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.HEALTH_ASSESSMENT_TYPE,
					QueryCondition.lt, healthAssessmentType_lt));
		}
		if (healthAssessmentType_le != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.HEALTH_ASSESSMENT_TYPE,
					QueryCondition.le, healthAssessmentType_le));
		}
		if (healthAssessmentType_in != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.HEALTH_ASSESSMENT_TYPE,
					QueryCondition.in, healthAssessmentType_in));
		}
		if (healthAssessmentId != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.HEALTH_ASSESSMENT_ID,
					QueryCondition.eq, healthAssessmentId));
		}
		if (healthAssessmentId_gt != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.HEALTH_ASSESSMENT_ID,
					QueryCondition.gt, healthAssessmentId_gt));
		}
		if (healthAssessmentId_ge != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.HEALTH_ASSESSMENT_ID,
					QueryCondition.ge, healthAssessmentId_ge));
		}
		if (healthAssessmentId_lt != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.HEALTH_ASSESSMENT_ID,
					QueryCondition.lt, healthAssessmentId_lt));
		}
		if (healthAssessmentId_le != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.HEALTH_ASSESSMENT_ID,
					QueryCondition.le, healthAssessmentId_le));
		}
		if (healthAssessmentId_in != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.HEALTH_ASSESSMENT_ID,
					QueryCondition.in, healthAssessmentId_in));
		}
		if (healthAssessmentStatus != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.HEALTH_ASSESSMENT_STATUS,
					QueryCondition.eq, healthAssessmentStatus));
		}
		if (healthAssessmentStatus_gt != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.HEALTH_ASSESSMENT_STATUS,
					QueryCondition.gt, healthAssessmentStatus_gt));
		}
		if (healthAssessmentStatus_ge != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.HEALTH_ASSESSMENT_STATUS,
					QueryCondition.ge, healthAssessmentStatus_ge));
		}
		if (healthAssessmentStatus_lt != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.HEALTH_ASSESSMENT_STATUS,
					QueryCondition.lt, healthAssessmentStatus_lt));
		}
		if (healthAssessmentStatus_le != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.HEALTH_ASSESSMENT_STATUS,
					QueryCondition.le, healthAssessmentStatus_le));
		}
		if (healthAssessmentStatus_in != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.HEALTH_ASSESSMENT_STATUS,
					QueryCondition.in, healthAssessmentStatus_in));
		}
		if (des != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.DES,
					QueryCondition.eq, des));
		}
		if (des_like != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.DES,
					QueryCondition.like, des_like));
		}
		if (des_isNull != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.DES,
					QueryCondition.isNull, des_isNull));
		}
		if (des_isNotNull != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.DES,
					QueryCondition.isNotNull, des_isNotNull));
		}
		if (des_in != null) {
			qc.andCondition(new QueryCondition(AssessmentTaskEntity.DES,
					QueryCondition.in, des_in));
		}
		if (assessmentEmployeeId != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.ASSESSMENT_EMPLOYEE_ID,
					QueryCondition.eq, assessmentEmployeeId));
		}
		if (assessmentEmployeeId_gt != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.ASSESSMENT_EMPLOYEE_ID,
					QueryCondition.gt, assessmentEmployeeId_gt));
		}
		if (assessmentEmployeeId_ge != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.ASSESSMENT_EMPLOYEE_ID,
					QueryCondition.ge, assessmentEmployeeId_ge));
		}
		if (assessmentEmployeeId_lt != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.ASSESSMENT_EMPLOYEE_ID,
					QueryCondition.lt, assessmentEmployeeId_lt));
		}
		if (assessmentEmployeeId_le != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.ASSESSMENT_EMPLOYEE_ID,
					QueryCondition.le, assessmentEmployeeId_le));
		}
		if (assessmentEmployeeId_in != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.ASSESSMENT_EMPLOYEE_ID,
					QueryCondition.in, assessmentEmployeeId_in));
		}
		if (assessmentName != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.ASSESSMENT_NAME, QueryCondition.eq,
					assessmentName));
		}
		if (assessmentName_like != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.ASSESSMENT_NAME, QueryCondition.like,
					assessmentName_like));
		}
		if (assessmentName_isNull != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.ASSESSMENT_NAME,
					QueryCondition.isNull, assessmentName_isNull));
		}
		if (assessmentName_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.ASSESSMENT_NAME,
					QueryCondition.isNotNull, assessmentName_isNotNull));
		}
		if (assessmentName_in != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.ASSESSMENT_NAME, QueryCondition.in,
					assessmentName_in));
		}
		if (taskStatus != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.TASK_STATUS, QueryCondition.eq,
					taskStatus));
		}
		if (taskStatus_gt != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.TASK_STATUS, QueryCondition.gt,
					taskStatus_gt));
		}
		if (taskStatus_ge != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.TASK_STATUS, QueryCondition.ge,
					taskStatus_ge));
		}
		if (taskStatus_lt != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.TASK_STATUS, QueryCondition.lt,
					taskStatus_lt));
		}
		if (taskStatus_le != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.TASK_STATUS, QueryCondition.le,
					taskStatus_le));
		}
		if (taskStatus_in != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.TASK_STATUS, QueryCondition.in,
					taskStatus_in));
		}
		if (auditPassTime_gt != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.AUDIT_PASS_TIME, QueryCondition.gt,
					auditPassTime_gt));
		}
		if (auditPassTime_ge != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.AUDIT_PASS_TIME, QueryCondition.ge,
					auditPassTime_ge));
		}
		if (auditPassTime_lt != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.AUDIT_PASS_TIME, QueryCondition.lt,
					auditPassTime_lt));
		}
		if (auditPassTime_le != null) {
			qc.andCondition(new QueryCondition(
					AssessmentTaskEntity.AUDIT_PASS_TIME, QueryCondition.le,
					auditPassTime_le));
		}
		return qc;
	}

}
