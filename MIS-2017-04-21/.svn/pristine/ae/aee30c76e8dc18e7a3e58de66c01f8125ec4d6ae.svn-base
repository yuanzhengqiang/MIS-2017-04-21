package fsk.handler.wechat;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.business.handler.BaseHandler;
import com.framework.system.common.service.SystemService;
import com.framework.system.db.query.OrderVO;

import fsk.entity.wechat.WechatEntity;
import fsk.pack.wechat.WechatPack;
import fsk.parse.wechat.WechatParse;
import fsk.service.wechat.WechatService;

 /**   
 * @Title: Handler
 * @Description: 微信信息表业务处理器
 * @author feng.gu
 * @date 2016-10-18 14:59:56
 * @version V1.0   
 *
 */
public class WechatHandler extends BaseHandler{
	private static Logger logger = Logger.getLogger(WechatService.class);
	/**
	 * 解析器
	 */
	private WechatParse wechatParse = WechatParse.getInstance();
	/**
	 * 业务处理器
	 */
	private WechatService wechatService = WechatService.getInstance();
	/**
	 * 封装器
	 */
	private WechatPack wechatPack = WechatPack.getInstance();

	private static WechatHandler wechatHandler;
	
	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static WechatHandler getInstance() {
		if (wechatHandler == null) {
			wechatHandler = new WechatHandler();
		}
		return wechatHandler;
	}

	/**
	 * 
	 * @param type 1-json 2-xml
	 * @param entityName
	 * @param command
	 * @param reqStr
	 * @param request
	 * @param response
	 */
	public String doHandler(int type,String command,String reqStr, HttpServletRequest request,
			HttpServletResponse response) {		
		logger.debug("请求消息："+reqStr);
		String resultStr="";
		try {
			// 解析
			Map<String, Object> parseMap = wechatParse.parse(type,command,reqStr,request);		
			String action = (String) parseMap.get("action");
			WechatEntity wechat = (WechatEntity) parseMap.get("wechat");
			List<WechatEntity> wechatList = (List<WechatEntity>) parseMap.get("wechatList");
			Integer id = (Integer) parseMap.get("id");			
			Map<String, Object> queryMap = (Map<String, Object>) parseMap.get("queryMap");
			int pageno = (Integer) parseMap.get("pageno");
			int pagesize = (Integer) parseMap.get("pagesize");
			List<OrderVO> orderList = (List<OrderVO>) parseMap.get("orderList");
			
						            Boolean olderListShow = (Boolean) parseMap.get("olderListShow");	
            Boolean delOlderWechatList = (Boolean) parseMap.get("delOlderWechatList");
																					
			// 业务处理
			Object result=null;
			if ("save".equals(action)) {
				//判断新增的用户是否已经存在，如果存在则使用原来的id
				if (wechat.getId() == null) {
					if (wechat.getOpenid() != null) {
						Map<String, Object> queryMapwe = new HashMap<String, Object>();
						queryMapwe.put("openid", wechat.getOpenid());
						List<WechatEntity> wechatListtt = wechatService
								.getListByCondition(queryMapwe);
						if (wechatListtt != null && wechatListtt.size() > 0) {
							WechatEntity entity = wechatListtt.get(0);
							wechat.setId(entity.getId());
						}
					}
				}
				result = wechatService.save(wechat);
			} else if ("saveList".equals(action)) {
				result = wechatService.saveList(wechatList);
			} else if ("getById".equals(action)) {
				result = wechatService.getById(id,olderListShow);
			} else if ("getListByCondition".equals(action)) {
			    //根据数据权限 增加查询条件
				queryMap = systemService.addDataRuleByRoles("WechatEntity",queryMap,request);
				result = wechatService.getListByCondition(queryMap,orderList, pageno,
						pagesize,olderListShow);
			} else if ("del".equals(action)) {
				result = wechatService.del(id,delOlderWechatList);
			} else if ("delList".equals(action)) {
				result = wechatService.delList(queryMap,delOlderWechatList);
			}
			// 封装
			Map<String, Object> packMap = wechatPack.pack(type,action,result,wechat);
			String actionBack = (String)packMap.get("action");
			String resultBack = (String)packMap.get("result");
			String desBack = (String)packMap.get("des");
			JSONObject pageBack = (JSONObject)packMap.get("page");
			JSONObject contentBack = (JSONObject)packMap.get("content");
			
			JSONObject repJson = new JSONObject();
			if(actionBack!=null&&!"".equals(actionBack)){
				repJson.put("action", actionBack);
			}
			if(resultBack!=null&&!"".equals(resultBack)){
				repJson.put("result", resultBack);
			}
			if(desBack!=null&&!"".equals(desBack)){
				repJson.put("des", desBack);
			}
			if(pageBack!=null){
				repJson.put("page", pageBack);
			}
			if(contentBack!=null&&!"".equals(contentBack)){
				repJson.put("content", contentBack);
			}
			logger.debug("返回消息："+repJson.toString());
			resultStr = repJson.toString();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error(e);
		}
		return resultStr;
	}
}
