package fsk.pack.employee;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import fsk.entity.employee.EmployeeEntity;
import fsk.entity.employeePositionalTitle.EmployeePositionalTitleEntity;
import fsk.entity.site.SiteEntity;
import fsk.entity.siteEmployee.SiteEmployeeEntity;
import fsk.entity.siteServiceArea.SiteServiceAreaEntity;
import fsk.service.employeePositionalTitle.EmployeePositionalTitleService;
import fsk.service.site.SiteService;
import fsk.service.siteEmployee.SiteEmployeeService;
import fsk.service.siteServiceArea.SiteServiceAreaService;

import com.framework.system.common.entity.dataDic.DataDicEntity;
import com.framework.system.common.entity.role.RoleEntity;
import com.framework.system.common.entity.user.UserEntity;
import com.framework.system.common.entity.userRole.UserRoleEntity;
import com.framework.system.common.service.dataDic.DataDicService;
import com.framework.system.common.service.role.RoleService;
import com.framework.system.common.service.user.UserService;
import com.framework.system.common.service.userRole.UserRoleService;
import com.framework.system.db.query.PageList;


/**
 * @Title: Pack
 * @Description: 员工信息表封装器
 * @author feng.gu
 * @date 2016-10-18 15:42:48
 * @version V1.0
 * 
 */
public class EmployeePack {
	private static Logger logger = Logger.getLogger(EmployeePack.class);
	private static EmployeePack employeePack;
	private static UserRoleService userRoleService = UserRoleService.getInstance();
	private static UserService userService=UserService.getInstance();
	private static RoleService roleService=RoleService.getInstance();
	private static EmployeePositionalTitleService employeePositionalTitleService=EmployeePositionalTitleService.getInstance();
	private static DataDicService dataDicService=DataDicService.getInstance();
	private static SiteEmployeeService siteEmployeeService = SiteEmployeeService.getInstance();
	 private static SiteService siteService =SiteService.getInstance();
	 private static SiteServiceAreaService siteServiceAreaService=SiteServiceAreaService.getInstance();
	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static EmployeePack getInstance() {
		if (employeePack == null) {
			employeePack = new EmployeePack();
		}
		return employeePack;
	}

	public Map<String, Object> pack(int type, String action, Object request,
			Object entity) {
		// 定义返回参数
		Map<String, Object> packMap = new HashMap<String, Object>();
		if (type == 1) {
			// json
			packMap = this.packByJson(action, request, entity);
		} else if (type == 2) {
			// xml
			packMap = this.packByXml(action, request, entity);
		}
		return packMap;
	}

	private Map<String, Object> packByJson(String action, Object request,
			Object entity) {
		// 定义返回参数
		Map<String, Object> packMap = new HashMap<String, Object>();
		String actionBack = null;
		String resultBack = null;
		String desBack = null;
		JSONObject pageBack = null;
		JSONObject contentBack = null;
		try {
			if ("save".equals(action)) {
				actionBack = "ADD_EMPLOYEE_INFO_RESPONSE";
				if (request.equals(true)) {
					resultBack = "100";
					desBack = "success";
				} else if (request.equals(false)) {
					resultBack = "200";
					desBack = "failure";
				}
				EmployeeEntity employee = (EmployeeEntity) entity;
				if (employee != null) {
					contentBack = new JSONObject();
					contentBack.put("id", employee.getId());

					if (employee.getUser() != null) {
						contentBack.put("userId", employee.getUser().getId());
					}
					if (employee.getLeaderEmployee() != null) {
						contentBack.put("leaderEmployeeId", employee
								.getLeaderEmployee().getId());
					}
					if (employee.getWechat() != null) {
						contentBack.put("wechatId", employee.getWechat()
								.getId());
					}
					if (employee.getFirstDepartment() != null) {
						contentBack.put("firstDepartmentId", employee
								.getFirstDepartment().getId());
					}
					if (employee.getSecondDepartment() != null) {
						contentBack.put("secondDepartmentId", employee
								.getSecondDepartment().getId());
					}
				}
			} else if ("getById".equals(action)) {
				actionBack = "QUERY_EMPLOYEE_INFO_RESPONSE";
				resultBack = "100";
				desBack = "success";
				EmployeeEntity employee = (EmployeeEntity) request;
				/*
				 * 增加角色职称
				 * peihouxuan
				 * */
				if (employee != null) {
					
					Integer userId = employee.getUserId();
					Integer employeeId = employee.getId();
					Map<String,Object> queryMap = new HashMap<String,Object>();
					queryMap.put("userId", userId);	
					List<UserRoleEntity> userRoleList = userRoleService.getListByCondition(queryMap);
					UserEntity userEntity = userService.getById(userId);
					String zhanghaoId = userEntity.getLoginname();
					String zhichengname = "";
					String siteStreetName = "";
					
					//服务站点
					Map<String,Object> queryMapSiteEmp = new HashMap<String,Object>();
					queryMapSiteEmp.put("employeeId", employeeId);
					List<SiteEmployeeEntity> siteEmpList = siteEmployeeService.getListByCondition(queryMapSiteEmp);
					String siteIds="";
					if(siteEmpList!=null&&siteEmpList.size()>0){
						for(int n =0;n<siteEmpList.size();n++){
							SiteEmployeeEntity siteEmployeeEntity = siteEmpList.get(n);
							if(n<siteEmpList.size()-1){
								siteIds = siteIds+siteEmployeeEntity.getSiteId()+",";
							}else{
								siteIds = siteIds+siteEmployeeEntity.getSiteId();
							}
						}
					}
					Map<String,Object> queryMapSiteArea = new HashMap<String,Object>();
					queryMapSiteArea.put("siteId_in", siteIds);
					List<SiteServiceAreaEntity> siteAreaList = siteServiceAreaService.getListByCondition(queryMapSiteArea);
					String siteAreaIds = "";
					if(siteAreaList!=null&&siteAreaList.size()>0){
						for(int l = 0;l<siteAreaList.size();l++){
							SiteServiceAreaEntity entityTemp = siteAreaList.get(l);
							if(l<siteAreaList.size()-1){
								siteAreaIds = siteAreaIds+entityTemp.getServiceStreetId()+",";
							}else{
								siteAreaIds = siteAreaIds+entityTemp.getServiceStreetId();
							}
						}
					}
					Map<String,Object> queryMapData = new HashMap<String,Object>();
					queryMapData.put("id_in", siteAreaIds);
					List<Object> dataDicList =dataDicService.getListByCondition(queryMapData);
					if(dataDicList!=null&&dataDicList.size()>0){
						for(int i =0;i<dataDicList.size();i++){
							DataDicEntity entity2 = (DataDicEntity)dataDicList.get(i);
							if(i<dataDicList.size()-1){
								siteStreetName = siteStreetName+entity2.getName()+",";
							}else{
								siteStreetName = siteStreetName+entity2.getName();
							}
						}
					}
					
					//职称
					
					Map<String,Object> queryMapemp = new HashMap<String,Object>();
					queryMapemp.put("employeeId", employeeId);	
					List<EmployeePositionalTitleEntity> employeePositionalTitleList = employeePositionalTitleService.getListByCondition(queryMapemp);        
					if(employeePositionalTitleList!=null&&employeePositionalTitleList.size()>0){
						String epids = "";
						for(int j =0;j<employeePositionalTitleList.size();j++){
							EmployeePositionalTitleEntity entitytemp = (EmployeePositionalTitleEntity)employeePositionalTitleList.get(j);
							if(j<employeePositionalTitleList.size()-1){
								epids = epids+String.valueOf(entitytemp.getPositionalTitleId())+",";
							}else{
								epids = epids+String.valueOf(entitytemp.getPositionalTitleId());
							}
						}
						Map<String,Object> queryMapdata = new HashMap<String,Object>();
						queryMapdata.put("id_in", epids);
						List<Object> dataList = dataDicService.getListByCondition(queryMapdata);
						if(dataList!=null&&dataList.size()>0){
							for(int n =0;n<dataList.size();n++){
								DataDicEntity dataDicEntity = (DataDicEntity)dataList.get(n);
								if(n<dataList.size()-1){
									zhichengname = zhichengname+dataDicEntity.getName()+",";
								}else{
									zhichengname = zhichengname+dataDicEntity.getName();
								}
							}
						}
						employee.setZhichengs(zhichengname);
						employee.setSiteStreetName(siteStreetName);
					}
					if(userRoleList!=null&&userRoleList.size()>0){
						UserRoleEntity userRoleEntity = userRoleList.get(0);
						employee.setRoleIds(String.valueOf(userRoleEntity.getRoleId()));
						employee.setZhanghaoId(zhanghaoId);
					}
					//角色
					Integer userIds = employee.getUserId();
					Map<String,Object> queryMapUserRole = new HashMap<String,Object>();
					queryMapUserRole.put("userId", userIds);
					List<UserRoleEntity> dataList = userRoleService.getListByCondition(queryMapUserRole);
					String ids = "";
					String rolrNam = "";
					if(dataList!=null&&dataList.size()>0){
						for(UserRoleEntity userRoleEntity:dataList){
							ids = ids+userRoleEntity.getRoleId()+",";
						}
						if(!"".equals(ids)){
							ids =ids.replaceAll(",,", ",");
							ids = ids.substring(0,ids.length()-1);
							Map<String,Object> queryMapRole = new HashMap<String,Object>();
							queryMapRole.put("id_in", ids);
							List<Object> dUserList = roleService.getListByCondition(queryMapRole);
							if(dUserList!=null&&dUserList.size()>0){
								for(int i =0;i< dUserList.size();i++){
									RoleEntity RovvdEntity = (RoleEntity)dUserList.get(i);
									rolrNam =rolrNam+RovvdEntity.getName()+",";
								}
								rolrNam =rolrNam.replaceAll(",,", ",");
								rolrNam = rolrNam.substring(0,rolrNam.length()-1);
							}
						}
					}
					employee.setRoleNames(rolrNam);
					employee.setRoleIds(ids);
					/*Integer roleId=0;
					try {
						roleId = Integer.parseInt(employee.getRoleIds());
					} catch (Exception e) {
					}
					if(roleId!=0){
					RoleEntity roleentity = roleService.getById(roleId);
							String ruleName = roleentity.getName();
							employee.setRoleNames(ruleName);
					}*/
					//
					contentBack = JSONObject.fromObject(employee);
					if (employee.getUser() != null) {
						contentBack.put("user",
								JSONObject.fromObject(employee.getUser()));
					}
					if (employee.getLeaderEmployee() != null) {
						contentBack.put("leaderEmployee", JSONObject
								.fromObject(employee.getLeaderEmployee()));
					}
					if (employee.getWechat() != null) {
						contentBack.put("wechat",
								JSONObject.fromObject(employee.getWechat()));
					}
					if (employee.getSiteList() != null) {
						contentBack.put("siteList",
								JSONArray.fromObject(employee.getSiteList()));
					}
					if (employee.getDataDicList() != null) {
						contentBack
								.put("dataDicList", JSONArray
										.fromObject(employee.getDataDicList()));
					}
					if (employee.getFirstDepartment() != null) {
						contentBack.put("firstDepartment", JSONObject
								.fromObject(employee.getFirstDepartment()));
					}
					if (employee.getSecondDepartment() != null) {
						contentBack.put("secondDepartment", JSONObject
								.fromObject(employee.getSecondDepartment()));
					}
				}
			} else if ("getListByCondition".equals(action)) {
				/*
				 * 增加角色、职称、所属站点
				 * peihouxuan
				 * */
				actionBack = "QUERY_EMPLOYEE_LIST_RESPONSE";
				resultBack = "100";
				desBack = "success";
				PageList pageList = (PageList) request;
				if (pageList != null && pageList.getResultList() != null
						&& pageList.getResultList().size() > 0) {
					contentBack = new JSONObject();
					pageBack = new JSONObject();
					JSONArray list = JSONArray.fromObject(pageList
							.getResultList());
					JSONArray liseNew = new JSONArray();
					
					if(pageList.getResultList()!=null&&pageList.getResultList().size()>0){
						for(int i =0;i<pageList.getResultList().size();i++){
							String zhichengname = "";
							String serviceSite = "";
							String siteStreetName = "";
							EmployeeEntity employeeEntity  = (EmployeeEntity)pageList.getResultList().get(i);
							Integer userId = employeeEntity.getUserId();
							Integer employeeId = employeeEntity.getId();
							Map<String,Object> queryMapemp = new HashMap<String,Object>();
							queryMapemp.put("employeeId", employeeId);	
							List<EmployeePositionalTitleEntity> employeePositionalTitleList = employeePositionalTitleService.getListByCondition(queryMapemp);        
							if(employeePositionalTitleList!=null&&employeePositionalTitleList.size()>0){
								String epids = "";
								for(int j =0;j<employeePositionalTitleList.size();j++){
									EmployeePositionalTitleEntity entitytemp = (EmployeePositionalTitleEntity)employeePositionalTitleList.get(j);
									if(j<employeePositionalTitleList.size()-1){
										epids = epids+String.valueOf(entitytemp.getPositionalTitleId())+",";
									}else{
										epids = epids+String.valueOf(entitytemp.getPositionalTitleId());
									}
								}
								//职称
								Map<String,Object> queryMapdata = new HashMap<String,Object>();
								queryMapdata.put("id_in", epids);
								List<Object> dataList = dataDicService.getListByCondition(queryMapdata);
								if(dataList!=null&&dataList.size()>0){
									for(int n =0;n<dataList.size();n++){
										DataDicEntity dataDicEntity = (DataDicEntity)dataList.get(n);
										if(n<dataList.size()-1){
											zhichengname = zhichengname+dataDicEntity.getName()+",";
										}else{
											zhichengname = zhichengname+dataDicEntity.getName();
										}
									}
								}
							}
							employeeEntity.setZhichengs(zhichengname);
							
							//服务站点
							Map<String,Object> queryMapSiteEmp = new HashMap<String,Object>();
							queryMapSiteEmp.put("employeeId", employeeId);
							List<SiteEmployeeEntity> siteEmpList = siteEmployeeService.getListByCondition(queryMapSiteEmp);
							String siteIds="";
							if(siteEmpList!=null&&siteEmpList.size()>0){
								for(int n =0;n<siteEmpList.size();n++){
									SiteEmployeeEntity siteEmployeeEntity = siteEmpList.get(n);
									if(n<siteEmpList.size()-1){
										siteIds = siteIds+siteEmployeeEntity.getSiteId()+",";
									}else{
										siteIds = siteIds+siteEmployeeEntity.getSiteId();
									}
								}
							}
							if("".equals(siteIds)){
								siteIds = "0";
							}
							Map<String,Object> queryMapSiteArea = new HashMap<String,Object>();
							queryMapSiteArea.put("siteId_in", siteIds);
							List<SiteServiceAreaEntity> siteAreaList = siteServiceAreaService.getListByCondition(queryMapSiteArea);
							String siteAreaIds = "";
							if(siteAreaList!=null&&siteAreaList.size()>0){
								for(int l = 0;l<siteAreaList.size();l++){
									SiteServiceAreaEntity entityTemp = siteAreaList.get(l);
									if(l<siteAreaList.size()-1){
										siteAreaIds = siteAreaIds+entityTemp.getServiceStreetId()+",";
									}else{
										siteAreaIds = siteAreaIds+entityTemp.getServiceStreetId();
									}
								}
							}
							if("".equals(siteAreaIds)){
								siteAreaIds = "0";
							}
							Map<String,Object> queryMapData = new HashMap<String,Object>();
							queryMapData.put("id_in", siteAreaIds);
							List<Object> dataDicList =dataDicService.getListByCondition(queryMapData);
							if(dataDicList!=null&&dataDicList.size()>0){
								for(int k =0;k<dataDicList.size();k++){
									DataDicEntity entity2 = (DataDicEntity)dataDicList.get(k);
									if(k<dataDicList.size()-1){
										siteStreetName = siteStreetName+entity2.getName()+",";
									}else{
										siteStreetName = siteStreetName+entity2.getName();
									}
								}
							}
							employeeEntity.setSiteStreetName(siteStreetName);
							//角色
							Map<String,Object> queryMap = new HashMap<String,Object>();
							queryMap.put("userId", userId);	
							List<UserRoleEntity> userRoleList = userRoleService.getListByCondition(queryMap);
							UserEntity userEntity = userService.getById(userId);
							String zhanghaoId = userEntity.getLoginname();
							
							
							if(userRoleList!=null&&userRoleList.size()>0){
								UserRoleEntity userRoleEntity = userRoleList.get(0);
								employeeEntity.setRoleIds(String.valueOf(userRoleEntity.getRoleId()));
								employeeEntity.setZhanghaoId(zhanghaoId);
								String ruleName="";
								for(int j =0;j<userRoleList.size();j++){
									UserRoleEntity userRoleEntity2 = userRoleList.get(j);
									Integer roleId = userRoleEntity2.getRoleId();
									RoleEntity roleentity = roleService.getById(roleId);
									if(j<userRoleList.size()-1){
										ruleName = ruleName+roleentity.getName()+",";
									}else{
										ruleName = ruleName+roleentity.getName();
									}
								}
								employeeEntity.setRoleNames(ruleName);
							}
							
							liseNew.add(employeeEntity);	
						}
					}
					contentBack.put("employeeList", liseNew);
					//

					pageBack.put("pageno", pageList.getPageno());
					pageBack.put("pagesize", pageList.getPagesize());
					pageBack.put("recordCount", pageList.getRecordCount());
					pageBack.put("pageCount", pageList.getPageCount());

				}
			} else if ("del".equals(action)) {
				actionBack = "DEL_EMPLOYEE_INFO_REQUEST";
				if (request.equals(true)) {
					resultBack = "100";
					desBack = "success";
				} else if (request.equals(false)) {
					resultBack = "200";
					desBack = "failure";
				}
			} else if ("delList".equals(action)) {
				actionBack = "DEL_EMPLOYEE_LIST_REQUEST";
				if (request.equals(true)) {
					resultBack = "100";
					desBack = "success";
				} else if (request.equals(false)) {
					resultBack = "200";
					desBack = "failure";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error(e);
		}
		if (actionBack != null && !"".equals(actionBack)) {
			packMap.put("action", actionBack);
		}
		if (resultBack != null && !"".equals(resultBack)) {
			packMap.put("result", resultBack);
		}
		if (desBack != null && !"".equals(desBack)) {
			packMap.put("des", desBack);
		}
		if (pageBack != null) {
			packMap.put("page", pageBack);
		}
		if (contentBack != null) {
			packMap.put("content", contentBack);
		}
		return packMap;
	}

	private Map<String, Object> packByXml(String action, Object request,
			Object entity) {
		Map<String, Object> packMap = new HashMap<String, Object>();
		return packMap;
	}

}
