package fsk.service.olderWechat;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

import fsk.entity.older.OlderEntity;
import fsk.entity.olderWechat.OlderWechatEntity;
import fsk.entity.wechat.WechatEntity;

/**
 * @Title: Service
 * @Description: 老人微信关联表服务类
 * @author feng.gu
 * @date 2016-09-08 13:47:47
 * @version V1.0
 * 
 */
public class OlderWechatService {
	private static Logger logger = Logger.getLogger(OlderWechatService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static OlderWechatService olderWechatService;

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static OlderWechatService getInstance() {
		if (olderWechatService == null) {
			olderWechatService = new OlderWechatService();
		}
		return olderWechatService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(OlderWechatEntity olderWechat) {
		boolean result = false;
		if (olderWechat != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 关联信息保存
				OlderEntity older = olderWechat.getOlder();
				if (older != null) {
					dbManager.saveNoTransaction(older);
					olderWechat.setOlderId(older.getId());
				}
				// 关联信息保存
				WechatEntity wechat = olderWechat.getWechat();
				if (wechat != null) {
					dbManager.saveNoTransaction(wechat);
					olderWechat.setWechatId(wechat.getId());
				}
				result = dbManager.saveNoTransaction(olderWechat);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(List<OlderWechatEntity> olderWechatList) {
		boolean result = false;
		if (olderWechatList != null && olderWechatList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (OlderWechatEntity olderWechat : olderWechatList) {
					if (olderWechat != null) {
						// 关联信息保存
						OlderEntity older = olderWechat.getOlder();
						if (older != null) {
							dbManager.saveNoTransaction(older);
							olderWechat.setOlderId(older.getId());
						}
						// 关联信息保存
						WechatEntity wechat = olderWechat.getWechat();
						if (wechat != null) {
							dbManager.saveNoTransaction(wechat);
							olderWechat.setWechatId(wechat.getId());
						}
						result = dbManager.saveNoTransaction(olderWechat);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public OlderWechatEntity getById(Integer id) {
		OlderWechatEntity obj = null;
		if (id != null) {
			obj = (OlderWechatEntity) dbManager.getById(id,
					OlderWechatEntity.class);
		}
		return obj;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param olderShow
	 *            是否查询关联信息
	 * @param wechatShow
	 *            是否查询关联信息
	 * @param obj
	 */
	public OlderWechatEntity getById(Integer id, Boolean olderShow,
			Boolean wechatShow) {
		OlderWechatEntity obj = null;
		if (id != null) {
			obj = (OlderWechatEntity) dbManager.getById(id,
					OlderWechatEntity.class);
			// 查询关联内容
			if (olderShow != null && olderShow.booleanValue() && obj != null
					&& obj.getOlderId() != null && obj.getOlderId() > 0) {
				OlderEntity older = (OlderEntity) dbManager.getById(
						obj.getOlderId(), OlderEntity.class);
				obj.setOlder(older);
			}
			// 查询关联内容
			if (wechatShow != null && wechatShow.booleanValue() && obj != null
					&& obj.getWechatId() != null && obj.getWechatId() > 0) {
				WechatEntity wechat = (WechatEntity) dbManager.getById(
						obj.getWechatId(), WechatEntity.class);
				obj.setWechat(wechat);
			}
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<OlderWechatEntity> getListByCondition(
			Map<String, Object> queryMap) {
		List<OlderWechatEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		list = dbManager.queryByCondition(OlderWechatEntity.class, qc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<OlderWechatEntity>();
			for (Object obj : list) {
				returnlist.add((OlderWechatEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param olderShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param wechatShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public List<OlderWechatEntity> getListByCondition(
			Map<String, Object> queryMap, List<OrderVO> orderList,
			Boolean olderShow, Boolean wechatShow) {
		List<OlderWechatEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(OlderWechatEntity.class, qc, oc);
		int a = 0;
		if (olderShow != null && olderShow.booleanValue()) {
			a++;
		}
		if (wechatShow != null && wechatShow.booleanValue()) {
			a++;
		}
		if (a > 0 && list != null && list.size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < list.size(); i++) {
				OlderWechatEntity obj = (OlderWechatEntity) list.get(i);
				// 查询关联内容
				if (olderShow != null && olderShow.booleanValue()
						&& obj != null && obj.getOlderId() != null
						&& obj.getOlderId() > 0) {
					OlderEntity older = (OlderEntity) dbManager.getById(
							obj.getOlderId(), OlderEntity.class);
					obj.setOlder(older);
				}
				// 查询关联内容
				if (wechatShow != null && wechatShow.booleanValue()
						&& obj != null && obj.getWechatId() != null
						&& obj.getWechatId() > 0) {
					WechatEntity wechat = (WechatEntity) dbManager.getById(
							obj.getWechatId(), WechatEntity.class);
					obj.setWechat(wechat);
				}
				result.add(obj);
			}
			list = result;
		}
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<OlderWechatEntity>();
			for (Object obj : list) {
				returnlist.add((OlderWechatEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		pagelist = dbManager.queryByCondition(OlderWechatEntity.class, qc,
				pageno, pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @param olderShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param wechatShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, int pageno, int pagesize,
			Boolean olderShow, Boolean wechatShow) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		// 数据权限
		List<QueryCondition> dataRuleQclist = null;
		List<Map<String, Object>> dataRuleMapList = (List<Map<String, Object>>) queryMap
				.get("dataRuleMapList");
		if (dataRuleMapList != null && dataRuleMapList.size() > 0) {
			dataRuleQclist = new ArrayList<QueryCondition>();
			for (Map<String, Object> dataRuleMap : dataRuleMapList) {
				QueryCondition dataRuleQc = changeMapToQc(dataRuleMap);
				dataRuleQclist.add(dataRuleQc);
			}
		}
		pagelist = dbManager.queryByConditions(OlderWechatEntity.class, qc,
				dataRuleQclist, oc, pageno, pagesize);
		int a = 0;
		if (olderShow != null && olderShow.booleanValue()) {
			a++;
		}
		if (wechatShow != null && wechatShow.booleanValue()) {
			a++;
		}
		if (a > 0 && pagelist != null && pagelist.getResultList() != null
				&& pagelist.getResultList().size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < pagelist.getResultList().size(); i++) {
				OlderWechatEntity obj = (OlderWechatEntity) pagelist
						.getResultList().get(i);
				// 查询关联内容
				if (olderShow != null && olderShow.booleanValue()
						&& obj != null && obj.getOlderId() != null
						&& obj.getOlderId() > 0) {
					OlderEntity older = (OlderEntity) dbManager.getById(
							obj.getOlderId(), OlderEntity.class);
					obj.setOlder(older);
				}
				// 查询关联内容
				if (wechatShow != null && wechatShow.booleanValue()
						&& obj != null && obj.getWechatId() != null
						&& obj.getWechatId() > 0) {
					WechatEntity wechat = (WechatEntity) dbManager.getById(
							obj.getWechatId(), WechatEntity.class);
					obj.setWechat(wechat);
				}
				result.add(obj);
			}
			pagelist.setResultList(result);
		}
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id, Boolean delOlder, Boolean delWechat) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delOlder != null && delOlder.booleanValue()) {
					OlderWechatEntity olderWechat = (OlderWechatEntity) dbManager
							.getById(id, OlderWechatEntity.class);
					if (olderWechat != null && olderWechat.getOlderId() != null) {
						dbManager.delNoTransaction(olderWechat.getOlderId(),
								OlderEntity.class);
					}
				}
				// 删除关联信息
				if (delWechat != null && delWechat.booleanValue()) {
					OlderWechatEntity olderWechat = (OlderWechatEntity) dbManager
							.getById(id, OlderWechatEntity.class);
					if (olderWechat != null
							&& olderWechat.getWechatId() != null) {
						dbManager.delNoTransaction(olderWechat.getWechatId(),
								WechatEntity.class);
					}
				}
				result = dbManager
						.delNoTransaction(id, OlderWechatEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(OlderWechatEntity.ID,
						QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(
						OlderWechatEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap, Boolean delOlder,
			Boolean delWechat) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delOlder != null && delOlder.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									OlderWechatEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							OlderWechatEntity entity = (OlderWechatEntity) obj;
							strIds += entity.getOlderId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(OlderEntity.ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								OlderEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delWechat != null && delWechat.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									OlderWechatEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							OlderWechatEntity entity = (OlderWechatEntity) obj;
							strIds += entity.getWechatId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								WechatEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								WechatEntity.class, qc1);
					}

				}
				result = dbManager.delByConditionsNoTransaction(
						OlderWechatEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	private QueryCondition changeMapToQc(Map<String, Object> queryMap) {
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object olderId = queryMap.get("olderId");
		Object olderId_gt = queryMap.get("olderId_gt");
		Object olderId_ge = queryMap.get("olderId_ge");
		Object olderId_lt = queryMap.get("olderId_lt");
		Object olderId_le = queryMap.get("olderId_le");
		Object olderId_in = queryMap.get("olderId_in");
		Object wechatId = queryMap.get("wechatId");
		Object wechatId_gt = queryMap.get("wechatId_gt");
		Object wechatId_ge = queryMap.get("wechatId_ge");
		Object wechatId_lt = queryMap.get("wechatId_lt");
		Object wechatId_le = queryMap.get("wechatId_le");
		Object wechatId_in = queryMap.get("wechatId_in");
		Object addTime_gt = queryMap.get("addTime_gt");
		Object addTime_ge = queryMap.get("addTime_ge");
		Object addTime_lt = queryMap.get("addTime_lt");
		Object addTime_le = queryMap.get("addTime_le");

		QueryCondition qc = new QueryCondition(OlderWechatEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.ID,
					QueryCondition.in, id_in));
		}
		if (olderId != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.OLDER_ID,
					QueryCondition.eq, olderId));
		}
		if (olderId_gt != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.OLDER_ID,
					QueryCondition.gt, olderId_gt));
		}
		if (olderId_ge != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.OLDER_ID,
					QueryCondition.ge, olderId_ge));
		}
		if (olderId_lt != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.OLDER_ID,
					QueryCondition.lt, olderId_lt));
		}
		if (olderId_le != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.OLDER_ID,
					QueryCondition.le, olderId_le));
		}
		if (olderId_in != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.OLDER_ID,
					QueryCondition.in, olderId_in));
		}
		if (wechatId != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.WECHAT_ID,
					QueryCondition.eq, wechatId));
		}
		if (wechatId_gt != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.WECHAT_ID,
					QueryCondition.gt, wechatId_gt));
		}
		if (wechatId_ge != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.WECHAT_ID,
					QueryCondition.ge, wechatId_ge));
		}
		if (wechatId_lt != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.WECHAT_ID,
					QueryCondition.lt, wechatId_lt));
		}
		if (wechatId_le != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.WECHAT_ID,
					QueryCondition.le, wechatId_le));
		}
		if (wechatId_in != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.WECHAT_ID,
					QueryCondition.in, wechatId_in));
		}
		if (addTime_gt != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.ADD_TIME,
					QueryCondition.gt, addTime_gt));
		}
		if (addTime_ge != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.ADD_TIME,
					QueryCondition.ge, addTime_ge));
		}
		if (addTime_lt != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.ADD_TIME,
					QueryCondition.lt, addTime_lt));
		}
		if (addTime_le != null) {
			qc.andCondition(new QueryCondition(OlderWechatEntity.ADD_TIME,
					QueryCondition.le, addTime_le));
		}
		return qc;
	}

}
