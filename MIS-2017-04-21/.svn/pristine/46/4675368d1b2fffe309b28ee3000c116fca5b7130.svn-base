package fsk.pack.older;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.common.service.dataDic.DataDicService;
import com.framework.system.db.query.PageList;

import fsk.entity.older.OlderEntity;
import fsk.entity.site.SiteEntity;
import fsk.entity.siteServiceArea.SiteServiceAreaEntity;
import fsk.service.site.SiteService;
import fsk.service.siteServiceArea.SiteServiceAreaService;

/**
 * @Title: Pack
 * @Description: 老人信息表封装器
 * @author feng.gu
 * @date 2017-03-06 10:55:24
 * @version V1.0
 * 
 */
public class OlderPack {
	private static Logger logger = Logger.getLogger(OlderPack.class);
	private static OlderPack olderPack;
	private static DataDicService dataDicService = DataDicService.getInstance();
	private static SiteServiceAreaService siteServiceAreaService = SiteServiceAreaService.getInstance();
	private static SiteService siteService = SiteService.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static OlderPack getInstance() {
		if (olderPack == null) {
			olderPack = new OlderPack();
		}
		return olderPack;
	}

	public Map<String, Object> pack(int type, String action, Object request, Object entity) {
		// 定义返回参数
		Map<String, Object> packMap = new HashMap<String, Object>();
		if (type == 1) {
			// json
			packMap = this.packByJson(action, request, entity);
		} else if (type == 2) {
			// xml
			packMap = this.packByXml(action, request, entity);
		}
		return packMap;
	}

	private Map<String, Object> packByJson(String action, Object request, Object entity) {
		// 定义返回参数
		Map<String, Object> packMap = new HashMap<String, Object>();
		String actionBack = null;
		String resultBack = null;
		String desBack = null;
		JSONObject pageBack = null;
		JSONObject contentBack = null;
		try {
			if ("save".equals(action)) {
				actionBack = "ADD_OLDER_INFO_RESPONSE";
				if (request.equals(true)) {
					resultBack = "100";
					desBack = "success";
				} else if (request.equals(false)) {
					resultBack = "200";
					desBack = "failure";
				}
				OlderEntity older = (OlderEntity) entity;
				if (older != null) {
					contentBack = new JSONObject();
					contentBack.put("id", older.getId());

					if (older.getUser() != null) {
						contentBack.put("userId", older.getUser().getId());
					}
					if (older.getNurseEmployee() != null) {
						contentBack.put("nurseEmployeeId", older.getNurseEmployee().getId());
					}
				}
			} else if ("getById".equals(action)) {
				actionBack = "QUERY_OLDER_INFO_RESPONSE";
				resultBack = "100";
				desBack = "success";
				OlderEntity older = (OlderEntity) request;
				if (older != null) {
					contentBack = JSONObject.fromObject(older);
					// 增加站点名 pei
					String siteName = "";
					String siteId = "";
					Integer streetId = older.getServiceStreetId();
					if (streetId != null) {
						Map<String, Object> queryMapsite = new HashMap<String, Object>();
						queryMapsite.put("serviceStreetId", streetId);
						List<SiteServiceAreaEntity> sitelist = siteServiceAreaService.getListByCondition(queryMapsite);
						if (sitelist != null && sitelist.size() > 0) {
							for (int i = 0; i < sitelist.size(); i++) {
								SiteServiceAreaEntity entitytemp = sitelist.get(i);
								Integer idt = entitytemp.getSiteId();
								SiteEntity entitySite = siteService.getById(idt);
								if (entitySite != null) {
									siteName = siteName + entitySite.getName() + ",";
									siteId = siteId + entitySite.getId() + ",";
								}

							}
						}
						if (!"".equals(siteName)) {
							siteName = siteName.replaceAll(",,", ",");
							siteName = siteName.substring(0, siteName.length() - 1);
							siteId = siteId.replaceAll(",,", ",");
							siteId = siteId.substring(0, siteId.length() - 1);
						}

					}

					contentBack.put("siteId", siteId);
					contentBack.put("siteName", siteName);
					// pei JSONArray
					if (older.getUser() != null) {
						contentBack.put("user", JSONObject.fromObject(older.getUser()));
					}
					if (older.getNurseEmployee() != null) {
						contentBack.put("nurseEmployee", JSONObject.fromObject(older.getNurseEmployee()));
					}
					if (older.getOlderSiteList() != null) {
						contentBack.put("OlderSiteList", JSONArray.fromObject(older.getOlderSiteList()));
					}
					if (older.getOlderAddressList() != null) {
						contentBack.put("olderAddressList", JSONArray.fromObject(older.getOlderAddressList()));
					}
					if (older.getOlderContactList() != null) {
						contentBack.put("olderContactList", JSONArray.fromObject(older.getOlderContactList()));
					}
					if (older.getCaseRecordList() != null) {
						contentBack.put("caseRecordList", JSONArray.fromObject(older.getCaseRecordList()));
					}
					if (older.getDailyLifeList() != null) {
						contentBack.put("dailyLifeList", JSONArray.fromObject(older.getDailyLifeList()));
					}
					if (older.getEmployeeList() != null) {
						contentBack.put("employeeList", JSONArray.fromObject(older.getEmployeeList()));
					}
				}
			} else if ("getListByCondition".equals(action)) {
				actionBack = "QUERY_OLDER_LIST_RESPONSE";
				resultBack = "100";
				desBack = "success";
				PageList pageList = (PageList) request;
				if (pageList != null && pageList.getResultList() != null && pageList.getResultList().size() > 0) {
					contentBack = new JSONObject();
					pageBack = new JSONObject();
					JSONArray list = JSONArray.fromObject(pageList.getResultList());
					// 增加站点名称 pei

					JSONArray listnew = new JSONArray();
					if (list != null && list.size() > 0) {
						for (int i = 0; i < list.size(); i++) {
							String siteName = "";
							JSONObject olderlistinfo = (JSONObject) list.getJSONObject(i);
							Integer streetId = olderlistinfo.getInt("serviceStreetId");
							Map<String, Object> queryMapsite = new HashMap<String, Object>();
							queryMapsite.put("serviceStreetId", streetId);
							List<SiteServiceAreaEntity> sitelist = siteServiceAreaService.getListByCondition(queryMapsite);
							if (sitelist != null && sitelist.size() > 0) {
								for (int j = 0; j < sitelist.size(); j++) {
									SiteServiceAreaEntity entitytemp = sitelist.get(j);
									Integer idt = entitytemp.getSiteId();
									SiteEntity entitySite = siteService.getById(idt);
									if (entitySite != null) {
										siteName = siteName + entitySite.getName() + ",";
									}
								}
							}
							if (!"".equals(siteName)) {
								siteName = siteName.replaceAll(",,", ",");
								siteName = siteName.substring(0, siteName.length() - 1);
							}
							olderlistinfo.put("siteName", siteName);
							listnew.add(olderlistinfo);
						}
					}
					contentBack.put("olderList", listnew);
					//
					contentBack.put("olderList", list);

					pageBack.put("pageno", pageList.getPageno());
					pageBack.put("pagesize", pageList.getPagesize());
					pageBack.put("recordCount", pageList.getRecordCount());
					pageBack.put("pageCount", pageList.getPageCount());

				}
			} else if ("del".equals(action)) {
				actionBack = "DEL_OLDER_INFO_REQUEST";
				if (request.equals(true)) {
					resultBack = "100";
					desBack = "success";
				} else if (request.equals(false)) {
					resultBack = "200";
					desBack = "failure";
				}
			} else if ("delList".equals(action)) {
				actionBack = "DEL_OLDER_LIST_REQUEST";
				if (request.equals(true)) {
					resultBack = "100";
					desBack = "success";
				} else if (request.equals(false)) {
					resultBack = "200";
					desBack = "failure";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error(e);
		}
		if (actionBack != null && !"".equals(actionBack)) {
			packMap.put("action", actionBack);
		}
		if (resultBack != null && !"".equals(resultBack)) {
			packMap.put("result", resultBack);
		}
		if (desBack != null && !"".equals(desBack)) {
			packMap.put("des", desBack);
		}
		if (pageBack != null) {
			packMap.put("page", pageBack);
		}
		if (contentBack != null) {
			packMap.put("content", contentBack);
		}
		return packMap;
	}

	private Map<String, Object> packByXml(String action, Object request, Object entity) {
		Map<String, Object> packMap = new HashMap<String, Object>();
		return packMap;
	}

}
