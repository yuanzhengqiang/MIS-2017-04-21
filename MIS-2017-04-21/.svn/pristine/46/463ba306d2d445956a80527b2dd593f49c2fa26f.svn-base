package fsk.controller.older;

import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.framework.system.common.entity.module.ModuleEntity;
import com.framework.system.common.service.SystemService;
import com.framework.system.util.JsonUtil;

import fsk.entity.employee.EmployeeEntity;
import fsk.entity.olderAddress.OlderAddressEntity;
import fsk.handler.older.OlderHandler;
import fsk.handler.physiologicalParametersCurrent.PhysiologicalParametersCurrentHandler;
import fsk.handler.physiologicalParametersHistory.PhysiologicalParametersHistoryHandler;
import fsk.handler.softInfo.SoftInfoHandler;
import fsk.init.SystemInit;
import fsk.service.employee.EmployeeService;
import fsk.service.older.OlderService;
import fsk.service.olderAddress.OlderAddressService;

@RequestMapping("/daeOlder")
@Controller
public class DetailsAndEditOlderController {
	private static Logger logger = Logger
			.getLogger(DetailsAndEditOlderController.class);
	/**
	 * 处理器
	 */
	private OlderHandler olderHandler = OlderHandler.getInstance();
	private PhysiologicalParametersCurrentHandler physiologicalParametersCurrentHandler = PhysiologicalParametersCurrentHandler
			.getInstance();
	private PhysiologicalParametersHistoryHandler physiologicalParametersHistoryHandler = PhysiologicalParametersHistoryHandler
			.getInstance();
	/**
	 * 服务类
	 */
	private OlderService olderService = OlderService.getInstance();
	private EmployeeService employeeService = EmployeeService.getInstance();
	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();
	private SoftInfoHandler softInfoHandler = SoftInfoHandler.getInstance();

	/**
	 * 老人详情概览页面
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "main")
	public ModelAndView center(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/older/DetailsAndEditOlder");
		Integer userId = (Integer) request.getSession().getAttribute("userId");// 登录用户ID
		String olderId = request.getParameter("id");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService
					.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService
						.getHTMLModulesByRoleIdsAndModuleId(roleIds,
								htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("userId", userId);
		mav.addObject("olderId", olderId);
		return mav;
	}

	/**
	 * 基本信息页签
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "older_essentialInformation")
	public ModelAndView essentialInformation(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView(
				"/fsk/older/older_EssentialInformation");
		String olderId = request.getParameter("olderId");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService
					.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService
						.getHTMLModulesByRoleIdsAndModuleId(roleIds,
								htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("olderId", olderId);
		return mav;
	}

	/**
	 * 日常生活页签
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "older_dailyLife")
	public ModelAndView dailyLife(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/older/older_DailyLife");
		Integer userId = (Integer) request.getSession().getAttribute("userId");// 登录用户ID
		String olderId = request.getParameter("olderId");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService
					.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService
						.getHTMLModulesByRoleIdsAndModuleId(roleIds,
								htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("userId", userId);
		mav.addObject("olderId", olderId);
		return mav;
	}

	/**
	 * 历史服务页签
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "older_historicalService")
	public ModelAndView historicalService(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView(
				"/fsk/older/older_HistoricalService");
		Integer userId = (Integer) request.getSession().getAttribute("userId");// 登录用户ID
		String olderId = request.getParameter("olderId");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService
					.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService
						.getHTMLModulesByRoleIdsAndModuleId(roleIds,
								htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("userId", userId);
		mav.addObject("olderId", olderId);
		return mav;
	}

	/**
	 * 设备信息页签
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "older_equipmentInformation")
	public ModelAndView equipmentInformation(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView(
				"/fsk/older/older_EquipmentInformation");
		String olderId = request.getParameter("olderId");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService
					.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService
						.getHTMLModulesByRoleIdsAndModuleId(roleIds,
								htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("olderId", olderId);
		return mav;
	}

	/**
	 * 生理参数页签
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "older_physiologicalParameters")
	public ModelAndView physiologicalParameters(HttpServletRequest request) {
		ModelAndView mav = null;
		if (SystemInit.ecgpage != null) {
			mav = new ModelAndView("/fsk/older/" + SystemInit.ecgpage);
		} else {
			mav = new ModelAndView("/fsk/older/older_PhysiologicalParameters");
		}
		Integer userId = (Integer) request.getSession().getAttribute("userId");// 登录用户ID
		String olderId = request.getParameter("olderId");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService
					.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService
						.getHTMLModulesByRoleIdsAndModuleId(roleIds,
								htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("userId", userId);
		mav.addObject("olderId", olderId);
		return mav;
	}

	/**
	 * 健康评估页签
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "older_healthAssessment")
	public ModelAndView healthAssessment(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/older/older_HealthAssessment");
		String olderId = request.getParameter("olderId");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService
					.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService
						.getHTMLModulesByRoleIdsAndModuleId(roleIds,
								htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("olderId", olderId);
		return mav;
	}

	/**
	 * 病例页签
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "older_case")
	public ModelAndView cases(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/older/older_Case");
		Integer userId = (Integer) request.getSession().getAttribute("userId");// 登录用户ID
		String olderId = request.getParameter("olderId");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService
					.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService
						.getHTMLModulesByRoleIdsAndModuleId(roleIds,
								htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("userId", userId);
		mav.addObject("olderId", olderId);
		return mav;
	}

	/**
	 * 体检记录页签
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "older_peRecord")
	public ModelAndView peRecord(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/older/older_PERecord");
		String olderId = request.getParameter("olderId");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService
					.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService
						.getHTMLModulesByRoleIdsAndModuleId(roleIds,
								htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("olderId", olderId);
		return mav;
	}

	/**
	 * 服药提醒页签
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "older_medPlanList")
	public ModelAndView medPlanList(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/older/older_MedPlanList");
		String olderId = request.getParameter("olderId");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService
					.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService
						.getHTMLModulesByRoleIdsAndModuleId(roleIds,
								htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("olderId", olderId);
		return mav;
	}

	/**
	 * 账户余额页签
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "older_accountBalance")
	public ModelAndView accountBalance(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/older/older_AccountBalance");
		String olderId = request.getParameter("olderId");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService
					.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService
						.getHTMLModulesByRoleIdsAndModuleId(roleIds,
								htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("olderId", olderId);
		return mav;
	}

	/**
	 * 健康咨询页签
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "older_healthConsultation")
	public ModelAndView healthConsultation(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView(
				"/fsk/older/older_HealthConsultation");
		String olderId = request.getParameter("olderId");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService
					.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService
						.getHTMLModulesByRoleIdsAndModuleId(roleIds,
								htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("olderId", olderId);
		return mav;
	}

	/**
	 * 慢病标签页签
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "older_chronicDiseaseLabel")
	public ModelAndView chronicDiseaseLabel(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView(
				"/fsk/older/older_ChronicDiseaseLabel");
		String olderId = request.getParameter("olderId");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService
					.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService
						.getHTMLModulesByRoleIdsAndModuleId(roleIds,
								htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("olderId", olderId);
		return mav;
	}

	/**
	 * 回访记录页签
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "older_reviewHistory")
	public ModelAndView reviewHistory(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/older/older_ReviewHistory");
		String olderId = request.getParameter("olderId");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService
					.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService
						.getHTMLModulesByRoleIdsAndModuleId(roleIds,
								htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("olderId", olderId);
		return mav;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handler")
	@ResponseBody
	public String query(HttpServletRequest request, HttpServletResponse response) {

		String msg = "";
		try {
			String reqmsg = request.getParameter("reqmsg");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return msg;
			}
			String action = (String) reqParams.get("action");
			String rep = olderHandler.doHandler(1, action, reqmsg, request,
					response);
			msg = new String(rep.getBytes("utf-8"), "iso-8859-1");
		} catch (Exception e) {
			logger.error(e.toString());
		}

		return msg;
	}

	/**
	 * 根据角色名获取对应角色所有账号ID
	 */
	@RequestMapping(params = "getUserIdsByRoleName")
	@ResponseBody
	public String getUserIdsByRoleName(String RoleName) {
		String name = "";
		String id = "";
		String userIds = systemService.getUserIdsByRoleName(RoleName);
		Map<String, Object> query = new HashMap<String, Object>();
		query.put("userId_in", userIds);
		List<EmployeeEntity> employeeEntity = employeeService
				.getListByCondition(query);
		if (employeeEntity != null && employeeEntity.size() > 0) {
			for (EmployeeEntity employee : employeeEntity) {
				name = name + employee.getName() + ",";
				name = name.replaceAll(",,", ",");
				id = id + employee.getId() + ",";
				id = id.replaceAll(",,", ",");
			}
			if (name.length() > 0) {
				name = name.substring(0, name.length() - 1);
			}
			if (id.length() > 0) {
				id = id.substring(0, id.length() - 1);
			}
		}

		JSONObject jsonResult = new JSONObject();
		jsonResult.put("id", id);
		jsonResult.put("name", name);
		jsonResult.put("des", "success");
		String json2return = jsonResult.toString();

		try {
			json2return = new String(json2return.getBytes("utf-8"),
					"iso-8859-1");
		} catch (UnsupportedEncodingException e) {

		}
		return json2return;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handler_Currentslcs")
	@ResponseBody
	public String query_Currentslcs(HttpServletRequest request,
			HttpServletResponse response) {

		String msg = "";
		try {
			String reqmsg = request.getParameter("reqmsg");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return msg;
			}
			String action = (String) reqParams.get("action");
			String rep = physiologicalParametersCurrentHandler.doHandler(1,
					action, reqmsg, request, response);
			msg = new String(rep.getBytes("utf-8"), "iso-8859-1");
		} catch (Exception e) {
			logger.error(e.toString());
		}

		return msg;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handler_Historyslcs")
	@ResponseBody
	public String query_Historyslcs(HttpServletRequest request,
			HttpServletResponse response) {

		String msg = "";
		try {
			String reqmsg = request.getParameter("reqmsg");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return msg;
			}
			String action = (String) reqParams.get("action");
			String rep = physiologicalParametersHistoryHandler.doHandler(1,
					action, reqmsg, request, response);
			msg = new String(rep.getBytes("utf-8"), "iso-8859-1");
		} catch (Exception e) {
			logger.error(e.toString());
		}

		return msg;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handlercontent")
	public void queryApp(HttpServletRequest request,
			HttpServletResponse response) {
		try {
			InputStream is = request.getInputStream();
			byte[] bis = IOUtils.toByteArray(is);
			String reqmsg = new String(bis, "UTF-8");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return;
			}
			String action = (String) reqParams.get("action");
			String rep = olderHandler.doHandler(1, action, reqmsg, request,
					response);
			OutputStream os = response.getOutputStream();
			os.write(rep.toString().getBytes("UTF-8"));
		} catch (Exception e) {
			logger.error(e.toString());
		}
	}
}
