package fsk.handler.examinationRecord;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.business.handler.BaseHandler;
import com.framework.system.common.service.SystemService;
import com.framework.system.db.query.OrderVO;

import fsk.entity.examinationData.ExaminationDataEntity;
import fsk.entity.examinationRecord.ExaminationRecordEntity;
import fsk.pack.examinationRecord.ExaminationRecordPack;
import fsk.parse.examinationRecord.ExaminationRecordParse;
import fsk.service.examinationData.ExaminationDataService;
import fsk.service.examinationDataFile.ExaminationDataFileService;
import fsk.service.examinationDataPhoto.ExaminationDataPhotoService;
import fsk.service.examinationRecord.ExaminationRecordService;
import fsk.service.examinationRecordFile.ExaminationRecordFileService;
import fsk.service.examinationRecordPhoto.ExaminationRecordPhotoService;

/**
 * @Title: Handler
 * @Description: 体检记录信息表业务处理器
 * @author feng.gu
 * @date 2016-10-11 15:23:10
 * @version V1.0
 * 
 */
public class ExaminationRecordHandler extends BaseHandler {
	private static Logger logger = Logger.getLogger(ExaminationRecordService.class);
	/**
	 * 解析器
	 */
	private ExaminationRecordParse examinationRecordParse = ExaminationRecordParse.getInstance();
	/**
	 * 业务处理器
	 */
	private ExaminationRecordService examinationRecordService = ExaminationRecordService.getInstance();
	private static ExaminationRecordPhotoService examinationRecordPhotoService = ExaminationRecordPhotoService.getInstance();
	private ExaminationDataService examinationDataService = ExaminationDataService.getInstance();
	private ExaminationDataFileService examinationDataFileService = ExaminationDataFileService.getInstance();
	private ExaminationDataPhotoService examinationDataPhotoService = ExaminationDataPhotoService.getInstance();
	private ExaminationRecordFileService examinationRecordFileService = ExaminationRecordFileService.getInstance();
	/**
	 * 封装器
	 */
	private ExaminationRecordPack examinationRecordPack = ExaminationRecordPack.getInstance();

	private static ExaminationRecordHandler examinationRecordHandler;

	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static ExaminationRecordHandler getInstance() {
		if (examinationRecordHandler == null) {
			examinationRecordHandler = new ExaminationRecordHandler();
		}
		return examinationRecordHandler;
	}

	/**
	 * 
	 * @param type
	 *            1-json 2-xml
	 * @param entityName
	 * @param command
	 * @param reqStr
	 * @param request
	 * @param response
	 */
	public String doHandler(int type, String command, String reqStr, HttpServletRequest request, HttpServletResponse response) {
		logger.debug("请求消息：" + reqStr);
		String resultStr = "";
		try {
			// 解析
			Map<String, Object> parseMap = examinationRecordParse.parse(type, command, reqStr, request);
			String action = (String) parseMap.get("action");
			ExaminationRecordEntity examinationRecord = (ExaminationRecordEntity) parseMap.get("examinationRecord");
			List<ExaminationRecordEntity> examinationRecordList = (List<ExaminationRecordEntity>) parseMap.get("examinationRecordList");
			Integer id = (Integer) parseMap.get("id");
			Map<String, Object> queryMap = (Map<String, Object>) parseMap.get("queryMap");
			int pageno = (Integer) parseMap.get("pageno");
			int pagesize = (Integer) parseMap.get("pagesize");
			List<OrderVO> orderList = (List<OrderVO>) parseMap.get("orderList");

			Boolean olderShow = (Boolean) parseMap.get("olderShow");
			Boolean delOlder = (Boolean) parseMap.get("delOlder");
			Boolean createEmployeeShow = (Boolean) parseMap.get("createEmployeeShow");
			Boolean delCreateEmployee = (Boolean) parseMap.get("delCreateEmployee");
			Boolean examinationRecordFileListShow = (Boolean) parseMap.get("examinationRecordFileListShow");
			Boolean delExaminationRecordFileList = (Boolean) parseMap.get("delExaminationRecordFileList");
			Boolean examinationRecordPhotoListShow = (Boolean) parseMap.get("examinationRecordPhotoListShow");
			Boolean delExaminationRecordPhotoList = (Boolean) parseMap.get("delExaminationRecordPhotoList");
			Boolean examinationDataListShow = (Boolean) parseMap.get("examinationDataListShow");
			Boolean delExaminationDataList = (Boolean) parseMap.get("delExaminationDataList");

			// 业务处理
			Object result = null;
			if ("save".equals(action)) {
				// 先删掉原来绑定的体检记录信息照片
				if (examinationRecord.getId() != null) {
					// 删照片
					if (examinationRecord.getExaminationRecordPhotoList() != null) {
						Map<String, Object> dePhotomap = new HashMap<String, Object>();
						dePhotomap.put("examinationRecordId", examinationRecord.getId());
						examinationRecordPhotoService.delList(dePhotomap, false);
					}
					// 删文件
					if (examinationRecord.getExaminationRecordFileList() != null) {
						Map<String, Object> delfilemap = new HashMap<String, Object>();
						delfilemap.put("examinationRecordId", examinationRecord.getId());
						examinationRecordFileService.delList(delfilemap, false);
					}
					if (examinationRecord.getExaminationDataList() != null && examinationRecord.getExaminationDataList().size() > 0) {
						for (ExaminationDataEntity examinationData : examinationRecord.getExaminationDataList()) {
							String dataIds = "";
							Map<String, Object> queryData = new HashMap<String, Object>();
							queryData.put("examinationRecordId", examinationRecord.getId());
							List<ExaminationDataEntity> dataList = examinationDataService.getListByCondition(queryData);
							if (dataList != null && dataList.size() > 0) {
								for (ExaminationDataEntity entity : dataList) {
									dataIds = dataIds + entity.getId() + ",";
								}
								if (!"".equals(dataIds)) {
									dataIds = dataIds.replaceAll(",,", ",");
									dataIds = dataIds.substring(0, dataIds.length() - 1);
								}
							}
							if (examinationData.getExaminationDataPhotoList() != null) {
								// 删除数据关联表的照片关联表
								if (!"".equals(dataIds)) {
									// 删除照片关联表
									Map<String, Object> queryPic = new HashMap<String, Object>();
									queryPic.put("examinationDataId_in", dataIds);
									examinationDataPhotoService.delList(queryPic, false);
								}
							}
							if (examinationData.getExaminationDataFileList() != null) {
								// 删除数据关联表的文件关联表
								if (!"".equals(dataIds)) {
									// 删除文件关联表
									Map<String, Object> queryFiles = new HashMap<String, Object>();
									queryFiles.put("examinationDataId_in", dataIds);
									examinationDataFileService.delList(queryFiles, false);
								}
							}
							// 删除数据关联表
							if (!"".equals(dataIds)) {
								// 删除照片关联表
								examinationDataService.del(dataIds);
							}
						}
					} else if (examinationRecord.getExaminationDataList() != null) {
						// 删除数据关联表
						String dataIds = "";
						Map<String, Object> queryData = new HashMap<String, Object>();
						queryData.put("examinationRecordId", examinationRecord.getId());
						List<ExaminationDataEntity> dataList = examinationDataService.getListByCondition(queryData);
						if (dataList != null && dataList.size() > 0) {
							for (ExaminationDataEntity entity : dataList) {
								dataIds = dataIds + entity.getId() + ",";
							}
							if (!"".equals(dataIds)) {
								dataIds = dataIds.replaceAll(",,", ",");
								dataIds = dataIds.substring(0, dataIds.length() - 1);
							}
						}
						if (!"".equals(dataIds)) {
							Map<String, Object> queryPic = new HashMap<String, Object>();
							queryPic.put("examinationDataId_in", dataIds);
							examinationDataPhotoService.delList(queryPic, false);
							Map<String, Object> queryFile = new HashMap<String, Object>();
							queryFile.put("examinationDataId_in", dataIds);
							examinationDataFileService.delList(queryFile, false);
							examinationDataService.del(dataIds);
						}
					}

				}
				result = examinationRecordService.save(examinationRecord);
			} else if ("saveList".equals(action)) {
				result = examinationRecordService.saveList(examinationRecordList);
			} else if ("getById".equals(action)) {
				result = examinationRecordService.getById(id, olderShow, createEmployeeShow, examinationRecordFileListShow, examinationRecordPhotoListShow,
						examinationDataListShow);
			} else if ("getListByCondition".equals(action)) {
				// 根据数据权限 增加查询条件
				queryMap = systemService.addDataRuleByRoles("ExaminationRecordEntity", queryMap, request);
				result = examinationRecordService.getListByCondition(queryMap, orderList, pageno, pagesize, olderShow, createEmployeeShow,
						examinationRecordFileListShow, examinationRecordPhotoListShow, examinationDataListShow);
			} else if ("del".equals(action)) {
				// 先删掉关联表
				// 查到体检数据表的id
				String dataIds = "";
				Map<String, Object> queryData = new HashMap<String, Object>();
				queryData.put("examinationRecordId", id);
				List<ExaminationDataEntity> dataList = examinationDataService.getListByCondition(queryData);
				if (dataList != null && dataList.size() > 0) {
					for (ExaminationDataEntity entity : dataList) {
						dataIds = dataIds + entity.getId() + "";
					}
					if (!"".equals(dataIds)) {
						dataIds = dataIds.replaceAll(",,", ",");
						dataIds = dataIds.substring(0, dataIds.length() - 1);
					}
				}
				// 删除数据关联表的关联表
				if (!"".equals(dataIds)) {
					// 删除文件关联表
					Map<String, Object> queryDoc = new HashMap<String, Object>();
					queryDoc.put("examinationDataId_in", dataIds);
					examinationDataFileService.delList(queryDoc, false);
					// 删除照片关联表
					Map<String, Object> queryPic = new HashMap<String, Object>();
					queryPic.put("examinationDataId_in", dataIds);
					examinationDataPhotoService.delList(queryPic, false);
					// 删除数据表
					examinationDataService.del(dataIds);
				}
				// 删除文件关联表
				Map<String, Object> queryDoc = new HashMap<String, Object>();
				queryDoc.put("examinationRecordId", id);
				examinationRecordFileService.delList(queryDoc, false);
				// 删除照片关联表
				Map<String, Object> queryPic = new HashMap<String, Object>();
				queryPic.put("examinationRecordId", id);
				examinationRecordPhotoService.delList(queryPic, false);

				result = examinationRecordService.del(id, delOlder, delCreateEmployee, delExaminationRecordFileList, delExaminationRecordPhotoList,
						delExaminationDataList);
			} else if ("delList".equals(action)) {
				result = examinationRecordService.delList(queryMap, delOlder, delCreateEmployee, delExaminationRecordFileList, delExaminationRecordPhotoList,
						delExaminationDataList);
			}
			// 封装
			Map<String, Object> packMap = examinationRecordPack.pack(type, action, result, examinationRecord);
			String actionBack = (String) packMap.get("action");
			String resultBack = (String) packMap.get("result");
			String desBack = (String) packMap.get("des");
			JSONObject pageBack = (JSONObject) packMap.get("page");
			JSONObject contentBack = (JSONObject) packMap.get("content");

			JSONObject repJson = new JSONObject();
			if (actionBack != null && !"".equals(actionBack)) {
				repJson.put("action", actionBack);
			}
			if (resultBack != null && !"".equals(resultBack)) {
				repJson.put("result", resultBack);
			}
			if (desBack != null && !"".equals(desBack)) {
				repJson.put("des", desBack);
			}
			if (pageBack != null) {
				repJson.put("page", pageBack);
			}
			if (contentBack != null && !"".equals(contentBack)) {
				repJson.put("content", contentBack);
			}
			logger.debug("返回消息：" + repJson.toString());
			resultStr = repJson.toString();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error(e);
		}
		return resultStr;
	}
}
