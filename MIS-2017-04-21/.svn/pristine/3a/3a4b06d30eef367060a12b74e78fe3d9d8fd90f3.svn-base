package com.framework.system.common.controller.user;

import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.framework.system.common.entity.dataDic.DataDicEntity;
import com.framework.system.common.entity.json.AjaxJson;
import com.framework.system.common.entity.module.ModuleEntity;
import com.framework.system.common.entity.role.RoleEntity;
import com.framework.system.common.entity.user.UserEntity;
import com.framework.system.common.entity.userRole.UserRoleEntity;
import com.framework.system.common.handler.user.UserHandler;
import com.framework.system.common.service.SystemService;
import com.framework.system.common.service.role.RoleService;
import com.framework.system.common.service.user.UserService;
import com.framework.system.common.service.userRole.UserRoleService;
import com.framework.system.db.query.PageList;
import com.framework.system.util.JsonUtil;

@RequestMapping("/systemUser")
@Controller	
public class UserController {
	private static Logger logger = Logger.getLogger(UserController.class);	
	/**
	 * 处理器
	 */
	private UserHandler userHandler = UserHandler.getInstance();
	/**
	 * 服务类
	 */
	private UserService userService = UserService.getInstance();
	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();
		
	/**
	 * 列表页
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "main")
	public ModelAndView center(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/system/user/UserList");		
		//根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String)request.getSession().getAttribute("roleIds");
		if(roleIds!=null&&moduleId!=null){
			//获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if(htmlModules!=null&&htmlModules.size()>0){
				for(ModuleEntity module:htmlModules){
					request.setAttribute(module.getCode()+"_control", "yes");
				}
				//查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds,htmlModules);
				if(modules!=null&&modules.size()>0){
					for(ModuleEntity module:modules){
						request.setAttribute(module.getCode()+"_show", "yes");
					}
				}
			}			
		}	
		return mav;
	}
	
	/**
	 * 批量删除 ids英文逗号间隔
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "del")
	@ResponseBody
	public AjaxJson del(HttpServletRequest request) {
		AjaxJson j = new AjaxJson();		
		String result="failure";
		String des="删除失败";
		String ids = request.getParameter("ids");
		if(ids!=null&&!"".equals(ids)){
			boolean falg = userService.del(ids);	
			if(falg){
				result="success";
				des="删除成功";
			}
		}
		j.setResult(result);
        j.setDes(des);
		return j;
	}
	
	/**
	 * 消息体格式请求处理
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handler")
	@ResponseBody
	public String query(HttpServletRequest request,HttpServletResponse response) {
		String msg="";
		String reqmsg = request.getParameter("reqmsg");
	    Map reqParams = JsonUtil.getMap4Json(reqmsg);
	    if (reqParams == null) {
	      return msg;
	    }
	    String action = (String)reqParams.get("action");
	    
	    
		//校验账号名称是否存在，新增和编辑
		if(action.equals("ADD_USER_INFO_REQUEST")){
			
		JSONObject content = (JSONObject)reqParams.get("content");
		int id=0;
		if(content.get("id") != null){
			id = (Integer)content.get("id");
		}
		String loginname = (String)content.get("loginname");
		
		if(id == 0){//新增
			Map<String, Object> queryMap = new HashMap<String, Object>();
			queryMap.put("loginname", loginname);
			List<UserEntity> entiy = userService.getListByCondition(queryMap);
			if (entiy != null && entiy.size() > 0) {
				JSONObject jsonResult = new JSONObject();
				jsonResult.put("des", "have");
				String json2return = jsonResult.toString();
				try {
					json2return = new String(json2return.getBytes("utf-8"),
							"iso-8859-1");
				} catch (UnsupportedEncodingException e) {

				}
				return json2return;
			}
		}else{//编辑
			Map<String, Object> queryMap = new HashMap<String, Object>();
			queryMap.put("loginname", loginname);
			List<UserEntity> entiy = userService.getListByCondition(queryMap);
			if (entiy != null && entiy.size() > 0) {
				for (UserEntity obj : entiy) {
					if (obj != null) {
						if(!obj.getId().equals(id)){
							JSONObject jsonResult = new JSONObject();
							jsonResult.put("des", "have");
							String json2return = jsonResult.toString();
							try {
								json2return = new String(json2return.getBytes("utf-8"),
										"iso-8859-1");
							} catch (UnsupportedEncodingException e) {

							}
							return json2return;
						}
					}
				}
			}
		}
		}
	
		
		try {
		    String rep = userHandler.doHandler(1, action, reqmsg, request, response);
		    msg = new String(rep.getBytes("utf-8"), "iso-8859-1");
		} catch (Exception e) {
			logger.error(e.toString());
		}	

		return msg;
	}
	
	//根据ID获取角色
	@RequestMapping(params = "rollname")
	@ResponseBody
	public String getRollName(int id) {
		String rolenames="";
		Map<String,Object> queryMap2 = new HashMap<String, Object>();
		queryMap2.put("userId", id);
		List<UserRoleEntity> roles4names = UserRoleService.getInstance().getListByCondition(queryMap2);
		if (roles4names != null && roles4names.size() > 0) {
			for (UserRoleEntity tempRelation : roles4names) {
				if (tempRelation != null) {
					RoleEntity role = RoleService.getInstance().getById(tempRelation.getRoleId());
					if (role != null) {
						rolenames += role.getName() + ",";
					}
				}
			}
			if (rolenames.length() > 0) {
				rolenames = rolenames.substring(0, rolenames.length() - 1);
			}
		}
		JSONObject jsonResult = new JSONObject();
		jsonResult.put("rolename", rolenames);

		String json2return = jsonResult.toString();

		try {
			json2return = new String(json2return.getBytes("utf-8"),
					"iso-8859-1");
		} catch (UnsupportedEncodingException e) {

		}
		return json2return;
	}
	
	/**
	 * 重置用户的登入密码为默认
	 * @param userid 用户的ID
	 * @return
	 */
	@RequestMapping(params="reset")
	@ResponseBody
	public String resetPassword(String userid) {
		boolean resetResult = false;
		String des = "重置密码失败";
		int userId = 0;
		try {
			userId = Integer.parseInt(userid);
		} catch (Exception e) {
		}
		if (userId > 0) {
			resetResult = userService.resetPassword(userId);
			if (resetResult) {
				des = "密码重置成功";
			}
		} else {
			des = "错误的用户信息";
		}
		
		AjaxJson result = new AjaxJson();
		result.setDes(des);
		if (resetResult) {
			result.setResult("success");
		} else {
			result.setResult("failure");
		}
		
		String json2return = JSONObject.fromObject(result).toString();
		try {
			json2return = new String(json2return.getBytes("utf-8"), "iso-8859-1");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return json2return;
	}
	/**
	 * 消息体格式请求处理
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handlercontent")
	public void queryApp(HttpServletRequest request,HttpServletResponse response) {
		try {			
			InputStream is = request.getInputStream();
  	        byte[] bis = IOUtils.toByteArray(is);
  	        String reqmsg = new String(bis, "UTF-8"); 	     
		    Map reqParams = JsonUtil.getMap4Json(reqmsg);
		    if (reqParams == null) {
		      return;
		    }
		    String action = (String)reqParams.get("action");
		    String rep = userHandler.doHandler(1, action, reqmsg, request, response);
		    OutputStream os = response.getOutputStream();
		    os.write(rep.toString().getBytes("UTF-8"));
		} catch (Exception e) {
			logger.error(e.toString());
		}	
	}

}
