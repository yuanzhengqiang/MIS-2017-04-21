package fsk.controller.dailyLife;

import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.framework.system.common.entity.json.AjaxJson;
import com.framework.system.common.entity.module.ModuleEntity;
import com.framework.system.common.service.SystemService;
import com.framework.system.util.JsonUtil;

import fsk.entity.dailyLife.DailyLifeEntity;
import fsk.entity.older.OlderEntity;
import fsk.handler.dailyLife.DailyLifeHandler;
import fsk.service.dailyLife.DailyLifeService;
import fsk.service.older.OlderService;

@RequestMapping("/dailyLife")
@Controller
public class DailyLifeController {
	private static Logger logger = Logger.getLogger(DailyLifeController.class);
	/**
	 * 处理器
	 */
	private DailyLifeHandler dailyLifeHandler = DailyLifeHandler.getInstance();
	/**
	 * 服务类
	 */
	private DailyLifeService dailyLifeService = DailyLifeService.getInstance();
	private static OlderService olderService = OlderService.getInstance();
	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();
	private static SimpleDateFormat formater = new SimpleDateFormat("yyyyMMddHHmmss");

	/**
	 * 列表页
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "main")
	public ModelAndView center(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/dailyLife/DailyLifeList");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds, htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		return mav;
	}

	/**
	 * 批量删除 ids英文逗号间隔
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "del")
	@ResponseBody
	public AjaxJson del(HttpServletRequest request) {
		AjaxJson j = new AjaxJson();
		String result = "failure";
		String des = "删除失败";
		String ids = request.getParameter("ids");
		if (ids != null && !"".equals(ids)) {
			boolean falg = dailyLifeService.del(ids);
			if (falg) {
				result = "success";
				des = "删除成功";
				Object userId = request.getSession().getAttribute("userId");
				String ip = request.getRemoteAddr();
				logger.debug("删除记录：userId为" + userId + "的用户删除了id为" + ids + "的dailyLife," + "来自ip: " + ip);
			}
		}
		j.setResult(result);
		j.setDes(des);
		return j;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handler")
	@ResponseBody
	public String query(HttpServletRequest request, HttpServletResponse response) {
		String msg = "";
		try {
			String reqmsg = request.getParameter("reqmsg");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return msg;
			}
			String action = (String) reqParams.get("action");
			String rep = dailyLifeHandler.doHandler(1, action, reqmsg, request, response);
			msg = new String(rep.getBytes("utf-8"), "iso-8859-1");
		} catch (Exception e) {
			logger.error(e.toString());
		}

		return msg;
	}

	/**
	 * 更新到老人表
	 * 
	 * @param request
	 * @param response
	 * @return
	 * @throws ParseException
	 */
	@RequestMapping(params = "getOlderId")
	@ResponseBody
	public String getOlderId(String olderId) throws ParseException {
		JSONObject jsonResult = new JSONObject();
		Integer olderidi = Integer.parseInt(olderId);
		Map<String, Object> queryMapdaily = new HashMap<String, Object>();
		queryMapdaily.put("olderId", olderidi);
		List<DailyLifeEntity> dailyLifeListTemp = dailyLifeService.getListByCondition(queryMapdaily);
		DailyLifeEntity dailyLifeEntityupdate = null;
		if (dailyLifeListTemp != null && dailyLifeListTemp.size() > 0) {
			DailyLifeEntity entityTemp = dailyLifeListTemp.get(0);
			String Time = entityTemp.getCreateTime();
			dailyLifeEntityupdate = entityTemp;
			for (DailyLifeEntity dailyLifeEntity : dailyLifeListTemp) {
				String timedaily = dailyLifeEntity.getCreateTime();
				if (Time != null && timedaily != null) {
					Date dt1 = formater.parse(timedaily);
					Date dt2 = formater.parse(Time);
					if (dt1.getTime() >= dt2.getTime()) {
						Time = timedaily;
						dailyLifeEntityupdate = dailyLifeEntity;
					}
				}
			}
		}
		OlderEntity olderEntity = olderService.getById(olderidi);
		if (olderEntity != null && dailyLifeEntityupdate != null) {
			olderEntity.setDailyWater(dailyLifeEntityupdate.getDailyWater());
			olderEntity.setDailyDrinking(dailyLifeEntityupdate.getDailyDrinking());
			olderEntity.setMainFood(dailyLifeEntityupdate.getMainFood());
			olderEntity.setFruitsVegetables(dailyLifeEntityupdate.getFruitsVegetables());
			olderEntity.setSalt(dailyLifeEntityupdate.getSalt());
			olderEntity.setOil(dailyLifeEntityupdate.getOil());
			olderEntity.setFish(dailyLifeEntityupdate.getFish());
			olderEntity.setBeanProducts(dailyLifeEntityupdate.getBeanProducts());
			olderEntity.setMeat(dailyLifeEntityupdate.getMeat());
			olderEntity.setMilk(dailyLifeEntityupdate.getMilk());
			olderEntity.setUrine(dailyLifeEntityupdate.getUrine());
			olderEntity.setUrineNum(dailyLifeEntityupdate.getUrineNum());
			olderEntity.setShit(dailyLifeEntityupdate.getShit());
			olderEntity.setShitDay(dailyLifeEntityupdate.getShitDay());
			olderEntity.setSleepHour(dailyLifeEntityupdate.getSleepHour());
			olderEntity.setSleepQuality(dailyLifeEntityupdate.getSleepQuality());
			olderEntity.setMorningSpirit(dailyLifeEntityupdate.getMorningSpirit());
			boolean falg = olderService.save(olderEntity);
			if (falg) {
				jsonResult.put("des", "success");
			} else {
				jsonResult.put("des", "failure");
			}
		}
		String json2return = jsonResult.toString();
		try {
			json2return = new String(json2return.getBytes("utf-8"), "iso-8859-1");
		} catch (UnsupportedEncodingException e) {

		}
		return json2return;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "work")
	@ResponseBody
	public String query2(HttpServletRequest request, HttpServletResponse response) {
		String msg = "";
		try {
			String reqmsg = request.getParameter("reqmsg");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return msg;
			}
			String action = (String) reqParams.get("action");
		} catch (Exception e) {
			logger.error(e.toString());
		}

		return msg;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handlercontent")
	public void queryApp(HttpServletRequest request, HttpServletResponse response) {
		try {
			InputStream is = request.getInputStream();
			byte[] bis = IOUtils.toByteArray(is);
			String reqmsg = new String(bis, "UTF-8");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return;
			}
			String action = (String) reqParams.get("action");
			String rep = dailyLifeHandler.doHandler(1, action, reqmsg, request, response);
			OutputStream os = response.getOutputStream();
			os.write(rep.toString().getBytes("UTF-8"));
		} catch (Exception e) {
			logger.error(e.toString());
		}
	}
}
