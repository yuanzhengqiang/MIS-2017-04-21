package fsk.pack.serviceTask;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.common.entity.dataDic.DataDicEntity;
import com.framework.system.common.service.dataDic.DataDicService;
import com.framework.system.db.query.PageList;

import fsk.entity.olderAddress.OlderAddressEntity;
import fsk.entity.service.ServiceEntity;
import fsk.entity.serviceTask.ServiceTaskEntity;
import fsk.entity.serviceTaskService.ServiceTaskServiceEntity;
import fsk.service.olderAddress.OlderAddressService;
import fsk.service.serviceEmployee.ServiceEmployeeService;
import fsk.service.serviceTaskService.ServiceTaskServiceService;

/**
 * @Title: Pack
 * @Description: 服务工单封装器
 * @author feng.gu
 * @date 2016-10-19 09:54:40
 * @version V1.0
 * 
 */
public class ServiceTaskPack {
	private static Logger logger = Logger.getLogger(ServiceTaskPack.class);
	private static ServiceTaskPack serviceTaskPack;
	private static ServiceEmployeeService serviceEmployeeService = ServiceEmployeeService
			.getInstance();
	private static ServiceTaskServiceService serviceTaskServiceService = ServiceTaskServiceService
			.getInstance();
	private static OlderAddressService olderAddressService = OlderAddressService
			.getInstance();
	private static DataDicService dataDicService = DataDicService.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static ServiceTaskPack getInstance() {
		if (serviceTaskPack == null) {
			serviceTaskPack = new ServiceTaskPack();
		}
		return serviceTaskPack;
	}

	public Map<String, Object> pack(int type, String action, Object request,
			Object entity) {
		// 定义返回参数
		Map<String, Object> packMap = new HashMap<String, Object>();
		if (type == 1) {
			// json
			packMap = this.packByJson(action, request, entity);
		} else if (type == 2) {
			// xml
			packMap = this.packByXml(action, request, entity);
		}
		return packMap;
	}

	private Map<String, Object> packByJson(String action, Object request,
			Object entity) {
		// 定义返回参数
		Map<String, Object> packMap = new HashMap<String, Object>();
		String actionBack = null;
		String resultBack = null;
		String desBack = null;
		JSONObject pageBack = null;
		JSONObject contentBack = null;
		try {
			if ("save".equals(action)) {
				actionBack = "ADD_SERVICE_TASK_INFO_RESPONSE";
				if (request.equals(true)) {
					resultBack = "100";
					desBack = "success";
				} else if (request.equals(false)) {
					resultBack = "200";
					desBack = "failure";
				}
				ServiceTaskEntity serviceTask = (ServiceTaskEntity) entity;
				if (serviceTask != null) {
					contentBack = new JSONObject();
					contentBack.put("id", serviceTask.getId());

					if (serviceTask.getOlder() != null) {
						contentBack.put("olderId", serviceTask.getOlder()
								.getId());
					}
					if (serviceTask.getAddPersonWechat() != null) {
						contentBack.put("addPersonWechatId", serviceTask
								.getAddPersonWechat().getId());
					}
					if (serviceTask.getSite() != null) {
						contentBack
								.put("siteId", serviceTask.getSite().getId());
					}
					if (serviceTask.getServiceArea() != null) {
						contentBack.put("serviceAreaId", serviceTask
								.getServiceArea().getId());
					}
					if (serviceTask.getServiceStreet() != null) {
						contentBack.put("serviceStreetId", serviceTask
								.getServiceStreet().getId());
					}
				}
			} else if ("getById".equals(action)) {
				actionBack = "QUERY_SERVICE_TASK_INFO_RESPONSE";
				resultBack = "100";
				desBack = "success";
				ServiceTaskEntity serviceTask = (ServiceTaskEntity) request;
				if (serviceTask != null) {
					contentBack = JSONObject.fromObject(serviceTask);
					if (serviceTask.getOlder() != null) {
						// 增加老人的地址信息pei
						String olderAddressName = "";
						Integer addressType = null;
						JSONObject olderJson = JSONObject
								.fromObject(serviceTask.getOlder());
						Map<String, Object> queryMapOlderAddress = new HashMap<String, Object>();
						queryMapOlderAddress.put("olderId", serviceTask
								.getOlder().getId());
						List<OlderAddressEntity> OlderAddressList = olderAddressService
								.getListByCondition(queryMapOlderAddress);
						if (OlderAddressList != null
								&& OlderAddressList.size() > 0) {
							OlderAddressEntity olderAddress = OlderAddressList
									.get(0);
							if (olderAddress.getProvinceId() != null) {
								DataDicEntity dataDic = dataDicService
										.getById(olderAddress.getProvinceId());
								if (dataDic != null) {
									olderAddressName = olderAddressName
											+ dataDic.getName() + ",";
								}
							}
							if (olderAddress.getCityId() != null) {
								DataDicEntity dataDic = dataDicService
										.getById(olderAddress.getCityId());
								if (dataDic != null) {
									olderAddressName = olderAddressName
											+ dataDic.getName() + ",";
								}
							}
							if (olderAddress.getAreaId() != null) {
								DataDicEntity dataDic = dataDicService
										.getById(olderAddress.getAreaId());
								if (dataDic != null) {
									olderAddressName = olderAddressName
											+ dataDic.getName() + ",";
								}
							}
							if (olderAddress.getAddress() != null) {
								olderAddressName = olderAddressName
										+ olderAddress.getAddress() + ",";
							}
							if (!"".equals(olderAddressName)) {
								olderAddressName = olderAddressName.substring(
										0, olderAddressName.length() - 1);
							}

							addressType = olderAddress.getAddressType();
							olderJson.put("addressType", addressType);
							olderJson.put("olderAddressName", olderAddressName);
						}
						contentBack.put("older", olderJson);
						// //
					}
					if (serviceTask.getAddPersonWechat() != null) {
						contentBack.put("addPersonWechat", JSONObject
								.fromObject(serviceTask.getAddPersonWechat()));
					}
					if (serviceTask.getSite() != null) {
						contentBack.put("site",
								JSONObject.fromObject(serviceTask.getSite()));
					}
					if (serviceTask.getServiceArea() != null) {
						contentBack.put("serviceArea", JSONObject
								.fromObject(serviceTask.getServiceArea()));
					}
					if (serviceTask.getServiceStreet() != null) {
						contentBack.put("serviceStreet", JSONObject
								.fromObject(serviceTask.getServiceStreet()));
					}
					if (serviceTask.getServiceTaskPhotoList() != null) {
						contentBack.put("serviceTaskPhotoList", JSONArray
								.fromObject(serviceTask
										.getServiceTaskPhotoList()));
					}
					if (serviceTask.getEdemaConditionList() != null) {
						contentBack.put("edemaConditionList",
								JSONArray.fromObject(serviceTask
										.getEdemaConditionList()));
					}
					if (serviceTask.getSituationObservationList() != null) {
						contentBack.put("situationObservationList", JSONArray
								.fromObject(serviceTask
										.getSituationObservationList()));
					}
					if (serviceTask.getServiceLogList() != null) {
						contentBack.put("serviceLogList", JSONArray
								.fromObject(serviceTask.getServiceLogList()));
					}
					if (serviceTask.getDailyLifeAskList() != null) {
						contentBack.put("dailyLifeAskList", JSONArray
								.fromObject(serviceTask.getDailyLifeAskList()));
					}
					if (serviceTask.getServiceEmployeeList() != null) {
						contentBack.put("serviceEmployeeList", JSONArray
								.fromObject(serviceTask
										.getServiceEmployeeList()));
					}
					if (serviceTask.getServiceList() != null) {
						contentBack.put("serviceList", JSONArray
								.fromObject(serviceTask.getServiceList()));
					}
					/* 返回加上服务子项和预计时长pei */
					if (serviceTask.getServiceList() != null) {
						JSONArray jsonarray = new JSONArray();
						JSONArray childServiceStatus = new JSONArray();
						for (ServiceEntity serviceentity : serviceTask
								.getServiceList()) {
							Map<String, Object> queryMapServiceTask = new HashMap<String, Object>();
							queryMapServiceTask.put("serviceTaskId",
									serviceTask.getId());
							queryMapServiceTask.put("serviceId",
									serviceentity.getId());
							List<ServiceTaskServiceEntity> entityList = serviceTaskServiceService
									.getListByCondition(queryMapServiceTask);
							if (entityList != null && entityList.size() > 0) {
								ServiceTaskServiceEntity entityuuu = entityList
										.get(0);
								serviceentity.setFuwuSonNames(entityuuu
										.getServiceChilds());
								serviceentity.setYjfuwuTime(entityuuu
										.getExpectedServiceTime());
								// 服务子项状态

								String serviceChilds = entityuuu
										.getServiceChilds();
								String serviceChildsDone = entityuuu
										.getServiceChildsComplete();
								Map<String, Object> mapAllService = new HashMap<String, Object>();
								Map<String, Object> mapDoneService = new HashMap<String, Object>();
								if (serviceChilds != null) {
									String[] reqStrbyte = serviceChilds
											.split(",");
									for (int i = 0; i < reqStrbyte.length; i++) {
										mapAllService.put(reqStrbyte[i], 0);
									}
								}
								if (serviceChildsDone != null) {
									String[] reqStrbyte = serviceChildsDone
											.split(",");
									for (int i = 0; i < reqStrbyte.length; i++) {
										mapDoneService.put(reqStrbyte[i], 1);
									}
								}
								if (mapAllService.size() > 0) {
									for (Entry<String, Object> entry : mapAllService
											.entrySet()) {
										JSONObject service = new JSONObject();
										String allService = entry.getKey();
										service.put("name", allService);
										service.put("status", entry.getValue());
										for (Entry<String, Object> entryDone : mapDoneService
												.entrySet()) {
											if (allService.equals(entryDone
													.getKey())) {
												service.put("status", 1);
											}
										}
										childServiceStatus.add(service);
									}
								}
								JSONObject jsonservice = JSONObject
										.fromObject(serviceentity);
								jsonservice.put("childServiceStatus",
										childServiceStatus);
								jsonarray.add(jsonservice);
							}

						}
						contentBack.put("serviceList", jsonarray);

					}
					// //////
					if (serviceTask.getPhysiologicalParametersHistoryList() != null) {
						contentBack
								.put("physiologicalParametersHistoryList",
										JSONArray.fromObject(serviceTask
												.getPhysiologicalParametersHistoryList()));
					}
				}
			} else if ("getListByCondition".equals(action)) {
				actionBack = "QUERY_SERVICE_TASK_LIST_RESPONSE";
				resultBack = "100";
				desBack = "success";
				PageList pageList = (PageList) request;
				if (pageList != null && pageList.getResultList() != null
						&& pageList.getResultList().size() > 0) {
					contentBack = new JSONObject();
					pageBack = new JSONObject();
					// pei
					List<ServiceTaskEntity> serviceTashList = new ArrayList<ServiceTaskEntity>();
					for (int i = 0; i < pageList.getResultList().size(); i++) {
						ServiceTaskEntity serviceTask = (ServiceTaskEntity) pageList
								.getResultList().get(i);
						List<ServiceEntity> serviceList = new ArrayList<ServiceEntity>();
						if (serviceTask.getServiceList() != null) {
							JSONArray childServiceStatus = new JSONArray();
							for (ServiceEntity serviceentity : serviceTask
									.getServiceList()) {
								if(serviceentity!=null){
									Map<String, Object> queryMapServiceTask = new HashMap<String, Object>();
									queryMapServiceTask.put("serviceTaskId",
											serviceTask.getId());
									queryMapServiceTask.put("serviceId",
											serviceentity.getId());
									List<ServiceTaskServiceEntity> entityList = serviceTaskServiceService
											.getListByCondition(queryMapServiceTask);
									if (entityList != null && entityList.size() > 0) {
										ServiceTaskServiceEntity entityuuu = entityList
												.get(0);
										serviceentity.setFuwuSonNames(entityuuu
												.getServiceChilds());
										serviceentity.setYjfuwuTime(entityuuu
												.getExpectedServiceTime());
										// 服务子项状态
										String serviceChilds = entityuuu
												.getServiceChilds();
										String serviceChildsDone = entityuuu
												.getServiceChildsComplete();
										Map<String, Object> mapAllService = new HashMap<String, Object>();
										Map<String, Object> mapDoneService = new HashMap<String, Object>();
										if (serviceChilds != null) {
											String[] reqStrbyte = serviceChilds
													.split(",");
											for (int j = 0; j < reqStrbyte.length; j++) {
												mapAllService.put(reqStrbyte[j], 0);
											}
										}
										if (serviceChildsDone != null) {
											String[] reqStrbyte = serviceChildsDone
													.split(",");
											for (int j = 0; j < reqStrbyte.length; j++) {
												mapDoneService
														.put(reqStrbyte[j], 1);
											}
										}
										if (mapAllService.size() > 0) {
											for (Entry<String, Object> entry : mapAllService
													.entrySet()) {
												JSONObject service = new JSONObject();
												String allService = entry.getKey();
												service.put("name", allService);
												service.put("status",
														entry.getValue());
												for (Entry<String, Object> entryDone : mapDoneService
														.entrySet()) {
													if (allService.equals(entryDone
															.getKey())) {
														service.put("status", 1);
													}
												}
												childServiceStatus.add(service);
											}
										}
									}
									serviceList.add(serviceentity);
								}
								}
						}
						serviceTask.setServiceList(serviceList);
						serviceTashList.add(serviceTask);
					}
					contentBack.put("serviceTaskList", serviceTashList);
					// //

					pageBack.put("pageno", pageList.getPageno());
					pageBack.put("pagesize", pageList.getPagesize());
					pageBack.put("recordCount", pageList.getRecordCount());
					pageBack.put("pageCount", pageList.getPageCount());

				}
			} else if ("del".equals(action)) {
				actionBack = "DEL_SERVICE_TASK_INFO_REQUEST";
				if (request.equals(true)) {
					resultBack = "100";
					desBack = "success";
				} else if (request.equals(false)) {
					resultBack = "200";
					desBack = "failure";
				}
			} else if ("delList".equals(action)) {
				actionBack = "DEL_SERVICE_TASK_LIST_REQUEST";
				if (request.equals(true)) {
					resultBack = "100";
					desBack = "success";
				} else if (request.equals(false)) {
					resultBack = "200";
					desBack = "failure";
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error(e);
		}
		if (actionBack != null && !"".equals(actionBack)) {
			packMap.put("action", actionBack);
		}
		if (resultBack != null && !"".equals(resultBack)) {
			packMap.put("result", resultBack);
		}
		if (desBack != null && !"".equals(desBack)) {
			packMap.put("des", desBack);
		}
		if (pageBack != null) {
			packMap.put("page", pageBack);
		}
		if (contentBack != null) {
			packMap.put("content", contentBack);
		}
		return packMap;
	}

	private Map<String, Object> packByXml(String action, Object request,
			Object entity) {
		Map<String, Object> packMap = new HashMap<String, Object>();
		return packMap;
	}

}
