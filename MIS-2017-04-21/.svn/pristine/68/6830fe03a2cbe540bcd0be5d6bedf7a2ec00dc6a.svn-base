package fsk.handler.site;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.business.handler.BaseHandler;
import com.framework.system.common.entity.dataDic.DataDicEntity;
import com.framework.system.common.service.SystemService;
import com.framework.system.common.service.dataDic.DataDicService;
import com.framework.system.db.query.OrderVO;

import fsk.entity.site.SiteEntity;
import fsk.entity.siteServiceArea.SiteServiceAreaEntity;
import fsk.pack.site.SitePack;
import fsk.parse.site.SiteParse;
import fsk.service.site.SiteService;
import fsk.service.siteServiceArea.SiteServiceAreaService;

/**
 * @Title: Handler
 * @Description: 站点信息表业务处理器
 * @author feng.gu
 * @date 2016-07-12 13:51:03
 * @version V1.0
 * 
 */
public class SiteHandler extends BaseHandler {
	private static Logger logger = Logger.getLogger(SiteService.class);
	private static SiteServiceAreaService siteServiceAreaService = SiteServiceAreaService.getInstance();
	/**
	 * 解析器
	 */
	private SiteParse siteParse = SiteParse.getInstance();
	/**
	 * 业务处理器
	 */
	private SiteService siteService = SiteService.getInstance();
	private static DataDicService dataDicService = DataDicService.getInstance();
	/**
	 * 封装器
	 */
	private SitePack sitePack = SitePack.getInstance();

	private static SiteHandler siteHandler;

	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static SiteHandler getInstance() {
		if (siteHandler == null) {
			siteHandler = new SiteHandler();
		}
		return siteHandler;
	}

	/**
	 * 
	 * @param type
	 *            1-json 2-xml
	 * @param entityName
	 * @param command
	 * @param reqStr
	 * @param request
	 * @param response
	 */
	public String doHandler(int type, String command, String reqStr, HttpServletRequest request, HttpServletResponse response) {
		logger.debug("请求消息：" + reqStr);
		String resultStr = "";
		try {
			// 解析
			Map<String, Object> parseMap = siteParse.parse(type, command, reqStr, request);
			String action = (String) parseMap.get("action");
			SiteEntity site = (SiteEntity) parseMap.get("site");
			List<SiteEntity> siteList = (List<SiteEntity>) parseMap.get("siteList");
			Integer id = (Integer) parseMap.get("id");
			Map<String, Object> queryMap = (Map<String, Object>) parseMap.get("queryMap");
			int pageno = (Integer) parseMap.get("pageno");
			int pagesize = (Integer) parseMap.get("pagesize");
			List<OrderVO> orderList = (List<OrderVO>) parseMap.get("orderList");

			Boolean masterEmployeeShow = (Boolean) parseMap.get("masterEmployeeShow");
			Boolean delMasterEmployee = (Boolean) parseMap.get("delMasterEmployee");
			Boolean provinceShow = (Boolean) parseMap.get("provinceShow");
			Boolean delProvince = (Boolean) parseMap.get("delProvince");
			Boolean cityShow = (Boolean) parseMap.get("cityShow");
			Boolean delCity = (Boolean) parseMap.get("delCity");
			Boolean areaShow = (Boolean) parseMap.get("areaShow");
			Boolean delArea = (Boolean) parseMap.get("delArea");
			Boolean streetShow = (Boolean) parseMap.get("streetShow");
			Boolean delStreet = (Boolean) parseMap.get("delStreet");
			Boolean employeeListShow = (Boolean) parseMap.get("employeeListShow");
			Boolean delSiteEmployeeList = (Boolean) parseMap.get("delSiteEmployeeList");
			Boolean dataDicListShow = (Boolean) parseMap.get("dataDicListShow");
			Boolean delSiteDataDicList = (Boolean) parseMap.get("delSiteDataDicList");

			/*
			 * 条件查询 peihouxuan
			 */
			boolean flag = false;
			String siteStreetIds = "";
			String siteAreaId = "";
			String siteCityId = "";
			String siteProviceId = "";

			JSONObject reqStrjson = JSONObject.fromObject(reqStr);
			JSONObject contentjson = (JSONObject) reqStrjson.get("content");
			Integer idnew = (Integer) contentjson.get("id");
			Object siteStreetId = 0;
			siteStreetId = contentjson.get("siteStreetId");
			siteStreetIds = (String) contentjson.get("siteStreetId");
			siteAreaId = (String) contentjson.get("siteAreaId");
			siteCityId = (String) contentjson.get("siteCityId");
			siteProviceId = (String) contentjson.get("siteProvinceId");
			if (siteStreetIds == null && siteAreaId == null && siteCityId == null && siteProviceId == null) {
				flag = false;
			} else if (!"".equals(siteStreetIds) || !"".equals(siteAreaId) || !"".equals(siteCityId) || !"".equals(siteProviceId)) {
				flag = true;
			}
			String siteStreetName = "暂无信息";
			//
			// 业务处理
			Object result = null;
			if ("save".equals(action)) {
				/*
				 * peihouxuan 站点名称校验
				 */
				if (site.getName() != null) {
					if (idnew == null) {
						Map<String, Object> queryMapName = new HashMap<String, Object>();
						queryMapName.put("name", site.getName());
						List<SiteEntity> siteListnew = siteService.getListByCondition(queryMapName);
						if (siteListnew != null && siteListnew.size() > 0) {
							SiteEntity entity = siteListnew.get(0);
							if (entity.getId() > 0) {
								resultStr = "{\"action\":\"ADD_SITE_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"添加失败，该站点名已存在！\"}";
								return resultStr;
							}
						}
					}
					if (idnew != null) {
						SiteEntity enyity = siteService.getById(idnew);
						String name = enyity.getName();
						if (!name.equals(site.getName())) {
							Map<String, Object> queryMapName = new HashMap<String, Object>();
							queryMapName.put("name", site.getName());
							List<SiteEntity> siteListnew = siteService.getListByCondition(queryMapName);
							if (siteListnew != null && siteListnew.size() > 0) {
								resultStr = "{\"action\":\"ADD_SITE_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"添加失败，该站点名已存在！\"}";
								return resultStr;
							}
						}
					}
				}
				// 删除关联站点
				if (site.getId() != null) {
					Map<String, Object> queryMapdel = new HashMap<String, Object>();
					queryMapdel.put("siteId", site.getId());
					siteServiceAreaService.delList(queryMapdel, false, false);
				}
				result = siteService.save(site);
			} else if ("saveList".equals(action)) {
				result = siteService.saveList(siteList);
			} else if ("getById".equals(action)) {
				/* 名字 */
				if (siteStreetId != null) {
					Map<String, Object> queryMap2 = new HashMap<String, Object>();
					queryMap2.put("serviceStreetId", siteStreetId);
					List<SiteServiceAreaEntity> siteServiceAreaList = siteServiceAreaService.getListByCondition(queryMap2, orderList, true, true);
					if (siteServiceAreaList != null && siteServiceAreaList.size() > 0) {
						SiteServiceAreaEntity entuty = (SiteServiceAreaEntity) siteServiceAreaList.get(0);
						DataDicEntity street = entuty.getServiceStreet();
						if(street!=null){
							siteStreetName = street.getName();
						}
					}
				}
				result = siteService.getById(id, masterEmployeeShow, provinceShow, cityShow, areaShow, streetShow, employeeListShow, dataDicListShow);
			} else if ("getListByCondition".equals(action)) {

				// 根据数据权限 增加查询条件
				/*
				 * 根据条件查询服务站点信息 peihouxuan
				 */
				if (flag) {
					Map<String, Object> queryMap2 = new HashMap<String, Object>();
					if (!"".equals(siteStreetIds) && !"".equals(siteCityId) && !"".equals(siteProviceId)) {
						queryMap2.put("serviceStreetId", siteStreetIds);
					} else if (!"".equals(siteAreaId) && !"".equals(siteCityId) && !"".equals(siteProviceId)) {
						Map<String, Object> queryMapArea = new HashMap<String, Object>();
						queryMapArea.put("parentId_in", siteAreaId);
						List<Object> dataDicList = dataDicService.getListByCondition(queryMapArea);
						if (dataDicList != null && dataDicList.size() > 0) {
							for (int i = 0; i < dataDicList.size(); i++) {
								DataDicEntity entity = (DataDicEntity) dataDicList.get(i);
								String idtemp = String.valueOf(entity.getId());
								if (i < dataDicList.size() - 1) {
									siteStreetIds = siteStreetIds + idtemp + ",";
								} else {
									siteStreetIds = siteStreetIds + idtemp;
								}
							}
						} else {
							siteStreetIds = "0";
						}
						queryMap2.put("serviceStreetId_in", siteStreetIds);
					} else if (!"".equals(siteCityId) && !"".equals(siteProviceId)) {
						Map<String, Object> queryMapCity = new HashMap<String, Object>();
						queryMapCity.put("parentId_in", siteCityId);
						List<Object> dataDicList = dataDicService.getListByCondition(queryMapCity);
						String ids = "";
						if (dataDicList != null && dataDicList.size() > 0) {
							for (int i = 0; i < dataDicList.size(); i++) {
								DataDicEntity entity = (DataDicEntity) dataDicList.get(i);
								String idtemp = String.valueOf(entity.getId());
								if (i < dataDicList.size() - 1) {
									ids = ids + idtemp + ",";
								} else {
									ids = ids + idtemp;
								}
							}
						}

						Map<String, Object> queryMapCity2 = new HashMap<String, Object>();
						queryMapCity2.put("parentId_in", ids);
						List<Object> dataDicList2 = dataDicService.getListByCondition(queryMapCity2);
						if (dataDicList2 != null && dataDicList2.size() > 0) {
							for (int i = 0; i < dataDicList2.size(); i++) {
								DataDicEntity entity = (DataDicEntity) dataDicList2.get(i);
								String idtemp = String.valueOf(entity.getId());
								if (i < dataDicList2.size() - 1) {
									siteStreetIds = siteStreetIds + idtemp + ",";
								} else {
									siteStreetIds = siteStreetIds + idtemp;
								}
							}
						} else {
							siteStreetIds = "0";
						}
						queryMap2.put("serviceStreetId_in", siteStreetIds);
					} else if (!"".equals(siteProviceId)) {

						Map<String, Object> queryMapProvice = new HashMap<String, Object>();
						queryMapProvice.put("parentId_in", siteProviceId);
						List<Object> dataDicList = dataDicService.getListByCondition(queryMapProvice);
						String ids = "";
						System.out.println(dataDicList.size());
						if (dataDicList != null && dataDicList.size() > 0) {
							for (int i = 0; i < dataDicList.size(); i++) {
								DataDicEntity entity = (DataDicEntity) dataDicList.get(i);
								String idtemp = String.valueOf(entity.getId());
								if (i < dataDicList.size() - 1) {
									ids = ids + idtemp + ",";
								} else {
									ids = ids + idtemp;
								}
							}
						}
						Map<String, Object> queryMapProvice2 = new HashMap<String, Object>();
						queryMapProvice2.put("parentId_in", ids);
						List<Object> dataDicList2 = dataDicService.getListByCondition(queryMapProvice2);
						String ids2 = "";
						if (dataDicList2 != null && dataDicList2.size() > 0) {
							for (int i = 0; i < dataDicList2.size(); i++) {
								DataDicEntity entity = (DataDicEntity) dataDicList2.get(i);
								String idtemp = String.valueOf(entity.getId());
								if (i < dataDicList2.size() - 1) {
									ids2 = ids2 + idtemp + ",";
								} else {
									ids2 = ids2 + idtemp;
								}
							}
						}
						Map<String, Object> queryMapProvice3 = new HashMap<String, Object>();
						queryMapProvice3.put("parentId_in", ids2);
						List<Object> dataDicList3 = dataDicService.getListByCondition(queryMapProvice3);
						if (dataDicList3 != null && dataDicList3.size() > 0) {
							for (int i = 0; i < dataDicList3.size(); i++) {
								DataDicEntity entity = (DataDicEntity) dataDicList3.get(i);
								String idtemp = String.valueOf(entity.getId());
								if (i < dataDicList3.size() - 1) {
									siteStreetIds = siteStreetIds + idtemp + ",";
								} else {
									siteStreetIds = siteStreetIds + idtemp;
								}
							}
						} else {
							siteStreetIds = "0";
						}
						queryMap2.put("serviceStreetId_in", siteStreetIds);
					}

					List<SiteServiceAreaEntity> siteServiceAreaList = siteServiceAreaService.getListByCondition(queryMap2);
					if (siteServiceAreaList != null && siteServiceAreaList.size() > 0) {
						String ids = "";
						for (int i = 0; i < siteServiceAreaList.size(); i++) {
							SiteServiceAreaEntity entuty = (SiteServiceAreaEntity) siteServiceAreaList.get(i);
							if (i < siteServiceAreaList.size() - 1) {
								ids = ids + String.valueOf(entuty.getSiteId()) + ",";
							} else {
								ids = ids + String.valueOf(entuty.getSiteId());
							}
						}
						queryMap.put("id_in", ids);
						queryMap = systemService.addDataRule("SiteEntity", queryMap, request);
					} else {
						queryMap.put("id", 0);
						queryMap = systemService.addDataRule("SiteEntity", queryMap, request);
					}

					result = siteService.getListByCondition(queryMap, orderList, pageno, pagesize, masterEmployeeShow, provinceShow, cityShow, areaShow,
							streetShow, employeeListShow, dataDicListShow);

				} else {
					queryMap = systemService.addDataRule("SiteEntity", queryMap, request);

					result = siteService.getListByCondition(queryMap, orderList, pageno, pagesize, masterEmployeeShow, provinceShow, cityShow, areaShow,
							streetShow, employeeListShow, dataDicListShow);
				}
			} else if ("del".equals(action)) {
				result = siteService.del(id, delMasterEmployee, delProvince, delCity, delArea, delStreet, delSiteEmployeeList, delSiteDataDicList);
			} else if ("delList".equals(action)) {
				result = siteService.delList(queryMap, delMasterEmployee, delProvince, delCity, delArea, delStreet, delSiteEmployeeList, delSiteDataDicList);
			}
			// 封装
			Map<String, Object> packMap = sitePack.pack(type, action, result, site);
			String actionBack = (String) packMap.get("action");
			String resultBack = (String) packMap.get("result");
			String desBack = (String) packMap.get("des");
			JSONObject pageBack = (JSONObject) packMap.get("page");
			JSONObject contentBack = (JSONObject) packMap.get("content");

			JSONObject repJson = new JSONObject();
			if (actionBack != null && !"".equals(actionBack)) {
				repJson.put("action", actionBack);
			}
			if (resultBack != null && !"".equals(resultBack)) {
				repJson.put("result", resultBack);
			}
			if (desBack != null && !"".equals(desBack)) {
				repJson.put("des", desBack);
			}
			if (pageBack != null) {
				repJson.put("page", pageBack);
			}
			if (contentBack != null && !"".equals(contentBack)) {
				repJson.put("content", contentBack);
			}
			logger.debug("返回消息：" + repJson.toString());
			resultStr = repJson.toString();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error(e);
		}
		return resultStr;
	}
}
