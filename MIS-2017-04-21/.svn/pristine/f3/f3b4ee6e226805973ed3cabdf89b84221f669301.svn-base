package fsk.service.skinLesions;

import java.math.BigDecimal;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import org.apache.log4j.Logger;

import fsk.entity.recovery.RecoveryEntity;

import fsk.entity.skinLesions.SkinLesionsEntity;
import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

/**
 * @Title: Service
 * @Description: 压疮列表服务类
 * @author feng.gu
 * @date 2016-07-11 17:40:05
 * @version V1.0
 * 
 */
public class SkinLesionsService {
	private static Logger logger = Logger.getLogger(SkinLesionsService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static SkinLesionsService skinLesionsService;

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static SkinLesionsService getInstance() {
		if (skinLesionsService == null) {
			skinLesionsService = new SkinLesionsService();
		}
		return skinLesionsService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(SkinLesionsEntity skinLesions) {
		boolean result = false;
		if (skinLesions != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 关联信息保存
				RecoveryEntity recovery = skinLesions.getRecovery();
				if (recovery != null) {
					dbManager.saveNoTransaction(recovery);
					skinLesions.setRecoveryId(recovery.getId());
				}
				result = dbManager.saveNoTransaction(skinLesions);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(List<SkinLesionsEntity> skinLesionsList) {
		boolean result = false;
		if (skinLesionsList != null && skinLesionsList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (SkinLesionsEntity skinLesions : skinLesionsList) {
					if (skinLesions != null) {
						// 关联信息保存
						RecoveryEntity recovery = skinLesions.getRecovery();
						if (recovery != null) {
							dbManager.saveNoTransaction(recovery);
							skinLesions.setRecoveryId(recovery.getId());
						}
						result = dbManager.saveNoTransaction(skinLesions);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public SkinLesionsEntity getById(Integer id) {
		SkinLesionsEntity obj = null;
		if (id != null) {
			obj = (SkinLesionsEntity) dbManager.getById(id,
					SkinLesionsEntity.class);
		}
		return obj;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param recoveryShow
	 *            是否查询关联信息
	 * @param obj
	 */
	public SkinLesionsEntity getById(Integer id, Boolean recoveryShow) {
		SkinLesionsEntity obj = null;
		if (id != null) {
			obj = (SkinLesionsEntity) dbManager.getById(id,
					SkinLesionsEntity.class);
			// 查询关联内容
			if (recoveryShow != null && recoveryShow.booleanValue()
					&& obj != null && obj.getRecoveryId() != null
					&& obj.getRecoveryId() > 0) {
				RecoveryEntity recovery = (RecoveryEntity) dbManager.getById(
						obj.getRecoveryId(), RecoveryEntity.class);
				obj.setRecovery(recovery);
			}
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<SkinLesionsEntity> getListByCondition(
			Map<String, Object> queryMap) {
		List<SkinLesionsEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object recoveryId = queryMap.get("recoveryId");
		Object recoveryId_gt = queryMap.get("recoveryId_gt");
		Object recoveryId_ge = queryMap.get("recoveryId_ge");
		Object recoveryId_lt = queryMap.get("recoveryId_lt");
		Object recoveryId_le = queryMap.get("recoveryId_le");
		Object recoveryId_in = queryMap.get("recoveryId_in");
		Object position = queryMap.get("position");
		Object position_like = queryMap.get("position_like");
		Object position_isNull = queryMap.get("position_isNull");
		Object position_isNotNull = queryMap.get("position_isNotNull");
		Object position_in = queryMap.get("position_in");
		Object positionLong = queryMap.get("positionLong");
		Object positionLong_gt = queryMap.get("positionLong_gt");
		Object positionLong_ge = queryMap.get("positionLong_ge");
		Object positionLong_lt = queryMap.get("positionLong_lt");
		Object positionLong_le = queryMap.get("positionLong_le");
		Object positionLong_in = queryMap.get("positionLong_in");
		Object positionWide = queryMap.get("positionWide");
		Object positionWide_gt = queryMap.get("positionWide_gt");
		Object positionWide_ge = queryMap.get("positionWide_ge");
		Object positionWide_lt = queryMap.get("positionWide_lt");
		Object positionWide_le = queryMap.get("positionWide_le");
		Object positionWide_in = queryMap.get("positionWide_in");
		Object siteDeep = queryMap.get("siteDeep");
		Object siteDeep_gt = queryMap.get("siteDeep_gt");
		Object siteDeep_ge = queryMap.get("siteDeep_ge");
		Object siteDeep_lt = queryMap.get("siteDeep_lt");
		Object siteDeep_le = queryMap.get("siteDeep_le");
		Object siteDeep_in = queryMap.get("siteDeep_in");
		Object photoUrl = queryMap.get("photoUrl");
		Object photoUrl_like = queryMap.get("photoUrl_like");
		Object photoUrl_isNull = queryMap.get("photoUrl_isNull");
		Object photoUrl_isNotNull = queryMap.get("photoUrl_isNotNull");
		Object photoUrl_in = queryMap.get("photoUrl_in");

		QueryCondition qc = new QueryCondition(SkinLesionsEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.in, id_in));
		}
		if (recoveryId != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.eq, recoveryId));
		}
		if (recoveryId_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.gt, recoveryId_gt));
		}
		if (recoveryId_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.ge, recoveryId_ge));
		}
		if (recoveryId_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.lt, recoveryId_lt));
		}
		if (recoveryId_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.le, recoveryId_le));
		}
		if (recoveryId_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.in, recoveryId_in));
		}
		if (position != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.eq, position));
		}
		if (position_like != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.like, position_like));
		}
		if (position_isNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.isNull, position_isNull));
		}
		if (position_isNotNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.isNotNull, position_isNotNull));
		}
		if (position_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.in, position_in));
		}
		if (positionLong != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.eq, positionLong));
		}
		if (positionLong_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.gt, positionLong_gt));
		}
		if (positionLong_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.ge, positionLong_ge));
		}
		if (positionLong_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.lt, positionLong_lt));
		}
		if (positionLong_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.le, positionLong_le));
		}
		if (positionLong_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.in, positionLong_in));
		}
		if (positionWide != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.eq, positionWide));
		}
		if (positionWide_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.gt, positionWide_gt));
		}
		if (positionWide_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.ge, positionWide_ge));
		}
		if (positionWide_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.lt, positionWide_lt));
		}
		if (positionWide_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.le, positionWide_le));
		}
		if (positionWide_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.in, positionWide_in));
		}
		if (siteDeep != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.eq, siteDeep));
		}
		if (siteDeep_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.gt, siteDeep_gt));
		}
		if (siteDeep_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.ge, siteDeep_ge));
		}
		if (siteDeep_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.lt, siteDeep_lt));
		}
		if (siteDeep_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.le, siteDeep_le));
		}
		if (siteDeep_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.in, siteDeep_in));
		}
		if (photoUrl != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.eq, photoUrl));
		}
		if (photoUrl_like != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.like, photoUrl_like));
		}
		if (photoUrl_isNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.isNull, photoUrl_isNull));
		}
		if (photoUrl_isNotNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.isNotNull, photoUrl_isNotNull));
		}
		if (photoUrl_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.in, photoUrl_in));
		}

		list = dbManager.queryByCondition(SkinLesionsEntity.class, qc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<SkinLesionsEntity>();
			for (Object obj : list) {
				returnlist.add((SkinLesionsEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param recoveryShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public List<SkinLesionsEntity> getListByCondition(
			Map<String, Object> queryMap, List<OrderVO> orderList,
			Boolean recoveryShow) {
		List<SkinLesionsEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object recoveryId = queryMap.get("recoveryId");
		Object recoveryId_gt = queryMap.get("recoveryId_gt");
		Object recoveryId_ge = queryMap.get("recoveryId_ge");
		Object recoveryId_lt = queryMap.get("recoveryId_lt");
		Object recoveryId_le = queryMap.get("recoveryId_le");
		Object recoveryId_in = queryMap.get("recoveryId_in");
		Object position = queryMap.get("position");
		Object position_like = queryMap.get("position_like");
		Object position_isNull = queryMap.get("position_isNull");
		Object position_isNotNull = queryMap.get("position_isNotNull");
		Object position_in = queryMap.get("position_in");
		Object positionLong = queryMap.get("positionLong");
		Object positionLong_gt = queryMap.get("positionLong_gt");
		Object positionLong_ge = queryMap.get("positionLong_ge");
		Object positionLong_lt = queryMap.get("positionLong_lt");
		Object positionLong_le = queryMap.get("positionLong_le");
		Object positionLong_in = queryMap.get("positionLong_in");
		Object positionWide = queryMap.get("positionWide");
		Object positionWide_gt = queryMap.get("positionWide_gt");
		Object positionWide_ge = queryMap.get("positionWide_ge");
		Object positionWide_lt = queryMap.get("positionWide_lt");
		Object positionWide_le = queryMap.get("positionWide_le");
		Object positionWide_in = queryMap.get("positionWide_in");
		Object siteDeep = queryMap.get("siteDeep");
		Object siteDeep_gt = queryMap.get("siteDeep_gt");
		Object siteDeep_ge = queryMap.get("siteDeep_ge");
		Object siteDeep_lt = queryMap.get("siteDeep_lt");
		Object siteDeep_le = queryMap.get("siteDeep_le");
		Object siteDeep_in = queryMap.get("siteDeep_in");
		Object photoUrl = queryMap.get("photoUrl");
		Object photoUrl_like = queryMap.get("photoUrl_like");
		Object photoUrl_isNull = queryMap.get("photoUrl_isNull");
		Object photoUrl_isNotNull = queryMap.get("photoUrl_isNotNull");
		Object photoUrl_in = queryMap.get("photoUrl_in");

		QueryCondition qc = new QueryCondition(SkinLesionsEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.in, id_in));
		}
		if (recoveryId != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.eq, recoveryId));
		}
		if (recoveryId_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.gt, recoveryId_gt));
		}
		if (recoveryId_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.ge, recoveryId_ge));
		}
		if (recoveryId_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.lt, recoveryId_lt));
		}
		if (recoveryId_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.le, recoveryId_le));
		}
		if (recoveryId_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.in, recoveryId_in));
		}
		if (position != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.eq, position));
		}
		if (position_like != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.like, position_like));
		}
		if (position_isNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.isNull, position_isNull));
		}
		if (position_isNotNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.isNotNull, position_isNotNull));
		}
		if (position_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.in, position_in));
		}
		if (positionLong != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.eq, positionLong));
		}
		if (positionLong_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.gt, positionLong_gt));
		}
		if (positionLong_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.ge, positionLong_ge));
		}
		if (positionLong_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.lt, positionLong_lt));
		}
		if (positionLong_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.le, positionLong_le));
		}
		if (positionLong_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.in, positionLong_in));
		}
		if (positionWide != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.eq, positionWide));
		}
		if (positionWide_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.gt, positionWide_gt));
		}
		if (positionWide_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.ge, positionWide_ge));
		}
		if (positionWide_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.lt, positionWide_lt));
		}
		if (positionWide_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.le, positionWide_le));
		}
		if (positionWide_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.in, positionWide_in));
		}
		if (siteDeep != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.eq, siteDeep));
		}
		if (siteDeep_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.gt, siteDeep_gt));
		}
		if (siteDeep_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.ge, siteDeep_ge));
		}
		if (siteDeep_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.lt, siteDeep_lt));
		}
		if (siteDeep_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.le, siteDeep_le));
		}
		if (siteDeep_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.in, siteDeep_in));
		}
		if (photoUrl != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.eq, photoUrl));
		}
		if (photoUrl_like != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.like, photoUrl_like));
		}
		if (photoUrl_isNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.isNull, photoUrl_isNull));
		}
		if (photoUrl_isNotNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.isNotNull, photoUrl_isNotNull));
		}
		if (photoUrl_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.in, photoUrl_in));
		}

		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(SkinLesionsEntity.class, qc, oc);
		int a = 0;
		if (recoveryShow != null && recoveryShow.booleanValue()) {
			a++;
		}
		if (a > 0 && list != null && list.size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < list.size(); i++) {
				SkinLesionsEntity obj = (SkinLesionsEntity) list.get(i);
				// 查询关联内容
				if (recoveryShow != null && recoveryShow.booleanValue()
						&& obj != null && obj.getRecoveryId() != null
						&& obj.getRecoveryId() > 0) {
					RecoveryEntity recovery = (RecoveryEntity) dbManager
							.getById(obj.getRecoveryId(), RecoveryEntity.class);
					obj.setRecovery(recovery);
				}
				result.add(obj);
			}
			list = result;
		}
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<SkinLesionsEntity>();
			for (Object obj : list) {
				returnlist.add((SkinLesionsEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object recoveryId = queryMap.get("recoveryId");
		Object recoveryId_gt = queryMap.get("recoveryId_gt");
		Object recoveryId_ge = queryMap.get("recoveryId_ge");
		Object recoveryId_lt = queryMap.get("recoveryId_lt");
		Object recoveryId_le = queryMap.get("recoveryId_le");
		Object recoveryId_in = queryMap.get("recoveryId_in");
		Object position = queryMap.get("position");
		Object position_like = queryMap.get("position_like");
		Object position_isNull = queryMap.get("position_isNull");
		Object position_isNotNull = queryMap.get("position_isNotNull");
		Object position_in = queryMap.get("position_in");
		Object positionLong = queryMap.get("positionLong");
		Object positionLong_gt = queryMap.get("positionLong_gt");
		Object positionLong_ge = queryMap.get("positionLong_ge");
		Object positionLong_lt = queryMap.get("positionLong_lt");
		Object positionLong_le = queryMap.get("positionLong_le");
		Object positionLong_in = queryMap.get("positionLong_in");
		Object positionWide = queryMap.get("positionWide");
		Object positionWide_gt = queryMap.get("positionWide_gt");
		Object positionWide_ge = queryMap.get("positionWide_ge");
		Object positionWide_lt = queryMap.get("positionWide_lt");
		Object positionWide_le = queryMap.get("positionWide_le");
		Object positionWide_in = queryMap.get("positionWide_in");
		Object siteDeep = queryMap.get("siteDeep");
		Object siteDeep_gt = queryMap.get("siteDeep_gt");
		Object siteDeep_ge = queryMap.get("siteDeep_ge");
		Object siteDeep_lt = queryMap.get("siteDeep_lt");
		Object siteDeep_le = queryMap.get("siteDeep_le");
		Object siteDeep_in = queryMap.get("siteDeep_in");
		Object photoUrl = queryMap.get("photoUrl");
		Object photoUrl_like = queryMap.get("photoUrl_like");
		Object photoUrl_isNull = queryMap.get("photoUrl_isNull");
		Object photoUrl_isNotNull = queryMap.get("photoUrl_isNotNull");
		Object photoUrl_in = queryMap.get("photoUrl_in");

		QueryCondition qc = new QueryCondition(SkinLesionsEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.in, id_in));
		}
		if (recoveryId != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.eq, recoveryId));
		}
		if (recoveryId_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.gt, recoveryId_gt));
		}
		if (recoveryId_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.ge, recoveryId_ge));
		}
		if (recoveryId_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.lt, recoveryId_lt));
		}
		if (recoveryId_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.le, recoveryId_le));
		}
		if (recoveryId_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.in, recoveryId_in));
		}
		if (position != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.eq, position));
		}
		if (position_like != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.like, position_like));
		}
		if (position_isNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.isNull, position_isNull));
		}
		if (position_isNotNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.isNotNull, position_isNotNull));
		}
		if (position_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.in, position_in));
		}
		if (positionLong != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.eq, positionLong));
		}
		if (positionLong_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.gt, positionLong_gt));
		}
		if (positionLong_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.ge, positionLong_ge));
		}
		if (positionLong_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.lt, positionLong_lt));
		}
		if (positionLong_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.le, positionLong_le));
		}
		if (positionLong_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.in, positionLong_in));
		}
		if (positionWide != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.eq, positionWide));
		}
		if (positionWide_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.gt, positionWide_gt));
		}
		if (positionWide_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.ge, positionWide_ge));
		}
		if (positionWide_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.lt, positionWide_lt));
		}
		if (positionWide_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.le, positionWide_le));
		}
		if (positionWide_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.in, positionWide_in));
		}
		if (siteDeep != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.eq, siteDeep));
		}
		if (siteDeep_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.gt, siteDeep_gt));
		}
		if (siteDeep_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.ge, siteDeep_ge));
		}
		if (siteDeep_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.lt, siteDeep_lt));
		}
		if (siteDeep_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.le, siteDeep_le));
		}
		if (siteDeep_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.in, siteDeep_in));
		}
		if (photoUrl != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.eq, photoUrl));
		}
		if (photoUrl_like != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.like, photoUrl_like));
		}
		if (photoUrl_isNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.isNull, photoUrl_isNull));
		}
		if (photoUrl_isNotNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.isNotNull, photoUrl_isNotNull));
		}
		if (photoUrl_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.in, photoUrl_in));
		}

		pagelist = dbManager.queryByCondition(SkinLesionsEntity.class, qc,
				pageno, pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @param recoveryShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, int pageno, int pagesize,
			Boolean recoveryShow) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object recoveryId = queryMap.get("recoveryId");
		Object recoveryId_gt = queryMap.get("recoveryId_gt");
		Object recoveryId_ge = queryMap.get("recoveryId_ge");
		Object recoveryId_lt = queryMap.get("recoveryId_lt");
		Object recoveryId_le = queryMap.get("recoveryId_le");
		Object recoveryId_in = queryMap.get("recoveryId_in");
		Object position = queryMap.get("position");
		Object position_like = queryMap.get("position_like");
		Object position_isNull = queryMap.get("position_isNull");
		Object position_isNotNull = queryMap.get("position_isNotNull");
		Object position_in = queryMap.get("position_in");
		Object positionLong = queryMap.get("positionLong");
		Object positionLong_gt = queryMap.get("positionLong_gt");
		Object positionLong_ge = queryMap.get("positionLong_ge");
		Object positionLong_lt = queryMap.get("positionLong_lt");
		Object positionLong_le = queryMap.get("positionLong_le");
		Object positionLong_in = queryMap.get("positionLong_in");
		Object positionWide = queryMap.get("positionWide");
		Object positionWide_gt = queryMap.get("positionWide_gt");
		Object positionWide_ge = queryMap.get("positionWide_ge");
		Object positionWide_lt = queryMap.get("positionWide_lt");
		Object positionWide_le = queryMap.get("positionWide_le");
		Object positionWide_in = queryMap.get("positionWide_in");
		Object siteDeep = queryMap.get("siteDeep");
		Object siteDeep_gt = queryMap.get("siteDeep_gt");
		Object siteDeep_ge = queryMap.get("siteDeep_ge");
		Object siteDeep_lt = queryMap.get("siteDeep_lt");
		Object siteDeep_le = queryMap.get("siteDeep_le");
		Object siteDeep_in = queryMap.get("siteDeep_in");
		Object photoUrl = queryMap.get("photoUrl");
		Object photoUrl_like = queryMap.get("photoUrl_like");
		Object photoUrl_isNull = queryMap.get("photoUrl_isNull");
		Object photoUrl_isNotNull = queryMap.get("photoUrl_isNotNull");
		Object photoUrl_in = queryMap.get("photoUrl_in");

		QueryCondition qc = new QueryCondition(SkinLesionsEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.in, id_in));
		}
		if (recoveryId != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.eq, recoveryId));
		}
		if (recoveryId_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.gt, recoveryId_gt));
		}
		if (recoveryId_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.ge, recoveryId_ge));
		}
		if (recoveryId_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.lt, recoveryId_lt));
		}
		if (recoveryId_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.le, recoveryId_le));
		}
		if (recoveryId_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.in, recoveryId_in));
		}
		if (position != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.eq, position));
		}
		if (position_like != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.like, position_like));
		}
		if (position_isNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.isNull, position_isNull));
		}
		if (position_isNotNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.isNotNull, position_isNotNull));
		}
		if (position_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.in, position_in));
		}
		if (positionLong != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.eq, positionLong));
		}
		if (positionLong_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.gt, positionLong_gt));
		}
		if (positionLong_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.ge, positionLong_ge));
		}
		if (positionLong_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.lt, positionLong_lt));
		}
		if (positionLong_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.le, positionLong_le));
		}
		if (positionLong_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.in, positionLong_in));
		}
		if (positionWide != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.eq, positionWide));
		}
		if (positionWide_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.gt, positionWide_gt));
		}
		if (positionWide_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.ge, positionWide_ge));
		}
		if (positionWide_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.lt, positionWide_lt));
		}
		if (positionWide_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.le, positionWide_le));
		}
		if (positionWide_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.in, positionWide_in));
		}
		if (siteDeep != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.eq, siteDeep));
		}
		if (siteDeep_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.gt, siteDeep_gt));
		}
		if (siteDeep_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.ge, siteDeep_ge));
		}
		if (siteDeep_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.lt, siteDeep_lt));
		}
		if (siteDeep_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.le, siteDeep_le));
		}
		if (siteDeep_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.in, siteDeep_in));
		}
		if (photoUrl != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.eq, photoUrl));
		}
		if (photoUrl_like != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.like, photoUrl_like));
		}
		if (photoUrl_isNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.isNull, photoUrl_isNull));
		}
		if (photoUrl_isNotNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.isNotNull, photoUrl_isNotNull));
		}
		if (photoUrl_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.in, photoUrl_in));
		}

		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		pagelist = dbManager.queryByConditions(SkinLesionsEntity.class, qc, oc,
				pageno, pagesize);
		int a = 0;
		if (recoveryShow != null && recoveryShow.booleanValue()) {
			a++;
		}
		if (a > 0 && pagelist != null && pagelist.getResultList() != null
				&& pagelist.getResultList().size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < pagelist.getResultList().size(); i++) {
				SkinLesionsEntity obj = (SkinLesionsEntity) pagelist
						.getResultList().get(i);
				// 查询关联内容
				if (recoveryShow != null && recoveryShow.booleanValue()
						&& obj != null && obj.getRecoveryId() != null
						&& obj.getRecoveryId() > 0) {
					RecoveryEntity recovery = (RecoveryEntity) dbManager
							.getById(obj.getRecoveryId(), RecoveryEntity.class);
					obj.setRecovery(recovery);
				}
				result.add(obj);
			}
			pagelist.setResultList(result);
		}
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id, Boolean delRecovery) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delRecovery != null && delRecovery.booleanValue()) {
					SkinLesionsEntity skinLesions = (SkinLesionsEntity) dbManager
							.getById(id, SkinLesionsEntity.class);
					if (skinLesions != null
							&& skinLesions.getRecoveryId() != null) {
						dbManager.delNoTransaction(skinLesions.getRecoveryId(),
								RecoveryEntity.class);
					}
				}
				result = dbManager
						.delNoTransaction(id, SkinLesionsEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(SkinLesionsEntity.ID,
						QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(
						SkinLesionsEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap, Boolean delRecovery) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object recoveryId = queryMap.get("recoveryId");
		Object recoveryId_gt = queryMap.get("recoveryId_gt");
		Object recoveryId_ge = queryMap.get("recoveryId_ge");
		Object recoveryId_lt = queryMap.get("recoveryId_lt");
		Object recoveryId_le = queryMap.get("recoveryId_le");
		Object recoveryId_in = queryMap.get("recoveryId_in");
		Object position = queryMap.get("position");
		Object position_like = queryMap.get("position_like");
		Object position_isNull = queryMap.get("position_isNull");
		Object position_isNotNull = queryMap.get("position_isNotNull");
		Object position_in = queryMap.get("position_in");
		Object positionLong = queryMap.get("positionLong");
		Object positionLong_gt = queryMap.get("positionLong_gt");
		Object positionLong_ge = queryMap.get("positionLong_ge");
		Object positionLong_lt = queryMap.get("positionLong_lt");
		Object positionLong_le = queryMap.get("positionLong_le");
		Object positionLong_in = queryMap.get("positionLong_in");
		Object positionWide = queryMap.get("positionWide");
		Object positionWide_gt = queryMap.get("positionWide_gt");
		Object positionWide_ge = queryMap.get("positionWide_ge");
		Object positionWide_lt = queryMap.get("positionWide_lt");
		Object positionWide_le = queryMap.get("positionWide_le");
		Object positionWide_in = queryMap.get("positionWide_in");
		Object siteDeep = queryMap.get("siteDeep");
		Object siteDeep_gt = queryMap.get("siteDeep_gt");
		Object siteDeep_ge = queryMap.get("siteDeep_ge");
		Object siteDeep_lt = queryMap.get("siteDeep_lt");
		Object siteDeep_le = queryMap.get("siteDeep_le");
		Object siteDeep_in = queryMap.get("siteDeep_in");
		Object photoUrl = queryMap.get("photoUrl");
		Object photoUrl_like = queryMap.get("photoUrl_like");
		Object photoUrl_isNull = queryMap.get("photoUrl_isNull");
		Object photoUrl_isNotNull = queryMap.get("photoUrl_isNotNull");
		Object photoUrl_in = queryMap.get("photoUrl_in");

		QueryCondition qc = new QueryCondition(SkinLesionsEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.ID,
					QueryCondition.in, id_in));
		}
		if (recoveryId != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.eq, recoveryId));
		}
		if (recoveryId_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.gt, recoveryId_gt));
		}
		if (recoveryId_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.ge, recoveryId_ge));
		}
		if (recoveryId_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.lt, recoveryId_lt));
		}
		if (recoveryId_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.le, recoveryId_le));
		}
		if (recoveryId_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.RECOVERY_ID,
					QueryCondition.in, recoveryId_in));
		}
		if (position != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.eq, position));
		}
		if (position_like != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.like, position_like));
		}
		if (position_isNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.isNull, position_isNull));
		}
		if (position_isNotNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.isNotNull, position_isNotNull));
		}
		if (position_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION,
					QueryCondition.in, position_in));
		}
		if (positionLong != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.eq, positionLong));
		}
		if (positionLong_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.gt, positionLong_gt));
		}
		if (positionLong_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.ge, positionLong_ge));
		}
		if (positionLong_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.lt, positionLong_lt));
		}
		if (positionLong_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.le, positionLong_le));
		}
		if (positionLong_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_LONG,
					QueryCondition.in, positionLong_in));
		}
		if (positionWide != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.eq, positionWide));
		}
		if (positionWide_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.gt, positionWide_gt));
		}
		if (positionWide_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.ge, positionWide_ge));
		}
		if (positionWide_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.lt, positionWide_lt));
		}
		if (positionWide_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.le, positionWide_le));
		}
		if (positionWide_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.POSITION_WIDE,
					QueryCondition.in, positionWide_in));
		}
		if (siteDeep != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.eq, siteDeep));
		}
		if (siteDeep_gt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.gt, siteDeep_gt));
		}
		if (siteDeep_ge != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.ge, siteDeep_ge));
		}
		if (siteDeep_lt != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.lt, siteDeep_lt));
		}
		if (siteDeep_le != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.le, siteDeep_le));
		}
		if (siteDeep_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.SITE_DEEP,
					QueryCondition.in, siteDeep_in));
		}
		if (photoUrl != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.eq, photoUrl));
		}
		if (photoUrl_like != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.like, photoUrl_like));
		}
		if (photoUrl_isNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.isNull, photoUrl_isNull));
		}
		if (photoUrl_isNotNull != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.isNotNull, photoUrl_isNotNull));
		}
		if (photoUrl_in != null) {
			qc.andCondition(new QueryCondition(SkinLesionsEntity.PHOTO_URL,
					QueryCondition.in, photoUrl_in));
		}

		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delRecovery != null && delRecovery.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									SkinLesionsEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							SkinLesionsEntity entity = (SkinLesionsEntity) obj;
							strIds += entity.getRecoveryId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								RecoveryEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								RecoveryEntity.class, qc1);
					}

				}
				result = dbManager.delByConditionsNoTransaction(
						SkinLesionsEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

}
