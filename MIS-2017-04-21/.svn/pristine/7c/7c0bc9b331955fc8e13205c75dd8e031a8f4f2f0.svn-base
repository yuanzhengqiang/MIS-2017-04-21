package fsk.handler.recharge;

import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.business.handler.BaseHandler;
import com.framework.system.common.service.SystemService;
import com.framework.system.db.query.OrderVO;

import fsk.entity.recharge.RechargeEntity;
import fsk.pack.recharge.RechargePack;
import fsk.parse.recharge.RechargeParse;
import fsk.service.recharge.RechargeService;
import fsk.util.CodeCreateUtil;

/**
 * @Title: Handler
 * @Description: 充值记录业务处理器
 * @author feng.gu
 * @date 2016-10-20 09:07:24
 * @version V1.0
 * 
 */
public class RechargeHandler extends BaseHandler {
	private static Logger logger = Logger.getLogger(RechargeService.class);
	/**
	 * 解析器
	 */
	private RechargeParse rechargeParse = RechargeParse.getInstance();
	/**
	 * 业务处理器
	 */
	private RechargeService rechargeService = RechargeService.getInstance();
	/**
	 * 封装器
	 */
	private RechargePack rechargePack = RechargePack.getInstance();

	private static RechargeHandler rechargeHandler;

	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();
	private static SimpleDateFormat formater = new SimpleDateFormat("yyyyMMddHHmmss");

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static RechargeHandler getInstance() {
		if (rechargeHandler == null) {
			rechargeHandler = new RechargeHandler();
		}
		return rechargeHandler;
	}

	/**
	 * 
	 * @param type
	 *            1-json 2-xml
	 * @param entityName
	 * @param command
	 * @param reqStr
	 * @param request
	 * @param response
	 */
	public String doHandler(int type, String command, String reqStr, HttpServletRequest request, HttpServletResponse response) {
		logger.debug("请求消息：" + reqStr);
		String resultStr = "";
		try {
			// 解析
			Map<String, Object> parseMap = rechargeParse.parse(type, command, reqStr, request);
			String action = (String) parseMap.get("action");
			RechargeEntity recharge = (RechargeEntity) parseMap.get("recharge");
			List<RechargeEntity> rechargeList = (List<RechargeEntity>) parseMap.get("rechargeList");
			Integer id = (Integer) parseMap.get("id");
			Map<String, Object> queryMap = (Map<String, Object>) parseMap.get("queryMap");
			Integer pageno = (Integer) parseMap.get("pageno");
			Integer pagesize = (Integer) parseMap.get("pagesize");
			List<OrderVO> orderList = (List<OrderVO>) parseMap.get("orderList");

			Boolean olderShow = (Boolean) parseMap.get("olderShow");
			Boolean delOlder = (Boolean) parseMap.get("delOlder");
			Boolean serviceShow = (Boolean) parseMap.get("serviceShow");
			Boolean delService = (Boolean) parseMap.get("delService");
			Boolean serviceSiteShow = (Boolean) parseMap.get("serviceSiteShow");
			Boolean delServiceSite = (Boolean) parseMap.get("delServiceSite");
			Boolean rechargeEmployeeShow = (Boolean) parseMap.get("rechargeEmployeeShow");
			Boolean delRechargeEmployee = (Boolean) parseMap.get("delRechargeEmployee");

			// 业务处理
			Object result = null;
			if ("save".equals(action)) {
				if (recharge.getId() == null) {
					String serialNum = CodeCreateUtil.creatrechargeNum();
					recharge.setSerialNumber(serialNum);
				}
				result = rechargeService.save(recharge);
			} else if ("saveList".equals(action)) {
				result = rechargeService.saveList(rechargeList);
			} else if ("getById".equals(action)) {
				result = rechargeService.getById(id, olderShow, serviceShow, serviceSiteShow, rechargeEmployeeShow);
			} else if ("getListByCondition".equals(action)) {
				// 根据数据权限 增加查询条件
				queryMap = systemService.addDataRuleByRoles("RechargeEntity", queryMap, request);
				result = rechargeService.getListByCondition(queryMap, orderList, pageno, pagesize, olderShow, serviceShow, serviceSiteShow,
						rechargeEmployeeShow);
			} else if ("del".equals(action)) {
				result = rechargeService.del(id, delOlder, delService, delServiceSite, delRechargeEmployee);
			} else if ("delList".equals(action)) {
				result = rechargeService.delList(queryMap, delOlder, delService, delServiceSite, delRechargeEmployee);
			}
			// 封装
			Map<String, Object> packMap = rechargePack.pack(type, action, result, recharge);
			String actionBack = (String) packMap.get("action");
			String resultBack = (String) packMap.get("result");
			String desBack = (String) packMap.get("des");
			JSONObject pageBack = (JSONObject) packMap.get("page");
			JSONObject contentBack = (JSONObject) packMap.get("content");

			JSONObject repJson = new JSONObject();
			if (actionBack != null && !"".equals(actionBack)) {
				repJson.put("action", actionBack);
			}
			if (resultBack != null && !"".equals(resultBack)) {
				repJson.put("result", resultBack);
			}
			if (desBack != null && !"".equals(desBack)) {
				repJson.put("des", desBack);
			}
			if (pageBack != null) {
				repJson.put("page", pageBack);
			}
			if (contentBack != null && !"".equals(contentBack)) {
				repJson.put("content", contentBack);
			}
			logger.debug("返回消息：" + repJson.toString());
			resultStr = repJson.toString();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error(e);
		}
		return resultStr;
	}
}
