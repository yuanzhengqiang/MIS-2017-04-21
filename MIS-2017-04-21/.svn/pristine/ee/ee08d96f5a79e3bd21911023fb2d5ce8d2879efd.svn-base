package fsk.util;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONObject;

import com.framework.system.db.query.OrderVO;

import fsk.entity.physiologicalParametersHistory.PhysiologicalParametersHistoryEntity;
import fsk.service.physiologicalParametersHistory.PhysiologicalParametersHistoryService;

public class ParameterStatisticsUtil {
	private static ParameterStatisticsUtil parameterStatistics;

	public static ParameterStatisticsUtil getInstance() {
		if (parameterStatistics == null) {
			parameterStatistics = new ParameterStatisticsUtil();
		}
		return parameterStatistics;
	}

	private static SimpleDateFormat formater = new SimpleDateFormat("yyyyMMddHHmmss");
	private PhysiologicalParametersHistoryService physiologicalParametersHistoryService = PhysiologicalParametersHistoryService.getInstance();
	DecimalFormat decimalFormat = new DecimalFormat("#.0000");

	public JSONObject getStatistics(Map<String, Object> queryMap, List<OrderVO> orderList) {
		JSONObject tongji = null;
		// 不分页，返回搜索条件下所有的记录
		List<PhysiologicalParametersHistoryEntity> parametersList = physiologicalParametersHistoryService.getListByCondition(queryMap, orderList, false);
		if (parametersList != null && parametersList.size() > 0) {
			PhysiologicalParametersHistoryEntity firstParameters = parametersList.get(0);
			Integer type = firstParameters.getType();
			if (type != null) {
				try {
					if (type.intValue() == 1) {
						tongji = getBloodPresure(parametersList);
					} else if (type.intValue() == 3 || type.intValue() == 4) {
						tongji = getBloodSugar(parametersList);
					} else {
						tongji = getOthersParameters(parametersList);
					}
				} catch (ParseException e) {
					// 统计异常时返回空统计
					tongji = getNullStatistics();
				}
			} else {
				// 类型不存在时返回空统计
				tongji = getNullStatistics();
			}
		} else {
			// 无数据时返回空统计
			tongji = getNullStatistics();
		}
		return tongji;
	}

	/**
	 * 
	 * @param parametersList
	 * @return
	 * @throws ParseException
	 */
	private JSONObject getOthersParameters(List<PhysiologicalParametersHistoryEntity> parametersList) throws ParseException {
		PhysiologicalParametersHistoryEntity firstParameters = parametersList.get(0);
		String name = "";
		if (firstParameters.getType() == 5) {
			name = "脉搏";
		}
		if (firstParameters.getType() == 6) {
			name = "体温";
		}
		if (firstParameters.getType() == 7) {
			name = "呼吸";
		}
		if (firstParameters.getType() == 8) {
			name = "血氧";
		}
		if (firstParameters.getType() == 9) {
			name = "骨密度";
		}
		String minTime = firstParameters.getCreateTime();
		String maxTime = firstParameters.getCreateTime();
		int lowcon = 0;
		int highcon = 0;
		int yichang = 0;
		int totalCountTemp = parametersList.size();
		BigDecimal valueHige = firstParameters.getValue();
		String valueHigeTime = firstParameters.getCreateTime();
		BigDecimal valueLow = firstParameters.getValue();
		String valueLowTime = firstParameters.getCreateTime();
		for (PhysiologicalParametersHistoryEntity parameters : parametersList) {
			// 时间区间
			String olderTime = parameters.getCreateTime();
			if (olderTime != null) {
				Date min = formater.parse(minTime);
				Date max = formater.parse(maxTime);
				Date newTime = formater.parse(olderTime);
				if (newTime.getTime() < min.getTime()) {
					minTime = olderTime;
				}
				if (newTime.getTime() > max.getTime()) {
					maxTime = olderTime;
				}
			}
			// 统计笔数
			// totalCountTemp
			// 正常异常
			Integer statust = parameters.getStatus();
			if (statust != null) {
				if (statust == 2) {
					highcon++;
					yichang++;
				}
				if (statust == 3) {
					lowcon++;
					yichang++;
				}
			}

			// 最高值1
			BigDecimal value = parameters.getValue();
			if (value != null) {
				if (value.compareTo(valueHige) == 1) {
					valueHige = value;
					valueHigeTime = parameters.getCreateTime();
				}
				if (value.compareTo(valueLow) == -1) {
					valueLow = value;
					valueLowTime = parameters.getCreateTime();
				}
			}

		}
		// 统计区间
		String timeRange = minTime.substring(0, 4) + "-" + minTime.substring(4, 6) + "-" + minTime.substring(6, 8) + "～" + maxTime.substring(0, 4) + "-"
				+ maxTime.substring(4, 6) + "-" + maxTime.substring(6, 8);
		// 统计笔数
		int totalCount = totalCountTemp;
		// 异常笔数
		int yichangnew = yichang;
		// 偏高比例
		float highconfloat = Float.parseFloat(decimalFormat.format((float) highcon / (float) totalCountTemp));
		highconfloat = Float.parseFloat(decimalFormat.format(highconfloat * 100));
		String highPercent = String.valueOf(highconfloat) + "%";
		// 偏低比例
		float lowconfloat = Float.parseFloat(decimalFormat.format((float) lowcon / (float) totalCountTemp));
		lowconfloat = Float.parseFloat(decimalFormat.format(lowconfloat * 100));
		String lowPercent = String.valueOf(lowconfloat) + "%";
		int nolmal = totalCountTemp - yichang;
		// 正常比例
		float nolconfloat = Float.parseFloat(decimalFormat.format((float) nolmal / (float) totalCountTemp));
		nolconfloat = Float.parseFloat(decimalFormat.format(nolconfloat * 100));
		String nomalPercent = String.valueOf(nolconfloat) + "%";

		if (firstParameters.getType() == 5 || firstParameters.getType() == 7 || firstParameters.getType() == 8) {
			valueHige = valueHige.setScale(0, BigDecimal.ROUND_HALF_UP);
			valueLow = valueLow.setScale(0, BigDecimal.ROUND_HALF_UP);
		}
		JSONObject tongji = new JSONObject();
		if (valueHige != null && valueHigeTime != null) {
			String highValue1 = name + valueHige + "(" + valueHigeTime.substring(0, 4) + "-" + valueHigeTime.substring(4, 6) + "-"
					+ valueHigeTime.substring(6, 8) + ")";
			tongji.put("highValue1", highValue1);
		}
		if (valueLow != null && valueLowTime != null) {
			String lowValue1 = name + valueLow + "(" + valueLowTime.substring(0, 4) + "-" + valueLowTime.substring(4, 6) + "-" + valueLowTime.substring(6, 8)
					+ ")";
			tongji.put("lowValue1", lowValue1);
		}
		tongji.put("timeRange", timeRange);
		tongji.put("totalCount", totalCount);
		tongji.put("inCount", yichangnew);
		tongji.put("nomalPercent", nomalPercent);
		tongji.put("highPercent", highPercent);
		tongji.put("lowPercent", lowPercent);
		return tongji;

	}

	/**
	 * 
	 * @param parametersList
	 * @return
	 * @throws ParseException
	 */
	private JSONObject getBloodSugar(List<PhysiologicalParametersHistoryEntity> parametersList) throws ParseException {
		PhysiologicalParametersHistoryEntity firstParameter = parametersList.get(0);
		String minTime = firstParameter.getCreateTime();
		String maxTime = firstParameter.getCreateTime();
		int lowcon = 0;
		int highcon = 0;
		int yichang = 0;
		int totalCountTemp = parametersList.size();
		BigDecimal valueHige = null;
		String valueHigeTime = null;
		BigDecimal valueLow = null;
		String valueLowTime = null;
		BigDecimal valueHige2 = null;
		String valueHigeTime2 = null;
		BigDecimal valueLow2 = null;
		String valueLowTime2 = null;
		for (PhysiologicalParametersHistoryEntity parameters : parametersList) {
			// 时间区间
			String olderTime = parameters.getCreateTime();
			if (olderTime != null) {
				Date min = formater.parse(minTime);
				Date max = formater.parse(maxTime);
				Date newTime = formater.parse(olderTime);
				if (newTime.getTime() < min.getTime()) {
					minTime = olderTime;
				}
				if (newTime.getTime() > max.getTime()) {
					maxTime = olderTime;
				}
			}
			// 统计笔数
			// totalCountTemp
			// 正常异常
			Integer statust = parameters.getStatus();
			if (statust != null) {
				if (statust == 2) {
					highcon++;
					yichang++;
				}
				if (statust == 3) {
					lowcon++;
					yichang++;
				}
			}

			// 最高值1
			BigDecimal value = parameters.getValue();
			if (parameters.getType() == 3) {
				if (valueHige == null) {
					valueHige = value;
				}
				if (valueHigeTime == null) {
					valueHigeTime = parameters.getCreateTime();
				}
				if (value.compareTo(valueHige) == 1) {
					valueHige = value;
					valueHigeTime = parameters.getCreateTime();
				}

				if (valueLow == null) {
					valueLow = value;
				}
				if (valueLowTime == null) {
					valueLowTime = parameters.getCreateTime();
				}
				if (value.compareTo(valueLow) == -1) {
					valueLow = value;
					valueLowTime = parameters.getCreateTime();
				}
			} else if (parameters.getType() == 4) {
				if (valueHige2 == null) {
					valueHige2 = value;
				}
				if (valueHigeTime2 == null) {
					valueHigeTime2 = parameters.getCreateTime();
				}
				if (value.compareTo(valueHige2) == 1) {
					valueHige2 = value;
					valueHigeTime2 = parameters.getCreateTime();
				}
				if (valueLow2 == null) {
					valueLow2 = value;
				}
				if (valueLowTime2 == null) {
					valueLowTime2 = parameters.getCreateTime();
				}
				if (value.compareTo(valueLow2) == -1) {
					valueLow2 = value;
					valueLowTime2 = parameters.getCreateTime();
				}
			}
		}

		// 统计区间
		String timeRange = minTime.substring(0, 4) + "-" + minTime.substring(4, 6) + "-" + minTime.substring(6, 8) + "～" + maxTime.substring(0, 4) + "-"
				+ maxTime.substring(4, 6) + "-" + maxTime.substring(6, 8);
		// 统计笔数
		int totalCount = totalCountTemp;
		// 异常笔数
		int yichangnew = yichang;
		// 偏高比例
		float highconfloat = Float.parseFloat(decimalFormat.format((float) highcon / (float) totalCountTemp));
		highconfloat = Float.parseFloat(decimalFormat.format(highconfloat * 100));
		String highPercent = String.valueOf(highconfloat) + "%";
		// 偏低比例
		float lowconfloat = Float.parseFloat(decimalFormat.format((float) lowcon / (float) totalCountTemp));
		lowconfloat = Float.parseFloat(decimalFormat.format(lowconfloat * 100));
		String lowPercent = String.valueOf(lowconfloat) + "%";
		int nolmal = totalCountTemp - yichang;
		// 正常比例
		float nolconfloat = Float.parseFloat(decimalFormat.format((float) nolmal / (float) totalCountTemp));
		nolconfloat = Float.parseFloat(decimalFormat.format(nolconfloat * 100));
		String nomalPercent = String.valueOf(nolconfloat) + "%";
		String highValue1 = null;
		if (valueHige != null && valueHigeTime != null) {
			highValue1 = "空腹血糖" + valueHige + "(" + valueHigeTime.substring(0, 4) + "-" + valueHigeTime.substring(4, 6) + "-" + valueHigeTime.substring(6, 8)
					+ ")";
		}
		String lowValue1 = null;
		if (valueLow != null && valueLowTime != null) {
			lowValue1 = "空腹血糖" + valueLow + "(" + valueLowTime.substring(0, 4) + "-" + valueLowTime.substring(4, 6) + "-" + valueLowTime.substring(6, 8) + ")";
		}
		String highValue2 = null;
		if (valueHige2 != null && valueHigeTime2 != null) {
			highValue2 = "餐后血糖" + valueHige2 + "(" + valueHigeTime2.substring(0, 4) + "-" + valueHigeTime2.substring(4, 6) + "-"
					+ valueHigeTime2.substring(6, 8) + ")";
		}
		String lowValue2 = null;
		if (valueLow2 != null && valueLowTime2 != null) {
			lowValue2 = "餐后血糖" + valueLow2 + "(" + valueLowTime2.substring(0, 4) + "-" + valueLowTime2.substring(4, 6) + "-" + valueLowTime2.substring(6, 8)
					+ ")";
		}
		JSONObject tongji = new JSONObject();
		tongji.put("timeRange", timeRange);
		tongji.put("totalCount", totalCount);
		tongji.put("inCount", yichangnew);
		tongji.put("nomalPercent", nomalPercent);
		tongji.put("highPercent", highPercent);
		tongji.put("lowPercent", lowPercent);
		tongji.put("highValue1", highValue1);
		tongji.put("lowValue1", lowValue1);
		tongji.put("highValue2", highValue2);
		tongji.put("lowValue2", lowValue2);
		return tongji;

	}

	/**
	 * 
	 * @param parametersList
	 * @return
	 * @throws ParseException
	 */
	private JSONObject getBloodPresure(List<PhysiologicalParametersHistoryEntity> parametersList) throws ParseException {
		PhysiologicalParametersHistoryEntity firstParameters = parametersList.get(0);
		String minTime = firstParameters.getCreateTime();
		String maxTime = firstParameters.getCreateTime();
		int lowcon = 0;
		int highcon = 0;
		int yichang = 0;
		int totalCountTemp = parametersList.size();
		BigDecimal valueHige = firstParameters.getValue();
		String valueHigeTime = firstParameters.getCreateTime();
		BigDecimal valueLow = firstParameters.getValue();
		String valueLowTime = firstParameters.getCreateTime();

		BigDecimal valueHige2 = firstParameters.getValue2();
		String valueHigeTime2 = firstParameters.getCreateTime();
		BigDecimal valueLow2 = firstParameters.getValue2();
		String valueLowTime2 = firstParameters.getCreateTime();

		for (PhysiologicalParametersHistoryEntity parameters : parametersList) {
			// 时间区间
			String olderTime = parameters.getCreateTime();
			if (olderTime != null) {
				Date min = formater.parse(minTime);
				Date max = formater.parse(maxTime);
				Date newTime = formater.parse(olderTime);
				if (newTime.getTime() < min.getTime()) {
					minTime = olderTime;
				}
				if (newTime.getTime() > max.getTime()) {
					maxTime = olderTime;
				}
			}
			// 统计笔数
			// totalCountTemp
			// 正常异常
			Integer statust = parameters.getStatus();
			Integer statust2 = parameters.getStatus2();
			if (statust != null && statust2 != null) {
				if (statust != 1 || statust2 != 1) {
					yichang++;
				}
				if (statust == 2 || statust2 == 2) {
					highcon++;
				}
				if (statust == 3 || statust2 == 3) {
					lowcon++;
				}
			}

			// 最高值1
			BigDecimal value = parameters.getValue();
			if (value.compareTo(valueHige) == 1) {
				valueHige = value;
				valueHigeTime = parameters.getCreateTime();
			}
			if (value.compareTo(valueLow) == -1) {
				valueLow = value;
				valueLowTime = parameters.getCreateTime();
			}
			// 最高值2
			BigDecimal value2 = parameters.getValue2();
			if (value2.compareTo(valueHige2) == 1) {
				valueHige2 = value2;
				valueHigeTime2 = parameters.getCreateTime();
			}
			if (value2.compareTo(valueLow2) == -1) {
				valueLow2 = value2;
				valueLowTime2 = parameters.getCreateTime();
			}
		}
		// 统计区间
		String timeRange = minTime.substring(0, 4) + "-" + minTime.substring(4, 6) + "-" + minTime.substring(6, 8) + "～" + maxTime.substring(0, 4) + "-"
				+ maxTime.substring(4, 6) + "-" + maxTime.substring(6, 8);
		// 统计笔数
		int totalCount = totalCountTemp;
		// 异常笔数
		int yichangnew = yichang;
		// 偏高比例
		float highconfloat = Float.parseFloat(decimalFormat.format((float) highcon / (float) totalCountTemp));
		highconfloat = Float.parseFloat(decimalFormat.format(highconfloat * 100));
		String highPercent = String.valueOf(highconfloat) + "%";
		// 偏低比例
		float lowconfloat = Float.parseFloat(decimalFormat.format((float) lowcon / (float) totalCountTemp));
		lowconfloat = Float.parseFloat(decimalFormat.format(lowconfloat * 100));
		String lowPercent = String.valueOf(lowconfloat) + "%";
		int nolmal = totalCountTemp - yichang;
		// 正常比例
		float nolconfloat = Float.parseFloat(decimalFormat.format((float) nolmal / (float) totalCountTemp));
		nolconfloat = Float.parseFloat(decimalFormat.format(nolconfloat * 100));
		String nomalPercent = String.valueOf(nolconfloat) + "%";
		//
		valueHige = valueHige.setScale(0, BigDecimal.ROUND_HALF_UP);
		valueHige2 = valueHige2.setScale(0, BigDecimal.ROUND_HALF_UP);
		valueLow = valueLow.setScale(0, BigDecimal.ROUND_HALF_UP);
		valueLow2 = valueLow2.setScale(0, BigDecimal.ROUND_HALF_UP);
		JSONObject tongji = new JSONObject();
		if (valueHige != null && valueHigeTime != null) {
			String highValue1 = "收缩压" + valueHige + "(" + valueHigeTime.substring(0, 4) + "-" + valueHigeTime.substring(4, 6) + "-"
					+ valueHigeTime.substring(6, 8) + ")";
			tongji.put("highValue1", highValue1);
		}
		if (valueHige2 != null && valueHigeTime2 != null) {
			String highValue2 = "舒张压" + valueHige2 + "(" + valueHigeTime2.substring(0, 4) + "-" + valueHigeTime2.substring(4, 6) + "-"
					+ valueHigeTime2.substring(6, 8) + ")";
			tongji.put("highValue2", highValue2);
		}
		if (valueLow != null && valueLowTime != null) {
			String lowValue1 = "收缩压" + valueLow + "(" + valueLowTime.substring(0, 4) + "-" + valueLowTime.substring(4, 6) + "-" + valueLowTime.substring(6, 8)
					+ ")";
			tongji.put("lowValue1", lowValue1);
		}
		if (valueLow2 != null && valueLowTime2 != null) {
			String lowValue2 = "舒张压" + valueLow2 + "(" + valueLowTime2.substring(0, 4) + "-" + valueLowTime2.substring(4, 6) + "-"
					+ valueLowTime2.substring(6, 8) + ")";
			tongji.put("lowValue2", lowValue2);
		}
		tongji.put("timeRange", timeRange);
		tongji.put("totalCount", totalCount);
		tongji.put("inCount", yichangnew);
		tongji.put("nomalPercent", nomalPercent);
		tongji.put("highPercent", highPercent);
		tongji.put("lowPercent", lowPercent);
		return tongji;
	}

	/**
	 * 
	 * @return
	 */
	private JSONObject getNullStatistics() {
		JSONObject tongji = new JSONObject();
		tongji.put("timeRange", 0);
		tongji.put("totalCount", 0);
		tongji.put("inCount", 0);
		tongji.put("nomalPercent", "");
		tongji.put("highPercent", "");
		tongji.put("lowPercent", "");
		tongji.put("highValue1", "");
		tongji.put("lowValue1", "");
		tongji.put("highValue2", "");
		tongji.put("lowValue2", "");
		return tongji;
	}
}
