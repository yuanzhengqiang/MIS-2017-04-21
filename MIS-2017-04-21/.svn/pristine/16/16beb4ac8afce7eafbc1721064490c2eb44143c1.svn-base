package fsk.service.examinationRecord;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.imageio.stream.FileImageOutputStream;

import org.apache.log4j.Logger;

import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

import fsk.entity.employee.EmployeeEntity;
import fsk.entity.examinationData.ExaminationDataEntity;
import fsk.entity.examinationDataFile.ExaminationDataFileEntity;
import fsk.entity.examinationDataPhoto.ExaminationDataPhotoEntity;
import fsk.entity.examinationRecord.ExaminationRecordEntity;
import fsk.entity.examinationRecordFile.ExaminationRecordFileEntity;
import fsk.entity.examinationRecordPhoto.ExaminationRecordPhotoEntity;
import fsk.entity.older.OlderEntity;
import fsk.handler.older.OlderHandler;
import fsk.init.SystemInit;
import fsk.util.Base64Utils;
import fsk.util.FileUtil;

/**
 * @Title: Service
 * @Description: 体检记录信息表服务类
 * @author feng.gu
 * @date 2016-10-11 15:23:10
 * @version V1.0
 * 
 */
public class ExaminationRecordService {
	private static Logger logger = Logger
			.getLogger(ExaminationRecordService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static ExaminationRecordService examinationRecordService;

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static ExaminationRecordService getInstance() {
		if (examinationRecordService == null) {
			examinationRecordService = new ExaminationRecordService();
		}
		return examinationRecordService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(ExaminationRecordEntity examinationRecord) {
		boolean result = false;
		if (examinationRecord != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 关联信息保存
				OlderEntity older = examinationRecord.getOlder();
				if (older != null) {
					dbManager.saveNoTransaction(older);
					examinationRecord.setOlderId(older.getId());
				}
				// 关联信息保存
				EmployeeEntity createEmployee = examinationRecord
						.getCreateEmployee();
				if (createEmployee != null) {
					dbManager.saveNoTransaction(createEmployee);
					examinationRecord.setCreateEmployeeId(createEmployee.getId());
				}
				if (examinationRecord.getExaminationRecordFileList() != null
						&& examinationRecord.getExaminationRecordFileList()
								.size() > 0) {
					// 关联信息保存
					if (examinationRecord.getId() == null) {
						dbManager.saveNoTransaction(examinationRecord);
					}
					for (ExaminationRecordFileEntity examinationRecordFileEntity : examinationRecord
							.getExaminationRecordFileList()) {
						examinationRecordFileEntity
								.setExaminationRecordId(examinationRecord
										.getId());
						// 保存正式文件
						String url = examinationRecordFileEntity.getUrl();
						if (url != null && url.startsWith("http")) {
							String separator = FileUtil.getFileSeparator();
							String path = OlderHandler.class.getResource(
									"OlderHandler.class").toString();
							if ("file".equals(path.substring(0, 4))) {
								if ("\\".equals(separator))
									path = path.substring(6);
								else {
									path = path.substring(5);
								}
							}
							String localPath = path.substring(0, path.indexOf("WEB-INF")) + "uploadFiles" + separator + "linshi" + separator;
							String urlTemp = localPath+url.substring(url.lastIndexOf("/"), url.length());
							File oldfile = new File(urlTemp);
							if (oldfile.exists()) {// 文件存在
								InputStream in = new FileInputStream(urlTemp);// 读源文件
								String newPath = path.substring(0, path.indexOf("WEB-INF")) + "uploadFiles" + separator + "tijianFiles" + separator;
								FileOutputStream fileout = new FileOutputStream(
										newPath+oldfile.getName());// 写入新的文件夹
								byte[] buffer = new byte[2048];
								int bytesum = 0;
								int byteread = 0;
								while ((byteread = in.read(buffer)) != -1) {
									bytesum += byteread; // 字节数 文件大小
									fileout.write(buffer, 0, byteread);
								}
								fileout.close();
								in.close();
								//文件保存后删除临时文件删除临时文件
								oldfile.delete();
							}
						}
						examinationRecordFileEntity.setId(null);
						dbManager
								.saveNoTransaction(examinationRecordFileEntity);
					}
				}
				// 照片保存
				// 先过滤已经使用的照片编号
				ArrayList<Integer> number = new ArrayList<Integer>();
				number.add(0, 0);
				number.add(1, 1);
				number.add(2, 2);
				number.add(3, 3);
				number.add(4, 4);
				number.add(5, 5);
				number.add(6, 6);

				if (examinationRecord.getExaminationRecordPhotoList() != null
						&& examinationRecord.getExaminationRecordPhotoList()
								.size() > 0) {
					for (ExaminationRecordPhotoEntity examinationRecordPhotoEntity : examinationRecord
							.getExaminationRecordPhotoList()) {
						String photourl = examinationRecordPhotoEntity.getUrl();
						if (photourl.startsWith("http")) {// http开头直接保存
							int index = -1;
							String str = photourl.substring(photourl.length() - 5,photourl.length() - 4);
							int numberindex = Integer.parseInt(str);
							index = number.indexOf(numberindex);
							if (index != -1) {
								number.remove(index);
							}
						}
					}
				}
				if (examinationRecord.getExaminationRecordPhotoList() != null
						&& examinationRecord.getExaminationRecordPhotoList()
								.size() > 0) {
					// 关联信息保存
					if (examinationRecord.getId() == null) {
						dbManager.saveNoTransaction(examinationRecord);
					}
					int n = 0;// 在剩余的编号中取
					for (ExaminationRecordPhotoEntity examinationRecordPhotoEntity : examinationRecord
							.getExaminationRecordPhotoList()) {
						examinationRecordPhotoEntity.setExaminationRecordId(examinationRecord.getId());
						String url = examinationRecordPhotoEntity.getUrl();
						String fileName = "examinationRecordPhoto_"+ examinationRecord.getId() + "_"+ number.get(n) + ".jpg";
						if (!url.startsWith("http")) {
							url = savePhoto(url, fileName);
							examinationRecordPhotoEntity.setUrl(url);
						}
						examinationRecordPhotoEntity.setId(null);
						n++;
						dbManager.saveNoTransaction(examinationRecordPhotoEntity);
					}
				}
				if (examinationRecord.getExaminationDataList() != null
						&& examinationRecord.getExaminationDataList().size() > 0) {
					// 关联信息保存
					if (examinationRecord.getId() == null) {
						dbManager.saveNoTransaction(examinationRecord);
					}
					for (ExaminationDataEntity examinationDataEntity : examinationRecord
							.getExaminationDataList()) {
						examinationDataEntity.setExaminationRecordId(examinationRecord.getId());
						examinationDataEntity.setId(null);
						dbManager.saveNoTransaction(examinationDataEntity);
						// 保存文件
						if (examinationDataEntity.getExaminationDataFileList() != null
								&& examinationDataEntity.getExaminationDataFileList().size() > 0) {
							for (ExaminationDataFileEntity examinationDataFileEntity : examinationDataEntity
									.getExaminationDataFileList()) {
								String url = examinationDataFileEntity.getUrl();
								if (url != null && url.startsWith("http")) {
									String separator = FileUtil.getFileSeparator();
									String path = OlderHandler.class.getResource("OlderHandler.class").toString();
									if ("file".equals(path.substring(0, 4))) {
										if ("\\".equals(separator))
											path = path.substring(6);
										else {
											path = path.substring(5);
										}
									}
									String localPath = path.substring(0, path.indexOf("WEB-INF")) + "uploadFiles" + separator + "linshi" + separator;
									String urlTemp = localPath+url.substring(url.lastIndexOf("/"), url.length());
									File oldfile = new File(urlTemp);
									if (oldfile.exists()) {// 文件存在
										InputStream in = new FileInputStream(urlTemp);// 读源文件
										String newPath = path.substring(0, path.indexOf("WEB-INF")) + "uploadFiles" + separator + "tijianFiles" + separator;
										FileOutputStream fileout = new FileOutputStream(newPath+oldfile.getName());// 写入新的文件夹
										byte[] buffer = new byte[2048];
										int bytesum = 0;
										int byteread = 0;
										while ((byteread = in.read(buffer)) != -1) {
											bytesum += byteread; // 字节数 文件大小
											fileout.write(buffer, 0, byteread);
										}
										fileout.close();
										in.close();
										//文件保存后删除临时文件删除临时文件
										oldfile.delete();
									}
								}
								examinationDataFileEntity.setId(null);
								examinationDataFileEntity
										.setExaminationDataId(examinationDataEntity
												.getId());
								dbManager.saveNoTransaction(examinationDataFileEntity);
							}
						}
						// 关联数据表的照片关联表
						if (examinationDataEntity.getExaminationDataPhotoList() != null
								&& examinationDataEntity
										.getExaminationDataPhotoList().size() > 0) {
							// 先过滤已经使用的照片编号
							ArrayList<Integer> numberadd = new ArrayList<Integer>();
							numberadd.add(0, 0);
							numberadd.add(1, 1);
							numberadd.add(2, 2);
							numberadd.add(3, 3);
							numberadd.add(4, 4);
							numberadd.add(5, 5);
							numberadd.add(6, 6);
							for (ExaminationDataPhotoEntity entity : examinationDataEntity
									.getExaminationDataPhotoList()) {
								String photourl = entity.getUrl();
								if (photourl.startsWith("http")) {// http开头直接保存
									int index = -1;
									String str = photourl.substring(photourl.length() - 5,photourl.length() - 4);
									int numberindex = Integer.parseInt(str);
									index = number.indexOf(numberindex);
									if (index != -1) {
										number.remove(index);
									}
								}
							}
							int n = 0;// 在剩余的编号中取
							for (ExaminationDataPhotoEntity entity : examinationDataEntity
									.getExaminationDataPhotoList()) {
								String url = entity.getUrl();
								String fileName = "examinationDataPhoto_"+ examinationDataEntity.getId() + "_"+ number.get(n) + ".jpg";
								if (!url.startsWith("http")) {
									url = savePhoto2(url, fileName);
								}
								entity.setUrl(url);
								entity.setExaminationDataId(examinationDataEntity.getId());
								n++;
								entity.setId(null);
								dbManager.saveNoTransaction(entity);
							}
						}
					}
				}
				result = dbManager.saveNoTransaction(examinationRecord);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(List<ExaminationRecordEntity> examinationRecordList) {
		boolean result = false;
		if (examinationRecordList != null && examinationRecordList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (ExaminationRecordEntity examinationRecord : examinationRecordList) {
					if (examinationRecord != null) {
						// 关联信息保存
						OlderEntity older = examinationRecord.getOlder();
						if (older != null) {
							dbManager.saveNoTransaction(older);
							examinationRecord.setOlderId(older.getId());
						}
						// 关联信息保存
						EmployeeEntity createEmployee = examinationRecord
								.getCreateEmployee();
						if (createEmployee != null) {
							dbManager.saveNoTransaction(createEmployee);
							examinationRecord
									.setCreateEmployeeId(createEmployee.getId());
						}
						// 关联信息保存
						if (examinationRecord.getExaminationRecordFileList() != null
								&& examinationRecord
										.getExaminationRecordFileList().size() > 0) {
							if (examinationRecord.getId() == null) {
								dbManager.saveNoTransaction(examinationRecord);
							}
							for (ExaminationRecordFileEntity examinationRecordFileEntity : examinationRecord
									.getExaminationRecordFileList()) {
								examinationRecordFileEntity
										.setExaminationRecordId(examinationRecord
												.getId());
								dbManager
										.saveNoTransaction(examinationRecordFileEntity);
							}
						}
						// 关联信息保存
						if (examinationRecord.getExaminationRecordPhotoList() != null
								&& examinationRecord
										.getExaminationRecordPhotoList().size() > 0) {
							if (examinationRecord.getId() == null) {
								dbManager.saveNoTransaction(examinationRecord);
							}
							for (ExaminationRecordPhotoEntity examinationRecordPhotoEntity : examinationRecord
									.getExaminationRecordPhotoList()) {
								examinationRecordPhotoEntity
										.setExaminationRecordId(examinationRecord
												.getId());
								dbManager
										.saveNoTransaction(examinationRecordPhotoEntity);
							}
						}
						// 关联信息保存
						if (examinationRecord.getExaminationDataList() != null
								&& examinationRecord.getExaminationDataList()
										.size() > 0) {
							if (examinationRecord.getId() == null) {
								dbManager.saveNoTransaction(examinationRecord);
							}
							for (ExaminationDataEntity examinationDataEntity : examinationRecord
									.getExaminationDataList()) {
								examinationDataEntity
										.setExaminationRecordId(examinationRecord
												.getId());
								dbManager
										.saveNoTransaction(examinationDataEntity);
							}
						}
						result = dbManager.saveNoTransaction(examinationRecord);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public ExaminationRecordEntity getById(Integer id) {
		ExaminationRecordEntity obj = null;
		if (id != null) {
			obj = (ExaminationRecordEntity) dbManager.getById(id,
					ExaminationRecordEntity.class);
		}
		return obj;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param olderShow
	 *            是否查询关联信息
	 * @param createEmployeeShow
	 *            是否查询关联信息
	 * @param examinationRecordFileListShow
	 *            是否查询关联信息
	 * @param examinationRecordPhotoListShow
	 *            是否查询关联信息
	 * @param examinationDataListShow
	 *            是否查询关联信息
	 * @param obj
	 */
	public ExaminationRecordEntity getById(Integer id, Boolean olderShow,
			Boolean createEmployeeShow, Boolean examinationRecordFileListShow,
			Boolean examinationRecordPhotoListShow,
			Boolean examinationDataListShow) {
		ExaminationRecordEntity obj = null;
		if (id != null) {
			obj = (ExaminationRecordEntity) dbManager.getById(id,
					ExaminationRecordEntity.class);
			// 查询关联内容
			if (olderShow != null && olderShow.booleanValue() && obj != null
					&& obj.getOlderId() != null && obj.getOlderId() > 0) {
				OlderEntity older = (OlderEntity) dbManager.getById(
						obj.getOlderId(), OlderEntity.class);
				obj.setOlder(older);
			}
			// 查询关联内容
			if (createEmployeeShow != null && createEmployeeShow.booleanValue()
					&& obj != null && obj.getCreateEmployeeId() != null
					&& obj.getCreateEmployeeId() > 0) {
				EmployeeEntity createEmployee = (EmployeeEntity) dbManager
						.getById(obj.getCreateEmployeeId(),
								EmployeeEntity.class);
				obj.setCreateEmployee(createEmployee);
			}
			// 查询关联内容
			if (examinationRecordFileListShow != null
					&& examinationRecordFileListShow.booleanValue()
					&& obj != null && obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(
						ExaminationRecordFileEntity.class,
						ExaminationRecordFileEntity.EXAMINATION_RECORD_ID,
						String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<ExaminationRecordFileEntity> examinationRecordFileList = new ArrayList<ExaminationRecordFileEntity>();
					for (Object o : list) {
						examinationRecordFileList
								.add((ExaminationRecordFileEntity) o);
					}
					obj.setExaminationRecordFileList(examinationRecordFileList);
				}
			}
			// 查询关联内容
			if (examinationRecordPhotoListShow != null
					&& examinationRecordPhotoListShow.booleanValue()
					&& obj != null && obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(
						ExaminationRecordPhotoEntity.class,
						ExaminationRecordPhotoEntity.EXAMINATION_RECORD_ID,
						String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<ExaminationRecordPhotoEntity> examinationRecordPhotoList = new ArrayList<ExaminationRecordPhotoEntity>();
					for (Object o : list) {
						examinationRecordPhotoList
								.add((ExaminationRecordPhotoEntity) o);
					}
					obj.setExaminationRecordPhotoList(examinationRecordPhotoList);
				}
			}
			// 查询关联内容
			if (examinationDataListShow != null
					&& examinationDataListShow.booleanValue() && obj != null
					&& obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(
						ExaminationDataEntity.class,
						ExaminationDataEntity.EXAMINATION_RECORD_ID,
						String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<ExaminationDataEntity> examinationDataList = new ArrayList<ExaminationDataEntity>();
					for (Object o : list) {
						// 加入体检数据表的关联表-文件
						ExaminationDataEntity examinationData = (ExaminationDataEntity) o;
						Integer dataid = examinationData.getId();
						List<Object> filelist = dbManager.searchListByColumn(
								ExaminationDataFileEntity.class,
								ExaminationDataFileEntity.EXAMINATION_DATA_ID,
								String.valueOf(dataid));
						if (filelist != null && filelist.size() > 0) {
							List<ExaminationDataFileEntity> fileentitylist = new ArrayList<ExaminationDataFileEntity>();
							for (Object fileobj : filelist) {
								ExaminationDataFileEntity entity = (ExaminationDataFileEntity) fileobj;
								fileentitylist.add(entity);
							}
							examinationData
									.setExaminationDataFileList(fileentitylist);
						}
						// 加入体检数据表的关联表-图片
						List<Object> piclist = dbManager.searchListByColumn(
								ExaminationDataPhotoEntity.class,
								ExaminationDataPhotoEntity.EXAMINATION_DATA_ID,
								String.valueOf(dataid));
						if (piclist != null && piclist.size() > 0) {
							List<ExaminationDataPhotoEntity> picentitylist = new ArrayList<ExaminationDataPhotoEntity>();
							for (Object picobj : piclist) {
								ExaminationDataPhotoEntity entity = (ExaminationDataPhotoEntity) picobj;
								picentitylist.add(entity);
							}
							examinationData
									.setExaminationDataPhotoList(picentitylist);
						}

						examinationDataList.add(examinationData);
					}
					obj.setExaminationDataList(examinationDataList);
				}
			}
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<ExaminationRecordEntity> getListByCondition(
			Map<String, Object> queryMap) {
		List<ExaminationRecordEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		list = dbManager.queryByCondition(ExaminationRecordEntity.class, qc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<ExaminationRecordEntity>();
			for (Object obj : list) {
				returnlist.add((ExaminationRecordEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param olderShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param createEmployeeShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param examinationRecordFileListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param examinationRecordPhotoListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param examinationDataListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public List<ExaminationRecordEntity> getListByCondition(
			Map<String, Object> queryMap, List<OrderVO> orderList,
			Boolean olderShow, Boolean createEmployeeShow,
			Boolean examinationRecordFileListShow,
			Boolean examinationRecordPhotoListShow,
			Boolean examinationDataListShow) {
		List<ExaminationRecordEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(ExaminationRecordEntity.class, qc,
				oc);
		int a = 0;
		if (olderShow != null && olderShow.booleanValue()) {
			a++;
		}
		if (createEmployeeShow != null && createEmployeeShow.booleanValue()) {
			a++;
		}
		if (examinationRecordFileListShow != null
				&& examinationRecordFileListShow.booleanValue()) {
			a++;
		}
		if (examinationRecordPhotoListShow != null
				&& examinationRecordPhotoListShow.booleanValue()) {
			a++;
		}
		if (examinationDataListShow != null
				&& examinationDataListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && list != null && list.size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < list.size(); i++) {
				ExaminationRecordEntity obj = (ExaminationRecordEntity) list
						.get(i);
				// 查询关联内容
				if (olderShow != null && olderShow.booleanValue()
						&& obj != null && obj.getOlderId() != null
						&& obj.getOlderId() > 0) {
					OlderEntity older = (OlderEntity) dbManager.getById(
							obj.getOlderId(), OlderEntity.class);
					obj.setOlder(older);
				}
				// 查询关联内容
				if (createEmployeeShow != null
						&& createEmployeeShow.booleanValue() && obj != null
						&& obj.getCreateEmployeeId() != null
						&& obj.getCreateEmployeeId() > 0) {
					EmployeeEntity createEmployee = (EmployeeEntity) dbManager
							.getById(obj.getCreateEmployeeId(),
									EmployeeEntity.class);
					obj.setCreateEmployee(createEmployee);
				}
				// 查询关联内容
				if (examinationRecordFileListShow != null
						&& examinationRecordFileListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							ExaminationRecordFileEntity.class,
							ExaminationRecordFileEntity.EXAMINATION_RECORD_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<ExaminationRecordFileEntity> examinationRecordFileList = new ArrayList<ExaminationRecordFileEntity>();
						for (Object o : objList) {
							examinationRecordFileList
									.add((ExaminationRecordFileEntity) o);
						}
						obj.setExaminationRecordFileList(examinationRecordFileList);
					}
				}
				// 查询关联内容
				if (examinationRecordPhotoListShow != null
						&& examinationRecordPhotoListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							ExaminationRecordPhotoEntity.class,
							ExaminationRecordPhotoEntity.EXAMINATION_RECORD_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<ExaminationRecordPhotoEntity> examinationRecordPhotoList = new ArrayList<ExaminationRecordPhotoEntity>();
						for (Object o : objList) {
							examinationRecordPhotoList
									.add((ExaminationRecordPhotoEntity) o);
						}
						obj.setExaminationRecordPhotoList(examinationRecordPhotoList);
					}
				}
				// 查询关联内容
				if (examinationDataListShow != null
						&& examinationDataListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							ExaminationDataEntity.class,
							ExaminationDataEntity.EXAMINATION_RECORD_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<ExaminationDataEntity> examinationDataList = new ArrayList<ExaminationDataEntity>();
						for (Object o : objList) {
							examinationDataList.add((ExaminationDataEntity) o);
						}
						obj.setExaminationDataList(examinationDataList);
					}
				}
				result.add(obj);
			}
			list = result;
		}
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<ExaminationRecordEntity>();
			for (Object obj : list) {
				returnlist.add((ExaminationRecordEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		pagelist = dbManager.queryByCondition(ExaminationRecordEntity.class,
				qc, pageno, pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @param olderShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param createEmployeeShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param examinationRecordFileListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param examinationRecordPhotoListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param examinationDataListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, int pageno, int pagesize,
			Boolean olderShow, Boolean createEmployeeShow,
			Boolean examinationRecordFileListShow,
			Boolean examinationRecordPhotoListShow,
			Boolean examinationDataListShow) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		// 数据权限
		List<QueryCondition> dataRuleQclist = null;
		List<Map<String, Object>> dataRuleMapList = (List<Map<String, Object>>) queryMap
				.get("dataRuleMapList");
		if (dataRuleMapList != null && dataRuleMapList.size() > 0) {
			dataRuleQclist = new ArrayList<QueryCondition>();
			for (Map<String, Object> dataRuleMap : dataRuleMapList) {
				QueryCondition dataRuleQc = changeMapToQc(dataRuleMap);
				dataRuleQclist.add(dataRuleQc);
			}
		}
		pagelist = dbManager.queryByConditions(ExaminationRecordEntity.class,
				qc, dataRuleQclist, oc, pageno, pagesize);
		int a = 0;
		if (olderShow != null && olderShow.booleanValue()) {
			a++;
		}
		if (createEmployeeShow != null && createEmployeeShow.booleanValue()) {
			a++;
		}
		if (examinationRecordFileListShow != null
				&& examinationRecordFileListShow.booleanValue()) {
			a++;
		}
		if (examinationRecordPhotoListShow != null
				&& examinationRecordPhotoListShow.booleanValue()) {
			a++;
		}
		if (examinationDataListShow != null
				&& examinationDataListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && pagelist != null && pagelist.getResultList() != null
				&& pagelist.getResultList().size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < pagelist.getResultList().size(); i++) {
				ExaminationRecordEntity obj = (ExaminationRecordEntity) pagelist
						.getResultList().get(i);
				// 查询关联内容
				if (olderShow != null && olderShow.booleanValue()
						&& obj != null && obj.getOlderId() != null
						&& obj.getOlderId() > 0) {
					OlderEntity older = (OlderEntity) dbManager.getById(
							obj.getOlderId(), OlderEntity.class);
					obj.setOlder(older);
				}
				// 查询关联内容
				if (createEmployeeShow != null
						&& createEmployeeShow.booleanValue() && obj != null
						&& obj.getCreateEmployeeId() != null
						&& obj.getCreateEmployeeId() > 0) {
					EmployeeEntity createEmployee = (EmployeeEntity) dbManager
							.getById(obj.getCreateEmployeeId(),
									EmployeeEntity.class);
					obj.setCreateEmployee(createEmployee);
				}
				// 查询关联内容
				if (examinationRecordFileListShow != null
						&& examinationRecordFileListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							ExaminationRecordFileEntity.class,
							ExaminationRecordFileEntity.EXAMINATION_RECORD_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<ExaminationRecordFileEntity> examinationRecordFileList = new ArrayList<ExaminationRecordFileEntity>();
						for (Object o : objList) {
							examinationRecordFileList
									.add((ExaminationRecordFileEntity) o);
						}
						obj.setExaminationRecordFileList(examinationRecordFileList);
					}
				}
				// 查询关联内容
				if (examinationRecordPhotoListShow != null
						&& examinationRecordPhotoListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							ExaminationRecordPhotoEntity.class,
							ExaminationRecordPhotoEntity.EXAMINATION_RECORD_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<ExaminationRecordPhotoEntity> examinationRecordPhotoList = new ArrayList<ExaminationRecordPhotoEntity>();
						for (Object o : objList) {
							examinationRecordPhotoList
									.add((ExaminationRecordPhotoEntity) o);
						}
						obj.setExaminationRecordPhotoList(examinationRecordPhotoList);
					}
				}
				// 查询关联内容
				if (examinationDataListShow != null
						&& examinationDataListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(
							ExaminationDataEntity.class,
							ExaminationDataEntity.EXAMINATION_RECORD_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<ExaminationDataEntity> examinationDataList = new ArrayList<ExaminationDataEntity>();
						for (Object o : objList) {
							examinationDataList.add((ExaminationDataEntity) o);
						}
						obj.setExaminationDataList(examinationDataList);
					}
				}
				result.add(obj);
			}
			pagelist.setResultList(result);
		}
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id, Boolean delOlder, Boolean delCreateEmployee,
			Boolean delExaminationRecordFileList,
			Boolean delExaminationRecordPhotoList,
			Boolean delExaminationDataList) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delOlder != null && delOlder.booleanValue()) {
					ExaminationRecordEntity examinationRecord = (ExaminationRecordEntity) dbManager
							.getById(id, ExaminationRecordEntity.class);
					if (examinationRecord != null
							&& examinationRecord.getOlderId() != null) {
						dbManager.delNoTransaction(
								examinationRecord.getOlderId(),
								OlderEntity.class);
					}
				}
				// 删除关联信息
				if (delCreateEmployee != null
						&& delCreateEmployee.booleanValue()) {
					ExaminationRecordEntity examinationRecord = (ExaminationRecordEntity) dbManager
							.getById(id, ExaminationRecordEntity.class);
					if (examinationRecord != null
							&& examinationRecord.getCreateEmployeeId() != null) {
						dbManager.delNoTransaction(
								examinationRecord.getCreateEmployeeId(),
								EmployeeEntity.class);
					}
				}
				// 删除关联信息
				if (delExaminationRecordFileList != null
						&& delExaminationRecordFileList.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							ExaminationRecordFileEntity.EXAMINATION_RECORD_ID,
							QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(
							ExaminationRecordFileEntity.class, qc);
				}
				// 删除关联信息
				if (delExaminationRecordPhotoList != null
						&& delExaminationRecordPhotoList.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							ExaminationRecordPhotoEntity.EXAMINATION_RECORD_ID,
							QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(
							ExaminationRecordPhotoEntity.class, qc);
				}
				// 删除关联信息
				if (delExaminationDataList != null
						&& delExaminationDataList.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							ExaminationDataEntity.EXAMINATION_RECORD_ID,
							QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(
							ExaminationDataEntity.class, qc);
				}
				result = dbManager.delNoTransaction(id,
						ExaminationRecordEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(
						ExaminationRecordEntity.ID, QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(
						ExaminationRecordEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap, Boolean delOlder,
			Boolean delCreateEmployee, Boolean delExaminationRecordFileList,
			Boolean delExaminationRecordPhotoList,
			Boolean delExaminationDataList) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delOlder != null && delOlder.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ExaminationRecordEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ExaminationRecordEntity entity = (ExaminationRecordEntity) obj;
							strIds += entity.getOlderId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(OlderEntity.ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								OlderEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delCreateEmployee != null
						&& delCreateEmployee.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ExaminationRecordEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ExaminationRecordEntity entity = (ExaminationRecordEntity) obj;
							strIds += entity.getCreateEmployeeId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								EmployeeEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								EmployeeEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delExaminationRecordFileList != null
						&& delExaminationRecordFileList.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ExaminationRecordEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ExaminationRecordEntity entity = (ExaminationRecordEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								ExaminationRecordFileEntity.EXAMINATION_RECORD_ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								ExaminationRecordFileEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delExaminationRecordPhotoList != null
						&& delExaminationRecordPhotoList.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ExaminationRecordEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ExaminationRecordEntity entity = (ExaminationRecordEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								ExaminationRecordPhotoEntity.EXAMINATION_RECORD_ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								ExaminationRecordPhotoEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delExaminationDataList != null
						&& delExaminationDataList.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									ExaminationRecordEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							ExaminationRecordEntity entity = (ExaminationRecordEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								ExaminationDataEntity.EXAMINATION_RECORD_ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								ExaminationDataEntity.class, qc1);
					}

				}
				result = dbManager.delByConditionsNoTransaction(
						ExaminationRecordEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	private QueryCondition changeMapToQc(Map<String, Object> queryMap) {
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object olderId = queryMap.get("olderId");
		Object olderId_gt = queryMap.get("olderId_gt");
		Object olderId_ge = queryMap.get("olderId_ge");
		Object olderId_lt = queryMap.get("olderId_lt");
		Object olderId_le = queryMap.get("olderId_le");
		Object olderId_in = queryMap.get("olderId_in");
		Object olderName = queryMap.get("olderName");
		Object olderName_like = queryMap.get("olderName_like");
		Object olderName_isNull = queryMap.get("olderName_isNull");
		Object olderName_isNotNull = queryMap.get("olderName_isNotNull");
		Object olderName_in = queryMap.get("olderName_in");
		Object olderAge = queryMap.get("olderAge");
		Object olderAge_like = queryMap.get("olderAge_like");
		Object olderAge_isNull = queryMap.get("olderAge_isNull");
		Object olderAge_isNotNull = queryMap.get("olderAge_isNotNull");
		Object olderAge_in = queryMap.get("olderAge_in");
		Object examinationOrganization = queryMap
				.get("examinationOrganization");
		Object examinationOrganization_like = queryMap
				.get("examinationOrganization_like");
		Object examinationOrganization_isNull = queryMap
				.get("examinationOrganization_isNull");
		Object examinationOrganization_isNotNull = queryMap
				.get("examinationOrganization_isNotNull");
		Object examinationOrganization_in = queryMap
				.get("examinationOrganization_in");
		Object examinationTime_gt = queryMap.get("examinationTime_gt");
		Object examinationTime_ge = queryMap.get("examinationTime_ge");
		Object examinationTime_lt = queryMap.get("examinationTime_lt");
		Object examinationTime_le = queryMap.get("examinationTime_le");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");
		Object createEmployeeId = queryMap.get("createEmployeeId");
		Object createEmployeeId_gt = queryMap.get("createEmployeeId_gt");
		Object createEmployeeId_ge = queryMap.get("createEmployeeId_ge");
		Object createEmployeeId_lt = queryMap.get("createEmployeeId_lt");
		Object createEmployeeId_le = queryMap.get("createEmployeeId_le");
		Object createEmployeeId_in = queryMap.get("createEmployeeId_in");
		Object createEmployeeName = queryMap.get("createEmployeeName");
		Object createEmployeeName_like = queryMap
				.get("createEmployeeName_like");
		Object createEmployeeName_isNull = queryMap
				.get("createEmployeeName_isNull");
		Object createEmployeeName_isNotNull = queryMap
				.get("createEmployeeName_isNotNull");
		Object createEmployeeName_in = queryMap.get("createEmployeeName_in");
		Object contactTel = queryMap.get("contactTel");
		Object contactTel_like = queryMap.get("contactTel_like");
		Object contactTel_isNull = queryMap.get("contactTel_isNull");
		Object contactTel_isNotNull = queryMap.get("contactTel_isNotNull");
		Object contactTel_in = queryMap.get("contactTel_in");
		Object conclusion = queryMap.get("conclusion");
		Object conclusion_like = queryMap.get("conclusion_like");
		Object conclusion_isNull = queryMap.get("conclusion_isNull");
		Object conclusion_isNotNull = queryMap.get("conclusion_isNotNull");
		Object conclusion_in = queryMap.get("conclusion_in");
		Object suggestion = queryMap.get("suggestion");
		Object suggestion_like = queryMap.get("suggestion_like");
		Object suggestion_isNull = queryMap.get("suggestion_isNull");
		Object suggestion_isNotNull = queryMap.get("suggestion_isNotNull");
		Object suggestion_in = queryMap.get("suggestion_in");

		QueryCondition qc = new QueryCondition(ExaminationRecordEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(ExaminationRecordEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(ExaminationRecordEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(ExaminationRecordEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(ExaminationRecordEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(ExaminationRecordEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(ExaminationRecordEntity.ID,
					QueryCondition.in, id_in));
		}
		if (olderId != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.OLDER_ID, QueryCondition.eq,
					olderId));
		}
		if (olderId_gt != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.OLDER_ID, QueryCondition.gt,
					olderId_gt));
		}
		if (olderId_ge != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.OLDER_ID, QueryCondition.ge,
					olderId_ge));
		}
		if (olderId_lt != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.OLDER_ID, QueryCondition.lt,
					olderId_lt));
		}
		if (olderId_le != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.OLDER_ID, QueryCondition.le,
					olderId_le));
		}
		if (olderId_in != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.OLDER_ID, QueryCondition.in,
					olderId_in));
		}
		if (olderName != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.OLDER_NAME, QueryCondition.eq,
					olderName));
		}
		if (olderName_like != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.OLDER_NAME, QueryCondition.like,
					olderName_like));
		}
		if (olderName_isNull != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.OLDER_NAME, QueryCondition.isNull,
					olderName_isNull));
		}
		if (olderName_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.OLDER_NAME,
					QueryCondition.isNotNull, olderName_isNotNull));
		}
		if (olderName_in != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.OLDER_NAME, QueryCondition.in,
					olderName_in));
		}
		if (olderAge != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.OLDER_AGE, QueryCondition.eq,
					olderAge));
		}
		if (olderAge_like != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.OLDER_AGE, QueryCondition.like,
					olderAge_like));
		}
		if (olderAge_isNull != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.OLDER_AGE, QueryCondition.isNull,
					olderAge_isNull));
		}
		if (olderAge_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.OLDER_AGE,
					QueryCondition.isNotNull, olderAge_isNotNull));
		}
		if (olderAge_in != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.OLDER_AGE, QueryCondition.in,
					olderAge_in));
		}
		if (examinationOrganization != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.EXAMINATION_ORGANIZATION,
					QueryCondition.eq, examinationOrganization));
		}
		if (examinationOrganization_like != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.EXAMINATION_ORGANIZATION,
					QueryCondition.like, examinationOrganization_like));
		}
		if (examinationOrganization_isNull != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.EXAMINATION_ORGANIZATION,
					QueryCondition.isNull, examinationOrganization_isNull));
		}
		if (examinationOrganization_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.EXAMINATION_ORGANIZATION,
					QueryCondition.isNotNull, examinationOrganization_isNotNull));
		}
		if (examinationOrganization_in != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.EXAMINATION_ORGANIZATION,
					QueryCondition.in, examinationOrganization_in));
		}
		if (examinationTime_gt != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.EXAMINATION_TIME,
					QueryCondition.gt, examinationTime_gt));
		}
		if (examinationTime_ge != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.EXAMINATION_TIME,
					QueryCondition.ge, examinationTime_ge));
		}
		if (examinationTime_lt != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.EXAMINATION_TIME,
					QueryCondition.lt, examinationTime_lt));
		}
		if (examinationTime_le != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.EXAMINATION_TIME,
					QueryCondition.le, examinationTime_le));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CREATE_TIME, QueryCondition.gt,
					createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CREATE_TIME, QueryCondition.ge,
					createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CREATE_TIME, QueryCondition.lt,
					createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CREATE_TIME, QueryCondition.le,
					createTime_le));
		}
		if (createEmployeeId != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CREATE_EMPLOYEE_ID,
					QueryCondition.eq, createEmployeeId));
		}
		if (createEmployeeId_gt != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CREATE_EMPLOYEE_ID,
					QueryCondition.gt, createEmployeeId_gt));
		}
		if (createEmployeeId_ge != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CREATE_EMPLOYEE_ID,
					QueryCondition.ge, createEmployeeId_ge));
		}
		if (createEmployeeId_lt != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CREATE_EMPLOYEE_ID,
					QueryCondition.lt, createEmployeeId_lt));
		}
		if (createEmployeeId_le != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CREATE_EMPLOYEE_ID,
					QueryCondition.le, createEmployeeId_le));
		}
		if (createEmployeeId_in != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CREATE_EMPLOYEE_ID,
					QueryCondition.in, createEmployeeId_in));
		}
		if (createEmployeeName != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CREATE_EMPLOYEE_NAME,
					QueryCondition.eq, createEmployeeName));
		}
		if (createEmployeeName_like != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CREATE_EMPLOYEE_NAME,
					QueryCondition.like, createEmployeeName_like));
		}
		if (createEmployeeName_isNull != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CREATE_EMPLOYEE_NAME,
					QueryCondition.isNull, createEmployeeName_isNull));
		}
		if (createEmployeeName_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CREATE_EMPLOYEE_NAME,
					QueryCondition.isNotNull, createEmployeeName_isNotNull));
		}
		if (createEmployeeName_in != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CREATE_EMPLOYEE_NAME,
					QueryCondition.in, createEmployeeName_in));
		}
		if (contactTel != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CONTACT_TEL, QueryCondition.eq,
					contactTel));
		}
		if (contactTel_like != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CONTACT_TEL, QueryCondition.like,
					contactTel_like));
		}
		if (contactTel_isNull != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CONTACT_TEL, QueryCondition.isNull,
					contactTel_isNull));
		}
		if (contactTel_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CONTACT_TEL,
					QueryCondition.isNotNull, contactTel_isNotNull));
		}
		if (contactTel_in != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CONTACT_TEL, QueryCondition.in,
					contactTel_in));
		}
		if (conclusion != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CONCLUSION, QueryCondition.eq,
					conclusion));
		}
		if (conclusion_like != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CONCLUSION, QueryCondition.like,
					conclusion_like));
		}
		if (conclusion_isNull != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CONCLUSION, QueryCondition.isNull,
					conclusion_isNull));
		}
		if (conclusion_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CONCLUSION,
					QueryCondition.isNotNull, conclusion_isNotNull));
		}
		if (conclusion_in != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.CONCLUSION, QueryCondition.in,
					conclusion_in));
		}
		if (suggestion != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.SUGGESTION, QueryCondition.eq,
					suggestion));
		}
		if (suggestion_like != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.SUGGESTION, QueryCondition.like,
					suggestion_like));
		}
		if (suggestion_isNull != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.SUGGESTION, QueryCondition.isNull,
					suggestion_isNull));
		}
		if (suggestion_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.SUGGESTION,
					QueryCondition.isNotNull, suggestion_isNotNull));
		}
		if (suggestion_in != null) {
			qc.andCondition(new QueryCondition(
					ExaminationRecordEntity.SUGGESTION, QueryCondition.in,
					suggestion_in));
		}
		return qc;
	}

	/* pei */
	public static String savePhoto(String photo, String fileName) {
		String returnPath = null;
		try {
			photo = photo.replaceAll("\n", "");
			byte[] photobyte = Base64Utils.decode(photo);

			String path = OlderHandler.class.getResource("OlderHandler.class")
					.toString();
			String separator = FileUtil.getFileSeparator();
			if ("file".equals(path.substring(0, 4))) {
				if ("\\".equals(separator))
					path = path.substring(6);
				else {
					path = path.substring(5);
				}
			}
			String localPath = path.substring(0, path.indexOf("WEB-INF"))
					+ "photos" + separator + "tijianPhotos" + separator
					+ fileName;
			localPath = URLDecoder.decode(localPath);
			localPath = localPath.replace("/", separator);
			localPath = localPath.replace("\\", separator);

			returnPath = SystemInit.photourl + "/photos/" + "tijianPhotos/"
					+ fileName;

			byte2image(photobyte, localPath);
		} catch (Exception e) {
			logger.error(e.toString());
		}
		return returnPath;
	}

	public static String savePhoto2(String photo, String fileName) {
		String returnPath = null;
		try {
			photo = photo.replaceAll("\n", "");
			byte[] photobyte = Base64Utils.decode(photo);

			String path = OlderHandler.class.getResource("OlderHandler.class")
					.toString();
			String separator = FileUtil.getFileSeparator();
			if ("file".equals(path.substring(0, 4))) {
				if ("\\".equals(separator))
					path = path.substring(6);
				else {
					path = path.substring(5);
				}
			}
			String localPath = path.substring(0, path.indexOf("WEB-INF"))
					+ "photos" + separator + "tijianshujuPhotos" + separator
					+ fileName;
			localPath = URLDecoder.decode(localPath);
			localPath = localPath.replace("/", separator);
			localPath = localPath.replace("\\", separator);

			returnPath = SystemInit.photourl + "/photos/"
					+ "tijianshujuPhotos/" + fileName;

			byte2image(photobyte, localPath);
		} catch (Exception e) {
			logger.error(e.toString());
		}
		return returnPath;
	}

	public static void byte2image(byte[] data, String path) {
		if ((data.length < 3) || (path.equals("")))
			return;
		try {
			FileImageOutputStream imageOutput = new FileImageOutputStream(
					new File(path));
			imageOutput.write(data, 0, data.length);
			imageOutput.close();
			System.out.println("Make Picture success,Please find image in "
					+ path);
		} catch (Exception ex) {
			System.out.println("Exception: " + ex);
			ex.printStackTrace();
		}
	}
}
