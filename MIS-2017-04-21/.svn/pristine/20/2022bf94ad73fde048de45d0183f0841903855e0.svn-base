package com.framework.system.common.handler.department;

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.common.entity.department.DepartmentEntity;
import com.framework.system.common.pack.department.DepartmentPack;
import com.framework.system.common.parse.department.DepartmentParse;
import com.framework.system.common.service.department.DepartmentService;

import com.framework.system.business.handler.BaseHandler;
import com.framework.system.db.query.OrderVO;

/**
 * @Title: Handler
 * @Description: 部门信息表业务处理器
 * @author feng.gu
 * @date 2015-12-02 09:20:56
 * @version V1.0
 * 
 */
public class DepartmentHandler extends BaseHandler {
	private static Logger logger = Logger.getLogger(DepartmentService.class);
	/**
	 * 解析器
	 */
	private DepartmentParse departmentParse = DepartmentParse.getInstance();
	/**
	 * 业务处理器
	 */
	private DepartmentService departmentService = DepartmentService
			.getInstance();
	/**
	 * 封装器
	 */
	private DepartmentPack departmentPack = DepartmentPack.getInstance();

	private static DepartmentHandler departmentHandler;

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static DepartmentHandler getInstance() {
		if (departmentHandler == null) {
			departmentHandler = new DepartmentHandler();
		}
		return departmentHandler;
	}

	/**
	 * 
	 * @param type
	 *            1-json 2-xml
	 * @param entityName
	 * @param command
	 * @param reqStr
	 * @param request
	 * @param response
	 */
	public String doHandler(int type, String command, String reqStr,
			HttpServletRequest request, HttpServletResponse response) {
		String resultStr = "";
		try {
			// 解析
			Map<String, Object> parseMap = departmentParse.parse(type, command,
					reqStr, request);
			String action = (String) parseMap.get("action");
			DepartmentEntity department = (DepartmentEntity) parseMap
					.get("department");
			List<DepartmentEntity> departmentList = (List<DepartmentEntity>) parseMap
					.get("departmentList");
			Integer id = (Integer) parseMap.get("id");
			Map<String, Object> queryMap = (Map<String, Object>) parseMap
					.get("queryMap");
			int pageno = (Integer) parseMap.get("pageno");
			int pagesize = (Integer) parseMap.get("pagesize");
			List<OrderVO> orderList = (List<OrderVO>) parseMap.get("orderList");

			Boolean parentDepartmentShow = (Boolean) parseMap
					.get("parentDepartmentShow");
			Boolean delParentDepartment = (Boolean) parseMap
					.get("delParentDepartment");
			Boolean delParentDepartmentList = (Boolean) parseMap
					.get("delParentDepartmentList");
			Boolean childDepartmentListShow = (Boolean) parseMap
					.get("childDepartmentListShow");
			Boolean delChildDepartmentList = (Boolean) parseMap
					.get("delChildDepartmentList");
			Boolean createUserShow = (Boolean) parseMap.get("createUserShow");
			Boolean delCreateUser = (Boolean) parseMap.get("delCreateUser");
			Boolean updateUserShow = (Boolean) parseMap.get("updateUserShow");
			Boolean delUpdateUser = (Boolean) parseMap.get("delUpdateUser");

			// 业务处理
			Object result = null;
			if ("save".equals(action)) {
				result = departmentService.save(department);
			} else if ("saveList".equals(action)) {
				result = departmentService.saveList(departmentList);
			} else if ("getById".equals(action)) {
				result = departmentService
						.getById(id, parentDepartmentShow,
								childDepartmentListShow, createUserShow,
								updateUserShow);
			} else if ("getListByCondition".equals(action)) {
				result = departmentService
						.getListByCondition(queryMap, orderList, pageno,
								pagesize, parentDepartmentShow,
								childDepartmentListShow, createUserShow,
								updateUserShow);
			} else if ("del".equals(action)) {
				result = departmentService.del(id, delParentDepartment,
						delChildDepartmentList, delCreateUser, delUpdateUser);
			} else if ("delList".equals(action)) {
				result = departmentService.delList(queryMap,
						delParentDepartmentList, delChildDepartmentList,
						delCreateUser, delUpdateUser);
			}
			// 封装
			Map<String, Object> packMap = departmentPack.pack(type, action,
					result, department);
			String actionBack = (String) packMap.get("action");
			String resultBack = (String) packMap.get("result");
			String desBack = (String) packMap.get("des");
			JSONObject pageBack = (JSONObject) packMap.get("page");
			JSONObject contentBack = (JSONObject) packMap.get("content");

			JSONObject repJson = new JSONObject();
			if (actionBack != null && !"".equals(actionBack)) {
				repJson.put("action", actionBack);
			}
			if (resultBack != null && !"".equals(resultBack)) {
				repJson.put("result", resultBack);
			}
			if (desBack != null && !"".equals(desBack)) {
				repJson.put("des", desBack);
			}
			if (pageBack != null) {
				repJson.put("page", pageBack);
			}
			if (contentBack != null && !"".equals(contentBack)) {
				repJson.put("content", contentBack);
			}
			logger.debug("返回消息：" + repJson.toString());
			resultStr = repJson.toString();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error(e);
		}
		return resultStr;
	}
}
