package fsk.handler.employee;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.business.handler.BaseHandler;
import com.framework.system.common.entity.dataDic.DataDicEntity;
import com.framework.system.common.entity.user.UserEntity;
import com.framework.system.common.entity.userRole.UserRoleEntity;
import com.framework.system.common.service.SystemService;
import com.framework.system.common.service.dataDic.DataDicService;
import com.framework.system.common.service.user.UserService;
import com.framework.system.common.service.userRole.UserRoleService;
import com.framework.system.db.query.OrderVO;

import fsk.entity.employee.EmployeeEntity;
import fsk.entity.employeePositionalTitle.EmployeePositionalTitleEntity;
import fsk.entity.serviceEmployee.ServiceEmployeeEntity;
import fsk.entity.serviceTask.ServiceTaskEntity;
import fsk.entity.siteEmployee.SiteEmployeeEntity;
import fsk.pack.employee.EmployeePack;
import fsk.parse.employee.EmployeeParse;
import fsk.service.employee.EmployeeService;
import fsk.service.employeePositionalTitle.EmployeePositionalTitleService;
import fsk.service.serviceEmployee.ServiceEmployeeService;
import fsk.service.serviceTask.ServiceTaskService;
import fsk.service.siteEmployee.SiteEmployeeService;
import fsk.util.SqlUtil;

/**
 * @Title: Handler
 * @Description: 员工信息表业务处理器
 * @author feng.gu
 * @date 2016-10-18 15:42:48
 * @version V1.0
 * 
 */
public class EmployeeHandler extends BaseHandler {
	private static Logger logger = Logger.getLogger(EmployeeService.class);
	/**
	 * 解析器
	 */
	private EmployeeParse employeeParse = EmployeeParse.getInstance();
	/**
	 * 业务处理器
	 */
	private EmployeeService employeeService = EmployeeService.getInstance();
	private static DataDicService dataDicService = DataDicService.getInstance();
	private static EmployeePositionalTitleService employeePositionalTitleService = EmployeePositionalTitleService.getInstance();
	private static SiteEmployeeService siteEmployeeService = SiteEmployeeService.getInstance();
	private static SimpleDateFormat formater2 = new SimpleDateFormat("yyyyMMdd");
	/**
	 * 封装器
	 */
	private EmployeePack employeePack = EmployeePack.getInstance();

	private static EmployeeHandler employeeHandler;

	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();
	private static UserService userService = UserService.getInstance();
	private static UserRoleService userRoleService = UserRoleService.getInstance();
	private static SimpleDateFormat formater = new SimpleDateFormat("yyyyMMddHHmmss");
	private static ServiceTaskService serviceTaskService = ServiceTaskService.getInstance();
	private static ServiceEmployeeService serviceEmployeeService = ServiceEmployeeService.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static EmployeeHandler getInstance() {
		if (employeeHandler == null) {
			employeeHandler = new EmployeeHandler();
		}
		return employeeHandler;
	}

	/**
	 * 
	 * @param type
	 *            1-json 2-xml
	 * @param entityName
	 * @param command
	 * @param reqStr
	 * @param request
	 * @param response
	 */
	public String doHandler(int type, String command, String reqStr, HttpServletRequest request, HttpServletResponse response) {
		logger.debug("请求消息：" + reqStr);
		String resultStr = "";
		try {
			// 解析
			Map<String, Object> parseMap = employeeParse.parse(type, command, reqStr, request);
			String action = (String) parseMap.get("action");
			EmployeeEntity employee = (EmployeeEntity) parseMap.get("employee");
			List<EmployeeEntity> employeeList = (List<EmployeeEntity>) parseMap.get("employeeList");
			Integer id = (Integer) parseMap.get("id");
			Map<String, Object> queryMap = (Map<String, Object>) parseMap.get("queryMap");
			Integer pageno = (Integer) parseMap.get("pageno");
			Integer pagesize = (Integer) parseMap.get("pagesize");
			List<OrderVO> orderList = (List<OrderVO>) parseMap.get("orderList");
			Boolean userShow = (Boolean) parseMap.get("userShow");
			Boolean delUser = (Boolean) parseMap.get("delUser");
			Boolean leaderEmployeeShow = (Boolean) parseMap.get("leaderEmployeeShow");
			Boolean delLeaderEmployee = (Boolean) parseMap.get("delLeaderEmployee");
			Boolean wechatShow = (Boolean) parseMap.get("wechatShow");
			Boolean delWechat = (Boolean) parseMap.get("delWechat");
			Boolean siteListShow = (Boolean) parseMap.get("siteListShow");
			Boolean delSiteEmployeeList = (Boolean) parseMap.get("delSiteEmployeeList");
			Boolean dataDicListShow = (Boolean) parseMap.get("dataDicListShow");
			Boolean delEmployeeDataDicList = (Boolean) parseMap.get("delEmployeeDataDicList");
			Boolean firstDepartmentShow = (Boolean) parseMap.get("firstDepartmentShow");
			Boolean delFirstDepartment = (Boolean) parseMap.get("delFirstDepartment");
			Boolean secondDepartmentShow = (Boolean) parseMap.get("secondDepartmentShow");
			Boolean delSecondDepartment = (Boolean) parseMap.get("delSecondDepartment");
			/*
			 * 职称条件站点查询peihouxuan
			 */
			JSONObject reqStrjson = JSONObject.fromObject(reqStr);
			JSONObject conjson = (JSONObject) reqStrjson.get("content");
			String zhicheng1 = (String) conjson.get("zhicheng1");
			String zhicheng2 = (String) conjson.get("zhicheng2");
			String roleIdsnew = (String) conjson.get("roleIds");
			String siteIds = (String) conjson.get("siteIds");
			boolean flag = true;
			boolean flag1 = false;
			boolean flag2 = false;
			if (zhicheng1 == null && zhicheng2 == null) {
				flag = false;
			}
			if (roleIdsnew != null) {
				flag1 = true;
			}
			if (siteIds != null) {
				flag2 = true;
			}
			/* 增加站点删除站点更改组长删除组长 */
			String changeEmployeesIds = (String) conjson.get("changeEmployeesIds");
			Integer changesiteId = (Integer) conjson.get("changesiteId");
			boolean flagAdd = false;
			if (!"".equals(changeEmployeesIds) && changesiteId != null) {
				flagAdd = true;
			}
			String delEmployeesIds = (String) conjson.get("delEmployeesIds");
			Integer delSiteId = (Integer) conjson.get("delSiteId");
			boolean flagDel = false;
			if (!"".equals(delEmployeesIds) && delSiteId != null) {
				flagDel = true;
			}
			Integer changeleaderEmployeeId = (Integer) conjson.get("changeleaderEmployeeId");
			boolean flagChaMaster = false;
			if (!"".equals(changeEmployeesIds) && changeleaderEmployeeId != null) {
				flagChaMaster = true;
			}
			Integer delleaderEmployeeId = (Integer) conjson.get("delleaderEmployeeId");
			boolean flagDelMaster = false;
			if (!"".equals(delEmployeesIds) && delleaderEmployeeId != null) {
				flagDelMaster = true;
			}
			//
			// 工单查询pei
			String serviceExpectTime_ge = (String) conjson.get("serviceExpectTime_ge");
			String serviceExpectTime_le = (String) conjson.get("serviceExpectTime_le");
			String status_in = (String) conjson.get("status_in");
			// 业务处理
			Object result = null;
			if ("save".equals(action)) {
				// 员工ID校验、
				if (employee.getId() == null) {
					String indexNum = createNum();
					employee.setIndexNum(indexNum);
				}
				// 站点变更peihouxuan
				if (flagAdd) {
					String[] changeEmployeesIdsTemp = changeEmployeesIds.split(",");
					List<SiteEmployeeEntity> siteList = new ArrayList<SiteEmployeeEntity>();
					for (int i = 0; i < changeEmployeesIdsTemp.length; i++) {
						Integer idtemp = Integer.parseInt(changeEmployeesIdsTemp[i]);
						SiteEmployeeEntity entitynew = new SiteEmployeeEntity();
						entitynew.setEmployeeId(idtemp);
						entitynew.setSiteId(changesiteId);
						siteList.add(entitynew);
					}
					boolean flad = siteEmployeeService.saveList(siteList);
					if (flad) {
						resultStr = "{\"action\":\"ADD_EMPLOYEE_INFO_RESPONSE\",\"result\":\"100\",\"des\":\"员工添加成功！\"}";
					} else {
						resultStr = "{\"action\":\"ADD_EMPLOYEE_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"员工添加失败！\"}";
					}
					return resultStr;
				}
				// 删除站点
				if (flagDel) {
					Map<String, Object> queryMapSite = new HashMap<String, Object>();
					queryMapSite.put("employeeId_in", delEmployeesIds);
					queryMapSite.put("siteId", delSiteId);
					List<SiteEmployeeEntity> siteEmpList = siteEmployeeService.getListByCondition(queryMapSite);
					String ids = "";
					if (siteEmpList != null && siteEmpList.size() > 0) {
						for (int i = 0; i < siteEmpList.size(); i++) {
							SiteEmployeeEntity siteEmployeeEntity = siteEmpList.get(i);
							if (i < siteEmpList.size() - 1) {
								ids = ids + siteEmployeeEntity.getId() + ",";
							} else {
								ids = ids + siteEmployeeEntity.getId();
							}
						}
					} else {
						resultStr = "{\"action\":\"ADD_EMPLOYEE_INFO_RESPONSE\",\"result\":\"100\",\"des\":\"员工删除成功！\"}";
						return resultStr;
					}
					if (!"".equals(ids)) {
						boolean flad = siteEmployeeService.del(ids);
						if (flad) {
							resultStr = "{\"action\":\"ADD_EMPLOYEE_INFO_RESPONSE\",\"result\":\"100\",\"des\":\"员工删除成功！\"}";
						} else {
							resultStr = "{\"action\":\"ADD_EMPLOYEE_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"员工删除失败！\"}";
						}
						return resultStr;
					}
				}
				// 更改组长
				if (flagChaMaster) {
					Map<String, Object> queryMapCha = new HashMap<String, Object>();
					queryMapCha.put("id_in", changeEmployeesIds);
					List<EmployeeEntity> employeeListNew = employeeService.getListByCondition(queryMapCha);
					List<EmployeeEntity> employeeChaList = new ArrayList<EmployeeEntity>();
					if (employeeListNew != null && employeeListNew.size() > 0) {
						for (int i = 0; i < employeeListNew.size(); i++) {
							EmployeeEntity employeeTemp = employeeListNew.get(i);
							employeeTemp.setLeaderEmployeeId(changeleaderEmployeeId);
							employeeChaList.add(employeeTemp);
						}
					}
					boolean flad = employeeService.saveList(employeeChaList);
					if (flad) {
						resultStr = "{\"action\":\"ADD_EMPLOYEE_INFO_RESPONSE\",\"result\":\"100\",\"des\":\"组员新增成功！\"}";
					} else {
						resultStr = "{\"action\":\"ADD_EMPLOYEE_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"组员新增失败！\"}";
					}
					return resultStr;
				}
				// 删除组长
				if (flagDelMaster) {
					Map<String, Object> queryMapMaster = new HashMap<String, Object>();
					queryMapMaster.put("id_in", delEmployeesIds);
					queryMapMaster.put("leaderEmployeeId", delleaderEmployeeId);
					List<EmployeeEntity> employeeListNew = employeeService.getListByCondition(queryMapMaster);
					List<EmployeeEntity> employeeDelList = new ArrayList<EmployeeEntity>();
					if (employeeListNew != null && employeeListNew.size() > 0) {
						for (int i = 0; i < employeeListNew.size(); i++) {
							EmployeeEntity entuty = employeeListNew.get(i);
							entuty.setLeaderEmployeeId(null);
							employeeDelList.add(entuty);
						}
					}
					boolean flad = employeeService.saveList(employeeDelList);
					if (flad) {
						resultStr = "{\"action\":\"ADD_EMPLOYEE_INFO_RESPONSE\",\"result\":\"100\",\"des\":\"组员删除成功！\"}";
					} else {
						resultStr = "{\"action\":\"ADD_EMPLOYEE_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"组员删除失败！\"}";
					}
					return resultStr;
				}
				// 创建user
				JSONObject restrjson = JSONObject.fromObject(reqStr);
				JSONObject contentjson = (JSONObject) restrjson.get("content");

				Integer userId = (Integer) request.getSession().getAttribute("userId");
				String zhanghaoId = null;
				try {
					zhanghaoId = (String) contentjson.getString("zhanghaoId");
				} catch (Exception e2) {
				}
				String roleIds = null;
				try {
					roleIds = (String) contentjson.getString("roleIds");
				} catch (Exception e1) {
				}
				Integer uId = null;
				boolean checkIdnumber = false;
				if (employee.getId() != null) {
					// 修改
					if (employee.getIdnumber() != null) {
						EmployeeEntity entity = employeeService.getById(employee.getId());
						if (entity.getIdnumber() != null && entity.getIdnumber().equals(employee.getIdnumber())) {
							// 数据库和修改一样 则不校验
							checkIdnumber = false;
						} else {
							checkIdnumber = true;
						}
					}
				} else {
					// 新增校验
					checkIdnumber = true;
				}
				if (checkIdnumber) {
					// 本表身份证是否已存在
					Map<String, Object> queryMap4 = new HashMap<String, Object>();
					queryMap4.put("idnumber", employee.getIdnumber());
					List<EmployeeEntity> employeelist = employeeService.getListByCondition(queryMap4);
					if (employeelist != null && employeelist.size() > 0) {
						resultStr = "{\"action\":\"ADD_EMPLOYEE_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"该身份证员工已存在！\"}";
						logger.debug("返回消息：" + resultStr);
						return resultStr;
					}
				}
				// 新增时employee
				if (employee.getUserId() == null && employee.getIdnumber() != null && !"".equals(employee.getIdnumber())) {
					// 校验身份证为账号名是否已存在
					Map<String, Object> queryMap2 = new HashMap<String, Object>();
					queryMap2.put("loginname", zhanghaoId);
					List<UserEntity> userlist = userService.getListByCondition(queryMap2);
					if (userlist != null && userlist.size() == 1) {
						resultStr = "{\"action\":\"ADD_EMPLOYEE_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"该账号已存在！\"}";
						logger.debug("返回消息：" + resultStr);
						return resultStr;
					}
					uId = systemService.createUserByLoginName(String.valueOf(zhanghaoId), userId, "员工");
					if (uId != null) {
						employee.setUserId(uId);
						try {
						} catch (Exception e) {
						}
					}
				}
				if (roleIds != null && !"".equals(roleIds)) {
					// 先删除原有角色
					Map<String, Object> queryMap3 = new HashMap<String, Object>();
					queryMap3.put("userId", employee.getUserId());
					userRoleService.delList(queryMap3, false, false, false);
					// 绑定角色
					String[] sage = roleIds.split(",");
					if (sage != null && sage.length > 0) {
						Date date = new Date();
						List<UserRoleEntity> userRoleList = new ArrayList<UserRoleEntity>();
						for (int i = 0; i < sage.length; i++) {
							UserRoleEntity ur = new UserRoleEntity();
							ur.setUserId(employee.getUserId());
							ur.setRoleId(Integer.valueOf(sage[i]));
							ur.setCreateTime(formater.format(date));
							ur.setCreateUserId(userId);
							userRoleList.add(ur);
						}
						userRoleService.saveList(userRoleList);
					}
				}
				result = employeeService.save(employee);
			} else if ("saveList".equals(action)) {
				result = employeeService.saveList(employeeList);
			} else if ("getById".equals(action)) {
				result = employeeService.getById(id, userShow, leaderEmployeeShow, wechatShow, siteListShow, dataDicListShow, firstDepartmentShow,
						secondDepartmentShow);
			} else if ("getListByCondition".equals(action)) {
				// 根据数据权限 增加查询条件
				/*
				 * 职称和角色查询 peihouxuan
				 */
				String idchs = "";
				if (flag || flag1 || flag2) {
					if (flag) {
						// 职称查询
						if (!"".equals(zhicheng1) || !"".equals(zhicheng2)) {
							String ids = "";
							if (!"".equals(zhicheng1) && "".equals(zhicheng2)) {
								Map<String, Object> queryMapData = new HashMap<String, Object>();
								queryMapData.put("parentId_in", zhicheng1);
								List<Object> entityList = dataDicService.getListByCondition(queryMapData);
								if (entityList != null && entityList.size() > 0) {
									for (Object entity : entityList) {
										DataDicEntity entitydata = (DataDicEntity) entity;
										ids = ids + entitydata.getId() + ",";
									}
									if (!"".equals(ids)) {
										ids = ids.replaceAll(",,", ",");
										ids = ids.substring(0, ids.length() - 1);
									}
								}
								Map<String, Object> queryMapEmp = new HashMap<String, Object>();
								queryMapEmp.put("positionalTitleId_in", ids);
								List<EmployeePositionalTitleEntity> entityListt = employeePositionalTitleService.getListByCondition(queryMapEmp);
								if (entityListt != null && entityListt.size() > 0) {
									for (int j = 0; j < entityListt.size(); j++) {
										EmployeePositionalTitleEntity entity = (EmployeePositionalTitleEntity) entityListt.get(j);
										if (j < entityListt.size() - 1) {
											idchs = idchs + entity.getEmployeeId() + ",";
										} else {
											idchs = idchs + entity.getEmployeeId();
										}
									}
								}
							} else if (!"".equals(zhicheng1) && !"".equals(zhicheng2)) {
								Map<String, Object> queryMapEmp = new HashMap<String, Object>();
								queryMapEmp.put("positionalTitleId_in", zhicheng2);
								List<EmployeePositionalTitleEntity> entityListt = employeePositionalTitleService.getListByCondition(queryMapEmp);
								if (entityListt != null && entityListt.size() > 0) {
									for (int j = 0; j < entityListt.size(); j++) {
										EmployeePositionalTitleEntity entity = (EmployeePositionalTitleEntity) entityListt.get(j);
										if (j < entityListt.size() - 1) {
											idchs = idchs + entity.getEmployeeId() + ",";
										} else {
											idchs = idchs + entity.getEmployeeId();
										}
									}
								} else {
									idchs = "0";
								}
							}
						}
					}
					// 角色查询
					if (flag1) {
						String idss = idchs;
						idchs = "";
						Map<String, Object> queryMapRole = new HashMap<String, Object>();
						queryMapRole.put("roleId_in", roleIdsnew);
						List<UserRoleEntity> userRoleList = userRoleService.getListByCondition(queryMapRole);
						String ids = "";
						if (userRoleList != null && userRoleList.size() > 0) {
							for (int i = 0; i < userRoleList.size(); i++) {
								UserRoleEntity userRoleEntity = (UserRoleEntity) userRoleList.get(i);
								if (i < userRoleList.size() - 1) {
									ids = ids + userRoleEntity.getUserId() + ",";
								} else {
									ids = ids + userRoleEntity.getUserId();
								}
							}
						}
						Map<String, Object> queryMapEmp = new HashMap<String, Object>();
						queryMapEmp.put("userId_in", ids);
						if (!"".equals(idss)) {
							queryMapEmp.put("id_in", idss);
						}
						List<EmployeeEntity> employeeentityList = employeeService.getListByCondition(queryMapEmp);
						if (employeeentityList != null && employeeentityList.size() > 0) {
							for (int i = 0; i < employeeentityList.size(); i++) {
								EmployeeEntity employeeEntity = employeeentityList.get(i);
								if (i < employeeentityList.size() - 1) {
									idchs = idchs + employeeEntity.getId() + ",";
								} else {
									idchs = idchs + employeeEntity.getId();
								}
							}
						} else {
							idchs = "0";
						}
					}
					if (flag2) {
						String idssnew = idchs;
						idchs = "";
						Map<String, Object> queryMapSiteEmp = new HashMap<String, Object>();
						queryMapSiteEmp.put("siteId_in", siteIds);
						if (!"".equals(idssnew)) {
							queryMapSiteEmp.put("employeeId_in", idssnew);
						}
						List<SiteEmployeeEntity> employeeentityList = siteEmployeeService.getListByCondition(queryMapSiteEmp);
						if (employeeentityList != null && employeeentityList.size() > 0) {
							for (SiteEmployeeEntity siteEmployeeEntity : employeeentityList) {
								idchs = idchs + siteEmployeeEntity.getEmployeeId() + ",";
							}
						}
						if (!"".equals(idchs)) {
							idchs = idchs.replaceAll(",,", ",");
							idchs = idchs.substring(0, idchs.length() - 1);
						} else {
							idchs = "0";
						}
					}
					queryMap.put("id_in", idchs);
				}
				//
				// 工单查询
				if (serviceExpectTime_ge != null || serviceExpectTime_le != null || status_in != null) {
					String idss = "";
					String empidss = "";
					String notWechatIds = SqlUtil.getids();
					Map<String, Object> queryMapServiceTask = new HashMap<String, Object>();
					if (serviceExpectTime_ge != null) {
						queryMapServiceTask.put("serviceExpectTime_ge", serviceExpectTime_ge);
					}
					if (serviceExpectTime_le != null) {
						queryMapServiceTask.put("serviceExpectTime_le", serviceExpectTime_le);
					}
					if (status_in != null) {
						queryMapServiceTask.put("status_in", status_in);
					}
					queryMapServiceTask.put("source_isNull", "null");
					List<ServiceTaskEntity> serviceTaskList = serviceTaskService.getListByCondition(queryMapServiceTask);
					if (serviceTaskList != null && serviceTaskList.size() > 0) {
						for (ServiceTaskEntity emtuti : serviceTaskList) {
							idss = idss + emtuti.getId() + ",";
						}
						if (!"".equals(idss)) {
							idss = idss.replaceAll(",,", ",");
							idss = idss.substring(0, idss.length() - 1);
							Map<String, Object> queryMapServiceEmployee = new HashMap<String, Object>();
							queryMapServiceEmployee.put("serviceTaskId_in", idss);
							queryMapServiceEmployee.put("type", 1);
							queryMapServiceEmployee = systemService.addDataRule("ServiceTaskEntity", queryMapServiceEmployee, request);
							List<ServiceEmployeeEntity> ServiceEmployeeList = serviceEmployeeService.getListByCondition(queryMapServiceEmployee);
							if (ServiceEmployeeList != null && ServiceEmployeeList.size() > 0) {
								for (ServiceEmployeeEntity entity : ServiceEmployeeList) {
									empidss = empidss + entity.getEmployeeId() + ",";
								}
								if (!"".equals(empidss)) {
									empidss = empidss.replaceAll(",,", ",");
									empidss = empidss.substring(0, empidss.length() - 1);
									queryMap.put("id_in", empidss);
								} else {
									empidss = "0";
									queryMap.put("id_in", empidss);
								}
							}
						}
					} else {
						empidss = "0";
						queryMap.put("id_in", empidss);
					}
				}
				queryMap = systemService.addDataRuleByRoles("EmployeeEntity", queryMap, request);
				result = employeeService.getListByCondition(queryMap, orderList, pageno, pagesize, userShow, leaderEmployeeShow, wechatShow, siteListShow,
						dataDicListShow, firstDepartmentShow, secondDepartmentShow);
			} else if ("del".equals(action)) {
				result = employeeService.del(id, delUser, delLeaderEmployee, delWechat, delSiteEmployeeList, delEmployeeDataDicList, delFirstDepartment,
						delSecondDepartment);
			} else if ("delList".equals(action)) {
				result = employeeService.delList(queryMap, delUser, delLeaderEmployee, delWechat, delSiteEmployeeList, delEmployeeDataDicList,
						delFirstDepartment, delSecondDepartment);
			}
			// 封装
			Map<String, Object> packMap = employeePack.pack(type, action, result, employee);
			String actionBack = (String) packMap.get("action");
			String resultBack = (String) packMap.get("result");
			String desBack = (String) packMap.get("des");
			JSONObject pageBack = (JSONObject) packMap.get("page");
			JSONObject contentBack = (JSONObject) packMap.get("content");
			// 工单pei
			if (serviceExpectTime_ge != null || serviceExpectTime_le != null || status_in != null) {
				if (contentBack != null && contentBack.size() > 0) {
					JSONArray employeelist = contentBack.getJSONArray("employeeList");
					JSONArray jsonemployee = new JSONArray();
					if (employeelist != null && employeelist.size() > 0) {
						for (int i = 0; i < employeelist.size(); i++) {
							int daifenpei = 0;
							int daishenhe = 0;
							int yiwancheng = 0;
							JSONObject json = new JSONObject();
							JSONObject jsonTemp = employeelist.getJSONObject(i);
							Integer employeeId = jsonTemp.getInt("id");
							String employeeName = jsonTemp.getString("name");
							String ids = "";
							Map<String, Object> queryMapServiceEmployee = new HashMap<String, Object>();
							queryMapServiceEmployee.put("employeeId", employeeId);
							queryMapServiceEmployee.put("type", 1);
							List<ServiceEmployeeEntity> serviceEmployeeList = serviceEmployeeService.getListByCondition(queryMapServiceEmployee);
							if (serviceEmployeeList != null && serviceEmployeeList.size() > 0) {
								for (ServiceEmployeeEntity entity : serviceEmployeeList) {
									ids = ids + entity.getServiceTaskId() + ",";
								}
								if (!"".equals(ids)) {
									ids = ids.replaceAll(",,", ",");
									ids = ids.substring(0, ids.length() - 1);
								}
							} else {
								ids = "0";
							}
							Map<String, Object> queryMapService = new HashMap<String, Object>();
							queryMapService.put("id_in", ids);
							if (serviceExpectTime_ge != null) {
								queryMapService.put("serviceExpectTime_ge", serviceExpectTime_ge);
							}
							if (serviceExpectTime_le != null) {
								queryMapService.put("serviceExpectTime_le", serviceExpectTime_le);
							}
							if (status_in != null) {
								queryMapService.put("status_in", status_in);
							}
							List<ServiceTaskEntity> serviceTaskList = serviceTaskService.getListByCondition(queryMapService);
							if (serviceTaskList != null && serviceTaskList.size() > 0) {
								for (ServiceTaskEntity entity : serviceTaskList) {
									Integer status = entity.getStatus();
									if (status == 3) {
										daishenhe++;
									} else if (status == 4 || status == 5 || status == 6 || status == 7) {
										yiwancheng++;
									}
								}
							}
							if (status_in == null || status_in.contains("2")) {
								Map<String, Object> queryMapService2 = new HashMap<String, Object>();
								queryMapService2.put("id_in", ids);
								queryMapService2.put("status", 2);
								queryMapService2 = systemService.addDataRule("ServiceTaskEntity", queryMapService2, request);
								List<ServiceTaskEntity> serviceTaskList2 = serviceTaskService.getListByCondition(queryMapService2);
								if (serviceTaskList2 != null && serviceTaskList2.size() > 0) {
									daifenpei = serviceTaskList2.size();
								}
							}
							json.put("fzrId", employeeId);
							json.put("fzrName", employeeName);
							json.put("daifenpei", daifenpei);
							json.put("daishenhe", daishenhe);
							json.put("yiwancheng", yiwancheng);
							jsonemployee.add(json);
						}

					}
					contentBack.put("tcFzrCount", jsonemployee);
				}
			}
			// //
			JSONObject repJson = new JSONObject();
			if (actionBack != null && !"".equals(actionBack)) {
				repJson.put("action", actionBack);
			}
			if (resultBack != null && !"".equals(resultBack)) {
				repJson.put("result", resultBack);
			}
			if (desBack != null && !"".equals(desBack)) {
				repJson.put("des", desBack);
			}
			if (pageBack != null) {
				repJson.put("page", pageBack);
			}
			if (contentBack != null && !"".equals(contentBack)) {
				repJson.put("content", contentBack);
			}
			logger.debug("返回消息：" + repJson.toString());
			resultStr = repJson.toString();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error(e);
		}
		return resultStr;
	}

	public String createNum() {
		String numTemp = "YG" + formater2.format(new Date());
		String num = "";
		Map<String, Object> mapVlue = new HashMap<String, Object>();
		Map<String, Object> queryMapService = new HashMap<String, Object>();
		queryMapService.put("indexNum_like", numTemp);
		List<EmployeeEntity> serviceTasklist = employeeService.getListByCondition(queryMapService);
		if (serviceTasklist != null && serviceTasklist.size() > 0) {
			for (EmployeeEntity entiry : serviceTasklist) {
				String code = entiry.getIndexNum();
				code = code.substring(10, 14);
				mapVlue.put(code, "yes");
			}
		}
		for (int i = 1; i < 9999; i++) {
			if (i < 10) {
				num = "000" + String.valueOf(i);
			} else if (i >= 10 && i < 100) {
				num = "00" + String.valueOf(i);
			} else if (i >= 100 && i < 1000) {
				num = "0" + String.valueOf(i);
			} else {
				num = String.valueOf(i);
			}
			if (mapVlue.get(num) == null) {
				numTemp = numTemp + num;
				break;
			}
		}
		return numTemp;
	}
}
