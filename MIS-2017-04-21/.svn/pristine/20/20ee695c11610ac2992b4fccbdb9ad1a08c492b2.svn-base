package fsk.service.physiologicalParametersHistory;

import java.math.BigDecimal;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import org.apache.log4j.Logger;

import fsk.entity.older.OlderEntity;

import fsk.entity.physiologicalParametersHistory.PhysiologicalParametersHistoryEntity;
import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

/**
 * @Title: Service
 * @Description: 生理参数历史表服务类
 * @author feng.gu
 * @date 2016-07-07 17:49:09
 * @version V1.0
 * 
 */
public class PhysiologicalParametersHistoryService {
	private static Logger logger = Logger
			.getLogger(PhysiologicalParametersHistoryService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static PhysiologicalParametersHistoryService physiologicalParametersHistoryService;

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static PhysiologicalParametersHistoryService getInstance() {
		if (physiologicalParametersHistoryService == null) {
			physiologicalParametersHistoryService = new PhysiologicalParametersHistoryService();
		}
		return physiologicalParametersHistoryService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(
			PhysiologicalParametersHistoryEntity physiologicalParametersHistory) {
		boolean result = false;
		if (physiologicalParametersHistory != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 关联信息保存
				OlderEntity older = physiologicalParametersHistory.getOlder();
				if (older != null) {
					dbManager.saveNoTransaction(older);
					physiologicalParametersHistory.setOlderId(older.getId());
				}
				result = dbManager
						.saveNoTransaction(physiologicalParametersHistory);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(
			List<PhysiologicalParametersHistoryEntity> physiologicalParametersHistoryList) {
		boolean result = false;
		if (physiologicalParametersHistoryList != null
				&& physiologicalParametersHistoryList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (PhysiologicalParametersHistoryEntity physiologicalParametersHistory : physiologicalParametersHistoryList) {
					if (physiologicalParametersHistory != null) {
						// 关联信息保存
						OlderEntity older = physiologicalParametersHistory
								.getOlder();
						if (older != null) {
							dbManager.saveNoTransaction(older);
							physiologicalParametersHistory.setOlderId(older
									.getId());
						}
						result = dbManager
								.saveNoTransaction(physiologicalParametersHistory);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public PhysiologicalParametersHistoryEntity getById(Integer id) {
		PhysiologicalParametersHistoryEntity obj = null;
		if (id != null) {
			obj = (PhysiologicalParametersHistoryEntity) dbManager.getById(id,
					PhysiologicalParametersHistoryEntity.class);
		}
		return obj;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param olderShow
	 *            是否查询关联信息
	 * @param obj
	 */
	public PhysiologicalParametersHistoryEntity getById(Integer id,
			Boolean olderShow) {
		PhysiologicalParametersHistoryEntity obj = null;
		if (id != null) {
			obj = (PhysiologicalParametersHistoryEntity) dbManager.getById(id,
					PhysiologicalParametersHistoryEntity.class);
			// 查询关联内容
			if (olderShow != null && olderShow.booleanValue() && obj != null
					&& obj.getOlderId() != null && obj.getOlderId() > 0) {
				OlderEntity older = (OlderEntity) dbManager.getById(
						obj.getOlderId(), OlderEntity.class);
				obj.setOlder(older);
			}
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<PhysiologicalParametersHistoryEntity> getListByCondition(
			Map<String, Object> queryMap) {
		List<PhysiologicalParametersHistoryEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object olderId = queryMap.get("olderId");
		Object olderId_gt = queryMap.get("olderId_gt");
		Object olderId_ge = queryMap.get("olderId_ge");
		Object olderId_lt = queryMap.get("olderId_lt");
		Object olderId_le = queryMap.get("olderId_le");
		Object olderId_in = queryMap.get("olderId_in");
		Object type = queryMap.get("type");
		Object type_gt = queryMap.get("type_gt");
		Object type_ge = queryMap.get("type_ge");
		Object type_lt = queryMap.get("type_lt");
		Object type_le = queryMap.get("type_le");
		Object type_in = queryMap.get("type_in");
		Object value = queryMap.get("value");
		Object value_gt = queryMap.get("value_gt");
		Object value_ge = queryMap.get("value_ge");
		Object value_lt = queryMap.get("value_lt");
		Object value_le = queryMap.get("value_le");
		Object value_in = queryMap.get("value_in");
		Object unit = queryMap.get("unit");
		Object unit_like = queryMap.get("unit_like");
		Object unit_isNull = queryMap.get("unit_isNull");
		Object unit_isNotNull = queryMap.get("unit_isNotNull");
		Object unit_in = queryMap.get("unit_in");
		Object status = queryMap.get("status");
		Object status_gt = queryMap.get("status_gt");
		Object status_ge = queryMap.get("status_ge");
		Object status_lt = queryMap.get("status_lt");
		Object status_le = queryMap.get("status_le");
		Object status_in = queryMap.get("status_in");
		Object measurePerson = queryMap.get("measurePerson");
		Object measurePerson_like = queryMap.get("measurePerson_like");
		Object measurePerson_isNull = queryMap.get("measurePerson_isNull");
		Object measurePerson_isNotNull = queryMap
				.get("measurePerson_isNotNull");
		Object measurePerson_in = queryMap.get("measurePerson_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");
		Object value2 = queryMap.get("value2");
		Object value2_gt = queryMap.get("value2_gt");
		Object value2_ge = queryMap.get("value2_ge");
		Object value2_lt = queryMap.get("value2_lt");
		Object value2_le = queryMap.get("value2_le");
		Object value2_in = queryMap.get("value2_in");
		Object status2 = queryMap.get("status2");
		Object status2_gt = queryMap.get("status2_gt");
		Object status2_ge = queryMap.get("status2_ge");
		Object status2_lt = queryMap.get("status2_lt");
		Object status2_le = queryMap.get("status2_le");
		Object status2_in = queryMap.get("status2_in");

		QueryCondition qc = new QueryCondition(
				PhysiologicalParametersHistoryEntity.ID, QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.eq,
					id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.gt,
					id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.ge,
					id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.lt,
					id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.le,
					id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.in,
					id_in));
		}
		if (olderId != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.eq, olderId));
		}
		if (olderId_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.gt, olderId_gt));
		}
		if (olderId_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.ge, olderId_ge));
		}
		if (olderId_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.lt, olderId_lt));
		}
		if (olderId_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.le, olderId_le));
		}
		if (olderId_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.in, olderId_in));
		}
		if (type != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.eq, type));
		}
		if (type_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.gt, type_gt));
		}
		if (type_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.ge, type_ge));
		}
		if (type_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.lt, type_lt));
		}
		if (type_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.le, type_le));
		}
		if (type_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.in, type_in));
		}
		if (value != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.eq, value));
		}
		if (value_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.gt, value_gt));
		}
		if (value_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.ge, value_ge));
		}
		if (value_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.lt, value_lt));
		}
		if (value_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.le, value_le));
		}
		if (value_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.in, value_in));
		}
		if (unit != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.eq, unit));
		}
		if (unit_like != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.like, unit_like));
		}
		if (unit_isNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.isNull, unit_isNull));
		}
		if (unit_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.isNotNull, unit_isNotNull));
		}
		if (unit_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.in, unit_in));
		}
		if (status != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.eq, status));
		}
		if (status_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.gt, status_gt));
		}
		if (status_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.ge, status_ge));
		}
		if (status_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.lt, status_lt));
		}
		if (status_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.le, status_le));
		}
		if (status_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.in, status_in));
		}
		if (measurePerson != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.eq, measurePerson));
		}
		if (measurePerson_like != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.like, measurePerson_like));
		}
		if (measurePerson_isNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.isNull, measurePerson_isNull));
		}
		if (measurePerson_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.isNotNull, measurePerson_isNotNull));
		}
		if (measurePerson_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.in, measurePerson_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}
		if (value2 != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.eq, value2));
		}
		if (value2_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.gt, value2_gt));
		}
		if (value2_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.ge, value2_ge));
		}
		if (value2_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.lt, value2_lt));
		}
		if (value2_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.le, value2_le));
		}
		if (value2_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.in, value2_in));
		}
		if (status2 != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.eq, status2));
		}
		if (status2_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.gt, status2_gt));
		}
		if (status2_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.ge, status2_ge));
		}
		if (status2_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.lt, status2_lt));
		}
		if (status2_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.le, status2_le));
		}
		if (status2_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.in, status2_in));
		}

		list = dbManager.queryByCondition(
				PhysiologicalParametersHistoryEntity.class, qc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<PhysiologicalParametersHistoryEntity>();
			for (Object obj : list) {
				returnlist.add((PhysiologicalParametersHistoryEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param olderShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public List<PhysiologicalParametersHistoryEntity> getListByCondition(
			Map<String, Object> queryMap, List<OrderVO> orderList,
			Boolean olderShow) {
		List<PhysiologicalParametersHistoryEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object olderId = queryMap.get("olderId");
		Object olderId_gt = queryMap.get("olderId_gt");
		Object olderId_ge = queryMap.get("olderId_ge");
		Object olderId_lt = queryMap.get("olderId_lt");
		Object olderId_le = queryMap.get("olderId_le");
		Object olderId_in = queryMap.get("olderId_in");
		Object type = queryMap.get("type");
		Object type_gt = queryMap.get("type_gt");
		Object type_ge = queryMap.get("type_ge");
		Object type_lt = queryMap.get("type_lt");
		Object type_le = queryMap.get("type_le");
		Object type_in = queryMap.get("type_in");
		Object value = queryMap.get("value");
		Object value_gt = queryMap.get("value_gt");
		Object value_ge = queryMap.get("value_ge");
		Object value_lt = queryMap.get("value_lt");
		Object value_le = queryMap.get("value_le");
		Object value_in = queryMap.get("value_in");
		Object unit = queryMap.get("unit");
		Object unit_like = queryMap.get("unit_like");
		Object unit_isNull = queryMap.get("unit_isNull");
		Object unit_isNotNull = queryMap.get("unit_isNotNull");
		Object unit_in = queryMap.get("unit_in");
		Object status = queryMap.get("status");
		Object status_gt = queryMap.get("status_gt");
		Object status_ge = queryMap.get("status_ge");
		Object status_lt = queryMap.get("status_lt");
		Object status_le = queryMap.get("status_le");
		Object status_in = queryMap.get("status_in");
		Object measurePerson = queryMap.get("measurePerson");
		Object measurePerson_like = queryMap.get("measurePerson_like");
		Object measurePerson_isNull = queryMap.get("measurePerson_isNull");
		Object measurePerson_isNotNull = queryMap
				.get("measurePerson_isNotNull");
		Object measurePerson_in = queryMap.get("measurePerson_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");
		Object value2 = queryMap.get("value2");
		Object value2_gt = queryMap.get("value2_gt");
		Object value2_ge = queryMap.get("value2_ge");
		Object value2_lt = queryMap.get("value2_lt");
		Object value2_le = queryMap.get("value2_le");
		Object value2_in = queryMap.get("value2_in");
		Object status2 = queryMap.get("status2");
		Object status2_gt = queryMap.get("status2_gt");
		Object status2_ge = queryMap.get("status2_ge");
		Object status2_lt = queryMap.get("status2_lt");
		Object status2_le = queryMap.get("status2_le");
		Object status2_in = queryMap.get("status2_in");

		QueryCondition qc = new QueryCondition(
				PhysiologicalParametersHistoryEntity.ID, QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.eq,
					id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.gt,
					id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.ge,
					id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.lt,
					id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.le,
					id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.in,
					id_in));
		}
		if (olderId != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.eq, olderId));
		}
		if (olderId_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.gt, olderId_gt));
		}
		if (olderId_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.ge, olderId_ge));
		}
		if (olderId_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.lt, olderId_lt));
		}
		if (olderId_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.le, olderId_le));
		}
		if (olderId_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.in, olderId_in));
		}
		if (type != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.eq, type));
		}
		if (type_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.gt, type_gt));
		}
		if (type_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.ge, type_ge));
		}
		if (type_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.lt, type_lt));
		}
		if (type_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.le, type_le));
		}
		if (type_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.in, type_in));
		}
		if (value != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.eq, value));
		}
		if (value_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.gt, value_gt));
		}
		if (value_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.ge, value_ge));
		}
		if (value_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.lt, value_lt));
		}
		if (value_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.le, value_le));
		}
		if (value_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.in, value_in));
		}
		if (unit != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.eq, unit));
		}
		if (unit_like != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.like, unit_like));
		}
		if (unit_isNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.isNull, unit_isNull));
		}
		if (unit_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.isNotNull, unit_isNotNull));
		}
		if (unit_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.in, unit_in));
		}
		if (status != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.eq, status));
		}
		if (status_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.gt, status_gt));
		}
		if (status_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.ge, status_ge));
		}
		if (status_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.lt, status_lt));
		}
		if (status_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.le, status_le));
		}
		if (status_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.in, status_in));
		}
		if (measurePerson != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.eq, measurePerson));
		}
		if (measurePerson_like != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.like, measurePerson_like));
		}
		if (measurePerson_isNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.isNull, measurePerson_isNull));
		}
		if (measurePerson_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.isNotNull, measurePerson_isNotNull));
		}
		if (measurePerson_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.in, measurePerson_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}
		if (value2 != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.eq, value2));
		}
		if (value2_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.gt, value2_gt));
		}
		if (value2_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.ge, value2_ge));
		}
		if (value2_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.lt, value2_lt));
		}
		if (value2_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.le, value2_le));
		}
		if (value2_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.in, value2_in));
		}
		if (status2 != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.eq, status2));
		}
		if (status2_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.gt, status2_gt));
		}
		if (status2_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.ge, status2_ge));
		}
		if (status2_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.lt, status2_lt));
		}
		if (status2_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.le, status2_le));
		}
		if (status2_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.in, status2_in));
		}

		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(
				PhysiologicalParametersHistoryEntity.class, qc, oc);
		int a = 0;
		if (olderShow != null && olderShow.booleanValue()) {
			a++;
		}
		if (a > 0 && list != null && list.size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < list.size(); i++) {
				PhysiologicalParametersHistoryEntity obj = (PhysiologicalParametersHistoryEntity) list
						.get(i);
				// 查询关联内容
				if (olderShow != null && olderShow.booleanValue()
						&& obj != null && obj.getOlderId() != null
						&& obj.getOlderId() > 0) {
					OlderEntity older = (OlderEntity) dbManager.getById(
							obj.getOlderId(), OlderEntity.class);
					obj.setOlder(older);
				}
				result.add(obj);
			}
			list = result;
		}
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<PhysiologicalParametersHistoryEntity>();
			for (Object obj : list) {
				returnlist.add((PhysiologicalParametersHistoryEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object olderId = queryMap.get("olderId");
		Object olderId_gt = queryMap.get("olderId_gt");
		Object olderId_ge = queryMap.get("olderId_ge");
		Object olderId_lt = queryMap.get("olderId_lt");
		Object olderId_le = queryMap.get("olderId_le");
		Object olderId_in = queryMap.get("olderId_in");
		Object type = queryMap.get("type");
		Object type_gt = queryMap.get("type_gt");
		Object type_ge = queryMap.get("type_ge");
		Object type_lt = queryMap.get("type_lt");
		Object type_le = queryMap.get("type_le");
		Object type_in = queryMap.get("type_in");
		Object value = queryMap.get("value");
		Object value_gt = queryMap.get("value_gt");
		Object value_ge = queryMap.get("value_ge");
		Object value_lt = queryMap.get("value_lt");
		Object value_le = queryMap.get("value_le");
		Object value_in = queryMap.get("value_in");
		Object unit = queryMap.get("unit");
		Object unit_like = queryMap.get("unit_like");
		Object unit_isNull = queryMap.get("unit_isNull");
		Object unit_isNotNull = queryMap.get("unit_isNotNull");
		Object unit_in = queryMap.get("unit_in");
		Object status = queryMap.get("status");
		Object status_gt = queryMap.get("status_gt");
		Object status_ge = queryMap.get("status_ge");
		Object status_lt = queryMap.get("status_lt");
		Object status_le = queryMap.get("status_le");
		Object status_in = queryMap.get("status_in");
		Object measurePerson = queryMap.get("measurePerson");
		Object measurePerson_like = queryMap.get("measurePerson_like");
		Object measurePerson_isNull = queryMap.get("measurePerson_isNull");
		Object measurePerson_isNotNull = queryMap
				.get("measurePerson_isNotNull");
		Object measurePerson_in = queryMap.get("measurePerson_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");
		Object value2 = queryMap.get("value2");
		Object value2_gt = queryMap.get("value2_gt");
		Object value2_ge = queryMap.get("value2_ge");
		Object value2_lt = queryMap.get("value2_lt");
		Object value2_le = queryMap.get("value2_le");
		Object value2_in = queryMap.get("value2_in");
		Object status2 = queryMap.get("status2");
		Object status2_gt = queryMap.get("status2_gt");
		Object status2_ge = queryMap.get("status2_ge");
		Object status2_lt = queryMap.get("status2_lt");
		Object status2_le = queryMap.get("status2_le");
		Object status2_in = queryMap.get("status2_in");

		QueryCondition qc = new QueryCondition(
				PhysiologicalParametersHistoryEntity.ID, QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.eq,
					id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.gt,
					id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.ge,
					id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.lt,
					id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.le,
					id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.in,
					id_in));
		}
		if (olderId != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.eq, olderId));
		}
		if (olderId_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.gt, olderId_gt));
		}
		if (olderId_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.ge, olderId_ge));
		}
		if (olderId_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.lt, olderId_lt));
		}
		if (olderId_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.le, olderId_le));
		}
		if (olderId_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.in, olderId_in));
		}
		if (type != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.eq, type));
		}
		if (type_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.gt, type_gt));
		}
		if (type_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.ge, type_ge));
		}
		if (type_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.lt, type_lt));
		}
		if (type_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.le, type_le));
		}
		if (type_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.in, type_in));
		}
		if (value != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.eq, value));
		}
		if (value_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.gt, value_gt));
		}
		if (value_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.ge, value_ge));
		}
		if (value_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.lt, value_lt));
		}
		if (value_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.le, value_le));
		}
		if (value_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.in, value_in));
		}
		if (unit != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.eq, unit));
		}
		if (unit_like != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.like, unit_like));
		}
		if (unit_isNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.isNull, unit_isNull));
		}
		if (unit_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.isNotNull, unit_isNotNull));
		}
		if (unit_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.in, unit_in));
		}
		if (status != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.eq, status));
		}
		if (status_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.gt, status_gt));
		}
		if (status_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.ge, status_ge));
		}
		if (status_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.lt, status_lt));
		}
		if (status_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.le, status_le));
		}
		if (status_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.in, status_in));
		}
		if (measurePerson != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.eq, measurePerson));
		}
		if (measurePerson_like != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.like, measurePerson_like));
		}
		if (measurePerson_isNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.isNull, measurePerson_isNull));
		}
		if (measurePerson_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.isNotNull, measurePerson_isNotNull));
		}
		if (measurePerson_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.in, measurePerson_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}
		if (value2 != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.eq, value2));
		}
		if (value2_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.gt, value2_gt));
		}
		if (value2_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.ge, value2_ge));
		}
		if (value2_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.lt, value2_lt));
		}
		if (value2_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.le, value2_le));
		}
		if (value2_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.in, value2_in));
		}
		if (status2 != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.eq, status2));
		}
		if (status2_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.gt, status2_gt));
		}
		if (status2_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.ge, status2_ge));
		}
		if (status2_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.lt, status2_lt));
		}
		if (status2_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.le, status2_le));
		}
		if (status2_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.in, status2_in));
		}

		pagelist = dbManager.queryByCondition(
				PhysiologicalParametersHistoryEntity.class, qc, pageno,
				pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @param olderShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, int pageno, int pagesize, Boolean olderShow) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object olderId = queryMap.get("olderId");
		Object olderId_gt = queryMap.get("olderId_gt");
		Object olderId_ge = queryMap.get("olderId_ge");
		Object olderId_lt = queryMap.get("olderId_lt");
		Object olderId_le = queryMap.get("olderId_le");
		Object olderId_in = queryMap.get("olderId_in");
		Object type = queryMap.get("type");
		Object type_gt = queryMap.get("type_gt");
		Object type_ge = queryMap.get("type_ge");
		Object type_lt = queryMap.get("type_lt");
		Object type_le = queryMap.get("type_le");
		Object type_in = queryMap.get("type_in");
		Object value = queryMap.get("value");
		Object value_gt = queryMap.get("value_gt");
		Object value_ge = queryMap.get("value_ge");
		Object value_lt = queryMap.get("value_lt");
		Object value_le = queryMap.get("value_le");
		Object value_in = queryMap.get("value_in");
		Object unit = queryMap.get("unit");
		Object unit_like = queryMap.get("unit_like");
		Object unit_isNull = queryMap.get("unit_isNull");
		Object unit_isNotNull = queryMap.get("unit_isNotNull");
		Object unit_in = queryMap.get("unit_in");
		Object status = queryMap.get("status");
		Object status_gt = queryMap.get("status_gt");
		Object status_ge = queryMap.get("status_ge");
		Object status_lt = queryMap.get("status_lt");
		Object status_le = queryMap.get("status_le");
		Object status_in = queryMap.get("status_in");
		Object measurePerson = queryMap.get("measurePerson");
		Object measurePerson_like = queryMap.get("measurePerson_like");
		Object measurePerson_isNull = queryMap.get("measurePerson_isNull");
		Object measurePerson_isNotNull = queryMap
				.get("measurePerson_isNotNull");
		Object measurePerson_in = queryMap.get("measurePerson_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");
		Object value2 = queryMap.get("value2");
		Object value2_gt = queryMap.get("value2_gt");
		Object value2_ge = queryMap.get("value2_ge");
		Object value2_lt = queryMap.get("value2_lt");
		Object value2_le = queryMap.get("value2_le");
		Object value2_in = queryMap.get("value2_in");
		Object status2 = queryMap.get("status2");
		Object status2_gt = queryMap.get("status2_gt");
		Object status2_ge = queryMap.get("status2_ge");
		Object status2_lt = queryMap.get("status2_lt");
		Object status2_le = queryMap.get("status2_le");
		Object status2_in = queryMap.get("status2_in");

		QueryCondition qc = new QueryCondition(
				PhysiologicalParametersHistoryEntity.ID, QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.eq,
					id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.gt,
					id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.ge,
					id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.lt,
					id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.le,
					id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.in,
					id_in));
		}
		if (olderId != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.eq, olderId));
		}
		if (olderId_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.gt, olderId_gt));
		}
		if (olderId_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.ge, olderId_ge));
		}
		if (olderId_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.lt, olderId_lt));
		}
		if (olderId_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.le, olderId_le));
		}
		if (olderId_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.in, olderId_in));
		}
		if (type != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.eq, type));
		}
		if (type_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.gt, type_gt));
		}
		if (type_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.ge, type_ge));
		}
		if (type_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.lt, type_lt));
		}
		if (type_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.le, type_le));
		}
		if (type_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.in, type_in));
		}
		if (value != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.eq, value));
		}
		if (value_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.gt, value_gt));
		}
		if (value_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.ge, value_ge));
		}
		if (value_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.lt, value_lt));
		}
		if (value_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.le, value_le));
		}
		if (value_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.in, value_in));
		}
		if (unit != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.eq, unit));
		}
		if (unit_like != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.like, unit_like));
		}
		if (unit_isNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.isNull, unit_isNull));
		}
		if (unit_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.isNotNull, unit_isNotNull));
		}
		if (unit_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.in, unit_in));
		}
		if (status != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.eq, status));
		}
		if (status_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.gt, status_gt));
		}
		if (status_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.ge, status_ge));
		}
		if (status_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.lt, status_lt));
		}
		if (status_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.le, status_le));
		}
		if (status_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.in, status_in));
		}
		if (measurePerson != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.eq, measurePerson));
		}
		if (measurePerson_like != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.like, measurePerson_like));
		}
		if (measurePerson_isNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.isNull, measurePerson_isNull));
		}
		if (measurePerson_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.isNotNull, measurePerson_isNotNull));
		}
		if (measurePerson_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.in, measurePerson_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}
		if (value2 != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.eq, value2));
		}
		if (value2_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.gt, value2_gt));
		}
		if (value2_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.ge, value2_ge));
		}
		if (value2_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.lt, value2_lt));
		}
		if (value2_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.le, value2_le));
		}
		if (value2_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.in, value2_in));
		}
		if (status2 != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.eq, status2));
		}
		if (status2_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.gt, status2_gt));
		}
		if (status2_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.ge, status2_ge));
		}
		if (status2_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.lt, status2_lt));
		}
		if (status2_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.le, status2_le));
		}
		if (status2_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.in, status2_in));
		}

		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		pagelist = dbManager.queryByConditions(
				PhysiologicalParametersHistoryEntity.class, qc, oc, pageno,
				pagesize);
		int a = 0;
		if (olderShow != null && olderShow.booleanValue()) {
			a++;
		}
		if (a > 0 && pagelist != null && pagelist.getResultList() != null
				&& pagelist.getResultList().size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < pagelist.getResultList().size(); i++) {
				PhysiologicalParametersHistoryEntity obj = (PhysiologicalParametersHistoryEntity) pagelist
						.getResultList().get(i);
				// 查询关联内容
				if (olderShow != null && olderShow.booleanValue()
						&& obj != null && obj.getOlderId() != null
						&& obj.getOlderId() > 0) {
					OlderEntity older = (OlderEntity) dbManager.getById(
							obj.getOlderId(), OlderEntity.class);
					obj.setOlder(older);
				}
				result.add(obj);
			}
			pagelist.setResultList(result);
		}
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id, Boolean delOlder) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delOlder != null && delOlder.booleanValue()) {
					PhysiologicalParametersHistoryEntity physiologicalParametersHistory = (PhysiologicalParametersHistoryEntity) dbManager
							.getById(id,
									PhysiologicalParametersHistoryEntity.class);
					if (physiologicalParametersHistory != null
							&& physiologicalParametersHistory.getOlderId() != null) {
						dbManager.delNoTransaction(
								physiologicalParametersHistory.getOlderId(),
								OlderEntity.class);
					}
				}
				result = dbManager.delNoTransaction(id,
						PhysiologicalParametersHistoryEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(
						PhysiologicalParametersHistoryEntity.ID,
						QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(
						PhysiologicalParametersHistoryEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap, Boolean delOlder) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object olderId = queryMap.get("olderId");
		Object olderId_gt = queryMap.get("olderId_gt");
		Object olderId_ge = queryMap.get("olderId_ge");
		Object olderId_lt = queryMap.get("olderId_lt");
		Object olderId_le = queryMap.get("olderId_le");
		Object olderId_in = queryMap.get("olderId_in");
		Object type = queryMap.get("type");
		Object type_gt = queryMap.get("type_gt");
		Object type_ge = queryMap.get("type_ge");
		Object type_lt = queryMap.get("type_lt");
		Object type_le = queryMap.get("type_le");
		Object type_in = queryMap.get("type_in");
		Object value = queryMap.get("value");
		Object value_gt = queryMap.get("value_gt");
		Object value_ge = queryMap.get("value_ge");
		Object value_lt = queryMap.get("value_lt");
		Object value_le = queryMap.get("value_le");
		Object value_in = queryMap.get("value_in");
		Object unit = queryMap.get("unit");
		Object unit_like = queryMap.get("unit_like");
		Object unit_isNull = queryMap.get("unit_isNull");
		Object unit_isNotNull = queryMap.get("unit_isNotNull");
		Object unit_in = queryMap.get("unit_in");
		Object status = queryMap.get("status");
		Object status_gt = queryMap.get("status_gt");
		Object status_ge = queryMap.get("status_ge");
		Object status_lt = queryMap.get("status_lt");
		Object status_le = queryMap.get("status_le");
		Object status_in = queryMap.get("status_in");
		Object measurePerson = queryMap.get("measurePerson");
		Object measurePerson_like = queryMap.get("measurePerson_like");
		Object measurePerson_isNull = queryMap.get("measurePerson_isNull");
		Object measurePerson_isNotNull = queryMap
				.get("measurePerson_isNotNull");
		Object measurePerson_in = queryMap.get("measurePerson_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");
		Object value2 = queryMap.get("value2");
		Object value2_gt = queryMap.get("value2_gt");
		Object value2_ge = queryMap.get("value2_ge");
		Object value2_lt = queryMap.get("value2_lt");
		Object value2_le = queryMap.get("value2_le");
		Object value2_in = queryMap.get("value2_in");
		Object status2 = queryMap.get("status2");
		Object status2_gt = queryMap.get("status2_gt");
		Object status2_ge = queryMap.get("status2_ge");
		Object status2_lt = queryMap.get("status2_lt");
		Object status2_le = queryMap.get("status2_le");
		Object status2_in = queryMap.get("status2_in");

		QueryCondition qc = new QueryCondition(
				PhysiologicalParametersHistoryEntity.ID, QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.eq,
					id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.gt,
					id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.ge,
					id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.lt,
					id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.le,
					id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.ID, QueryCondition.in,
					id_in));
		}
		if (olderId != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.eq, olderId));
		}
		if (olderId_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.gt, olderId_gt));
		}
		if (olderId_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.ge, olderId_ge));
		}
		if (olderId_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.lt, olderId_lt));
		}
		if (olderId_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.le, olderId_le));
		}
		if (olderId_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.OLDER_ID,
					QueryCondition.in, olderId_in));
		}
		if (type != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.eq, type));
		}
		if (type_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.gt, type_gt));
		}
		if (type_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.ge, type_ge));
		}
		if (type_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.lt, type_lt));
		}
		if (type_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.le, type_le));
		}
		if (type_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.TYPE,
					QueryCondition.in, type_in));
		}
		if (value != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.eq, value));
		}
		if (value_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.gt, value_gt));
		}
		if (value_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.ge, value_ge));
		}
		if (value_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.lt, value_lt));
		}
		if (value_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.le, value_le));
		}
		if (value_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE,
					QueryCondition.in, value_in));
		}
		if (unit != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.eq, unit));
		}
		if (unit_like != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.like, unit_like));
		}
		if (unit_isNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.isNull, unit_isNull));
		}
		if (unit_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.isNotNull, unit_isNotNull));
		}
		if (unit_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.UNIT,
					QueryCondition.in, unit_in));
		}
		if (status != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.eq, status));
		}
		if (status_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.gt, status_gt));
		}
		if (status_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.ge, status_ge));
		}
		if (status_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.lt, status_lt));
		}
		if (status_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.le, status_le));
		}
		if (status_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS,
					QueryCondition.in, status_in));
		}
		if (measurePerson != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.eq, measurePerson));
		}
		if (measurePerson_like != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.like, measurePerson_like));
		}
		if (measurePerson_isNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.isNull, measurePerson_isNull));
		}
		if (measurePerson_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.isNotNull, measurePerson_isNotNull));
		}
		if (measurePerson_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.MEASURE_PERSON,
					QueryCondition.in, measurePerson_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}
		if (value2 != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.eq, value2));
		}
		if (value2_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.gt, value2_gt));
		}
		if (value2_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.ge, value2_ge));
		}
		if (value2_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.lt, value2_lt));
		}
		if (value2_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.le, value2_le));
		}
		if (value2_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.VALUE2,
					QueryCondition.in, value2_in));
		}
		if (status2 != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.eq, status2));
		}
		if (status2_gt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.gt, status2_gt));
		}
		if (status2_ge != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.ge, status2_ge));
		}
		if (status2_lt != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.lt, status2_lt));
		}
		if (status2_le != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.le, status2_le));
		}
		if (status2_in != null) {
			qc.andCondition(new QueryCondition(
					PhysiologicalParametersHistoryEntity.STATUS2,
					QueryCondition.in, status2_in));
		}

		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delOlder != null && delOlder.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									PhysiologicalParametersHistoryEntity.class,
									qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							PhysiologicalParametersHistoryEntity entity = (PhysiologicalParametersHistoryEntity) obj;
							strIds += entity.getOlderId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(OlderEntity.ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								OlderEntity.class, qc1);
					}

				}
				result = dbManager.delByConditionsNoTransaction(
						PhysiologicalParametersHistoryEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

}
