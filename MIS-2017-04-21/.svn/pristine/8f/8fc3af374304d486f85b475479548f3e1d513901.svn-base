package fsk.handler.devAlarm;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.business.handler.BaseHandler;
import com.framework.system.common.service.SystemService;
import com.framework.system.db.query.OrderVO;

import fsk.entity.dev.DevEntity;
import fsk.entity.devAlarm.DevAlarmEntity;
import fsk.pack.devAlarm.DevAlarmPack;
import fsk.parse.devAlarm.DevAlarmParse;
import fsk.service.dev.DevService;
import fsk.service.devAlarm.DevAlarmService;

/**
 * @Title: Handler
 * @Description: 设备报警信息表业务处理器
 * @author feng.gu
 * @date 2016-09-22 11:13:01
 * @version V1.0
 * 
 */
public class DevAlarmHandler extends BaseHandler {
	private static Logger logger = Logger.getLogger(DevAlarmService.class);
	/**
	 * 解析器
	 */
	private DevAlarmParse devAlarmParse = DevAlarmParse.getInstance();
	/**
	 * 业务处理器
	 */
	private DevAlarmService devAlarmService = DevAlarmService.getInstance();
	private static DevService devService = DevService.getInstance();
	/**
	 * 封装器
	 */
	private DevAlarmPack devAlarmPack = DevAlarmPack.getInstance();

	private static DevAlarmHandler devAlarmHandler;

	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static DevAlarmHandler getInstance() {
		if (devAlarmHandler == null) {
			devAlarmHandler = new DevAlarmHandler();
		}
		return devAlarmHandler;
	}

	/**
	 * 
	 * @param type
	 *            1-json 2-xml
	 * @param entityName
	 * @param command
	 * @param reqStr
	 * @param request
	 * @param response
	 */
	public String doHandler(int type, String command, String reqStr, HttpServletRequest request, HttpServletResponse response) {
		logger.debug("请求消息：" + reqStr);
		String resultStr = "";
		try {
			// 解析
			Map<String, Object> parseMap = devAlarmParse.parse(type, command, reqStr, request);
			String action = (String) parseMap.get("action");
			DevAlarmEntity devAlarm = (DevAlarmEntity) parseMap.get("devAlarm");
			List<DevAlarmEntity> devAlarmList = (List<DevAlarmEntity>) parseMap.get("devAlarmList");
			Integer id = (Integer) parseMap.get("id");
			Map<String, Object> queryMap = (Map<String, Object>) parseMap.get("queryMap");
			int pageno = (Integer) parseMap.get("pageno");
			int pagesize = (Integer) parseMap.get("pagesize");
			List<OrderVO> orderList = (List<OrderVO>) parseMap.get("orderList");

			Boolean olderShow = (Boolean) parseMap.get("olderShow");
			Boolean delOlder = (Boolean) parseMap.get("delOlder");
			Boolean devShow = (Boolean) parseMap.get("devShow");
			Boolean delDev = (Boolean) parseMap.get("delDev");
			// 增加搜索条件
			JSONObject reqStrjson = JSONObject.fromObject(reqStr);
			JSONObject conjson = (JSONObject) reqStrjson.get("content");
			String devCode = (String) conjson.get("devCode");
			// 业务处理
			Object result = null;
			if ("save".equals(action)) {
				result = devAlarmService.save(devAlarm);
			} else if ("saveList".equals(action)) {
				result = devAlarmService.saveList(devAlarmList);
			} else if ("getById".equals(action)) {
				result = devAlarmService.getById(id, olderShow, devShow);
			} else if ("getListByCondition".equals(action)) {
				// 根据数据权限 增加查询条件
				if (devCode != null) {
					Map<String, Object> queryDev = new HashMap<String, Object>();
					queryDev.put("code", devCode);
					List<DevEntity> devList = devService.getListByCondition(queryDev);
					if (devList != null && devList.size() > 0) {
						DevEntity dev = devList.get(0);
						if (dev != null) {
							String ids = "";
							Integer devId = dev.getId();
							Map<String, Object> query = new HashMap<String, Object>();
							query.put("devId", devId);
							List<DevAlarmEntity> devalarmList = devAlarmService.getListByCondition(query);
							if (devalarmList != null && devalarmList.size() > 0) {
								for (DevAlarmEntity entity : devalarmList) {
									ids = ids + entity.getId() + ",";
								}
							} else {
								queryMap.put("id_in", "0");
							}
							if (!"".equals(ids)) {
								ids = ids.replaceAll(",,", ",");
								ids = ids.substring(0, ids.length());
								queryMap.put("id_in", ids);
							}
						} else {
							queryMap.put("id_in", "0");
						}
					} else {
						queryMap.put("id_in", "0");
					}
				}
				queryMap = systemService.addDataRuleByRoles("DevAlarmEntity", queryMap, request);
				result = devAlarmService.getListByCondition(queryMap, orderList, pageno, pagesize, olderShow, devShow);
			} else if ("del".equals(action)) {
				result = devAlarmService.del(id, delOlder, delDev);
			} else if ("delList".equals(action)) {
				result = devAlarmService.delList(queryMap, delOlder, delDev);
			}
			// 封装
			Map<String, Object> packMap = devAlarmPack.pack(type, action, result, devAlarm);
			String actionBack = (String) packMap.get("action");
			String resultBack = (String) packMap.get("result");
			String desBack = (String) packMap.get("des");
			JSONObject pageBack = (JSONObject) packMap.get("page");
			JSONObject contentBack = (JSONObject) packMap.get("content");

			JSONObject repJson = new JSONObject();
			if (actionBack != null && !"".equals(actionBack)) {
				repJson.put("action", actionBack);
			}
			if (resultBack != null && !"".equals(resultBack)) {
				repJson.put("result", resultBack);
			}
			if (desBack != null && !"".equals(desBack)) {
				repJson.put("des", desBack);
			}
			if (pageBack != null) {
				repJson.put("page", pageBack);
			}
			if (contentBack != null && !"".equals(contentBack)) {
				repJson.put("content", contentBack);
			}
			logger.debug("返回消息：" + repJson.toString());
			resultStr = repJson.toString();
		} catch (Exception e) {
			logger.error(e);
		}
		return resultStr;
	}
}
