package fsk.service.siteServiceArea;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.framework.system.common.entity.dataDic.DataDicEntity;
import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

import fsk.entity.site.SiteEntity;
import fsk.entity.siteServiceArea.SiteServiceAreaEntity;

/**
 * @Title: Service
 * @Description: 站点服务区域关联表服务类
 * @author feng.gu
 * @date 2016-06-21 08:39:49
 * @version V1.0
 * 
 */
public class SiteServiceAreaService {
	private static Logger logger = Logger
			.getLogger(SiteServiceAreaService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static SiteServiceAreaService siteServiceAreaService;

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static SiteServiceAreaService getInstance() {
		if (siteServiceAreaService == null) {
			siteServiceAreaService = new SiteServiceAreaService();
		}
		return siteServiceAreaService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(SiteServiceAreaEntity siteServiceArea) {
		boolean result = false;
		if (siteServiceArea != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 关联信息保存
				SiteEntity site = siteServiceArea.getSite();
				if (site != null) {
					dbManager.saveNoTransaction(site);
					siteServiceArea.setSiteId(site.getId());
				}
				// 关联信息保存
				DataDicEntity serviceStreet = siteServiceArea
						.getServiceStreet();
				if (serviceStreet != null) {
					dbManager.saveNoTransaction(serviceStreet);
					siteServiceArea.setServiceStreetId(serviceStreet.getId());
				}
				result = dbManager.saveNoTransaction(siteServiceArea);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(List<SiteServiceAreaEntity> siteServiceAreaList) {
		boolean result = false;
		if (siteServiceAreaList != null && siteServiceAreaList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (SiteServiceAreaEntity siteServiceArea : siteServiceAreaList) {
					if (siteServiceArea != null) {
						// 关联信息保存
						SiteEntity site = siteServiceArea.getSite();
						if (site != null) {
							dbManager.saveNoTransaction(site);
							siteServiceArea.setSiteId(site.getId());
						}
						// 关联信息保存
						DataDicEntity serviceStreet = siteServiceArea
								.getServiceStreet();
						if (serviceStreet != null) {
							dbManager.saveNoTransaction(serviceStreet);
							siteServiceArea.setServiceStreetId(serviceStreet
									.getId());
						}
						result = dbManager.saveNoTransaction(siteServiceArea);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public SiteServiceAreaEntity getById(Integer id) {
		SiteServiceAreaEntity obj = null;
		if (id != null) {
			obj = (SiteServiceAreaEntity) dbManager.getById(id,
					SiteServiceAreaEntity.class);
		}
		return obj;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param siteShow
	 *            是否查询关联信息
	 * @param serviceStreetShow
	 *            是否查询关联信息
	 * @param obj
	 */
	public SiteServiceAreaEntity getById(Integer id, Boolean siteShow,
			Boolean serviceStreetShow) {
		SiteServiceAreaEntity obj = null;
		if (id != null) {
			obj = (SiteServiceAreaEntity) dbManager.getById(id,
					SiteServiceAreaEntity.class);
			// 查询关联内容
			if (siteShow != null && siteShow.booleanValue() && obj != null
					&& obj.getSiteId() != null && obj.getSiteId() > 0) {
				SiteEntity site = (SiteEntity) dbManager.getById(
						obj.getSiteId(), SiteEntity.class);
				obj.setSite(site);
			}
			// 查询关联内容
			if (serviceStreetShow != null && serviceStreetShow.booleanValue()
					&& obj != null && obj.getServiceStreetId() != null
					&& obj.getServiceStreetId() > 0) {
				DataDicEntity serviceStreet = (DataDicEntity) dbManager
						.getById(obj.getServiceStreetId(), DataDicEntity.class);
				obj.setServiceStreet(serviceStreet);
			}
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<SiteServiceAreaEntity> getListByCondition(
			Map<String, Object> queryMap) {
		List<SiteServiceAreaEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object siteId = queryMap.get("siteId");
		Object siteId_gt = queryMap.get("siteId_gt");
		Object siteId_ge = queryMap.get("siteId_ge");
		Object siteId_lt = queryMap.get("siteId_lt");
		Object siteId_le = queryMap.get("siteId_le");
		Object siteId_in = queryMap.get("siteId_in");
		Object serviceStreetId = queryMap.get("serviceStreetId");
		Object serviceStreetId_gt = queryMap.get("serviceStreetId_gt");
		Object serviceStreetId_ge = queryMap.get("serviceStreetId_ge");
		Object serviceStreetId_lt = queryMap.get("serviceStreetId_lt");
		Object serviceStreetId_le = queryMap.get("serviceStreetId_le");
		Object serviceStreetId_in = queryMap.get("serviceStreetId_in");

		QueryCondition qc = new QueryCondition(SiteServiceAreaEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.in, id_in));
		}
		if (siteId != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.eq, siteId));
		}
		if (siteId_gt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.gt, siteId_gt));
		}
		if (siteId_ge != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.ge, siteId_ge));
		}
		if (siteId_lt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.lt, siteId_lt));
		}
		if (siteId_le != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.le, siteId_le));
		}
		if (siteId_in != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.in, siteId_in));
		}
		if (serviceStreetId != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.eq,
					serviceStreetId));
		}
		if (serviceStreetId_gt != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.gt,
					serviceStreetId_gt));
		}
		if (serviceStreetId_ge != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.ge,
					serviceStreetId_ge));
		}
		if (serviceStreetId_lt != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.lt,
					serviceStreetId_lt));
		}
		if (serviceStreetId_le != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.le,
					serviceStreetId_le));
		}
		if (serviceStreetId_in != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.in,
					serviceStreetId_in));
		}

		list = dbManager.queryByCondition(SiteServiceAreaEntity.class, qc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<SiteServiceAreaEntity>();
			for (Object obj : list) {
				returnlist.add((SiteServiceAreaEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param siteShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param serviceStreetShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public List<SiteServiceAreaEntity> getListByCondition(
			Map<String, Object> queryMap, List<OrderVO> orderList,
			Boolean siteShow, Boolean serviceStreetShow) {
		List<SiteServiceAreaEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object siteId = queryMap.get("siteId");
		Object siteId_gt = queryMap.get("siteId_gt");
		Object siteId_ge = queryMap.get("siteId_ge");
		Object siteId_lt = queryMap.get("siteId_lt");
		Object siteId_le = queryMap.get("siteId_le");
		Object siteId_in = queryMap.get("siteId_in");
		Object serviceStreetId = queryMap.get("serviceStreetId");
		Object serviceStreetId_gt = queryMap.get("serviceStreetId_gt");
		Object serviceStreetId_ge = queryMap.get("serviceStreetId_ge");
		Object serviceStreetId_lt = queryMap.get("serviceStreetId_lt");
		Object serviceStreetId_le = queryMap.get("serviceStreetId_le");
		Object serviceStreetId_in = queryMap.get("serviceStreetId_in");

		QueryCondition qc = new QueryCondition(SiteServiceAreaEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.in, id_in));
		}
		if (siteId != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.eq, siteId));
		}
		if (siteId_gt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.gt, siteId_gt));
		}
		if (siteId_ge != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.ge, siteId_ge));
		}
		if (siteId_lt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.lt, siteId_lt));
		}
		if (siteId_le != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.le, siteId_le));
		}
		if (siteId_in != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.in, siteId_in));
		}
		if (serviceStreetId != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.eq,
					serviceStreetId));
		}
		if (serviceStreetId_gt != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.gt,
					serviceStreetId_gt));
		}
		if (serviceStreetId_ge != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.ge,
					serviceStreetId_ge));
		}
		if (serviceStreetId_lt != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.lt,
					serviceStreetId_lt));
		}
		if (serviceStreetId_le != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.le,
					serviceStreetId_le));
		}
		if (serviceStreetId_in != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.in,
					serviceStreetId_in));
		}

		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(SiteServiceAreaEntity.class, qc, oc);
		int a = 0;
		if (siteShow != null && siteShow.booleanValue()) {
			a++;
		}
		if (serviceStreetShow != null && serviceStreetShow.booleanValue()) {
			a++;
		}
		if (a > 0 && list != null && list.size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < list.size(); i++) {
				SiteServiceAreaEntity obj = (SiteServiceAreaEntity) list.get(i);
				// 查询关联内容
				if (siteShow != null && siteShow.booleanValue() && obj != null
						&& obj.getSiteId() != null && obj.getSiteId() > 0) {
					SiteEntity site = (SiteEntity) dbManager.getById(
							obj.getSiteId(), SiteEntity.class);
					obj.setSite(site);
				}
				// 查询关联内容
				if (serviceStreetShow != null
						&& serviceStreetShow.booleanValue() && obj != null
						&& obj.getServiceStreetId() != null
						&& obj.getServiceStreetId() > 0) {
					DataDicEntity serviceStreet = (DataDicEntity) dbManager
							.getById(obj.getServiceStreetId(),
									DataDicEntity.class);
					obj.setServiceStreet(serviceStreet);
				}
				result.add(obj);
			}
			list = result;
		}
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<SiteServiceAreaEntity>();
			for (Object obj : list) {
				returnlist.add((SiteServiceAreaEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object siteId = queryMap.get("siteId");
		Object siteId_gt = queryMap.get("siteId_gt");
		Object siteId_ge = queryMap.get("siteId_ge");
		Object siteId_lt = queryMap.get("siteId_lt");
		Object siteId_le = queryMap.get("siteId_le");
		Object siteId_in = queryMap.get("siteId_in");
		Object serviceStreetId = queryMap.get("serviceStreetId");
		Object serviceStreetId_gt = queryMap.get("serviceStreetId_gt");
		Object serviceStreetId_ge = queryMap.get("serviceStreetId_ge");
		Object serviceStreetId_lt = queryMap.get("serviceStreetId_lt");
		Object serviceStreetId_le = queryMap.get("serviceStreetId_le");
		Object serviceStreetId_in = queryMap.get("serviceStreetId_in");

		QueryCondition qc = new QueryCondition(SiteServiceAreaEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.in, id_in));
		}
		if (siteId != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.eq, siteId));
		}
		if (siteId_gt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.gt, siteId_gt));
		}
		if (siteId_ge != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.ge, siteId_ge));
		}
		if (siteId_lt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.lt, siteId_lt));
		}
		if (siteId_le != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.le, siteId_le));
		}
		if (siteId_in != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.in, siteId_in));
		}
		if (serviceStreetId != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.eq,
					serviceStreetId));
		}
		if (serviceStreetId_gt != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.gt,
					serviceStreetId_gt));
		}
		if (serviceStreetId_ge != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.ge,
					serviceStreetId_ge));
		}
		if (serviceStreetId_lt != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.lt,
					serviceStreetId_lt));
		}
		if (serviceStreetId_le != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.le,
					serviceStreetId_le));
		}
		if (serviceStreetId_in != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.in,
					serviceStreetId_in));
		}

		pagelist = dbManager.queryByCondition(SiteServiceAreaEntity.class, qc,
				pageno, pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @param siteShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param serviceStreetShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, int pageno, int pagesize,
			Boolean siteShow, Boolean serviceStreetShow) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object siteId = queryMap.get("siteId");
		Object siteId_gt = queryMap.get("siteId_gt");
		Object siteId_ge = queryMap.get("siteId_ge");
		Object siteId_lt = queryMap.get("siteId_lt");
		Object siteId_le = queryMap.get("siteId_le");
		Object siteId_in = queryMap.get("siteId_in");
		Object serviceStreetId = queryMap.get("serviceStreetId");
		Object serviceStreetId_gt = queryMap.get("serviceStreetId_gt");
		Object serviceStreetId_ge = queryMap.get("serviceStreetId_ge");
		Object serviceStreetId_lt = queryMap.get("serviceStreetId_lt");
		Object serviceStreetId_le = queryMap.get("serviceStreetId_le");
		Object serviceStreetId_in = queryMap.get("serviceStreetId_in");

		QueryCondition qc = new QueryCondition(SiteServiceAreaEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.in, id_in));
		}
		if (siteId != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.eq, siteId));
		}
		if (siteId_gt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.gt, siteId_gt));
		}
		if (siteId_ge != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.ge, siteId_ge));
		}
		if (siteId_lt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.lt, siteId_lt));
		}
		if (siteId_le != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.le, siteId_le));
		}
		if (siteId_in != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.in, siteId_in));
		}
		if (serviceStreetId != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.eq,
					serviceStreetId));
		}
		if (serviceStreetId_gt != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.gt,
					serviceStreetId_gt));
		}
		if (serviceStreetId_ge != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.ge,
					serviceStreetId_ge));
		}
		if (serviceStreetId_lt != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.lt,
					serviceStreetId_lt));
		}
		if (serviceStreetId_le != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.le,
					serviceStreetId_le));
		}
		if (serviceStreetId_in != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.in,
					serviceStreetId_in));
		}

		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		pagelist = dbManager.queryByConditions(SiteServiceAreaEntity.class, qc,
				oc, pageno, pagesize);
		int a = 0;
		if (siteShow != null && siteShow.booleanValue()) {
			a++;
		}
		if (serviceStreetShow != null && serviceStreetShow.booleanValue()) {
			a++;
		}
		if (a > 0 && pagelist != null && pagelist.getResultList() != null
				&& pagelist.getResultList().size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < pagelist.getResultList().size(); i++) {
				SiteServiceAreaEntity obj = (SiteServiceAreaEntity) pagelist
						.getResultList().get(i);
				// 查询关联内容
				if (siteShow != null && siteShow.booleanValue() && obj != null
						&& obj.getSiteId() != null && obj.getSiteId() > 0) {
					SiteEntity site = (SiteEntity) dbManager.getById(
							obj.getSiteId(), SiteEntity.class);
					obj.setSite(site);
				}
				// 查询关联内容
				if (serviceStreetShow != null
						&& serviceStreetShow.booleanValue() && obj != null
						&& obj.getServiceStreetId() != null
						&& obj.getServiceStreetId() > 0) {
					DataDicEntity serviceStreet = (DataDicEntity) dbManager
							.getById(obj.getServiceStreetId(),
									DataDicEntity.class);
					obj.setServiceStreet(serviceStreet);
				}
				result.add(obj);
			}
			pagelist.setResultList(result);
		}
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id, Boolean delSite, Boolean delServiceStreet) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delSite != null && delSite.booleanValue()) {
					SiteServiceAreaEntity siteServiceArea = (SiteServiceAreaEntity) dbManager
							.getById(id, SiteServiceAreaEntity.class);
					if (siteServiceArea != null
							&& siteServiceArea.getSiteId() != null) {
						dbManager.delNoTransaction(siteServiceArea.getSiteId(),
								SiteEntity.class);
					}
				}
				// 删除关联信息
				if (delServiceStreet != null && delServiceStreet.booleanValue()) {
					SiteServiceAreaEntity siteServiceArea = (SiteServiceAreaEntity) dbManager
							.getById(id, SiteServiceAreaEntity.class);
					if (siteServiceArea != null
							&& siteServiceArea.getServiceStreetId() != null) {
						dbManager.delNoTransaction(
								siteServiceArea.getServiceStreetId(),
								DataDicEntity.class);
					}
				}
				result = dbManager.delNoTransaction(id,
						SiteServiceAreaEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(
						SiteServiceAreaEntity.ID, QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(
						SiteServiceAreaEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap, Boolean delSite,
			Boolean delServiceStreet) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object siteId = queryMap.get("siteId");
		Object siteId_gt = queryMap.get("siteId_gt");
		Object siteId_ge = queryMap.get("siteId_ge");
		Object siteId_lt = queryMap.get("siteId_lt");
		Object siteId_le = queryMap.get("siteId_le");
		Object siteId_in = queryMap.get("siteId_in");
		Object serviceStreetId = queryMap.get("serviceStreetId");
		Object serviceStreetId_gt = queryMap.get("serviceStreetId_gt");
		Object serviceStreetId_ge = queryMap.get("serviceStreetId_ge");
		Object serviceStreetId_lt = queryMap.get("serviceStreetId_lt");
		Object serviceStreetId_le = queryMap.get("serviceStreetId_le");
		Object serviceStreetId_in = queryMap.get("serviceStreetId_in");

		QueryCondition qc = new QueryCondition(SiteServiceAreaEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.ID,
					QueryCondition.in, id_in));
		}
		if (siteId != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.eq, siteId));
		}
		if (siteId_gt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.gt, siteId_gt));
		}
		if (siteId_ge != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.ge, siteId_ge));
		}
		if (siteId_lt != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.lt, siteId_lt));
		}
		if (siteId_le != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.le, siteId_le));
		}
		if (siteId_in != null) {
			qc.andCondition(new QueryCondition(SiteServiceAreaEntity.SITE_ID,
					QueryCondition.in, siteId_in));
		}
		if (serviceStreetId != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.eq,
					serviceStreetId));
		}
		if (serviceStreetId_gt != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.gt,
					serviceStreetId_gt));
		}
		if (serviceStreetId_ge != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.ge,
					serviceStreetId_ge));
		}
		if (serviceStreetId_lt != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.lt,
					serviceStreetId_lt));
		}
		if (serviceStreetId_le != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.le,
					serviceStreetId_le));
		}
		if (serviceStreetId_in != null) {
			qc.andCondition(new QueryCondition(
					SiteServiceAreaEntity.SERVICE_STREET_ID, QueryCondition.in,
					serviceStreetId_in));
		}

		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delSite != null && delSite.booleanValue()) {
					List<Object> list = dbManager.queryByCondition(
							SiteServiceAreaEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							SiteServiceAreaEntity entity = (SiteServiceAreaEntity) obj;
							strIds += entity.getSiteId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(SiteEntity.ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								SiteEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delServiceStreet != null && delServiceStreet.booleanValue()) {
					List<Object> list = dbManager.queryByCondition(
							SiteServiceAreaEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							SiteServiceAreaEntity entity = (SiteServiceAreaEntity) obj;
							strIds += entity.getServiceStreetId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								DataDicEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								DataDicEntity.class, qc1);
					}

				}
				result = dbManager.delByConditionsNoTransaction(
						SiteServiceAreaEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

}
