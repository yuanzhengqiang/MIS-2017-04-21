package fsk.controller.nursingPlan;

import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.framework.system.common.entity.json.AjaxJson;
import com.framework.system.common.entity.module.ModuleEntity;
import com.framework.system.common.service.SystemService;
import com.framework.system.db.query.PageList;
import com.framework.system.util.JsonUtil;

import fsk.entity.nursingPlan.NursingPlanEntity;
import fsk.entity.older.OlderEntity;
import fsk.handler.nursingPlan.NursingPlanHandler;
import fsk.service.nursingPlan.NursingPlanService;
import fsk.service.older.OlderService;

@RequestMapping("/nursingPlan")
@Controller
public class NursingPlanController {
	private static Logger logger = Logger.getLogger(NursingPlanController.class);
	private static SimpleDateFormat formater = new SimpleDateFormat("yyyyMMdd");
	/**
	 * 处理器
	 */
	private NursingPlanHandler nursingPlanHandler = NursingPlanHandler.getInstance();
	/**
	 * 服务类
	 */
	private NursingPlanService nursingPlanService = NursingPlanService.getInstance();
	private OlderService olderService = OlderService.getInstance();
	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();

	/**
	 * 列表页
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "main")
	public ModelAndView center(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/NursingPlan/NursingPlanList");
		Integer userId = (Integer) request.getSession().getAttribute("userId");// 登录用户ID
		String status = "";
		if (request.getParameter("status") != null && !request.getParameter("status").equals("")) {
			status = request.getParameter("status");
		}
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds, htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("userId", userId);
		mav.addObject("status", status);
		return mav;
	}

	/**
	 * 新增页
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "mainAdd")
	public ModelAndView centerAdd(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/NursingPlan/AddNursingPlan");
		Integer userId = (Integer) request.getSession().getAttribute("userId");// 登录用户ID
		String id = request.getParameter("id");
		String flag = "";
		String oldId = "";
		String oldName = "";
		if (request.getParameter("flag") != null && request.getParameter("flag") != "") {
			flag = request.getParameter("flag");
		}
		if (request.getParameter("oldId") != null && request.getParameter("oldId") != "") {
			oldId = request.getParameter("oldId");
		}
		if (request.getParameter("oldName") != null && request.getParameter("oldName") != "") {
			try {
				oldName = new String(request.getParameter("oldName").getBytes("ISO-8859-1"), "UTF-8");
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		mav.addObject("flag", flag);
		mav.addObject("id", id);
		mav.addObject("userId", userId);
		mav.addObject("oldId", oldId);
		mav.addObject("oldName", oldName);
		return mav;
	}

	/**
	 * 详情页
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "mainXQ")
	public ModelAndView centerXQ(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/NursingPlan/NursingPlanDetail");
		Integer userId = (Integer) request.getSession().getAttribute("userId");// 登录用户ID
		String id = request.getParameter("id");
		mav.addObject("id", id);
		mav.addObject("userId", userId);
		return mav;
	}

	/**
	 * 批量删除 ids英文逗号间隔
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "del")
	@ResponseBody
	public AjaxJson del(HttpServletRequest request) {
		AjaxJson j = new AjaxJson();
		String result = "failure";
		String des = "删除失败";
		String ids = request.getParameter("ids");
		if (ids != null && !"".equals(ids)) {
			boolean falg = nursingPlanService.del(ids);
			if (falg) {
				result = "success";
				des = "删除成功";
			}
		}
		j.setResult(result);
		j.setDes(des);
		return j;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handler")
	@ResponseBody
	public String query(HttpServletRequest request, HttpServletResponse response) {
		String msg = "";
		try {
			String reqmsg = request.getParameter("reqmsg");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return msg;
			}
			String action = (String) reqParams.get("action");
			String rep = nursingPlanHandler.doHandler(1, action, reqmsg, request, response);
			msg = new String(rep.getBytes("utf-8"), "iso-8859-1");
		} catch (Exception e) {
			logger.error(e.toString());
		}

		return msg;
	}

	/**
	 * 检查会员号是否存在
	 * 
	 * @param idnumber
	 * @return
	 */
	@RequestMapping(params = "checkHYH")
	@ResponseBody
	public String checkHYH(String idnumber, HttpServletRequest request) {
		Integer id = null;
		Map<String, Object> query = new HashMap<String, Object>();
		query.put("memberNum", idnumber);
		query = systemService.addDataRuleByRoles("OlderEntity", query, request);
		PageList oldList = olderService.getListByCondition(query, null, 1, 1, null, null, null, null, null, null, null,null);
		JSONObject jsonResult = new JSONObject();
		if (oldList != null && oldList.getResultList() != null && oldList.getResultList().size() == 1) {
			List<Object> objlist = oldList.getResultList();
			for (Object obj : objlist) {
				OlderEntity olds = (OlderEntity) obj;
				id = olds.getId();
			}
			jsonResult.put("id", id);
			jsonResult.put("des", "success");
		} else {
			jsonResult.put("des", "failure");
		}

		String json2return = jsonResult.toString();
		try {
			json2return = new String(json2return.getBytes("utf-8"), "iso-8859-1");
		} catch (UnsupportedEncodingException e) {

		}
		return json2return;
	}

	/**
	 * 检查会员卡号是否存在
	 * 
	 * @param idnumber
	 * @return
	 */
	@RequestMapping(params = "checkHYKH")
	@ResponseBody
	public String checkHYKH(String idnumber_Card, HttpServletRequest request) {
		Integer id = null;
		Map<String, Object> query = new HashMap<String, Object>();
		query.put("memberCard", idnumber_Card);
		query = systemService.addDataRuleByRoles("OlderEntity", query, request);
		PageList oldList = olderService.getListByCondition(query, null, 1, 1, null, null, null, null, null, null, null,null);
		JSONObject jsonResult = new JSONObject();
		if (oldList != null && oldList.getResultList() != null && oldList.getResultList().size() == 1) {
			List<Object> objlist = oldList.getResultList();
			for (Object obj : objlist) {
				OlderEntity olds = (OlderEntity) obj;
				id = olds.getId();
			}
			jsonResult.put("id", id);
			jsonResult.put("des", "success");
		} else {
			jsonResult.put("des", "failure");
		}

		String json2return = jsonResult.toString();
		try {
			json2return = new String(json2return.getBytes("utf-8"), "iso-8859-1");
		} catch (UnsupportedEncodingException e) {

		}
		return json2return;
	}

	/**
	 * 检查会员是否存在护理计划
	 * 
	 * @param idnumber
	 * @return
	 */
	@RequestMapping(params = "checkIfhljh")
	@ResponseBody
	public String checkIfhljh(String id) {
		Integer id_hljh = null;
		Map<String, Object> query = new HashMap<String, Object>();
		query.put("olderId", id);
		List<NursingPlanEntity> nursingPlanEntity = nursingPlanService.getListByCondition(query);
		JSONObject jsonResult = new JSONObject();
		if (nursingPlanEntity != null && nursingPlanEntity.size() > 0) {
			id_hljh = nursingPlanEntity.get(0).getId();
			jsonResult.put("id_hljh", id_hljh);
			jsonResult.put("des", "success");
		} else {
			jsonResult.put("des", "failure");
		}

		String json2return = jsonResult.toString();
		try {
			json2return = new String(json2return.getBytes("utf-8"), "iso-8859-1");
		} catch (UnsupportedEncodingException e) {

		}
		return json2return;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handlercontent")
	public void queryApp(HttpServletRequest request, HttpServletResponse response) {
		try {
			InputStream is = request.getInputStream();
			byte[] bis = IOUtils.toByteArray(is);
			String reqmsg = new String(bis, "UTF-8");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return;
			}
			String action = (String) reqParams.get("action");
			String rep = nursingPlanHandler.doHandler(1, action, reqmsg, request, response);
			OutputStream os = response.getOutputStream();
			os.write(rep.toString().getBytes("UTF-8"));
		} catch (Exception e) {
			logger.error(e.toString());
		}
	}

	/**
	 * 护理计划统计
	 * 
	 * @param idnumber
	 * @return
	 */
	@RequestMapping(params = "handlerCount")
	@ResponseBody
	public String getCount(HttpServletRequest request) {
		Integer yiShehHe = 0;
		Integer daiShenHe = 0;
		JSONObject jsonResult = new JSONObject();

		try {
			Map<String, Object> query = new HashMap<String, Object>();
			query = systemService.addDataRuleByRoles("NursingPlanEntity", query, request);
			PageList nurringList = nursingPlanService.getListByCondition(query, null, 1, 100000, false, false, false);
			if (nurringList != null) {
				if (nurringList.getResultList() != null && nurringList.getResultList().size() > 0) {
					for (Object obj : nurringList.getResultList()) {
						NursingPlanEntity entity = (NursingPlanEntity) obj;
						if (entity.getStatus() != null) {
							if (entity.getStatus().intValue() == 1) {
								daiShenHe++;
							}
							if (entity.getStatus().intValue() == 2) {
								yiShehHe++;
							}
						}
					}
				}
			}
			jsonResult.put("des", "success");
		} catch (Exception e) {
			jsonResult.put("des", "failure");
		}

		jsonResult.put("daiShenHe", daiShenHe);
		jsonResult.put("yiShehHe", yiShehHe);
		return jsonResult.toString();
	}

	/**
	 * 护理计划图表统计
	 * 
	 * @param idnumber
	 * @return
	 */
	@RequestMapping(params = "handlerQueryCount")
	@ResponseBody
	public String handlerQueryCount(HttpServletRequest request, String name, String startTime, String endTime) {
		JSONObject jsonResult = new JSONObject();
		JSONObject josncontent = new JSONObject();
		JSONArray jsonarrday = new JSONArray();
		jsonResult.put("result", "100");
		jsonResult.put("des", "success");
		// 数据权限
		Map<String, Object> query = new HashMap<String, Object>();
		query = systemService.addDataRuleByRoles("NursingPlanEntity", query, request);
		// 时间截点
		Map<String, Object> queryAssDayday = null;
		if (!"".equals(startTime) && !"".equals(endTime) && startTime != null && endTime != null) {
			queryAssDayday = getDays(startTime, endTime);
		} else {
			String curDay = formater.format(new Date()) + "235959";
			queryAssDayday = getDays(getSevenDay(), curDay);
		}
		try {

			// 遍历日期
			for (Map.Entry<String, Object> entry : queryAssDayday.entrySet()) {
				JSONObject jsonday = new JSONObject();
				String day = entry.getValue().toString();
				day = day.substring(0, 8);
				Map<String, Object> queryNurPlan = new HashMap<String, Object>();
				queryNurPlan = systemService.addDataRuleByRoles("NursingPlanEntity", query, request);
				if (!"".equals(name) && name != null) {
					queryNurPlan.put("olderName", name);
				}
				Integer num = 0;
				queryNurPlan.put("status", 2);
				queryNurPlan.put("checkTime_ge", day + "000001");
				queryNurPlan.put("checkTime_le", day + "235959");
				PageList nursingList = nursingPlanService.getListByCondition(query, null, 1, 100000, false, false, false);
				if (nursingList != null) {
					if (nursingList.getResultList() != null && nursingList.getResultList().size() > 0) {
						num = nursingList.getResultList().size();
					}
				}
				jsonday.put("day", day);
				jsonday.put("num", num);
				jsonarrday.add(jsonday);
			}
			josncontent.put("dayList", jsonarrday.toString());
			jsonResult.put("content", josncontent.toString());
		} catch (Exception e) {
			jsonResult.put("result", "200");
			jsonResult.put("des", "failure");
			jsonResult.put("content", "");
		}

		String rep = jsonResult.toString();
		try {
			rep = new String(rep.getBytes("utf-8"), "iso-8859-1");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		return rep;
	}

	// 得到七天前的日期
	public String getSevenDay() {

		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		Calendar c = Calendar.getInstance();
		c.add(Calendar.DATE, -6);
		Date monday = c.getTime();
		String preMonday = sdf.format(monday) + "000001";
		return preMonday;
	}

	// 根据时间区间将区间内的日期存入map
	public static Map<String, Object> getDays(String start, String end) {
		Map<String, Object> map = new LinkedHashMap<String, Object>();
		Calendar cals = Calendar.getInstance();
		Calendar cale = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
		Date dates = null;
		Date datee = null;
		try {
			dates = sdf.parse(start);
			datee = sdf.parse(end);
		} catch (ParseException e) {
			e.printStackTrace();
		}

		cals.setTime(dates);
		cale.setTime(datee);
		while (!cals.after(cale)) {
			String date = sdf.format(cals.getTime());
			cals.add(Calendar.DAY_OF_YEAR, 1);
			map.put(date, date);
		}
		return map;
	}
}
