package fsk.handler.service;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.business.handler.BaseHandler;
import com.framework.system.common.service.SystemService;
import com.framework.system.db.query.OrderVO;

import fsk.entity.service.ServiceEntity;
import fsk.pack.service.ServicePack;
import fsk.parse.service.ServiceParse;
import fsk.service.service.ServiceService;
import fsk.service.serviceChild.ServiceChildService;
import fsk.service.servicePhoto.ServicePhotoService;

/**
 * @Title: Handler
 * @Description: 服务项目业务处理器
 * @author feng.gu
 * @date 2016-07-26 09:30:37
 * @version V1.0
 * 
 */
public class ServiceHandler extends BaseHandler {
	private static Logger logger = Logger.getLogger(ServiceService.class);
	/**
	 * 解析器
	 */
	private ServiceParse serviceParse = ServiceParse.getInstance();
	/**
	 * 业务处理器
	 */
	private ServiceService serviceService = ServiceService.getInstance();
	private ServicePhotoService servicePhotoService = ServicePhotoService.getInstance();
	private static ServiceChildService serviceChildService = ServiceChildService.getInstance();
	/**
	 * 封装器
	 */
	private ServicePack servicePack = ServicePack.getInstance();

	private static ServiceHandler serviceHandler;

	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();
	private static SimpleDateFormat formater2 = new SimpleDateFormat("yyyyMMdd");

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static ServiceHandler getInstance() {
		if (serviceHandler == null) {
			serviceHandler = new ServiceHandler();
		}
		return serviceHandler;
	}

	/**
	 * 
	 * @param type
	 *            1-json 2-xml
	 * @param entityName
	 * @param command
	 * @param reqStr
	 * @param request
	 * @param response
	 */
	public String doHandler(int type, String command, String reqStr, HttpServletRequest request, HttpServletResponse response) {
		logger.debug("请求消息：" + reqStr);
		String resultStr = "";
		try {
			// 解析
			Map<String, Object> parseMap = serviceParse.parse(type, command, reqStr, request);
			String action = (String) parseMap.get("action");
			ServiceEntity service = (ServiceEntity) parseMap.get("service");
			List<ServiceEntity> serviceList = (List<ServiceEntity>) parseMap.get("serviceList");
			Integer id = (Integer) parseMap.get("id");
			Map<String, Object> queryMap = (Map<String, Object>) parseMap.get("queryMap");
			int pageno = (Integer) parseMap.get("pageno");
			int pagesize = (Integer) parseMap.get("pagesize");
			List<OrderVO> orderList = (List<OrderVO>) parseMap.get("orderList");

			Boolean typeShow = (Boolean) parseMap.get("typeShow");
			Boolean delType = (Boolean) parseMap.get("delType");
			Boolean serviceChildListShow = (Boolean) parseMap.get("serviceChildListShow");
			Boolean delServiceChildList = (Boolean) parseMap.get("delServiceChildList");
			Boolean servicePhotoListShow = (Boolean) parseMap.get("servicePhotoListShow");
			Boolean delServicePhotoList = (Boolean) parseMap.get("delServicePhotoList");

			// 业务处理
			Object result = null;
			if ("save".equals(action)) {
				/* 生成code */
				if (service.getId() == null) {
					Date date = new Date();
					long code = date.getTime();
					String codestr = String.valueOf(code);
					codestr = codestr + generateCode(2);
					service.setCode(codestr);
				}
				/* 删除照片pei */
				boolean delphpto = false;
				if (service.getId() != null) {
					delphpto = true;
				}
				if (delphpto) {
					Map<String, Object> delMap = new HashMap<String, Object>();
					delMap.put("serviceId", service.getId());
					servicePhotoService.delList(delMap, false);
				}
				//
				/* 删除serviceChildList的pei */
				boolean delChild = false;
				if (service.getId() != null) {
					delChild = true;
				}
				if (delChild) {
					Map<String, Object> delMap = new HashMap<String, Object>();
					delMap.put("serviceId", service.getId());
					serviceChildService.delList(delMap, false);
				}
				result = serviceService.save(service);
			} else if ("saveList".equals(action)) {
				result = serviceService.saveList(serviceList);
			} else if ("getById".equals(action)) {
				result = serviceService.getById(id, typeShow, serviceChildListShow, servicePhotoListShow);
			} else if ("getListByCondition".equals(action)) {
				// 根据数据权限 增加查询条件
				queryMap = systemService.addDataRule("ServiceEntity", queryMap, request);
				result = serviceService.getListByCondition(queryMap, orderList, pageno, pagesize, typeShow, serviceChildListShow, servicePhotoListShow);
			} else if ("del".equals(action)) {
				result = serviceService.del(id, delType, delServiceChildList, delServicePhotoList);
			} else if ("delList".equals(action)) {
				result = serviceService.delList(queryMap, delType, delServiceChildList, delServicePhotoList);
			}
			// 封装
			Map<String, Object> packMap = servicePack.pack(type, action, result, service);
			String actionBack = (String) packMap.get("action");
			String resultBack = (String) packMap.get("result");
			String desBack = (String) packMap.get("des");
			JSONObject pageBack = (JSONObject) packMap.get("page");
			JSONObject contentBack = (JSONObject) packMap.get("content");

			JSONObject repJson = new JSONObject();
			if (actionBack != null && !"".equals(actionBack)) {
				repJson.put("action", actionBack);
			}
			if (resultBack != null && !"".equals(resultBack)) {
				repJson.put("result", resultBack);
			}
			if (desBack != null && !"".equals(desBack)) {
				repJson.put("des", desBack);
			}
			if (pageBack != null) {
				repJson.put("page", pageBack);
			}
			if (contentBack != null && !"".equals(contentBack)) {
				repJson.put("content", contentBack);
			}
			logger.debug("返回消息：" + repJson.toString());
			resultStr = repJson.toString();
		} catch (Exception e) {
			logger.error(e);
		}
		return resultStr;
	}

	public static String generateCode(int length) {
		final String ALLCHAR = "0123456789";
		StringBuffer sb = new StringBuffer();
		Random random = new Random();
		for (int i = 0; i < length; i++) {
			sb.append(ALLCHAR.charAt(random.nextInt(ALLCHAR.length())));
		}
		return sb.toString();
	}
}
