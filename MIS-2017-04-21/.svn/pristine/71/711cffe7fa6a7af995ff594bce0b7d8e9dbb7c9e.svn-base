package fsk.service.nursingPlanService;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

import fsk.entity.employeeDistribution.EmployeeDistributionEntity;
import fsk.entity.nursingPlan.NursingPlanEntity;
import fsk.entity.nursingPlanService.NursingPlanServiceEntity;
import fsk.entity.service.ServiceEntity;

/**
 * @Title: Service
 * @Description: 护理计划服务项目服务类
 * @author feng.gu
 * @date 2016-12-29 16:38:50
 * @version V1.0
 * 
 */
public class NursingPlanServiceService {
	private static Logger logger = Logger.getLogger(NursingPlanServiceService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static NursingPlanServiceService nursingPlanServiceService;

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static NursingPlanServiceService getInstance() {
		if (nursingPlanServiceService == null) {
			nursingPlanServiceService = new NursingPlanServiceService();
		}
		return nursingPlanServiceService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(NursingPlanServiceEntity nursingPlanService) {
		boolean result = false;
		if (nursingPlanService != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 关联信息保存
				NursingPlanEntity nursingPlan = nursingPlanService.getNursingPlan();
				if (nursingPlan != null) {
					dbManager.saveNoTransaction(nursingPlan);
					nursingPlanService.setNursingPlanId(nursingPlan.getId());
				}
				// 关联信息保存
				ServiceEntity service = nursingPlanService.getService();
				if (service != null) {
					dbManager.saveNoTransaction(service);
					nursingPlanService.setServiceId(service.getId());
				}
				if (nursingPlanService.getEmployeeDistributionList() != null && nursingPlanService.getEmployeeDistributionList().size() > 0) {
					// 关联信息保存
					if (nursingPlanService.getId() == null) {
						dbManager.saveNoTransaction(nursingPlanService);
					}
					for (EmployeeDistributionEntity employeeDistributionEntity : nursingPlanService.getEmployeeDistributionList()) {
						employeeDistributionEntity.setNursingPlanServiceId(nursingPlanService.getId());
						dbManager.saveNoTransaction(employeeDistributionEntity);
					}
				}
				result = dbManager.saveNoTransaction(nursingPlanService);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(List<NursingPlanServiceEntity> nursingPlanServiceList) {
		boolean result = false;
		if (nursingPlanServiceList != null && nursingPlanServiceList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (NursingPlanServiceEntity nursingPlanService : nursingPlanServiceList) {
					if (nursingPlanService != null) {
						// 关联信息保存
						NursingPlanEntity nursingPlan = nursingPlanService.getNursingPlan();
						if (nursingPlan != null) {
							dbManager.saveNoTransaction(nursingPlan);
							nursingPlanService.setNursingPlanId(nursingPlan.getId());
						}
						// 关联信息保存
						ServiceEntity service = nursingPlanService.getService();
						if (service != null) {
							dbManager.saveNoTransaction(service);
							nursingPlanService.setServiceId(service.getId());
						}
						// 关联信息保存
						if (nursingPlanService.getEmployeeDistributionList() != null && nursingPlanService.getEmployeeDistributionList().size() > 0) {
							if (nursingPlanService.getId() == null) {
								dbManager.saveNoTransaction(nursingPlanService);
							}
							for (EmployeeDistributionEntity employeeDistributionEntity : nursingPlanService.getEmployeeDistributionList()) {
								employeeDistributionEntity.setNursingPlanServiceId(nursingPlanService.getId());
								dbManager.saveNoTransaction(employeeDistributionEntity);
							}
						}
						result = dbManager.saveNoTransaction(nursingPlanService);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public NursingPlanServiceEntity getById(Integer id) {
		NursingPlanServiceEntity obj = null;
		if (id != null) {
			obj = (NursingPlanServiceEntity) dbManager.getById(id, NursingPlanServiceEntity.class);
		}
		return obj;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param nursingPlanShow
	 *            是否查询关联信息
	 * @param serviceShow
	 *            是否查询关联信息
	 * @param employeeDistributionListShow
	 *            是否查询关联信息
	 * @param obj
	 */
	public NursingPlanServiceEntity getById(Integer id, Boolean nursingPlanShow, Boolean serviceShow, Boolean employeeDistributionListShow) {
		NursingPlanServiceEntity obj = null;
		if (id != null) {
			obj = (NursingPlanServiceEntity) dbManager.getById(id, NursingPlanServiceEntity.class);
			// 查询关联内容
			if (nursingPlanShow != null && nursingPlanShow.booleanValue() && obj != null && obj.getNursingPlanId() != null && obj.getNursingPlanId() > 0) {
				NursingPlanEntity nursingPlan = (NursingPlanEntity) dbManager.getById(obj.getNursingPlanId(), NursingPlanEntity.class);
				obj.setNursingPlan(nursingPlan);
			}
			// 查询关联内容
			if (serviceShow != null && serviceShow.booleanValue() && obj != null && obj.getServiceId() != null && obj.getServiceId() > 0) {
				ServiceEntity service = (ServiceEntity) dbManager.getById(obj.getServiceId(), ServiceEntity.class);
				obj.setService(service);
			}
			// 查询关联内容
			if (employeeDistributionListShow != null && employeeDistributionListShow.booleanValue() && obj != null && obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(EmployeeDistributionEntity.class, EmployeeDistributionEntity.NURSING_PLAN_SERVICE_ID,
						String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<EmployeeDistributionEntity> employeeDistributionList = new ArrayList<EmployeeDistributionEntity>();
					for (Object o : list) {
						employeeDistributionList.add((EmployeeDistributionEntity) o);
					}
					obj.setEmployeeDistributionList(employeeDistributionList);
				}
			}
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<NursingPlanServiceEntity> getListByCondition(Map<String, Object> queryMap) {
		List<NursingPlanServiceEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		list = dbManager.queryByCondition(NursingPlanServiceEntity.class, qc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<NursingPlanServiceEntity>();
			for (Object obj : list) {
				returnlist.add((NursingPlanServiceEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param nursingPlanShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param serviceShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param employeeDistributionListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public List<NursingPlanServiceEntity> getListByCondition(Map<String, Object> queryMap, List<OrderVO> orderList, Boolean nursingPlanShow,
			Boolean serviceShow, Boolean employeeDistributionListShow) {
		List<NursingPlanServiceEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt, orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(NursingPlanServiceEntity.class, qc, oc);
		int a = 0;
		if (nursingPlanShow != null && nursingPlanShow.booleanValue()) {
			a++;
		}
		if (serviceShow != null && serviceShow.booleanValue()) {
			a++;
		}
		if (employeeDistributionListShow != null && employeeDistributionListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && list != null && list.size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < list.size(); i++) {
				NursingPlanServiceEntity obj = (NursingPlanServiceEntity) list.get(i);
				// 查询关联内容
				if (nursingPlanShow != null && nursingPlanShow.booleanValue() && obj != null && obj.getNursingPlanId() != null && obj.getNursingPlanId() > 0) {
					NursingPlanEntity nursingPlan = (NursingPlanEntity) dbManager.getById(obj.getNursingPlanId(), NursingPlanEntity.class);
					obj.setNursingPlan(nursingPlan);
				}
				// 查询关联内容
				if (serviceShow != null && serviceShow.booleanValue() && obj != null && obj.getServiceId() != null && obj.getServiceId() > 0) {
					ServiceEntity service = (ServiceEntity) dbManager.getById(obj.getServiceId(), ServiceEntity.class);
					obj.setService(service);
				}
				// 查询关联内容
				if (employeeDistributionListShow != null && employeeDistributionListShow.booleanValue() && obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(EmployeeDistributionEntity.class, EmployeeDistributionEntity.NURSING_PLAN_SERVICE_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<EmployeeDistributionEntity> employeeDistributionList = new ArrayList<EmployeeDistributionEntity>();
						for (Object o : objList) {
							employeeDistributionList.add((EmployeeDistributionEntity) o);
						}
						obj.setEmployeeDistributionList(employeeDistributionList);
					}
				}
				result.add(obj);
			}
			list = result;
		}
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<NursingPlanServiceEntity>();
			for (Object obj : list) {
				returnlist.add((NursingPlanServiceEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap, int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		pagelist = dbManager.queryByCondition(NursingPlanServiceEntity.class, qc, pageno, pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @param nursingPlanShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param serviceShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param employeeDistributionListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap, List<OrderVO> orderList, int pageno, int pagesize, Boolean nursingPlanShow,
			Boolean serviceShow, Boolean employeeDistributionListShow) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt, orderType));
					}
				}

			}
		}
		// 数据权限
		List<QueryCondition> dataRuleQclist = null;
		List<Map<String, Object>> dataRuleMapList = (List<Map<String, Object>>) queryMap.get("dataRuleMapList");
		if (dataRuleMapList != null && dataRuleMapList.size() > 0) {
			dataRuleQclist = new ArrayList<QueryCondition>();
			for (Map<String, Object> dataRuleMap : dataRuleMapList) {
				QueryCondition dataRuleQc = changeMapToQc(dataRuleMap);
				dataRuleQclist.add(dataRuleQc);
			}
		}
		pagelist = dbManager.queryByConditions(NursingPlanServiceEntity.class, qc, dataRuleQclist, oc, pageno, pagesize);
		int a = 0;
		if (nursingPlanShow != null && nursingPlanShow.booleanValue()) {
			a++;
		}
		if (serviceShow != null && serviceShow.booleanValue()) {
			a++;
		}
		if (employeeDistributionListShow != null && employeeDistributionListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && pagelist != null && pagelist.getResultList() != null && pagelist.getResultList().size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < pagelist.getResultList().size(); i++) {
				NursingPlanServiceEntity obj = (NursingPlanServiceEntity) pagelist.getResultList().get(i);
				// 查询关联内容
				if (nursingPlanShow != null && nursingPlanShow.booleanValue() && obj != null && obj.getNursingPlanId() != null && obj.getNursingPlanId() > 0) {
					NursingPlanEntity nursingPlan = (NursingPlanEntity) dbManager.getById(obj.getNursingPlanId(), NursingPlanEntity.class);
					obj.setNursingPlan(nursingPlan);
				}
				// 查询关联内容
				if (serviceShow != null && serviceShow.booleanValue() && obj != null && obj.getServiceId() != null && obj.getServiceId() > 0) {
					ServiceEntity service = (ServiceEntity) dbManager.getById(obj.getServiceId(), ServiceEntity.class);
					obj.setService(service);
				}
				// 查询关联内容
				if (employeeDistributionListShow != null && employeeDistributionListShow.booleanValue() && obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager.searchListByColumn(EmployeeDistributionEntity.class, EmployeeDistributionEntity.NURSING_PLAN_SERVICE_ID,
							String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<EmployeeDistributionEntity> employeeDistributionList = new ArrayList<EmployeeDistributionEntity>();
						for (Object o : objList) {
							employeeDistributionList.add((EmployeeDistributionEntity) o);
						}
						obj.setEmployeeDistributionList(employeeDistributionList);
					}
				}
				result.add(obj);
			}
			pagelist.setResultList(result);
		}
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id, Boolean delNursingPlan, Boolean delService, Boolean delEmployeeDistributionList) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delNursingPlan != null && delNursingPlan.booleanValue()) {
					NursingPlanServiceEntity nursingPlanService = (NursingPlanServiceEntity) dbManager.getById(id, NursingPlanServiceEntity.class);
					if (nursingPlanService != null && nursingPlanService.getNursingPlanId() != null) {
						dbManager.delNoTransaction(nursingPlanService.getNursingPlanId(), NursingPlanEntity.class);
					}
				}
				// 删除关联信息
				if (delService != null && delService.booleanValue()) {
					NursingPlanServiceEntity nursingPlanService = (NursingPlanServiceEntity) dbManager.getById(id, NursingPlanServiceEntity.class);
					if (nursingPlanService != null && nursingPlanService.getServiceId() != null) {
						dbManager.delNoTransaction(nursingPlanService.getServiceId(), ServiceEntity.class);
					}
				}
				// 删除关联信息
				if (delEmployeeDistributionList != null && delEmployeeDistributionList.booleanValue()) {
					QueryCondition qc = new QueryCondition(EmployeeDistributionEntity.NURSING_PLAN_SERVICE_ID, QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(EmployeeDistributionEntity.class, qc);
				}
				result = dbManager.delNoTransaction(id, NursingPlanServiceEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(NursingPlanServiceEntity.ID, QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(NursingPlanServiceEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap, Boolean delNursingPlan, Boolean delService, Boolean delEmployeeDistributionList) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delNursingPlan != null && delNursingPlan.booleanValue()) {
					List<Object> list = dbManager.queryByConditionNoTransaction(NursingPlanServiceEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							NursingPlanServiceEntity entity = (NursingPlanServiceEntity) obj;
							strIds += entity.getNursingPlanId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(NursingPlanEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(NursingPlanEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delService != null && delService.booleanValue()) {
					List<Object> list = dbManager.queryByConditionNoTransaction(NursingPlanServiceEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							NursingPlanServiceEntity entity = (NursingPlanServiceEntity) obj;
							strIds += entity.getServiceId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(ServiceEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(ServiceEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delEmployeeDistributionList != null && delEmployeeDistributionList.booleanValue()) {
					List<Object> list = dbManager.queryByConditionNoTransaction(NursingPlanServiceEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							NursingPlanServiceEntity entity = (NursingPlanServiceEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(EmployeeDistributionEntity.NURSING_PLAN_SERVICE_ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(EmployeeDistributionEntity.class, qc1);
					}

				}
				result = dbManager.delByConditionsNoTransaction(NursingPlanServiceEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	private QueryCondition changeMapToQc(Map<String, Object> queryMap) {
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object nursingPlanId = queryMap.get("nursingPlanId");
		Object nursingPlanId_gt = queryMap.get("nursingPlanId_gt");
		Object nursingPlanId_ge = queryMap.get("nursingPlanId_ge");
		Object nursingPlanId_lt = queryMap.get("nursingPlanId_lt");
		Object nursingPlanId_le = queryMap.get("nursingPlanId_le");
		Object nursingPlanId_in = queryMap.get("nursingPlanId_in");
		Object serviceId = queryMap.get("serviceId");
		Object serviceId_gt = queryMap.get("serviceId_gt");
		Object serviceId_ge = queryMap.get("serviceId_ge");
		Object serviceId_lt = queryMap.get("serviceId_lt");
		Object serviceId_le = queryMap.get("serviceId_le");
		Object serviceId_in = queryMap.get("serviceId_in");
		Object serviceNum = queryMap.get("serviceNum");
		Object serviceNum_gt = queryMap.get("serviceNum_gt");
		Object serviceNum_ge = queryMap.get("serviceNum_ge");
		Object serviceNum_lt = queryMap.get("serviceNum_lt");
		Object serviceNum_le = queryMap.get("serviceNum_le");
		Object serviceNum_in = queryMap.get("serviceNum_in");
		Object des = queryMap.get("des");
		Object des_like = queryMap.get("des_like");
		Object des_isNull = queryMap.get("des_isNull");
		Object des_isNotNull = queryMap.get("des_isNotNull");
		Object des_in = queryMap.get("des_in");
		Object serviceChilds = queryMap.get("serviceChilds");
		Object serviceChilds_like = queryMap.get("serviceChilds_like");
		Object serviceChilds_isNull = queryMap.get("serviceChilds_isNull");
		Object serviceChilds_isNotNull = queryMap.get("serviceChilds_isNotNull");
		Object serviceChilds_in = queryMap.get("serviceChilds_in");
		Object expectedServiceTime_gt = queryMap.get("expectedServiceTime_gt");
		Object expectedServiceTime_ge = queryMap.get("expectedServiceTime_ge");
		Object expectedServiceTime_lt = queryMap.get("expectedServiceTime_lt");
		Object expectedServiceTime_le = queryMap.get("expectedServiceTime_le");
		Object healthInsurance = queryMap.get("healthInsurance");
		Object healthInsurance_gt = queryMap.get("healthInsurance_gt");
		Object healthInsurance_ge = queryMap.get("healthInsurance_ge");
		Object healthInsurance_lt = queryMap.get("healthInsurance_lt");
		Object healthInsurance_le = queryMap.get("healthInsurance_le");
		Object healthInsurance_in = queryMap.get("healthInsurance_in");
		Object period = queryMap.get("period");
		Object period_gt = queryMap.get("period_gt");
		Object period_ge = queryMap.get("period_ge");
		Object period_lt = queryMap.get("period_lt");
		Object period_le = queryMap.get("period_le");
		Object period_in = queryMap.get("period_in");
		Object lastCreatetaskTime_gt = queryMap.get("lastCreatetaskTime_gt");
		Object lastCreatetaskTime_ge = queryMap.get("lastCreatetaskTime_ge");
		Object lastCreatetaskTime_lt = queryMap.get("lastCreatetaskTime_lt");
		Object lastCreatetaskTime_le = queryMap.get("lastCreatetaskTime_le");

		QueryCondition qc = new QueryCondition(NursingPlanServiceEntity.ID, QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.ID, QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.ID, QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.ID, QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.ID, QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.ID, QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.ID, QueryCondition.in, id_in));
		}
		if (nursingPlanId != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.NURSING_PLAN_ID, QueryCondition.eq, nursingPlanId));
		}
		if (nursingPlanId_gt != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.NURSING_PLAN_ID, QueryCondition.gt, nursingPlanId_gt));
		}
		if (nursingPlanId_ge != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.NURSING_PLAN_ID, QueryCondition.ge, nursingPlanId_ge));
		}
		if (nursingPlanId_lt != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.NURSING_PLAN_ID, QueryCondition.lt, nursingPlanId_lt));
		}
		if (nursingPlanId_le != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.NURSING_PLAN_ID, QueryCondition.le, nursingPlanId_le));
		}
		if (nursingPlanId_in != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.NURSING_PLAN_ID, QueryCondition.in, nursingPlanId_in));
		}
		if (serviceId != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.SERVICE_ID, QueryCondition.eq, serviceId));
		}
		if (serviceId_gt != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.SERVICE_ID, QueryCondition.gt, serviceId_gt));
		}
		if (serviceId_ge != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.SERVICE_ID, QueryCondition.ge, serviceId_ge));
		}
		if (serviceId_lt != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.SERVICE_ID, QueryCondition.lt, serviceId_lt));
		}
		if (serviceId_le != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.SERVICE_ID, QueryCondition.le, serviceId_le));
		}
		if (serviceId_in != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.SERVICE_ID, QueryCondition.in, serviceId_in));
		}
		if (serviceNum != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.SERVICE_NUM, QueryCondition.eq, serviceNum));
		}
		if (serviceNum_gt != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.SERVICE_NUM, QueryCondition.gt, serviceNum_gt));
		}
		if (serviceNum_ge != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.SERVICE_NUM, QueryCondition.ge, serviceNum_ge));
		}
		if (serviceNum_lt != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.SERVICE_NUM, QueryCondition.lt, serviceNum_lt));
		}
		if (serviceNum_le != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.SERVICE_NUM, QueryCondition.le, serviceNum_le));
		}
		if (serviceNum_in != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.SERVICE_NUM, QueryCondition.in, serviceNum_in));
		}
		if (des != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.DES, QueryCondition.eq, des));
		}
		if (des_like != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.DES, QueryCondition.like, des_like));
		}
		if (des_isNull != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.DES, QueryCondition.isNull, des_isNull));
		}
		if (des_isNotNull != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.DES, QueryCondition.isNotNull, des_isNotNull));
		}
		if (des_in != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.DES, QueryCondition.in, des_in));
		}
		if (serviceChilds != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.SERVICE_CHILDS, QueryCondition.eq, serviceChilds));
		}
		if (serviceChilds_like != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.SERVICE_CHILDS, QueryCondition.like, serviceChilds_like));
		}
		if (serviceChilds_isNull != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.SERVICE_CHILDS, QueryCondition.isNull, serviceChilds_isNull));
		}
		if (serviceChilds_isNotNull != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.SERVICE_CHILDS, QueryCondition.isNotNull, serviceChilds_isNotNull));
		}
		if (serviceChilds_in != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.SERVICE_CHILDS, QueryCondition.in, serviceChilds_in));
		}
		if (expectedServiceTime_gt != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.EXPECTED_SERVICE_TIME, QueryCondition.gt, expectedServiceTime_gt));
		}
		if (expectedServiceTime_ge != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.EXPECTED_SERVICE_TIME, QueryCondition.ge, expectedServiceTime_ge));
		}
		if (expectedServiceTime_lt != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.EXPECTED_SERVICE_TIME, QueryCondition.lt, expectedServiceTime_lt));
		}
		if (expectedServiceTime_le != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.EXPECTED_SERVICE_TIME, QueryCondition.le, expectedServiceTime_le));
		}
		if (healthInsurance != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.HEALTH_INSURANCE, QueryCondition.eq, healthInsurance));
		}
		if (healthInsurance_gt != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.HEALTH_INSURANCE, QueryCondition.gt, healthInsurance_gt));
		}
		if (healthInsurance_ge != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.HEALTH_INSURANCE, QueryCondition.ge, healthInsurance_ge));
		}
		if (healthInsurance_lt != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.HEALTH_INSURANCE, QueryCondition.lt, healthInsurance_lt));
		}
		if (healthInsurance_le != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.HEALTH_INSURANCE, QueryCondition.le, healthInsurance_le));
		}
		if (healthInsurance_in != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.HEALTH_INSURANCE, QueryCondition.in, healthInsurance_in));
		}
		if (period != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.PERIOD, QueryCondition.eq, period));
		}
		if (period_gt != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.PERIOD, QueryCondition.gt, period_gt));
		}
		if (period_ge != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.PERIOD, QueryCondition.ge, period_ge));
		}
		if (period_lt != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.PERIOD, QueryCondition.lt, period_lt));
		}
		if (period_le != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.PERIOD, QueryCondition.le, period_le));
		}
		if (period_in != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.PERIOD, QueryCondition.in, period_in));
		}
		if (lastCreatetaskTime_gt != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.LAST_CREATETASK_TIME, QueryCondition.gt, lastCreatetaskTime_gt));
		}
		if (lastCreatetaskTime_ge != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.LAST_CREATETASK_TIME, QueryCondition.ge, lastCreatetaskTime_ge));
		}
		if (lastCreatetaskTime_lt != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.LAST_CREATETASK_TIME, QueryCondition.lt, lastCreatetaskTime_lt));
		}
		if (lastCreatetaskTime_le != null) {
			qc.andCondition(new QueryCondition(NursingPlanServiceEntity.LAST_CREATETASK_TIME, QueryCondition.le, lastCreatetaskTime_le));
		}
		return qc;
	}

}
