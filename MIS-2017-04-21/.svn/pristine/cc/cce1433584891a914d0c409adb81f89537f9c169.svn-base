package fsk.service.sendReceiveCareful;

import java.io.File;
import java.math.BigDecimal;
import java.net.URLDecoder;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import javax.imageio.stream.FileImageOutputStream;

import org.apache.log4j.Logger;

import fsk.entity.sendReceive.SendReceiveEntity;
import fsk.entity.sendReceiveCarefulPhoto.SendReceiveCarefulPhotoEntity;

import fsk.entity.sendReceiveCareful.SendReceiveCarefulEntity;
import fsk.handler.older.OlderHandler;
import fsk.init.SystemInit;
import fsk.util.Base64Utils;
import fsk.util.FileUtil;

import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

/**
 * @Title: Service
 * @Description: 交接班注意事项服务类
 * @author feng.gu
 * @date 2016-10-19 13:13:16
 * @version V1.0
 * 
 */
public class SendReceiveCarefulService {
	private static Logger logger = Logger
			.getLogger(SendReceiveCarefulService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static SendReceiveCarefulService sendReceiveCarefulService;

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static SendReceiveCarefulService getInstance() {
		if (sendReceiveCarefulService == null) {
			sendReceiveCarefulService = new SendReceiveCarefulService();
		}
		return sendReceiveCarefulService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(SendReceiveCarefulEntity sendReceiveCareful) {
		boolean result = false;
		if (sendReceiveCareful != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 关联信息保存
				SendReceiveEntity sendReceive = sendReceiveCareful
						.getSendReceive();
				if (sendReceive != null) {
					dbManager.saveNoTransaction(sendReceive);
					sendReceiveCareful.setSendReceiveId(sendReceive.getId());
				}
				if (sendReceiveCareful.getSendReceiveCarefulPhotoList() != null
						&& sendReceiveCareful.getSendReceiveCarefulPhotoList()
								.size() > 0) {
					// 关联信息保存
					if (sendReceiveCareful.getId() == null) {
						dbManager.saveNoTransaction(sendReceiveCareful);
					}
					
					// 照片保存
					// 先过滤已经使用的照片编号
					ArrayList<Integer> number = new ArrayList<Integer>();
					number.add(0, 0);
					number.add(1, 1);
					number.add(2, 2);
					number.add(3, 3);
					number.add(4, 4);
					number.add(5, 5);
					number.add(6, 6);
					for (SendReceiveCarefulPhotoEntity sendReceiveCarefulPhotoEntity : sendReceiveCareful
							.getSendReceiveCarefulPhotoList()) {
						String photourl = sendReceiveCarefulPhotoEntity.getUrl();
						if (photourl.startsWith("http")) {// http开头直接保存
							int index = -1;
							String str = photourl.substring(
									photourl.length() - 5,
									photourl.length() - 4);
							int numberindex = Integer.parseInt(str);
							index = number.indexOf(numberindex);
							if (index != -1) {
								number.remove(index);
							}
						}
					}
					
					int n = 0;// 在剩余的编号中取
					for (SendReceiveCarefulPhotoEntity sendReceiveCarefulPhotoEntity : sendReceiveCareful
							.getSendReceiveCarefulPhotoList()) {
						sendReceiveCarefulPhotoEntity
								.setSendReceiveCarefulId(sendReceiveCareful
										.getId());
						String url = sendReceiveCarefulPhotoEntity.getUrl();
						String fileName = "sendReceiveCarefulPhoto"
								+ sendReceiveCareful.getId() + "_"
								+ number.get(n) + ".jpg";
						if (!url.startsWith("http")) {
							url = savePhoto(url, fileName);
							sendReceiveCarefulPhotoEntity.setUrl(url);
						}
						n++;
						dbManager
								.saveNoTransaction(sendReceiveCarefulPhotoEntity);
					}
				}
				result = dbManager.saveNoTransaction(sendReceiveCareful);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(
			List<SendReceiveCarefulEntity> sendReceiveCarefulList) {
		boolean result = false;
		if (sendReceiveCarefulList != null && sendReceiveCarefulList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (SendReceiveCarefulEntity sendReceiveCareful : sendReceiveCarefulList) {
					if (sendReceiveCareful != null) {
						// 关联信息保存
						SendReceiveEntity sendReceive = sendReceiveCareful
								.getSendReceive();
						if (sendReceive != null) {
							dbManager.saveNoTransaction(sendReceive);
							sendReceiveCareful.setSendReceiveId(sendReceive
									.getId());
						}
						// 关联信息保存
						if (sendReceiveCareful.getSendReceiveCarefulPhotoList() != null
								&& sendReceiveCareful
										.getSendReceiveCarefulPhotoList()
										.size() > 0) {
							if (sendReceiveCareful.getId() == null) {
								dbManager.saveNoTransaction(sendReceiveCareful);
							}
							for (SendReceiveCarefulPhotoEntity sendReceiveCarefulPhotoEntity : sendReceiveCareful
									.getSendReceiveCarefulPhotoList()) {
								sendReceiveCarefulPhotoEntity
										.setSendReceiveCarefulId(sendReceiveCareful
												.getId());
								dbManager
										.saveNoTransaction(sendReceiveCarefulPhotoEntity);
							}
						}
						result = dbManager
								.saveNoTransaction(sendReceiveCareful);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public SendReceiveCarefulEntity getById(Integer id) {
		SendReceiveCarefulEntity obj = null;
		if (id != null) {
			obj = (SendReceiveCarefulEntity) dbManager.getById(id,
					SendReceiveCarefulEntity.class);
		}
		return obj;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param sendReceiveShow
	 *            是否查询关联信息
	 * @param sendReceiveCarefulPhotoListShow
	 *            是否查询关联信息
	 * @param obj
	 */
	public SendReceiveCarefulEntity getById(Integer id,
			Boolean sendReceiveShow, Boolean sendReceiveCarefulPhotoListShow) {
		SendReceiveCarefulEntity obj = null;
		if (id != null) {
			obj = (SendReceiveCarefulEntity) dbManager.getById(id,
					SendReceiveCarefulEntity.class);
			// 查询关联内容
			if (sendReceiveShow != null && sendReceiveShow.booleanValue()
					&& obj != null && obj.getSendReceiveId() != null
					&& obj.getSendReceiveId() > 0) {
				SendReceiveEntity sendReceive = (SendReceiveEntity) dbManager
						.getById(obj.getSendReceiveId(),
								SendReceiveEntity.class);
				obj.setSendReceive(sendReceive);
			}
			// 查询关联内容
			if (sendReceiveCarefulPhotoListShow != null
					&& sendReceiveCarefulPhotoListShow.booleanValue()
					&& obj != null && obj.getId() != null && obj.getId() > 0) {
				List<Object> list = dbManager.searchListByColumn(
						SendReceiveCarefulPhotoEntity.class,
						SendReceiveCarefulPhotoEntity.SEND_RECEIVE_CAREFUL_ID,
						String.valueOf(id));
				if (list != null && list.size() > 0) {
					List<SendReceiveCarefulPhotoEntity> sendReceiveCarefulPhotoList = new ArrayList<SendReceiveCarefulPhotoEntity>();
					for (Object o : list) {
						sendReceiveCarefulPhotoList
								.add((SendReceiveCarefulPhotoEntity) o);
					}
					obj.setSendReceiveCarefulPhotoList(sendReceiveCarefulPhotoList);
				}
			}
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<SendReceiveCarefulEntity> getListByCondition(
			Map<String, Object> queryMap) {
		List<SendReceiveCarefulEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		list = dbManager.queryByCondition(SendReceiveCarefulEntity.class, qc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<SendReceiveCarefulEntity>();
			for (Object obj : list) {
				returnlist.add((SendReceiveCarefulEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param sendReceiveShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param sendReceiveCarefulPhotoListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public List<SendReceiveCarefulEntity> getListByCondition(
			Map<String, Object> queryMap, List<OrderVO> orderList,
			Boolean sendReceiveShow, Boolean sendReceiveCarefulPhotoListShow) {
		List<SendReceiveCarefulEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(SendReceiveCarefulEntity.class, qc,
				oc);
		int a = 0;
		if (sendReceiveShow != null && sendReceiveShow.booleanValue()) {
			a++;
		}
		if (sendReceiveCarefulPhotoListShow != null
				&& sendReceiveCarefulPhotoListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && list != null && list.size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < list.size(); i++) {
				SendReceiveCarefulEntity obj = (SendReceiveCarefulEntity) list
						.get(i);
				// 查询关联内容
				if (sendReceiveShow != null && sendReceiveShow.booleanValue()
						&& obj != null && obj.getSendReceiveId() != null
						&& obj.getSendReceiveId() > 0) {
					SendReceiveEntity sendReceive = (SendReceiveEntity) dbManager
							.getById(obj.getSendReceiveId(),
									SendReceiveEntity.class);
					obj.setSendReceive(sendReceive);
				}
				// 查询关联内容
				if (sendReceiveCarefulPhotoListShow != null
						&& sendReceiveCarefulPhotoListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager
							.searchListByColumn(
									SendReceiveCarefulPhotoEntity.class,
									SendReceiveCarefulPhotoEntity.SEND_RECEIVE_CAREFUL_ID,
									String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<SendReceiveCarefulPhotoEntity> sendReceiveCarefulPhotoList = new ArrayList<SendReceiveCarefulPhotoEntity>();
						for (Object o : objList) {
							sendReceiveCarefulPhotoList
									.add((SendReceiveCarefulPhotoEntity) o);
						}
						obj.setSendReceiveCarefulPhotoList(sendReceiveCarefulPhotoList);
					}
				}
				result.add(obj);
			}
			list = result;
		}
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<SendReceiveCarefulEntity>();
			for (Object obj : list) {
				returnlist.add((SendReceiveCarefulEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		pagelist = dbManager.queryByCondition(SendReceiveCarefulEntity.class,
				qc, pageno, pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @param sendReceiveShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @param sendReceiveCarefulPhotoListShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, int pageno, int pagesize,
			Boolean sendReceiveShow, Boolean sendReceiveCarefulPhotoListShow) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		// 数据权限
		List<QueryCondition> dataRuleQclist = null;
		List<Map<String, Object>> dataRuleMapList = (List<Map<String, Object>>) queryMap
				.get("dataRuleMapList");
		if (dataRuleMapList != null && dataRuleMapList.size() > 0) {
			dataRuleQclist = new ArrayList<QueryCondition>();
			for (Map<String, Object> dataRuleMap : dataRuleMapList) {
				QueryCondition dataRuleQc = changeMapToQc(dataRuleMap);
				dataRuleQclist.add(dataRuleQc);
			}
		}
		pagelist = dbManager.queryByConditions(SendReceiveCarefulEntity.class,
				qc, dataRuleQclist, oc, pageno, pagesize);
		int a = 0;
		if (sendReceiveShow != null && sendReceiveShow.booleanValue()) {
			a++;
		}
		if (sendReceiveCarefulPhotoListShow != null
				&& sendReceiveCarefulPhotoListShow.booleanValue()) {
			a++;
		}
		if (a > 0 && pagelist != null && pagelist.getResultList() != null
				&& pagelist.getResultList().size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < pagelist.getResultList().size(); i++) {
				SendReceiveCarefulEntity obj = (SendReceiveCarefulEntity) pagelist
						.getResultList().get(i);
				// 查询关联内容
				if (sendReceiveShow != null && sendReceiveShow.booleanValue()
						&& obj != null && obj.getSendReceiveId() != null
						&& obj.getSendReceiveId() > 0) {
					SendReceiveEntity sendReceive = (SendReceiveEntity) dbManager
							.getById(obj.getSendReceiveId(),
									SendReceiveEntity.class);
					obj.setSendReceive(sendReceive);
				}
				// 查询关联内容
				if (sendReceiveCarefulPhotoListShow != null
						&& sendReceiveCarefulPhotoListShow.booleanValue()
						&& obj != null && obj.getId() != null
						&& obj.getId() > 0) {
					List<Object> objList = dbManager
							.searchListByColumn(
									SendReceiveCarefulPhotoEntity.class,
									SendReceiveCarefulPhotoEntity.SEND_RECEIVE_CAREFUL_ID,
									String.valueOf(obj.getId()));
					if (objList != null && objList.size() > 0) {
						List<SendReceiveCarefulPhotoEntity> sendReceiveCarefulPhotoList = new ArrayList<SendReceiveCarefulPhotoEntity>();
						for (Object o : objList) {
							sendReceiveCarefulPhotoList
									.add((SendReceiveCarefulPhotoEntity) o);
						}
						obj.setSendReceiveCarefulPhotoList(sendReceiveCarefulPhotoList);
					}
				}
				result.add(obj);
			}
			pagelist.setResultList(result);
		}
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id, Boolean delSendReceive,
			Boolean delSendReceiveCarefulPhotoList) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delSendReceive != null && delSendReceive.booleanValue()) {
					SendReceiveCarefulEntity sendReceiveCareful = (SendReceiveCarefulEntity) dbManager
							.getById(id, SendReceiveCarefulEntity.class);
					if (sendReceiveCareful != null
							&& sendReceiveCareful.getSendReceiveId() != null) {
						dbManager.delNoTransaction(
								sendReceiveCareful.getSendReceiveId(),
								SendReceiveEntity.class);
					}
				}
				// 删除关联信息
				if (delSendReceiveCarefulPhotoList != null
						&& delSendReceiveCarefulPhotoList.booleanValue()) {
					QueryCondition qc = new QueryCondition(
							SendReceiveCarefulPhotoEntity.SEND_RECEIVE_CAREFUL_ID,
							QueryCondition.eq, id);
					dbManager.delByConditionsNoTransaction(
							SendReceiveCarefulPhotoEntity.class, qc);
				}
				result = dbManager.delNoTransaction(id,
						SendReceiveCarefulEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(
						SendReceiveCarefulEntity.ID, QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(
						SendReceiveCarefulEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap,
			Boolean delSendReceive, Boolean delSendReceiveCarefulPhotoList) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delSendReceive != null && delSendReceive.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									SendReceiveCarefulEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							SendReceiveCarefulEntity entity = (SendReceiveCarefulEntity) obj;
							strIds += entity.getSendReceiveId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								SendReceiveEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								SendReceiveEntity.class, qc1);
					}

				}
				// 删除关联信息
				if (delSendReceiveCarefulPhotoList != null
						&& delSendReceiveCarefulPhotoList.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									SendReceiveCarefulEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							SendReceiveCarefulEntity entity = (SendReceiveCarefulEntity) obj;
							strIds += entity.getId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								SendReceiveCarefulPhotoEntity.SEND_RECEIVE_CAREFUL_ID,
								QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								SendReceiveCarefulPhotoEntity.class, qc1);
					}

				}
				result = dbManager.delByConditionsNoTransaction(
						SendReceiveCarefulEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	private QueryCondition changeMapToQc(Map<String, Object> queryMap) {
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object olderId = queryMap.get("olderId");
		Object olderId_gt = queryMap.get("olderId_gt");
		Object olderId_ge = queryMap.get("olderId_ge");
		Object olderId_lt = queryMap.get("olderId_lt");
		Object olderId_le = queryMap.get("olderId_le");
		Object olderId_in = queryMap.get("olderId_in");
		Object olderName = queryMap.get("olderName");
		Object olderName_like = queryMap.get("olderName_like");
		Object olderName_isNull = queryMap.get("olderName_isNull");
		Object olderName_isNotNull = queryMap.get("olderName_isNotNull");
		Object olderName_in = queryMap.get("olderName_in");
		Object carefulContent = queryMap.get("carefulContent");
		Object carefulContent_like = queryMap.get("carefulContent_like");
		Object carefulContent_isNull = queryMap.get("carefulContent_isNull");
		Object carefulContent_isNotNull = queryMap
				.get("carefulContent_isNotNull");
		Object carefulContent_in = queryMap.get("carefulContent_in");
		Object sendReceiveId = queryMap.get("sendReceiveId");
		Object sendReceiveId_gt = queryMap.get("sendReceiveId_gt");
		Object sendReceiveId_ge = queryMap.get("sendReceiveId_ge");
		Object sendReceiveId_lt = queryMap.get("sendReceiveId_lt");
		Object sendReceiveId_le = queryMap.get("sendReceiveId_le");
		Object sendReceiveId_in = queryMap.get("sendReceiveId_in");

		QueryCondition qc = new QueryCondition(SendReceiveCarefulEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(SendReceiveCarefulEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(SendReceiveCarefulEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(SendReceiveCarefulEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(SendReceiveCarefulEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(SendReceiveCarefulEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(SendReceiveCarefulEntity.ID,
					QueryCondition.in, id_in));
		}
		if (olderId != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.OLDER_ID, QueryCondition.eq,
					olderId));
		}
		if (olderId_gt != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.OLDER_ID, QueryCondition.gt,
					olderId_gt));
		}
		if (olderId_ge != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.OLDER_ID, QueryCondition.ge,
					olderId_ge));
		}
		if (olderId_lt != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.OLDER_ID, QueryCondition.lt,
					olderId_lt));
		}
		if (olderId_le != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.OLDER_ID, QueryCondition.le,
					olderId_le));
		}
		if (olderId_in != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.OLDER_ID, QueryCondition.in,
					olderId_in));
		}
		if (olderName != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.OLDER_NAME, QueryCondition.eq,
					olderName));
		}
		if (olderName_like != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.OLDER_NAME, QueryCondition.like,
					olderName_like));
		}
		if (olderName_isNull != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.OLDER_NAME, QueryCondition.isNull,
					olderName_isNull));
		}
		if (olderName_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.OLDER_NAME,
					QueryCondition.isNotNull, olderName_isNotNull));
		}
		if (olderName_in != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.OLDER_NAME, QueryCondition.in,
					olderName_in));
		}
		if (carefulContent != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.CAREFUL_CONTENT,
					QueryCondition.eq, carefulContent));
		}
		if (carefulContent_like != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.CAREFUL_CONTENT,
					QueryCondition.like, carefulContent_like));
		}
		if (carefulContent_isNull != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.CAREFUL_CONTENT,
					QueryCondition.isNull, carefulContent_isNull));
		}
		if (carefulContent_isNotNull != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.CAREFUL_CONTENT,
					QueryCondition.isNotNull, carefulContent_isNotNull));
		}
		if (carefulContent_in != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.CAREFUL_CONTENT,
					QueryCondition.in, carefulContent_in));
		}
		if (sendReceiveId != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.SEND_RECEIVE_ID,
					QueryCondition.eq, sendReceiveId));
		}
		if (sendReceiveId_gt != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.SEND_RECEIVE_ID,
					QueryCondition.gt, sendReceiveId_gt));
		}
		if (sendReceiveId_ge != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.SEND_RECEIVE_ID,
					QueryCondition.ge, sendReceiveId_ge));
		}
		if (sendReceiveId_lt != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.SEND_RECEIVE_ID,
					QueryCondition.lt, sendReceiveId_lt));
		}
		if (sendReceiveId_le != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.SEND_RECEIVE_ID,
					QueryCondition.le, sendReceiveId_le));
		}
		if (sendReceiveId_in != null) {
			qc.andCondition(new QueryCondition(
					SendReceiveCarefulEntity.SEND_RECEIVE_ID,
					QueryCondition.in, sendReceiveId_in));
		}
		return qc;
	}
	/* pei */
	public static String savePhoto(String photo, String fileName) {
		String returnPath = null;
		try {
			photo = photo.replaceAll("\n", "");
			byte[] photobyte = Base64Utils.decode(photo);

			String path = OlderHandler.class.getResource("OlderHandler.class")
					.toString();
			String separator = FileUtil.getFileSeparator();
			if ("file".equals(path.substring(0, 4))) {
				if ("\\".equals(separator))
					path = path.substring(6);
				else {
					path = path.substring(5);
				}
			}
			String localPath = path.substring(0, path.indexOf("WEB-INF"))
					+ "photos" + separator + "jiaojiebanPhotos" + separator
					+ fileName;
			localPath = URLDecoder.decode(localPath);
			localPath = localPath.replace("/", separator);
			localPath = localPath.replace("\\", separator);

			returnPath = SystemInit.photourl + "/photos/" + "jiaojiebanPhotos/"
					+ fileName;

			byte2image(photobyte, localPath);
		} catch (Exception e) {
			logger.error(e.toString());
		}
		return returnPath;
	}
	public static void byte2image(byte[] data, String path) {
		if ((data.length < 3) || (path.equals("")))
			return;
		try {
			FileImageOutputStream imageOutput = new FileImageOutputStream(
					new File(path));
			imageOutput.write(data, 0, data.length);
			imageOutput.close();
			logger.debug("Make Picture success,Please find image in "
					+ path);
		} catch (Exception ex) {
			System.out.println("Exception: " + ex);
			ex.printStackTrace();
		}
	}
}
