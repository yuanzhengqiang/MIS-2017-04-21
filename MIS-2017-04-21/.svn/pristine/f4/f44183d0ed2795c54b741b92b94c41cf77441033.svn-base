package com.framework.system.common.handler.user;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.business.handler.BaseHandler;
import com.framework.system.common.entity.user.UserEntity;
import com.framework.system.common.pack.user.UserPack;
import com.framework.system.common.parse.user.UserParse;
import com.framework.system.common.service.user.UserService;
import com.framework.system.db.query.OrderVO;
import com.framework.system.util.Md5Utils;

/**
 * @Title: Handler
 * @Description: 系统账号业务处理器
 * @author feng.gu
 * @date 2016-04-21 11:15:43
 * @version V1.0
 * 
 */
public class UserHandler extends BaseHandler {
	private static Logger logger = Logger.getLogger(UserService.class);
	/**
	 * 解析器
	 */
	private UserParse userParse = UserParse.getInstance();
	/**
	 * 业务处理器
	 */
	private UserService userService = UserService.getInstance();
	/**
	 * 封装器
	 */
	private UserPack userPack = UserPack.getInstance();

	private static UserHandler userHandler;
	
	private static SimpleDateFormat formater = new SimpleDateFormat("yyyyMMddHHmmss");

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static UserHandler getInstance() {
		if (userHandler == null) {
			userHandler = new UserHandler();
		}
		return userHandler;
	}

	/**
	 * 
	 * @param type
	 *            1-json 2-xml
	 * @param entityName
	 * @param command
	 * @param reqStr
	 * @param request
	 * @param response
	 */
	public String doHandler(int type, String command, String reqStr,
			HttpServletRequest request, HttpServletResponse response) {
		String resultStr = "";
		try {
			// 解析
			Map<String, Object> parseMap = userParse.parse(type, command,
					reqStr, request);
			String action = (String) parseMap.get("action");
			UserEntity user = (UserEntity) parseMap.get("user");
			List<UserEntity> userList = (List<UserEntity>) parseMap
					.get("userList");
			Integer id = (Integer) parseMap.get("id");
			Map<String, Object> queryMap = (Map<String, Object>) parseMap
					.get("queryMap");
			int pageno = (Integer) parseMap.get("pageno");
			int pagesize = (Integer) parseMap.get("pagesize");
			List<OrderVO> orderList = (List<OrderVO>) parseMap.get("orderList");

			Boolean departmentShow = (Boolean) parseMap.get("departmentShow");
			Boolean delDepartment = (Boolean) parseMap.get("delDepartment");
			Boolean personinfoShow = (Boolean) parseMap.get("personinfoShow");
			Boolean delPersoninfo = (Boolean) parseMap.get("delPersoninfo");
			Boolean createUserShow = (Boolean) parseMap.get("createUserShow");
			Boolean delCreateUser = (Boolean) parseMap.get("delCreateUser");
			Boolean updateUserShow = (Boolean) parseMap.get("updateUserShow");
			Boolean delUpdateUser = (Boolean) parseMap.get("delUpdateUser");
			Boolean userGroupListShow = (Boolean) parseMap
					.get("userGroupListShow");
			Boolean delUserGroupUserList = (Boolean) parseMap
					.get("delUserGroupUserList");

			// 业务处理
			Object result = null;
			if ("save".equals(action)) {				
				Date date = new Date();
				Integer userId = (Integer)request.getSession().getAttribute("userId");
				if(user.getId()!=null){
					UserEntity u = userService.getById(user.getId());		
					if(user.getPassword()==null||"".equals(user.getPassword())){				
						user.setPassword(u.getPassword());
					}else{
						String md5_pwd = Md5Utils.MD5(user.getLoginname() + "$" + user.getPassword()); 
						user.setPassword(md5_pwd);
					}	
					user.setUpdateTime(formater.format(date));
					user.setUpdateUserId(userId);
				}else{
					String md5_pwd = Md5Utils.MD5(user.getLoginname() + "$" + user.getPassword()); 
					user.setPassword(md5_pwd);
					user.setCreateTime(formater.format(date));
					user.setCreateUserId(userId);
				}
				request.getSession().setAttribute("nickname", user.getNickname());
				result = userService.save(user);
			} else if ("saveList".equals(action)) {
				result = userService.saveList(userList);
			} else if ("getById".equals(action)) {
				result = userService.getById(id, departmentShow,
						personinfoShow, createUserShow, updateUserShow,
						userGroupListShow);
			} else if ("getListByCondition".equals(action)) {
				result = userService.getListByCondition(queryMap, orderList,
						pageno, pagesize, departmentShow, personinfoShow,
						createUserShow, updateUserShow, userGroupListShow);
			} else if ("del".equals(action)) {
				result = userService.del(id, delDepartment, delPersoninfo,
						delCreateUser, delUpdateUser, delUserGroupUserList);
			} else if ("delList".equals(action)) {
				result = userService.delList(queryMap, delDepartment,
						delPersoninfo, delCreateUser, delUpdateUser,
						delUserGroupUserList);
			}
			// 封装
			Map<String, Object> packMap = userPack.pack(type, action, result,
					user);
			String actionBack = (String) packMap.get("action");
			String resultBack = (String) packMap.get("result");
			String desBack = (String) packMap.get("des");
			JSONObject pageBack = (JSONObject) packMap.get("page");
			JSONObject contentBack = (JSONObject) packMap.get("content");

			JSONObject repJson = new JSONObject();
			if (actionBack != null && !"".equals(actionBack)) {
				repJson.put("action", actionBack);
			}
			if (resultBack != null && !"".equals(resultBack)) {
				repJson.put("result", resultBack);
			}
			if (desBack != null && !"".equals(desBack)) {
				repJson.put("des", desBack);
			}
			if (pageBack != null) {
				repJson.put("page", pageBack);
			}
			if (contentBack != null && !"".equals(contentBack)) {
				repJson.put("content", contentBack);
			}
			logger.debug("返回消息：" + repJson.toString());
			resultStr = repJson.toString();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error(e);
		}
		return resultStr;
	}
}
