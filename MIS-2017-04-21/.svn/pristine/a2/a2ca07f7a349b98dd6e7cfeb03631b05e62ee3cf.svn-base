package fsk.handler.nursingPlan;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.business.handler.BaseHandler;
import com.framework.system.common.service.SystemService;
import com.framework.system.db.query.OrderVO;

import fsk.entity.nursingPlan.NursingPlanEntity;
import fsk.entity.nursingPlanService.NursingPlanServiceEntity;
import fsk.pack.nursingPlan.NursingPlanPack;
import fsk.parse.nursingPlan.NursingPlanParse;
import fsk.service.employeeDistribution.EmployeeDistributionService;
import fsk.service.nursingPlan.NursingPlanService;
import fsk.service.nursingPlanService.NursingPlanServiceService;

/**
 * @Title: Handler
 * @Description: 护理计划业务处理器
 * @author feng.gu
 * @date 2016-08-29 14:07:11
 * @version V1.0
 * 
 */
public class NursingPlanHandler extends BaseHandler {
	private static Logger logger = Logger.getLogger(NursingPlanService.class);
	private static SimpleDateFormat formater = new SimpleDateFormat("yyyyMMdd");
	/**
	 * 解析器
	 */
	private NursingPlanParse nursingPlanParse = NursingPlanParse.getInstance();
	/**
	 * 业务处理器
	 */
	private NursingPlanService nursingPlanService = NursingPlanService.getInstance();
	/**
	 * 封装器
	 */
	private NursingPlanPack nursingPlanPack = NursingPlanPack.getInstance();

	private static NursingPlanHandler nursingPlanHandler;

	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();
	private static EmployeeDistributionService employeeDistributionService = EmployeeDistributionService.getInstance();
	private static NursingPlanServiceService nursingPlanServiceService = NursingPlanServiceService.getInstance();

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static NursingPlanHandler getInstance() {
		if (nursingPlanHandler == null) {
			nursingPlanHandler = new NursingPlanHandler();
		}
		return nursingPlanHandler;
	}

	/**
	 * 
	 * @param type
	 *            1-json 2-xml
	 * @param entityName
	 * @param command
	 * @param reqStr
	 * @param request
	 * @param response
	 */
	public String doHandler(int type, String command, String reqStr, HttpServletRequest request, HttpServletResponse response) {
		logger.debug("请求消息：" + reqStr);
		String resultStr = "";
		try {
			logger.debug("请求消息：" + reqStr.toString());
			// 解析
			Map<String, Object> parseMap = nursingPlanParse.parse(type, command, reqStr, request);
			String action = (String) parseMap.get("action");
			NursingPlanEntity nursingPlan = (NursingPlanEntity) parseMap.get("nursingPlan");
			List<NursingPlanEntity> nursingPlanList = (List<NursingPlanEntity>) parseMap.get("nursingPlanList");
			Integer id = (Integer) parseMap.get("id");
			Map<String, Object> queryMap = (Map<String, Object>) parseMap.get("queryMap");
			int pageno = (Integer) parseMap.get("pageno");
			int pagesize = (Integer) parseMap.get("pagesize");
			List<OrderVO> orderList = (List<OrderVO>) parseMap.get("orderList");
			Boolean olderShow = (Boolean) parseMap.get("olderShow");
			Boolean delOlder = (Boolean) parseMap.get("delOlder");
			Boolean addEmployeeShow = (Boolean) parseMap.get("addEmployeeShow");
			Boolean delAddEmployee = (Boolean) parseMap.get("delAddEmployee");
			Boolean nursingPlanServiceListShow = (Boolean) parseMap.get("nursingPlanServiceListShow");
			Boolean delNursingPlanServiceList = (Boolean) parseMap.get("delNursingPlanServiceList");
			JSONObject reqStrjson = JSONObject.fromObject(reqStr);
			JSONObject cnnjson = (JSONObject) reqStrjson.get("content");
			String ids2del = (String) cnnjson.get("ids2del");
			// 业务处理
			Object result = null;
			if ("save".equals(action)) {
				// pei
				if (ids2del != null) {
					boolean flag = true;
					List<NursingPlanEntity> NursingPlanSaveList = new ArrayList<NursingPlanEntity>();
					Integer status = (Integer) cnnjson.get("status");
					Map<String, Object> map = new HashMap<String, Object>();
					map.put("id_in", ids2del);
					List<NursingPlanEntity> nursingPlanEList = nursingPlanService.getListByCondition(map);
					if (nursingPlanEList != null && nursingPlanEList.size() > 0) {
						for (NursingPlanEntity entity : nursingPlanEList) {
							entity.setStatus(status);
							NursingPlanSaveList.add(entity);
						}
						flag = nursingPlanService.saveList(NursingPlanSaveList);
					}
					if (flag) {
						resultStr = "{\"action\":\"ADD_NURSING_PLAN_INFO_RESPONSE\",\"result\":\"100\",\"des\":\"批量修改护理计划成功！\"}";
					}
					if (!flag) {
						resultStr = "{\"action\":\"ADD_NURSING_PLAN_INFO_RESPONSE\",\"result\":\"200\",\"des\":\"批量修改护理计划失败！\"}";
					}
					return resultStr;
				}
				if (nursingPlan.getId() == null) {
					String code = createNum();
					nursingPlan.setCode(code);
				}
				if (nursingPlan.getId() != null) {
					if (nursingPlan.getNursingPlanServiceList() != null) {
						for (NursingPlanServiceEntity emtity : nursingPlan.getNursingPlanServiceList()) {
							if (emtity.getEmployeeDistributionList() != null) {
								Map<String, Object> delMap = new HashMap<String, Object>();
								delMap.put("nursingPlanServiceId", emtity.getId());
								employeeDistributionService.delList(delMap, false, false);
							}
						}
					}
					if (nursingPlan.getNursingPlanServiceList() != null) {
						Map<String, Object> delMap = new HashMap<String, Object>();
						delMap.put("nursingPlanId", nursingPlan.getId());
						nursingPlanServiceService.delList(delMap, false, false, false);
					}
				}
				// //
				result = nursingPlanService.save(nursingPlan);
			} else if ("saveList".equals(action)) {
				result = nursingPlanService.saveList(nursingPlanList);
			} else if ("getById".equals(action)) {
				result = nursingPlanService.getById(id, olderShow, addEmployeeShow, nursingPlanServiceListShow);
			} else if ("getListByCondition".equals(action)) {
				// 根据数据权限 增加查询条件
				queryMap = systemService.addDataRuleByRoles("NursingPlanEntity", queryMap, request);
				result = nursingPlanService.getListByCondition(queryMap, orderList, pageno, pagesize, olderShow, addEmployeeShow, nursingPlanServiceListShow);
			} else if ("del".equals(action)) {
				result = nursingPlanService.del(id, delOlder, delAddEmployee, delNursingPlanServiceList);
			} else if ("delList".equals(action)) {
				result = nursingPlanService.delList(queryMap, delOlder, delAddEmployee, delNursingPlanServiceList);
			}
			// 封装
			Map<String, Object> packMap = nursingPlanPack.pack(type, action, result, nursingPlan);
			String actionBack = (String) packMap.get("action");
			String resultBack = (String) packMap.get("result");
			String desBack = (String) packMap.get("des");
			JSONObject pageBack = (JSONObject) packMap.get("page");
			JSONObject contentBack = (JSONObject) packMap.get("content");

			JSONObject repJson = new JSONObject();
			if (actionBack != null && !"".equals(actionBack)) {
				repJson.put("action", actionBack);
			}
			if (resultBack != null && !"".equals(resultBack)) {
				repJson.put("result", resultBack);
			}
			if (desBack != null && !"".equals(desBack)) {
				repJson.put("des", desBack);
			}
			if (pageBack != null) {
				repJson.put("page", pageBack);
			}
			if (contentBack != null && !"".equals(contentBack)) {
				repJson.put("content", contentBack);
			}
			logger.debug("返回消息：" + repJson.toString());
			resultStr = repJson.toString();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error(e);
		}
		return resultStr;
	}

	public String createNum() {
		String numTemp = "NP" + formater.format(new Date());
		String num = "";
		Map<String, Object> mapVlue = new HashMap<String, Object>();
		Map<String, Object> queryMapService = new HashMap<String, Object>();
		queryMapService.put("indexNum_like", numTemp);
		List<NursingPlanEntity> nursePlanlist = nursingPlanService.getListByCondition(queryMapService);
		if (nursePlanlist != null && nursePlanlist.size() > 0) {
			for (NursingPlanEntity entiry : nursePlanlist) {
				String code = entiry.getCode();
				code = code.substring(10, 14);
				mapVlue.put(code, "yes");
			}
		}
		for (int i = 1; i < 9999; i++) {
			if (i < 10) {
				num = "000" + String.valueOf(i);
			} else if (i >= 10 && i < 100) {
				num = "00" + String.valueOf(i);
			} else if (i >= 100 && i < 1000) {
				num = "0" + String.valueOf(i);
			} else {
				num = String.valueOf(i);
			}
			if (mapVlue.get(num) == null) {
				numTemp = numTemp + num;
				break;
			}
		}
		return numTemp;
	}
}
