package fsk.service.employeeDistribution;

import java.math.BigDecimal;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import org.apache.log4j.Logger;


import fsk.entity.employee.EmployeeEntity;
import fsk.entity.nursingPlanService.NursingPlanServiceEntity;

import fsk.entity.employeeDistribution.EmployeeDistributionEntity;
import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;



/**   
 * @Title: Service
 * @Description: 护工分配列表服务类
 * @author feng.gu
 * @date 2016-12-28 13:33:00
 * @version V1.0   
 *
 */
public class EmployeeDistributionService {
	   private static Logger logger = Logger.getLogger(EmployeeDistributionService.class);
	   private DBManager dbManager = DBManager.getInstance();
    		
	   private static EmployeeDistributionService employeeDistributionService;
	   /**
	    * 获取实例	
	    * @return
	    */
	   public static EmployeeDistributionService getInstance(){
		if(employeeDistributionService==null){
			employeeDistributionService = new EmployeeDistributionService();
		}
		return employeeDistributionService;
	   }
	                 	                 				     				     				     				     
				     	 
	   /**
		 * 保存记录
		 * 
		 * @param obj
		 */
		public boolean save(EmployeeDistributionEntity employeeDistribution) {			
			boolean result =false;
			if(employeeDistribution!=null){
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					 tx.beginTransaction();					 					 
					 					 				     				     					     //关联信息保存
					     EmployeeEntity chargeEmployee = employeeDistribution.getChargeEmployee();
						 if(chargeEmployee!=null){						   
							 dbManager.saveNoTransaction(chargeEmployee);
							 employeeDistribution.setChargeEmployeeId(chargeEmployee.getId());
						 }						 
				     				     				     					 					 				     				     					     //关联信息保存
					     NursingPlanServiceEntity nursingPlanService = employeeDistribution.getNursingPlanService();
						 if(nursingPlanService!=null){						   
							 dbManager.saveNoTransaction(nursingPlanService);
							 employeeDistribution.setNursingPlanServiceId(nursingPlanService.getId());
						 }						 
				     				     				     					 					 result=dbManager.saveNoTransaction(employeeDistribution);	
					 tx.commitAndClose();  
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {				    
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  			
			}	
			return result;
		}
		
		/**
		 * 批量保存记录
		 * 
		 * @param list
		 */
		public boolean saveList(List<EmployeeDistributionEntity> employeeDistributionList) {
			boolean result = false;
			if (employeeDistributionList != null && employeeDistributionList.size() > 0) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 
					for(EmployeeDistributionEntity employeeDistribution:employeeDistributionList){
						if(employeeDistribution!=null){												  								 
								 									 					                 								     								         //关联信息保存
									     EmployeeEntity chargeEmployee = employeeDistribution.getChargeEmployee();
										 if(chargeEmployee!=null){						   
											 dbManager.saveNoTransaction(chargeEmployee);
											 employeeDistribution.setChargeEmployeeId(chargeEmployee.getId());
										 }									 
								     								     								     								 									 					                 								     								         //关联信息保存
									     NursingPlanServiceEntity nursingPlanService = employeeDistribution.getNursingPlanService();
										 if(nursingPlanService!=null){						   
											 dbManager.saveNoTransaction(nursingPlanService);
											 employeeDistribution.setNursingPlanServiceId(nursingPlanService.getId());
										 }									 
								     								     								     								 								 result=dbManager.saveNoTransaction(employeeDistribution);								 			
						}	
					}
				    tx.commitAndClose(); 
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
				/**
		 * 根据id读取记录
		 * 
		 * @param id
		 *            主键
		 * @param obj
		 */
		public EmployeeDistributionEntity getById(Integer id) {
			EmployeeDistributionEntity obj = null;
			if (id != null) {
				obj = (EmployeeDistributionEntity) dbManager.getById(id, EmployeeDistributionEntity.class);			
			}
			return obj;
		}
				
		
		/**
		 * 根据id读取记录
		 * @param id 主键
		 		             	                 				     		 * @param chargeEmployeeShow 是否查询关联信息
				     				     				     		 		             	                 				     		 * @param nursingPlanServiceShow 是否查询关联信息
				     				     				     		 		 * @param obj
		 */
		public EmployeeDistributionEntity getById(Integer id,Boolean chargeEmployeeShow,Boolean nursingPlanServiceShow) {
			EmployeeDistributionEntity obj = null;
			if (id!=null) {
				obj = (EmployeeDistributionEntity)dbManager.getById(id, EmployeeDistributionEntity.class);
									 	                 				     				        //查询关联内容
						if(chargeEmployeeShow!=null&&chargeEmployeeShow.booleanValue()&&obj!=null&&obj.getChargeEmployeeId()!=null&&obj.getChargeEmployeeId()>0){
							EmployeeEntity chargeEmployee = (EmployeeEntity)dbManager.getById(obj.getChargeEmployeeId(), EmployeeEntity.class);
							obj.setChargeEmployee(chargeEmployee);        	  	  
						}
				     				     				     				   					 	                 				     				        //查询关联内容
						if(nursingPlanServiceShow!=null&&nursingPlanServiceShow.booleanValue()&&obj!=null&&obj.getNursingPlanServiceId()!=null&&obj.getNursingPlanServiceId()>0){
							NursingPlanServiceEntity nursingPlanService = (NursingPlanServiceEntity)dbManager.getById(obj.getNursingPlanServiceId(), NursingPlanServiceEntity.class);
							obj.setNursingPlanService(nursingPlanService);        	  	  
						}
				     				     				     				   			}
			return obj;
		}
		
		/**
		 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
		 * @param queryMap 查询条件集合		
		 * @return
		 */
		public List<EmployeeDistributionEntity> getListByCondition(Map<String,Object> queryMap) {
		    List<EmployeeDistributionEntity> returnlist = null;
			List<Object> list = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap);  			
																							  						  			            list = dbManager.queryByCondition(EmployeeDistributionEntity.class,qc);    
            if(list!=null&&list.size()>0){
               returnlist = new ArrayList<EmployeeDistributionEntity>();
               for (Object obj:list) {           
                 returnlist.add((EmployeeDistributionEntity)obj);
               }
            }       					
			return returnlist;
		}
		
		
		/**
		 * 根据条件查询记录集合（不分页 带排序 带级联查询）
		 * @param queryMap 查询条件集合
		 * @param orderList 排序条件集合
		 		             	                 				     		 * @param chargeEmployeeShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		             	                 				     		 * @param nursingPlanServiceShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		 * @return
		 */
		public List<EmployeeDistributionEntity> getListByCondition(Map<String,Object> queryMap,List<OrderVO> orderList,Boolean chargeEmployeeShow,Boolean nursingPlanServiceShow) {
			List<EmployeeDistributionEntity> returnlist = null;
			List<Object> list = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap); 
																							  						  						OrderByCondition oc = null;
			if(orderList!=null&&orderList.size()>0){
				for(int i=0;i<orderList.size();i++){
					OrderVO order = orderList.get(i);
					String orderColumnt =null;
					String orderType=null;
					if(order.getName()!=null&&!"".equals(order.getName())){
						orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
						orderType = order.getOrderType();
						if(orderType==null||"".equals(orderType.trim())){
							orderType=OrderByCondition.desc;
						}
						if(i==0){
							oc = new OrderByCondition(orderColumnt,orderType);
						}else{
							oc.orderByCondition(new OrderByCondition(orderColumnt,orderType));
						}					
					}
					
				}
			}			
            list = dbManager.queryByConditions(EmployeeDistributionEntity.class,qc,oc);
                                    int a=0;
            					             	                 				     				     if(chargeEmployeeShow!=null&&chargeEmployeeShow.booleanValue()){
						a++;
					 }
				     				     				     		    		             	                 				     				     if(nursingPlanServiceShow!=null&&nursingPlanServiceShow.booleanValue()){
						a++;
					 }
				     				     				     		    		                if(a>0&&list!=null&&list.size()>0){
				List<Object> result = new ArrayList<Object>();
				for(int i=0;i<list.size();i++){
					EmployeeDistributionEntity obj = (EmployeeDistributionEntity)list.get(i);
										 	                 				     				        //查询关联内容
						if(chargeEmployeeShow!=null&&chargeEmployeeShow.booleanValue()&&obj!=null&&obj.getChargeEmployeeId()!=null&&obj.getChargeEmployeeId()>0){
							EmployeeEntity chargeEmployee = (EmployeeEntity)dbManager.getById(obj.getChargeEmployeeId(), EmployeeEntity.class);
							obj.setChargeEmployee(chargeEmployee);        	  	  
						}
				     				     				     				    					 	                 				     				        //查询关联内容
						if(nursingPlanServiceShow!=null&&nursingPlanServiceShow.booleanValue()&&obj!=null&&obj.getNursingPlanServiceId()!=null&&obj.getNursingPlanServiceId()>0){
							NursingPlanServiceEntity nursingPlanService = (NursingPlanServiceEntity)dbManager.getById(obj.getNursingPlanServiceId(), NursingPlanServiceEntity.class);
							obj.setNursingPlanService(nursingPlanService);        	  	  
						}
				     				     				     				    					result.add(obj);					
				}
				list=result;			
		}	
					if(list!=null&&list.size()>0){
               returnlist = new ArrayList<EmployeeDistributionEntity>();
               for (Object obj:list) {           
                 returnlist.add((EmployeeDistributionEntity)obj);
               }
            }       					
			return returnlist;
		}
		
		/**
		 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
		 * @param queryMap 查询条件集合
		 * @param pageno 查询页码
		 * @param pagesize 查询每页记录条数		
		 * @return
		 */
		public PageList getListByCondition(Map<String,Object> queryMap,int pageno,int pagesize) {
			PageList pagelist = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap); 
																							  						  			            pagelist = dbManager.queryByCondition(EmployeeDistributionEntity.class,qc,pageno,pagesize);	                      			
			return pagelist;
		}
		
		/**
		 * 根据条件查询记录集合（带分页 带排序 带级联查询）
		 * @param queryMap 查询条件集合
		 * @param orderList 排序条件集合
		 * @param pageno 查询页码
		 * @param pagesize 查询每页记录条数
		 		             	                 				     		 * @param chargeEmployeeShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		             	                 				     		 * @param nursingPlanServiceShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		 * @return
		 */
		public PageList getListByCondition(Map<String,Object> queryMap,List<OrderVO> orderList,int pageno,int pagesize,Boolean chargeEmployeeShow,Boolean nursingPlanServiceShow) {
			PageList pagelist = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap); 
																							  						  						OrderByCondition oc = null;
			if(orderList!=null&&orderList.size()>0){
				for(int i=0;i<orderList.size();i++){
					OrderVO order = orderList.get(i);
					String orderColumnt =null;
					String orderType=null;
					if(order.getName()!=null&&!"".equals(order.getName())){
						orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
						orderType = order.getOrderType();
						if(orderType==null||"".equals(orderType.trim())){
							orderType=OrderByCondition.desc;
						}
						if(i==0){
							oc = new OrderByCondition(orderColumnt,orderType);
						}else{
							oc.orderByCondition(new OrderByCondition(orderColumnt,orderType));
						}					
					}
					
				}
			}		
			//数据权限
			List<QueryCondition> dataRuleQclist = null;
			List<Map<String, Object>> dataRuleMapList = (List<Map<String, Object>>)queryMap.get("dataRuleMapList");
			if(dataRuleMapList!=null&&dataRuleMapList.size()>0){
				dataRuleQclist = new ArrayList<QueryCondition>();
				for(Map<String, Object> dataRuleMap:dataRuleMapList){
					QueryCondition dataRuleQc = changeMapToQc(dataRuleMap);	
					dataRuleQclist.add(dataRuleQc);
				}
			}
            pagelist = dbManager.queryByConditions(EmployeeDistributionEntity.class,qc,dataRuleQclist,oc,pageno,pagesize);	           
                                    int a=0;
            					             	                 				     				     if(chargeEmployeeShow!=null&&chargeEmployeeShow.booleanValue()){
						a++;
					 }
				     				     				     		    		             	                 				     				     if(nursingPlanServiceShow!=null&&nursingPlanServiceShow.booleanValue()){
						a++;
					 }
				     				     				     		    		                if(a>0&&pagelist!=null&&pagelist.getResultList()!=null&&pagelist.getResultList().size()>0){
				List<Object> result = new ArrayList<Object>();
				for(int i=0;i<pagelist.getResultList().size();i++){
					EmployeeDistributionEntity obj = (EmployeeDistributionEntity)pagelist.getResultList().get(i);
										 	                 				     				        //查询关联内容
						if(chargeEmployeeShow!=null&&chargeEmployeeShow.booleanValue()&&obj!=null&&obj.getChargeEmployeeId()!=null&&obj.getChargeEmployeeId()>0){
							EmployeeEntity chargeEmployee = (EmployeeEntity)dbManager.getById(obj.getChargeEmployeeId(), EmployeeEntity.class);
							obj.setChargeEmployee(chargeEmployee);        	  	  
						}
				     				     				     				    					 	                 				     				        //查询关联内容
						if(nursingPlanServiceShow!=null&&nursingPlanServiceShow.booleanValue()&&obj!=null&&obj.getNursingPlanServiceId()!=null&&obj.getNursingPlanServiceId()>0){
							NursingPlanServiceEntity nursingPlanService = (NursingPlanServiceEntity)dbManager.getById(obj.getNursingPlanServiceId(), NursingPlanServiceEntity.class);
							obj.setNursingPlanService(nursingPlanService);        	  	  
						}
				     				     				     				    					result.add(obj);					
				}
				pagelist.setResultList(result);			
		}	
					return pagelist;
		}
		
		/**
		 * 删除记录
		 * 
		 * @param id 主键
		 * @param obj
		 */
		public boolean del(Integer id,Boolean delChargeEmployee,Boolean delNursingPlanService) {
			boolean result = false;
			if (id !=null&&id>0) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 					
										 	                 				     					    //删除关联信息
						if(delChargeEmployee!=null&&delChargeEmployee.booleanValue()){	
							EmployeeDistributionEntity employeeDistribution = (EmployeeDistributionEntity)dbManager.getById(id, EmployeeDistributionEntity.class);
							if(employeeDistribution!=null&&employeeDistribution.getChargeEmployeeId()!=null){
								dbManager.delNoTransaction(employeeDistribution.getChargeEmployeeId(), EmployeeEntity.class);
							}						
						}
				     				     				     										 	                 				     					    //删除关联信息
						if(delNursingPlanService!=null&&delNursingPlanService.booleanValue()){	
							EmployeeDistributionEntity employeeDistribution = (EmployeeDistributionEntity)dbManager.getById(id, EmployeeDistributionEntity.class);
							if(employeeDistribution!=null&&employeeDistribution.getNursingPlanServiceId()!=null){
								dbManager.delNoTransaction(employeeDistribution.getNursingPlanServiceId(), NursingPlanServiceEntity.class);
							}						
						}
				     				     				     										result = dbManager.delNoTransaction(id, EmployeeDistributionEntity.class);
					tx.commitAndClose(); 
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
		/**
		 * 批量删除记录
		 * 
		 * @param ids
		 *            主键 英文逗号间隔
		 * @param obj
		 */
		public boolean del(String ids) {
			boolean result = false;
			if (ids != null && !"".equals(ids.trim())) {
				TransactionManager tx = DbUtils.getTranManager();
				try {
					tx.beginTransaction();
					QueryCondition qc = new QueryCondition(EmployeeDistributionEntity.ID,QueryCondition.in, ids);
					result = dbManager.delByConditionsNoTransaction(EmployeeDistributionEntity.class, qc);
					tx.commitAndClose();
				} catch (Exception e) {
					logger.error("数据库提交失败！");
					logger.error(e);
					result = false;
					try {
						tx.rollbackAndClose();
					} catch (Exception ex) {
						logger.error("数据库回滚失败！");
						logger.error(ex);
					}
				}
			}
			return result;
		}

		/**
		 * 批量条件删除记录
		 * @param queryMap 查询条件集合
		 */
		public boolean delList(Map<String,Object> queryMap,Boolean delChargeEmployee,Boolean delNursingPlanService) {
			boolean result = false;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap);   
																					            				            						if (qc.getQueryNextCondition()!=null) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 						
										 	                 				     					     //删除关联信息
						if(delChargeEmployee!=null&&delChargeEmployee.booleanValue()){
							List<Object> list=dbManager.queryByConditionNoTransaction(EmployeeDistributionEntity.class,qc);
							String strIds="";
							if(list!=null&&list.size()>0){
								for(Object obj:list){
									EmployeeDistributionEntity entity=(EmployeeDistributionEntity)obj;
									strIds += entity.getChargeEmployeeId()+",";
								}
								strIds = strIds.substring(0, strIds.length()-1);
							}
							if(strIds!=null&&!"".equals(strIds)){
								QueryCondition qc1 = new QueryCondition(EmployeeEntity.ID, QueryCondition.in, strIds);
								dbManager.delByConditionsNoTransaction(EmployeeEntity.class, qc1);
							}
							
						}
				     				     				     										 	                 				     					     //删除关联信息
						if(delNursingPlanService!=null&&delNursingPlanService.booleanValue()){
							List<Object> list=dbManager.queryByConditionNoTransaction(EmployeeDistributionEntity.class,qc);
							String strIds="";
							if(list!=null&&list.size()>0){
								for(Object obj:list){
									EmployeeDistributionEntity entity=(EmployeeDistributionEntity)obj;
									strIds += entity.getNursingPlanServiceId()+",";
								}
								strIds = strIds.substring(0, strIds.length()-1);
							}
							if(strIds!=null&&!"".equals(strIds)){
								QueryCondition qc1 = new QueryCondition(NursingPlanServiceEntity.ID, QueryCondition.in, strIds);
								dbManager.delByConditionsNoTransaction(NursingPlanServiceEntity.class, qc1);
							}
							
						}
				     				     				     										result = dbManager.delByConditionsNoTransaction(EmployeeDistributionEntity.class,qc);				
					tx.commitAndClose();  
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
	private QueryCondition changeMapToQc(Map<String, Object> queryMap) {	
											Object id=queryMap.get("id");
					Object id_gt=queryMap.get("id_gt");
					Object id_ge=queryMap.get("id_ge");
					Object id_lt=queryMap.get("id_lt");
					Object id_le=queryMap.get("id_le");
					Object id_in=queryMap.get("id_in");
																Object chargeEmployeeId=queryMap.get("chargeEmployeeId");
					Object chargeEmployeeId_gt=queryMap.get("chargeEmployeeId_gt");
					Object chargeEmployeeId_ge=queryMap.get("chargeEmployeeId_ge");
					Object chargeEmployeeId_lt=queryMap.get("chargeEmployeeId_lt");
					Object chargeEmployeeId_le=queryMap.get("chargeEmployeeId_le");
					Object chargeEmployeeId_in=queryMap.get("chargeEmployeeId_in");
																					Object chargeEmployeeName=queryMap.get("chargeEmployeeName");
					Object chargeEmployeeName_like=queryMap.get("chargeEmployeeName_like");
					Object chargeEmployeeName_isNull=queryMap.get("chargeEmployeeName_isNull");
					Object chargeEmployeeName_isNotNull=queryMap.get("chargeEmployeeName_isNotNull");
					Object chargeEmployeeName_in=queryMap.get("chargeEmployeeName_in");
																										Object partakeEmployeeName=queryMap.get("partakeEmployeeName");
					Object partakeEmployeeName_like=queryMap.get("partakeEmployeeName_like");
					Object partakeEmployeeName_isNull=queryMap.get("partakeEmployeeName_isNull");
					Object partakeEmployeeName_isNotNull=queryMap.get("partakeEmployeeName_isNotNull");
					Object partakeEmployeeName_in=queryMap.get("partakeEmployeeName_in");
																					Object employeeServiceNum=queryMap.get("employeeServiceNum");
					Object employeeServiceNum_gt=queryMap.get("employeeServiceNum_gt");
					Object employeeServiceNum_ge=queryMap.get("employeeServiceNum_ge");
					Object employeeServiceNum_lt=queryMap.get("employeeServiceNum_lt");
					Object employeeServiceNum_le=queryMap.get("employeeServiceNum_le");
					Object employeeServiceNum_in=queryMap.get("employeeServiceNum_in");
																Object nursingPlanServiceId=queryMap.get("nursingPlanServiceId");
					Object nursingPlanServiceId_gt=queryMap.get("nursingPlanServiceId_gt");
					Object nursingPlanServiceId_ge=queryMap.get("nursingPlanServiceId_ge");
					Object nursingPlanServiceId_lt=queryMap.get("nursingPlanServiceId_lt");
					Object nursingPlanServiceId_le=queryMap.get("nursingPlanServiceId_le");
					Object nursingPlanServiceId_in=queryMap.get("nursingPlanServiceId_in");
																					Object executionDate_gt=queryMap.get("executionDate_gt");
					Object executionDate_ge=queryMap.get("executionDate_ge");
					Object executionDate_lt=queryMap.get("executionDate_lt");
					Object executionDate_le=queryMap.get("executionDate_le");
												
			

																				
			
			QueryCondition qc = new QueryCondition(EmployeeDistributionEntity.ID, QueryCondition.gt, "0");				
												if(id!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.ID, QueryCondition.eq, id));}
					if(id_gt!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.ID, QueryCondition.gt, id_gt));}
					if(id_ge!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.ID, QueryCondition.ge, id_ge));}
					if(id_lt!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.ID, QueryCondition.lt, id_lt));}
					if(id_le!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.ID, QueryCondition.le, id_le));}
					if(id_in!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.ID, QueryCondition.in, id_in));}
																if(chargeEmployeeId!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.CHARGE_EMPLOYEE_ID, QueryCondition.eq, chargeEmployeeId));}
					if(chargeEmployeeId_gt!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.CHARGE_EMPLOYEE_ID, QueryCondition.gt, chargeEmployeeId_gt));}
					if(chargeEmployeeId_ge!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.CHARGE_EMPLOYEE_ID, QueryCondition.ge, chargeEmployeeId_ge));}
					if(chargeEmployeeId_lt!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.CHARGE_EMPLOYEE_ID, QueryCondition.lt, chargeEmployeeId_lt));}
					if(chargeEmployeeId_le!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.CHARGE_EMPLOYEE_ID, QueryCondition.le, chargeEmployeeId_le));}
					if(chargeEmployeeId_in!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.CHARGE_EMPLOYEE_ID, QueryCondition.in, chargeEmployeeId_in));}
															  					if(chargeEmployeeName!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.CHARGE_EMPLOYEE_NAME, QueryCondition.eq, chargeEmployeeName));}
		            if(chargeEmployeeName_like!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.CHARGE_EMPLOYEE_NAME, QueryCondition.like, chargeEmployeeName_like));}
		            if(chargeEmployeeName_isNull!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.CHARGE_EMPLOYEE_NAME, QueryCondition.isNull, chargeEmployeeName_isNull));}
		            if(chargeEmployeeName_isNotNull!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.CHARGE_EMPLOYEE_NAME, QueryCondition.isNotNull, chargeEmployeeName_isNotNull));}
				    if(chargeEmployeeName_in!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.CHARGE_EMPLOYEE_NAME, QueryCondition.in, chargeEmployeeName_in));}
				  															  					if(partakeEmployeeName!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.PARTAKE_EMPLOYEE_NAME, QueryCondition.eq, partakeEmployeeName));}
		            if(partakeEmployeeName_like!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.PARTAKE_EMPLOYEE_NAME, QueryCondition.like, partakeEmployeeName_like));}
		            if(partakeEmployeeName_isNull!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.PARTAKE_EMPLOYEE_NAME, QueryCondition.isNull, partakeEmployeeName_isNull));}
		            if(partakeEmployeeName_isNotNull!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.PARTAKE_EMPLOYEE_NAME, QueryCondition.isNotNull, partakeEmployeeName_isNotNull));}
				    if(partakeEmployeeName_in!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.PARTAKE_EMPLOYEE_NAME, QueryCondition.in, partakeEmployeeName_in));}
				  																if(employeeServiceNum!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.EMPLOYEE_SERVICE_NUM, QueryCondition.eq, employeeServiceNum));}
					if(employeeServiceNum_gt!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.EMPLOYEE_SERVICE_NUM, QueryCondition.gt, employeeServiceNum_gt));}
					if(employeeServiceNum_ge!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.EMPLOYEE_SERVICE_NUM, QueryCondition.ge, employeeServiceNum_ge));}
					if(employeeServiceNum_lt!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.EMPLOYEE_SERVICE_NUM, QueryCondition.lt, employeeServiceNum_lt));}
					if(employeeServiceNum_le!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.EMPLOYEE_SERVICE_NUM, QueryCondition.le, employeeServiceNum_le));}
					if(employeeServiceNum_in!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.EMPLOYEE_SERVICE_NUM, QueryCondition.in, employeeServiceNum_in));}
																if(nursingPlanServiceId!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.NURSING_PLAN_SERVICE_ID, QueryCondition.eq, nursingPlanServiceId));}
					if(nursingPlanServiceId_gt!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.NURSING_PLAN_SERVICE_ID, QueryCondition.gt, nursingPlanServiceId_gt));}
					if(nursingPlanServiceId_ge!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.NURSING_PLAN_SERVICE_ID, QueryCondition.ge, nursingPlanServiceId_ge));}
					if(nursingPlanServiceId_lt!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.NURSING_PLAN_SERVICE_ID, QueryCondition.lt, nursingPlanServiceId_lt));}
					if(nursingPlanServiceId_le!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.NURSING_PLAN_SERVICE_ID, QueryCondition.le, nursingPlanServiceId_le));}
					if(nursingPlanServiceId_in!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.NURSING_PLAN_SERVICE_ID, QueryCondition.in, nursingPlanServiceId_in));}
															  					if(executionDate_gt!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.EXECUTION_DATE, QueryCondition.gt, executionDate_gt));}
					if(executionDate_ge!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.EXECUTION_DATE, QueryCondition.ge, executionDate_ge));}
					if(executionDate_lt!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.EXECUTION_DATE, QueryCondition.lt, executionDate_lt));}
					if(executionDate_le!=null){qc.andCondition(new QueryCondition(EmployeeDistributionEntity.EXECUTION_DATE, QueryCondition.le, executionDate_le));}
				  										return qc; 
	}
		
		
}
