package fsk.controller.examinationDataFile;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URLDecoder;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.framework.system.common.entity.json.AjaxJson;
import com.framework.system.common.entity.module.ModuleEntity;
import com.framework.system.common.service.SystemService;
import com.framework.system.util.JsonUtil;

import fsk.entity.examinationDataFile.ExaminationDataFileEntity;
import fsk.handler.examinationDataFile.ExaminationDataFileHandler;
import fsk.handler.older.OlderHandler;
import fsk.service.examinationDataFile.ExaminationDataFileService;
import fsk.util.FileUtil;

@RequestMapping("/examinationDataFile")
@Controller
public class ExaminationDataFileController {
	private static Logger logger = Logger.getLogger(ExaminationDataFileController.class);
	/**
	 * 处理器
	 */
	private ExaminationDataFileHandler examinationDataFileHandler = ExaminationDataFileHandler.getInstance();
	/**
	 * 服务类
	 */
	private ExaminationDataFileService examinationDataFileService = ExaminationDataFileService.getInstance();

	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();

	/**
	 * 列表页
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "main")
	public ModelAndView center(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/examinationDataFile/ExaminationDataFileList");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds, htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		return mav;
	}

	/**
	 * 批量删除 ids英文逗号间隔
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "del")
	@ResponseBody
	public AjaxJson del(HttpServletRequest request) {
		AjaxJson j = new AjaxJson();
		String result = "failure";
		String des = "删除失败";
		String ids = request.getParameter("ids");
		if (ids != null && !"".equals(ids)) {
			boolean falg = examinationDataFileService.del(ids);
			if (falg) {
				result = "success";
				des = "删除成功";
			}
		}
		j.setResult(result);
		j.setDes(des);
		return j;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handler")
	@ResponseBody
	public String query(HttpServletRequest request, HttpServletResponse response) {
		String msg = "";
		try {
			String reqmsg = request.getParameter("reqmsg");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return msg;
			}
			String action = (String) reqParams.get("action");
			String rep = examinationDataFileHandler.doHandler(1, action, reqmsg, request, response);
			msg = new String(rep.getBytes("utf-8"), "iso-8859-1");
		} catch (Exception e) {
			logger.error(e.toString());
		}

		return msg;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handlercontent")
	public void queryApp(HttpServletRequest request, HttpServletResponse response) {
		try {
			InputStream is = request.getInputStream();
			byte[] bis = IOUtils.toByteArray(is);
			String reqmsg = new String(bis, "UTF-8");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return;
			}
			String action = (String) reqParams.get("action");
			String rep = examinationDataFileHandler.doHandler(1, action, reqmsg, request, response);
			OutputStream os = response.getOutputStream();
			os.write(rep.toString().getBytes("UTF-8"));
		} catch (Exception e) {
			logger.error(e.toString());
		}
	}

	/**
	 * 下载文件
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "downloadFiles")
	@ResponseBody
	public void downloadFiles(HttpServletRequest request, HttpServletResponse response, Integer id) {
		if (id != null) {
			ExaminationDataFileEntity file = examinationDataFileService.getById(id);
			if (file != null) {
				String url = file.getUrl();
				String separator = FileUtil.getFileSeparator();
				String path = OlderHandler.class.getResource("OlderHandler.class").toString();
				if ("file".equals(path.substring(0, 4))) {
					if ("\\".equals(separator))
						path = path.substring(6);
					else {
						path = path.substring(5);
					}
				}
				String localPath = path.substring(0, path.indexOf("WEB-INF")) + "uploadFiles" + separator + "tijianFiles" + separator;
				String urlTemp = localPath + url.substring(url.lastIndexOf("/"), url.length());
				File oldfile = new File(urlTemp);
				if (oldfile.exists()) {
					try {
						// 得到要下载的文件名
						String fileName = file.getName();
						// 设置响应头，控制浏览器下载该文件
						response.setHeader("content-disposition", "attachment;filename=" + new String(fileName.getBytes(), "ISO-8859-1"));
						// 读取要下载的文件，保存到文件输入流
						FileInputStream in = new FileInputStream(urlTemp);
						// 创建输出流
						OutputStream out = response.getOutputStream();
						// 创建缓冲区
						byte buffer[] = new byte[1024];
						int len = 0;
						// 循环将输入流中的内容读取到缓冲区当中
						while ((len = in.read(buffer)) > 0) {
							// 输出缓冲区的内容到浏览器，实现文件下载
							out.write(buffer, 0, len);
						}
						// 关闭文件输入流
						in.close();
						// 关闭输出流
						out.close();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

				}
			}
		}
	}

	/**
	 * 下载临时文件
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "downloadTempFiles")
	@ResponseBody
	public void downloadTempFiles(HttpServletRequest request, HttpServletResponse response, String url, String fileName) {
		if (url != null && fileName != null) {
			String separator = FileUtil.getFileSeparator();
			String path = OlderHandler.class.getResource("OlderHandler.class").toString();
			if ("file".equals(path.substring(0, 4))) {
				if ("\\".equals(separator))
					path = path.substring(6);
				else {
					path = path.substring(5);
				}
			}
			String localPath = path.substring(0, path.indexOf("WEB-INF")) + "uploadFiles" + separator + "linshi" + separator;
			String urlTemp = localPath + url.substring(url.lastIndexOf("/"), url.length());
			File oldfile = new File(urlTemp);
			if (oldfile.exists()) {
				try {
					// 转一下文件名
					fileName = URLDecoder.decode(fileName, "UTF-8");
					// 设置响应头，控制浏览器下载该文件
					response.setContentType("application/octet-stream;charset=UTF-8");
					response.setHeader("content-disposition", "attachment;filename=" + new String(fileName.getBytes(), "ISO-8859-1"));
					// 读取要下载的文件，保存到文件输入流
					FileInputStream in = new FileInputStream(urlTemp);
					// 创建输出流
					OutputStream out = response.getOutputStream();
					// 创建缓冲区
					byte buffer[] = new byte[1024];
					int len = 0;
					// 循环将输入流中的内容读取到缓冲区当中
					while ((len = in.read(buffer)) > 0) {
						// 输出缓冲区的内容到浏览器，实现文件下载
						out.write(buffer, 0, len);
					}
					// 关闭文件输入流
					in.close();
					// 关闭输出流
					out.close();
				} catch (IOException e) {
					e.printStackTrace();
				}

			}
		}
	}
}
