package fsk.thread;

import java.math.BigDecimal;
import java.net.URLEncoder;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.log4j.Logger;

import weixin.servlet.pushMessage;

import com.framework.system.db.query.OrderVO;

import fsk.entity.dev.DevEntity;
import fsk.entity.devAlarm.DevAlarmEntity;
import fsk.entity.devPos.DevPosEntity;
import fsk.entity.employee.EmployeeEntity;
import fsk.entity.older.OlderEntity;
import fsk.entity.olderWechat.OlderWechatEntity;
import fsk.entity.wechat.WechatEntity;
import fsk.handler.JKYTJTCPMessageHandler;
import fsk.init.SystemInit;
import fsk.service.dev.DevService;
import fsk.service.devAlarm.DevAlarmService;
import fsk.service.devPos.DevPosService;
import fsk.service.employee.EmployeeService;
import fsk.service.older.OlderService;
import fsk.service.olderWechat.OlderWechatService;
import fsk.service.wechat.WechatService;
import fsk.util.Distance;
import fsk.util.HttpUtil;
import fsk.util.HttpUtils;
import fsk.util.JsonUtil;



/**
 * 定时读取数据平台数据(药箱+定位器)
 * @author Administrator
 *
 */
public class ReadDataThread extends Thread{
	private static Logger logger = Logger.getLogger(ReadDataThread.class);
	
	public static String devStartTime = null;
	public static String configStartTime  = null;
	
	private static SimpleDateFormat formater = new SimpleDateFormat("yyyyMMddHHmmss");
	private static JKYTJTCPMessageHandler handler = new JKYTJTCPMessageHandler();
	
	private DevService devService = DevService.getInstance();
    private DevPosService devPosService = DevPosService.getInstance();
    private DevAlarmService devAlarmService = DevAlarmService.getInstance();
    private OlderService olderService = OlderService.getInstance();
    private OlderWechatService olderWechatService = OlderWechatService.getInstance();
    private WechatService wechatService = WechatService.getInstance();
    private EmployeeService employeeService = EmployeeService.getInstance();
	@Override
	public void run() {	
		logger.debug("定时读取数据平台线程开启");
		while(true){			
			try {
				Thread.sleep(Integer.valueOf(SystemInit.readtime)*1000);
				//应用启动的时候查询好最新更新时间 没有的话就用当前时间
//				if(devStartTime!=null||configStartTime!=null){
					JSONObject obj2=new JSONObject();
		        	obj2.put("version", SystemInit.version);
		        	obj2.put("appid", SystemInit.appid);
		        	obj2.put("action", "QUERY_DEV_HISTORY_INFO_REQUEST");		        	
		        	JSONObject content=new JSONObject();
		        	obj2.put("content", content);	        	
		        	//发送消息给数据平台
		        	String rep = HttpUtils.doHttpPostByVersion1_3(SystemInit.dataserverurl,obj2.toString());
		        	
		        	Map<String,String> locationMap = new HashMap<String,String>();
		        	
		        	//解析
		        	if(rep!=null&&!"".equals(rep)){
		        		Map repParams = JsonUtil.getMap4Json(rep);
		        		if(repParams!=null){
		        			JSONObject contentreq = (JSONObject)repParams.get("content");
		        			if(contentreq!=null){
			        			  //1.设备数据
			        			  Object devs = contentreq.get("datalist");
			        			  JSONArray devlist = null;
			        			  if (devs != null) {
			        			    devlist = (JSONArray)devs;
			        			  }
		        			      if(devlist!=null){
		        			    	for (int i = 0; i < devlist.size(); i++) {
		        			            JSONObject jsonobj = devlist.getJSONObject(i);
		        			            String devcode = (String)jsonobj.get("devcode");
		        			            String dataNumber = (String)jsonobj.get("dataNumber");
		        			            Integer dataType = (Integer)jsonobj.get("dataType");
		        			            String dataContent = (String)jsonobj.get("dataContent");	        			            
		        			            String dataTime = (String)jsonobj.get("dataTime");
		        			            Integer dateTesting = (Integer)jsonobj.get("dateTesting");
		        			            String parentcode = (String)jsonobj.get("parentcode");
		        			            String cardNum  = (String)jsonobj.get("cardNum");
//		        			            Integer devType = (Integer)jsonobj.get("devType");
		        			            if(devcode==null||dataNumber==null||dataType==null||dataContent==null||dataTime==null||dateTesting==null){
		        			            	//校验
		        			            	continue;
		        			            }
		        			            //校验设备
		        			            if(dateTesting!=null&&dateTesting.intValue()==1){
		        			            	if(dataNumber!=null && dataNumber.startsWith("JKYTJ") && dataContent!=null){
			        			            	handler.handle(cardNum,dataType,dataContent,dataTime);
			        			            }
		        			            	//正式数据
		        			            	if(dataType!=null){
		        			            		//查询是否有此设备号
		        			            		
		        			            		if(parentcode!=null&&!"".equals(parentcode)){
		        			            			devcode = parentcode;
		        			            		}			        			            		
		        			            		Map<String, Object> queryMap = new HashMap<String, Object>();
		        			            		queryMap.put("code", devcode);
		        			            		List<DevEntity> devinfos = devService.getListByCondition(queryMap);             			            				        			            		
		        			            		if(devinfos!=null&&devinfos.size()>0){
		        			            			DevEntity dev = (DevEntity)devinfos.get(0);
		        			            			Integer olderid = dev.getOlderId();
		        			            	        if (olderid != null) {
		        			            	            OlderEntity older = olderService.getById(olderid);    
		        			            	            if(older!=null){
		        			            	            	//是否定位器报警
					        			            		boolean loactionAlarm =false;
				        			            			//是否药箱报警推送
					        			            		boolean medAlarm =false;
					        			            		//是否保存药箱报警
					        			            		boolean medAlarmSave =false;			        			            		
					        			            		//是否安护宝报警
					        			            		boolean abhubaoAlarm =false;
					        			            		//报警消息
					        			            		String message=null;
					        			            		String address = null;
					        			            		
					        			            		Integer deviation = Integer.valueOf(0);
					        			            		
					        			            		BigDecimal pos_Lat = null;
					        			            		BigDecimal pos_Long = null;
					        			            		int alarmType=0;
					        			            		if(dataType.intValue()==1){
					        			            			//1.心跳
					        			            		}else if(dataType.intValue()==2){
					        			            			//2.在线状态（在线、离线）
					        			            			if(dataNumber.startsWith("DOOR")){
					        			            				abhubaoAlarm=true;
					        			            				message="门磁未接入网络";
					        			            				alarmType= 21;
					        			            			}else if(dataNumber.startsWith("INFRARED")){
					        			            				abhubaoAlarm=true;
					        			            				message="生命感应器未接入网络";
					        			            				alarmType= 41;
					        			            			}
					        			            		}else if(dataType.intValue()==3){
					        			            			//3.电压状态（电压正常、低电压）
					        			            			if(dataNumber.startsWith("MED")){
					        			            				//药箱
					        			            				medAlarm=true;
					        			            				medAlarmSave = true;
					        			            				message="低电量，请及时充电";
					        			            				alarmType= 62;
					        			            			}else if(dataNumber.startsWith("LOCATION")){
					        			            				//定位器
					        			            				loactionAlarm=true;
					        			            				message="低电量，请及时充电";
					        			            				alarmType= 82;
					        			            			}else if(dataNumber.startsWith("DOOR")){
					        			            				//门磁
					        			            				abhubaoAlarm=true;
					        			            				message="门磁低电量，请及时充电";
					        			            				alarmType= 22;
					        			            			}else if(dataNumber.startsWith("INFRARED")){
					        			            				//红外
					        			            				abhubaoAlarm=true;
					        			            				message="生命感应器电量不足";
					        			            				alarmType= 42;
					        			            			}
					        			            		}else if(dataType.intValue()==4){
					        			            			//4.开机状态（室内网关）
					        			            		}else if(dataType.intValue()==5){
					        			            			//5.门报警状态（门关、门开、报警）
					        			            			if(dataContent.indexOf("门未关报警")>-1){
					        			            				abhubaoAlarm=true;
					        			            				message="门磁门未关";
					        			            				alarmType= 25;
					        			            			}
					        			            		}else if(dataType.intValue()==6){
					        			            			//6.红外感应报警状态（有人、无人、报警）
					        			            			if(dataContent.indexOf("区域内无人报警")>-1){
					        			            				abhubaoAlarm=true;
					        			            				message="生命感应器区域内无人";
					        			            				alarmType= 43;
					        			            			}
					        			            		}else if(dataType.intValue()==7){
					        			            			//7.腕带报警状态（正常、报警）
					        			            			if(dataContent.indexOf("腕带紧急求助报警")>-1){
					        			            				abhubaoAlarm=true;
					        			            				message="腕带紧急求助";
					        			            				alarmType= 33;
					        			            			}
					        			            		}else if(dataType.intValue()==8){
					        			            			//8.随意贴报警状态（正常、报警）
					        			            		}else if(dataType.intValue()==9){
					        			            			//9.智能床垫报警状态（有人、无人、报警）
					        			            		}else if(dataType.intValue()==10){
					        			            			//10.定位器SOS报警        			            			
					        			            			loactionAlarm=true;
					        			            			message="SOS报警";
					        			            			alarmType= 81;	
					        			            		} else if(dataType.intValue()==11){
					        			            			//11.定位器摔倒报警		            			
					        			            			loactionAlarm=true;
					        			            			message="摔倒报警";
					        			            			alarmType= 83;
					        			            		} else if(dataType.intValue()==13){
					        			            			    //13.经纬度信息、是否基站定位(120.891746,31.403232,2311)	        			            					        			            			
					        			            			    String[] sage = dataContent.split(",");
					        			            			    if(sage!=null&&sage.length==3){	
					        			            				if(sage[2]!=null&&!"".equals(sage[2])){
					        			            					deviation = Integer.valueOf(sage[2]);	
					        			            				}					        			            				
					        			            				double poslong = Double.valueOf(sage[0]).doubleValue();
					        			                            double poslat = Double.valueOf(sage[1]).doubleValue();              

					        			                            pos_Lat = BigDecimal.valueOf(poslat);
					        			                            pos_Long = BigDecimal.valueOf(poslong);
					        			                            
					        			                            //GPS转化为百度地图坐标
					        			                            String longlattemp =  this.getLongLatByBaiDu(poslong, poslat);
					        			                            String[] result = longlattemp.split("\\|\\,");
					        			                            if ((result != null) && (result.length == 2)) {
					        			                              pos_Long = BigDecimal.valueOf(Double.valueOf(result[1]).doubleValue());
					        			                              pos_Lat = BigDecimal.valueOf(Double.valueOf(result[0]).doubleValue());
					        			                              logger.debug("百度坐标转换成功:坐标(" + pos_Lat + "," + pos_Long + ")");
					        			                              //根据坐标获取路名
					        			                              address = this.getAddressByBaiDu(pos_Long.doubleValue(),pos_Lat.doubleValue());
							        			            		  
					        			                              //1.保存经纬度
					        			                              DevPosEntity devPosEntity = new DevPosEntity();
					        			                              devPosEntity.setDevId(dev.getId());
					        			                              devPosEntity.setPosLat(pos_Lat);
					        			                              devPosEntity.setPosLong(pos_Long);
					        			                              devPosEntity.setCreateTime(dataTime);
					        			                              devPosEntity.setAddress(address);
					        			                              dev.setPosLong(pos_Long);
					        			                              dev.setPosLat(pos_Lat);
					        			                              dev.setAddress(address);
					        			                              
					        			                              if (dev != null) {
					        			                            	  devService.save(dev);				       			            	               
						        			            	          }
					        			                              devPosService.save(devPosEntity);
					        			                              
					        			                              //判断是否是定位器低电量、sos、摔倒的坐标
					        			                              String alarmId = locationMap.get(dataNumber);
					        			                              if(alarmId!=null&&!"".equals(alarmId)){
					        			                            	  logger.debug("缓存报警id："+alarmId);
					        			                            	  DevAlarmEntity aentity = devAlarmService.getById(Integer.valueOf(alarmId));
					        			                            	  aentity.setPosLat(pos_Lat);
					        			                            	  aentity.setPosLong(pos_Long);
					        			                            	  aentity.setAddress(address);
					        			                            	  aentity.setDeviation(deviation);
					        			                            	  devAlarmService.save(aentity);
					        			                              }else{
					        			                            	  String lat_long_address_deviation = pos_Lat+","+pos_Long+","+address+","+deviation;
					        			                            	  locationMap.put(dataNumber, lat_long_address_deviation);
					        			                              }
					        			                              
					        			                              
					        			                              //2.判断是否越界报警
					        			                              boolean yuejie = false;
					        			                              BigDecimal f_Lat = dev.getFlat();
					        			                			  BigDecimal f_Long = dev.getFlong();
					        			                			  Integer f_Radius = dev.getFradius();
					        			                			  if ((f_Radius != null)&& (f_Radius.intValue() > 0)) {
					        			                				  yuejie = queryYueJie(f_Long, f_Lat,pos_Long, pos_Lat, f_Radius);
					        			                				  if(yuejie){
					        			                					  //判断距离上次越界报警有没有超过20分钟
					        			                			          Map<String, Object> queryMap2 = new HashMap<String, Object>();
					        			                			  		  queryMap2.put("devId", dev.getId());
					        			                			  		  queryMap2.put("alarmType", Integer.valueOf(84));
					        			                			  		  List<OrderVO> orderList = new ArrayList<OrderVO>();;
					        			                			  	      OrderVO orderVO = new OrderVO();
					        			        							  orderVO.setName("alarmTime");
					        			        							  orderVO.setOrderType(OrderVO.desc);
					        			        							  orderList.add(orderVO);              			  		  
					        			                			  		  List<DevAlarmEntity> alarms = devAlarmService.getListByCondition(queryMap2, orderList, false, false);      
					        			                			          
					        			                			          if(alarms!=null&&alarms.size()>0){
					        			                			        	  DevAlarmEntity alarm = alarms.get(0);
					        			                			        	  Date alarmdate = formater.parse(alarm.getAlarmTime());
					        			                			        	  Date date = new Date();
					        			                			        	  if(date.getTime()-alarmdate.getTime()<20*60*1000){
					        			                			        		  logger.debug("越界报警: 距离上次越界报警尚未超过20分钟!"); 
					        			                			        		  yuejie = false;
					        			                			        	  }
					        			                			        	  
					        			                			          }
					        			                				  }				  
					        			                			   }		        			                              			        		
						        			                            if(yuejie){    
						        			                        	  loactionAlarm=true;
						        			                              message = "越界报警";
						        			                              alarmType= 84;
						        			                            }
				        			            				        			            			
					        			                            }
					        			                           }        			            			
					        			            			
					        			            		} else if(dataType.intValue()==15){
					        			            			//15.服药状态（服药信息）
					        			            			message = dataContent;
					        			            			if(message.indexOf("已服药")>-1){
					        			            				medAlarmSave = false;
					        			            				medAlarm = true;;
					        			            			}else{
					        			            				medAlarmSave = true;
					        			            				medAlarm = true;;
					        			            			}	
					        			            			alarmType=61;
					        			            		} 
					        			            		
					        			            		if(medAlarmSave){
						        			            		//保存报警到数据库
					        			            			DevAlarmEntity devAlarmEntity = new DevAlarmEntity();	
					        			            			devAlarmEntity.setDevId(dev.getId());
					        			            			devAlarmEntity.setDevType(dev.getType());
					        			                        devAlarmEntity.setAlarmContent(message);
					        			                        devAlarmEntity.setAlarmTime(dataTime);
					        			                        devAlarmEntity.setAlarmType(alarmType);
					        			                        devAlarmEntity.setAlarmStatus(0);
					        			                        devAlarmEntity.setOlderId(older.getId());
					        			                        devAlarmEntity.setOlderName(older.getName());
					        			                        devAlarmEntity.setPosLat(dev.getPosLat());
					        			                        devAlarmEntity.setPosLong(dev.getPosLong());
					        			                        devAlarmEntity.setAddress(dev.getAddress());
					        			                        devAlarmEntity.setDeviation(0);
					        			                        devAlarmService.save(devAlarmEntity);
					        			            		}
					        			            		if(medAlarm){
					        			                        //微信推送开始
					        			                        if (dev.getOlderId() != null) {
					        			                        	Map<String, Object> queryMap2 = new HashMap<String, Object>();
					        			                      	    queryMap2.put("olderId", dev.getOlderId());
					        			                      	    List<OlderWechatEntity> olderwechatlist = olderWechatService.getListByCondition(queryMap2);     
					        			                            if ((olderwechatlist != null) && (olderwechatlist.size() > 0)) {
					        			                              for (int a = 0; a < olderwechatlist.size(); a++) {
					        			                                OlderWechatEntity olderwechat = olderwechatlist.get(a);
					        			                                if (olderwechat.getWechatId() != null) {
					        			                                  WechatEntity wechat =  wechatService.getById(olderwechat.getWechatId());
					        			                                  if ((wechat != null) && (wechat.getOpenid() != null) && (!"".equals(wechat.getOpenid())) && (SystemInit.weixinurl != null) && (!"".equals(SystemInit.weixinurl)))
					        			                                  {
					        			                                	if(medAlarmSave){
					        			                                		String first = URLEncoder.encode("亲爱的" + wechat.getLoginname() + "：您关注的老人" + older.getName() + "发生报警\\n", "UTF-8");
						        			                                    String keyword1 = URLEncoder.encode("药箱" + message, "UTF-8");
						        			                                    String keyword2 = URLEncoder.encode("紧急处理", "UTF-8");
						        			                                    String remark = URLEncoder.encode("\\n\\n如果疑问，请拨打热线电话", "UTF-8");
						        			                                    String url = SystemInit.weixinurl + "/Send_Alarm.ashx?openid=" + wechat.getOpenid() + "&first=" + first + "&keyword1=" + keyword1 + "&keyword2=" + keyword2 + "&remark=" + remark + "&stype=template" + "&olderid=" + dev.getOlderId();
						        			                                    HttpUtil.doURLGet(url);
					        			                                	}else{
					        			                                		String first = URLEncoder.encode("亲爱的" + wechat.getLoginname() + "：您关注的老人" + older.getName() + "已服药\\n", "UTF-8");
						        			                                    String keyword1 = URLEncoder.encode("药箱" + message, "UTF-8");
						        			                                    String keyword2 = URLEncoder.encode("服药信息", "UTF-8");
						        			                                    String remark = URLEncoder.encode("\\n\\n如果疑问，请拨打热线电话", "UTF-8");
						        			                                    String url = SystemInit.weixinurl + "/Send_fuyao.ashx?openid=" + wechat.getOpenid() + "&first=" + first + "&keyword1=" + keyword1 + "&keyword2=" + keyword2 + "&remark=" + remark + "&stype=template" + "&olderid=" + dev.getOlderId();
						        			                                    HttpUtil.doURLGet(url);
					        			                                	}
					        			                                    
					        			                                  } else {
					        			                                    logger.debug("不推送拼装URL为空");
					        			                                  }
					        			                                } else {
					        			                                  logger.debug("不推送olderwechat.getWechatId()为空");
					        			                                }
					        			                              }
					        			                            }
					        			                            else
					        			                              logger.debug("不推送olderwechatlist为空");
					        			                          }
					        			                          else {
					        			                            logger.debug("不推送dev.getOlderId()为空");
					        			                         }
					        			                         //微信推送结束
					        			            		}
					        			            		
					        			            		if(loactionAlarm){
						        			            		//保存报警到数据库
					        			            			DevAlarmEntity devAlarmEntity = new DevAlarmEntity();						        			                        					        			                       					        			                        
					        			                        devAlarmEntity.setDevId(dev.getId());
					        			            			devAlarmEntity.setDevType(dev.getType());
					        			                        devAlarmEntity.setAlarmContent(message);
					        			                        devAlarmEntity.setAlarmTime(dataTime);
					        			                        devAlarmEntity.setAlarmType(alarmType);
					        			                        devAlarmEntity.setAlarmStatus(0);
					        			                        devAlarmEntity.setOlderId(older.getId());
					        			                        devAlarmEntity.setOlderName(older.getName());
					        			                        devAlarmEntity.setPosLat(pos_Lat);
					        			                        devAlarmEntity.setPosLong(pos_Long);
					        			                        devAlarmEntity.setAddress(address);
					        			                        devAlarmEntity.setDeviation(deviation);
					        			                        devAlarmService.save(devAlarmEntity);
					        			                        
					        			                        //定位器低电量、sos、摔倒
					        			                        if(alarmType==81||alarmType==82||alarmType==83){
					        			                        	//判断是否已经有坐标
					        			                            String lat_long_address_deviation = locationMap.get(dataNumber);
					        			                            if(lat_long_address_deviation!=null&&!"".equals(lat_long_address_deviation)){
					        			                            	logger.debug("缓存坐标："+lat_long_address_deviation);
					        			                            	String[] sage = lat_long_address_deviation.split(",");
					        			                            	if(sage!=null&&sage.length==4){
					        			                            		if(sage[0]!=null&&!"".equals(sage[0])&&!"null".equals(sage[0])){
					        			                            			devAlarmEntity.setPosLat(BigDecimal.valueOf(Double.valueOf(sage[0])));
					        			                            		}
					        			                            		if(sage[1]!=null&&!"".equals(sage[1])&&!"null".equals(sage[1])){
					        			                            			devAlarmEntity.setPosLong(BigDecimal.valueOf(Double.valueOf(sage[1])));
					        			                            		}
					        			                            		if(sage[2]!=null&&!"".equals(sage[2])&&!"null".equals(sage[2])){
					        			                            			devAlarmEntity.setAddress(sage[2]);
					        			                            		}
					        			                            		if(sage[3]!=null&&!"".equals(sage[3])&&!"null".equals(sage[3])){
					        			                            			devAlarmEntity.setDeviation(Integer.valueOf(sage[3]));
					        			                            		}
					        			                            		devAlarmService.save(devAlarmEntity);								        			                        
					        			                            	}
					        			                            }else{
					        			                            	locationMap.put(dataNumber, String.valueOf(devAlarmEntity.getId()));
					        			                            }
					        			                        	
					        			                        }
					        			                        //微信推送开始
					        			                        if (dev.getOlderId() != null) {
					        			                        	Map<String, Object> queryMap2 = new HashMap<String, Object>();
					        			                      	    queryMap2.put("olderId", dev.getOlderId());
					        			                      	    List<OlderWechatEntity> olderwechatlist = olderWechatService.getListByCondition(queryMap2);     
					        			                            if ((olderwechatlist != null) && (olderwechatlist.size() > 0)) {
					        			                              for (int a = 0; a < olderwechatlist.size(); a++) {
					        			                                OlderWechatEntity olderwechat = olderwechatlist.get(a);
					        			                                if (olderwechat.getWechatId() != null) {
					        			                                  WechatEntity wechat =  wechatService.getById(olderwechat.getWechatId());
					        			                                  String addr = "";
					        			                                  if(devAlarmEntity.getAddress()==null){
					        			                                	  addr = "未知";
				        			                            			}else{
				        			                            				addr = devAlarmEntity.getAddress();
				        			                            			}
					        			                                  if ((wechat != null) && (wechat.getOpenid() != null) &&wechat.getNickname()!=null && (!"".equals(wechat.getOpenid())))
					        			                                  {
					        			                                   String ret= pushMessage.sendDevAlarm(wechat.getOpenid(), wechat.getNickname(), older.getId(),older.getName(), dev.getCode(), dev.getType(), message,dataTime,addr);
					        			                                   logger.debug("定位器微信推送返回值"+ret);
					        			                                  } else {
					        			                                    logger.debug("不推送拼装URL为空");
					        			                                  }
					        			                                } else {
					        			                                  logger.debug("不推送olderwechat.getWechatId()为空");
					        			                                }
					        			                              }
					        			                            }
					        			                            else
					        			                              logger.debug("不推送olderwechatlist为空");
					        			                            
					        			                            //老人护理护士微信推送
					        			                            //推送老人的护理人员
					        			                            OlderEntity olderEntity = olderService.getById(dev.getOlderId());
					        			                            if(olderEntity!=null){
					        			                            	if(olderEntity.getNurseEmployeeId()!=null){
					        			                            		EmployeeEntity employee = employeeService.getById(olderEntity.getNurseEmployeeId());
					        			                            		if(employee!=null){
					        			                            			String openIdPush = employee.getWechatOpenid();
					        			                            			String nickNamePush= employee.getWechatName();
					        			                            			String olderNamePush = olderEntity.getName();
					        			                            			String oldderIdPush = String.valueOf(olderEntity.getId());
					        			                            			String devTypePush  = String.valueOf(dev.getType());
					        			                            			  String addr = "";
							        			                                  if(devAlarmEntity.getAddress()==null){
							        			                                	  addr = "未知";
						        			                            			}else{
						        			                            				addr = devAlarmEntity.getAddress();
						        			                            			}
					        			                            			if(openIdPush!=null && nickNamePush!=null && olderNamePush!=null && oldderIdPush!=null && devTypePush!=null && message!=null && dataTime!=null){
					        			                            				String ret= pushMessage.sendDevAlarm(openIdPush, nickNamePush, olderEntity.getId(),olderNamePush,dev.getCode(), dev.getType(), message,dataTime,addr);
							        			                                    logger.debug("定位器关联护士微信推送返回值"+ret);
					        			                            			}
					        			                            		}
					        			                            	}
					        			                            }
					        			                            
					        			                          }
					        			                          else {
					        			                            logger.debug("不推送dev.getOlderId()为空");
					        			                         }
					        			                         //微信推送结束
					        			            		}
					        			            		
					        			            		if(abhubaoAlarm){
						        			            		//保存报警到数据库
					        			            			DevAlarmEntity devAlarmEntity = new DevAlarmEntity();	
					        			            			devAlarmEntity.setDevId(dev.getId());
					        			            			devAlarmEntity.setDevType(dev.getType());
					        			                        devAlarmEntity.setAlarmContent(message);
					        			                        devAlarmEntity.setAlarmTime(dataTime);
					        			                        devAlarmEntity.setAlarmType(alarmType);
					        			                        devAlarmEntity.setAlarmStatus(0);
					        			                        devAlarmEntity.setOlderId(older.getId());
					        			                        devAlarmEntity.setOlderName(older.getName());
					        			                        devAlarmEntity.setPosLat(dev.getPosLat());
					        			                        devAlarmEntity.setPosLong(dev.getPosLong());
					        			                        devAlarmEntity.setAddress(dev.getAddress());
					        			                        devAlarmEntity.setDeviation(0);
					        			                        devAlarmService.save(devAlarmEntity);
					        			                        
					        			                        //微信推送开始
					        			                        if (dev.getOlderId() != null) {
					        			                        	Map<String, Object> queryMap2 = new HashMap<String, Object>();
					        			                      	    queryMap2.put("olderId", dev.getOlderId());
					        			                      	    List<OlderWechatEntity> olderwechatlist = olderWechatService.getListByCondition(queryMap2);     
					        			                            if ((olderwechatlist != null) && (olderwechatlist.size() > 0)) {
					        			                              for (int a = 0; a < olderwechatlist.size(); a++) {
					        			                                OlderWechatEntity olderwechat = olderwechatlist.get(a);
					        			                                if (olderwechat.getWechatId() != null) {
					        			                                	WechatEntity wechat =  wechatService.getById(olderwechat.getWechatId());
					        			                                	 String addr = "";
						        			                                  if(devAlarmEntity.getAddress()==null){
						        			                                	  addr = "未知";
					        			                            			}else{
					        			                            				addr = devAlarmEntity.getAddress();
					        			                            			}
					        			                                  if ((wechat != null) && (wechat.getOpenid() != null) && (!"".equals(wechat.getOpenid())))
					        			                                  {
					        			                                    String ret= pushMessage.sendDevAlarm(wechat.getOpenid(), wechat.getNickname(), older.getId(),older.getName(), dev.getCode(), dev.getType(), message,dataTime,addr);
					        			                                    logger.debug("安护宝关联微信推送返回值"+ret);
					        			                                  } else {
					        			                                    logger.debug("不推送拼装URL为空");
					        			                                  }
					        			                                } else {
					        			                                  logger.debug("不推送olderwechat.getWechatId()为空");
					        			                                }
					        			                              }
					        			                            }else
					        			                              logger.debug("不推送olderwechatlist为空");
					        			                            //推送老人的护理人员
					        			                            OlderEntity olderEntity = olderService.getById(dev.getOlderId());
					        			                            if(olderEntity!=null){
					        			                            	if(olderEntity.getNurseEmployeeId()!=null){
					        			                            		EmployeeEntity employee = employeeService.getById(olderEntity.getNurseEmployeeId());
					        			                            		if(employee!=null){
					        			                            			String openIdPush = employee.getWechatOpenid();
					        			                            			String nickNamePush= employee.getWechatName();
					        			                            			String olderNamePush = olderEntity.getName();
					        			                            			 String addr = "";
							        			                                  if(devAlarmEntity.getAddress()==null){
							        			                                	  addr = "未知";
						        			                            			}else{
						        			                            				addr = devAlarmEntity.getAddress();
						        			                            			}
					        			                            			if(openIdPush!=null && nickNamePush!=null && olderNamePush!=null && olderEntity.getId()!=null && dev.getType()!=null && message!=null && dataTime!=null){
					        			                            				String ret= pushMessage.sendDevAlarm(openIdPush, nickNamePush, olderEntity.getId(),olderNamePush, dev.getCode(), dev.getType(), message,dataTime,addr);
							        			                                    logger.debug("安护宝关联护士微信推送返回值"+ret);
					        			                            			}
					        			                            		}
					        			                            	}
					        			                            }
					        			                          }
					        			                          else {
					        			                            logger.debug("不推送dev.getOlderId()为空");
					        			                         }
					        			                         //微信推送结束
					        			            		}
					        			            		
				        			            		}else{
				        			            			logger.debug("未查询到设备编号："+devcode);
				        			            		}
		        			            	            }
		        			            	        } 
		        			            			
		        			            			
		        			            					        			            		
		        			            	}
		        			            }else{
		        			            	logger.debug("数据不是正式数据不处理,设备编号："+devcode);
		        			            }
		        			    	}
		        			    }
		        			    //2.配置数据
			        				Object configs = contentreq.get("configlist");
			        			    JSONArray configlist = null;
			        			    if (configs != null) {
			        			    	configlist = (JSONArray)configs;
			        			    }
			        			    if(configlist!=null){
			        			    	int a=0;
			        			    	for (int i = 0; i < configlist.size(); i++) {
			        			            JSONObject jsonobj = configlist.getJSONObject(i);
			        			            String devcode = (String)jsonobj.get("devcode");
			        			            String configCode = (String)jsonobj.get("configCode");
			        			            String submitTime = (String)jsonobj.get("submitTime");
			        			            String finishTime = (String)jsonobj.get("finishTime");
			        			            JSONObject configContent = (JSONObject)jsonobj.get("configContent");
			        			            Integer submitWay = (Integer)jsonobj.get("submitWay");
			        			            Integer status = (Integer)jsonobj.get("status");   
//			        			            Integer devType = (Integer)jsonobj.get("devType");
			        			            if(devcode==null||configCode==null||submitTime==null||status==null){
			        			            	//校验
			        			            	continue;
			        			            }
			        			            
//			        			            if(devcode!=null){
//			        			            	if(devcode.startsWith("33")){
//			        			            		//查询是否需要更新配置
//			        			            		boolean updateConfig=true;
//			        			            		if(submitWay!=null&&submitWay.intValue()==0&&status!=null&&status.intValue()==2){
//			        			            			//应用提交的 成功的配置 不需要更新 其他设备提交的成功 或者应用提交的失败都要更新或回滚
//			        			            			updateConfig = false;
//			        			            		}
//			        			            		//药箱查询配置 更新状态
//			        			            		MedInfoEntity medInfoEntity = null;
//			        			            		CriteriaQuery cq = new CriteriaQuery(MedInfoEntity.class);
//			        			            	    cq.eq("devcode", devcode);       			            	    
//			        			            	    cq.add();
//			        			            	    List medInfolist = businessService.getListByCriteriaQuery(cq, Boolean.valueOf(false));
//			        			            	    if(medInfolist!=null&&medInfolist.size()>0){
//			        			            	    	medInfoEntity = (MedInfoEntity)medInfolist.get(0);		        			            	    			        			            	    	
//			        			            	    }else{
//			        			            	    	medInfoEntity = new MedInfoEntity();
//			        			            	    	medInfoEntity.setDevcode(devcode);
//			        			            	    }
//			        			            	    
//		        			            	    	if(finishTime!=null){
//			        			            	    	medInfoEntity.setUpdateTime(finishTime);			        			            	    					        			            	    		
//			        			            	    }
//		        			            	    	if(configCode!=null){
//		        			            	    		medInfoEntity.setConfigCode(configCode);
//		        			            	    	}
//		        			            	    	if(status!=null){
//		        			            	    		medInfoEntity.setStatus(status);
//		        			            	    	}
//			        			            	    if(updateConfig&&configContent!=null){
//			        			            	    	//修改配置
//			        			            	    	String drugNum = (String) configContent.get("drugNum");
//			        			    					String drugTime1 = (String) configContent.get("drugTime1");
//			        			    					String drugTime2 = (String) configContent.get("drugTime2");
//			        			    					String drugTime3 = (String) configContent.get("drugTime3");
//			        			    					String drugTime4 = (String) configContent.get("drugTime4");
//			        			    					String drugCount = (String) configContent.get("drugCount");
//			        			    					String startTime = (String) configContent.get("startTime");
//			        			    					String drugAdvance = (String) configContent.get("drugAdvance");
//			        			    					String light = (String) configContent.get("light");
//			        			    					String serverUrl = (String) configContent.get("serverUrl");
//			        			    					String serverPort = (String) configContent.get("serverPort");
//			        			    					medInfoEntity.setDrugNum(drugNum);
//			        			    					medInfoEntity.setDrugTime1(drugTime1);
//			        			    					medInfoEntity.setDrugTime2(drugTime2);
//			        			    					medInfoEntity.setDrugTime3(drugTime3);
//			        			    					medInfoEntity.setDrugTime4(drugTime4);
//			        			    					medInfoEntity.setDrugCount(drugCount);
//			        			    					medInfoEntity.setStartTime(startTime);
//			        			    					medInfoEntity.setDrugAdvance(drugAdvance);
//			        			    					medInfoEntity.setLight(light);
//			        			    					medInfoEntity.setServerUrl(serverUrl);
//			        			    					medInfoEntity.setServerPort(serverPort);
//			        			            	    }
//			        			            	    businessService.saveOrUpdate(medInfoEntity);
//		        			            	    }		        			            			        			            		
//			        			            }	
//			        			            if(finishTime!=null){
//			        			            	configStartTime = this.getBigTime(configStartTime, finishTime);
//			        			            }
			        			    	}		        			    	
			        			    }	
	        			    
		        			}		        					        			
		        		}
		        	}			        	
//				}					    		
			} catch (Exception e) {
				logger.error(e);   
			}			
		}	
		
	}
	
	
	private String getBigTime(String timeA ,String timeB){
		String result=null;
		try {
			Date a = formater.parse(timeA);
			Date b = formater.parse(timeB);
			if(a.getTime()>b.getTime()){
				result = timeA;
			}else{
				result = timeB;
			}
		} catch (ParseException e) {
			logger.error(e);
		}
		return result;
	}
	private String getSmallTime(String timeA ,String timeB){
		String result=null;
		try {
			Date a = formater.parse(timeA);
			Date b = formater.parse(timeB);
			if(a.getTime()<b.getTime()){
				result = timeA;
			}else{
				result = timeB;
			}
		} catch (ParseException e) {
			logger.error(e);
		}
		return result;
	}
	
	public static String getLongLatByBaiDu(double posLong, double posLat)
	  {
	    String result = "";
	    String key =  posLong + "," + posLat;
	    try
	    {
	      String urlstr = "http://api.map.baidu.com/geoconv/v1/?ak=E6faddbe04652555f7f3e9a133f45f6a&coords="+key;
	      logger.debug("百度地图url：" + urlstr);
	      HttpClient client = new HttpClient(); 
		  PostMethod method = new PostMethod(urlstr); 			
		  client.getParams().setContentCharset("UTF-8");
		  method.setRequestHeader("ContentType","application/json;charset=UTF-8");
		  client.executeMethod(method);	
	      String rep = method.getResponseBodyAsString();
	      logger.debug("百度地图url返回：" + rep);

	      Map reqParams = JsonUtil.getMap4Json(rep);
	      Integer resultcode = (Integer)reqParams.get("status");
	      if (resultcode!=null&&resultcode.intValue()==0) {
	        JSONArray listjson = (JSONArray)reqParams.get("result");
	        if (listjson != null) {
	          JSONObject jsonObj = (JSONObject)listjson.opt(0);
	          Double lat = (Double) jsonObj.get("y");
			  Double lng = (Double) jsonObj.get("x");    
	          result = lat + "|," + lng;
	        }
	      }
	    }
	    catch (Exception e) {
	    	logger.error(e);
	    }
	    return result;
	  }
	
	public static String getAddressByBaiDu(double posLong, double posLat)
	  {
	    String result = "";
	    String key =  posLat + "," + posLong;
	    try
	    {
	      String urlstr = "http://api.map.baidu.com/geocoder/v2/?ak=E6faddbe04652555f7f3e9a133f45f6a&callback=renderReverse&location="+key+"&output=json&pois=0";
	      logger.debug("百度地图逆地址url：" + urlstr);
	      HttpClient client = new HttpClient(); 
		  PostMethod method = new PostMethod(urlstr); 			
		  client.getParams().setContentCharset("UTF-8");
		  method.setRequestHeader("ContentType","application/json;charset=UTF-8");
		  client.executeMethod(method);	
	      String rep = method.getResponseBodyAsString();
	      logger.debug("百度地图url返回：" + rep);
	      
	      if(rep!=null&&rep.indexOf("\"status\":0")>0){
	          String temp = rep.substring(rep.indexOf("\"formatted_address\":\""));
	          temp = temp.substring(21);
	          result = temp.substring(0, temp.indexOf("\""));
	    	  logger.debug("百度地图逆地址获取成功,地址："+result);
	      }else{
	    	  logger.debug("百度地图逆地址获取失败");
	      }
	    }
	    catch (Exception e) {
	    	logger.error(e);
	    }
	    return result;
	  }
	public static boolean queryYueJie(BigDecimal f_Long, BigDecimal f_Lat, BigDecimal pos_Long, BigDecimal pos_Lat, Integer f_Radius)
	  {
	    boolean result = false;

	    double dis = Distance.GetDistance(f_Long.doubleValue(), f_Lat.doubleValue(), pos_Long.doubleValue(), pos_Lat.doubleValue());
	    if (dis > Double.valueOf(String.valueOf(f_Radius)).doubleValue()) {
	      result = true;
	    }
	    if(f_Radius!=null&&f_Radius.intValue()==0){
			result =false;
		}
	    return result;
	  }

	
}
