package fsk.service.ecgStick;

import java.math.BigDecimal;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import org.apache.log4j.Logger;

import fsk.entity.ecgStick.EcgStickEntity;
import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

/**
 * @Title: Service
 * @Description: 心电数据服务类
 * @author feng.gu
 * @date 2016-12-16 16:30:04
 * @version V1.0
 * 
 */
public class EcgStickService {
	private static Logger logger = Logger.getLogger(EcgStickService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static EcgStickService ecgStickService;

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static EcgStickService getInstance() {
		if (ecgStickService == null) {
			ecgStickService = new EcgStickService();
		}
		return ecgStickService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(EcgStickEntity ecgStick) {
		boolean result = false;
		if (ecgStick != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				result = dbManager.saveNoTransaction(ecgStick);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(List<EcgStickEntity> ecgStickList) {
		boolean result = false;
		if (ecgStickList != null && ecgStickList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (EcgStickEntity ecgStick : ecgStickList) {
					if (ecgStick != null) {
						result = dbManager.saveNoTransaction(ecgStick);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public EcgStickEntity getById(Integer id) {
		EcgStickEntity obj = null;
		if (id != null) {
			obj = (EcgStickEntity) dbManager.getById(id, EcgStickEntity.class);
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<EcgStickEntity> getListByCondition(Map<String, Object> queryMap) {
		List<EcgStickEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		list = dbManager.queryByCondition(EcgStickEntity.class, qc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<EcgStickEntity>();
			for (Object obj : list) {
				returnlist.add((EcgStickEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @return
	 */
	public List<EcgStickEntity> getListByCondition(
			Map<String, Object> queryMap, List<OrderVO> orderList) {
		List<EcgStickEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(EcgStickEntity.class, qc, oc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<EcgStickEntity>();
			for (Object obj : list) {
				returnlist.add((EcgStickEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		pagelist = dbManager.queryByCondition(EcgStickEntity.class, qc, pageno,
				pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		// 数据权限
		List<QueryCondition> dataRuleQclist = null;
		List<Map<String, Object>> dataRuleMapList = (List<Map<String, Object>>) queryMap
				.get("dataRuleMapList");
		if (dataRuleMapList != null && dataRuleMapList.size() > 0) {
			dataRuleQclist = new ArrayList<QueryCondition>();
			for (Map<String, Object> dataRuleMap : dataRuleMapList) {
				QueryCondition dataRuleQc = changeMapToQc(dataRuleMap);
				dataRuleQclist.add(dataRuleQc);
			}
		}
		pagelist = dbManager.queryByConditions(EcgStickEntity.class, qc,
				dataRuleQclist, oc, pageno, pagesize);
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				result = dbManager.delNoTransaction(id, EcgStickEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(EcgStickEntity.ID,
						QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(
						EcgStickEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				result = dbManager.delByConditionsNoTransaction(
						EcgStickEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	private QueryCondition changeMapToQc(Map<String, Object> queryMap) {
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object physiologicalParametersHistoryId = queryMap
				.get("physiologicalParametersHistoryId");
		Object physiologicalParametersHistoryId_gt = queryMap
				.get("physiologicalParametersHistoryId_gt");
		Object physiologicalParametersHistoryId_ge = queryMap
				.get("physiologicalParametersHistoryId_ge");
		Object physiologicalParametersHistoryId_lt = queryMap
				.get("physiologicalParametersHistoryId_lt");
		Object physiologicalParametersHistoryId_le = queryMap
				.get("physiologicalParametersHistoryId_le");
		Object physiologicalParametersHistoryId_in = queryMap
				.get("physiologicalParametersHistoryId_in");
		Object type = queryMap.get("type");
		Object type_like = queryMap.get("type_like");
		Object type_isNull = queryMap.get("type_isNull");
		Object type_isNotNull = queryMap.get("type_isNotNull");
		Object type_in = queryMap.get("type_in");
		Object data = queryMap.get("data");
		Object data_like = queryMap.get("data_like");
		Object data_isNull = queryMap.get("data_isNull");
		Object data_isNotNull = queryMap.get("data_isNotNull");
		Object data_in = queryMap.get("data_in");
		Object createTime_gt = queryMap.get("createTime_gt");
		Object createTime_ge = queryMap.get("createTime_ge");
		Object createTime_lt = queryMap.get("createTime_lt");
		Object createTime_le = queryMap.get("createTime_le");

		QueryCondition qc = new QueryCondition(EcgStickEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.ID,
					QueryCondition.in, id_in));
		}
		if (physiologicalParametersHistoryId != null) {
			qc.andCondition(new QueryCondition(
					EcgStickEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID,
					QueryCondition.eq, physiologicalParametersHistoryId));
		}
		if (physiologicalParametersHistoryId_gt != null) {
			qc.andCondition(new QueryCondition(
					EcgStickEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID,
					QueryCondition.gt, physiologicalParametersHistoryId_gt));
		}
		if (physiologicalParametersHistoryId_ge != null) {
			qc.andCondition(new QueryCondition(
					EcgStickEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID,
					QueryCondition.ge, physiologicalParametersHistoryId_ge));
		}
		if (physiologicalParametersHistoryId_lt != null) {
			qc.andCondition(new QueryCondition(
					EcgStickEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID,
					QueryCondition.lt, physiologicalParametersHistoryId_lt));
		}
		if (physiologicalParametersHistoryId_le != null) {
			qc.andCondition(new QueryCondition(
					EcgStickEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID,
					QueryCondition.le, physiologicalParametersHistoryId_le));
		}
		if (physiologicalParametersHistoryId_in != null) {
			qc.andCondition(new QueryCondition(
					EcgStickEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID,
					QueryCondition.in, physiologicalParametersHistoryId_in));
		}
		if (type != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.TYPE,
					QueryCondition.eq, type));
		}
		if (type_like != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.TYPE,
					QueryCondition.like, type_like));
		}
		if (type_isNull != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.TYPE,
					QueryCondition.isNull, type_isNull));
		}
		if (type_isNotNull != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.TYPE,
					QueryCondition.isNotNull, type_isNotNull));
		}
		if (type_in != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.TYPE,
					QueryCondition.in, type_in));
		}
		if (data != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.DATA,
					QueryCondition.eq, data));
		}
		if (data_like != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.DATA,
					QueryCondition.like, data_like));
		}
		if (data_isNull != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.DATA,
					QueryCondition.isNull, data_isNull));
		}
		if (data_isNotNull != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.DATA,
					QueryCondition.isNotNull, data_isNotNull));
		}
		if (data_in != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.DATA,
					QueryCondition.in, data_in));
		}
		if (createTime_gt != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.CREATE_TIME,
					QueryCondition.gt, createTime_gt));
		}
		if (createTime_ge != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.CREATE_TIME,
					QueryCondition.ge, createTime_ge));
		}
		if (createTime_lt != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.CREATE_TIME,
					QueryCondition.lt, createTime_lt));
		}
		if (createTime_le != null) {
			qc.andCondition(new QueryCondition(EcgStickEntity.CREATE_TIME,
					QueryCondition.le, createTime_le));
		}
		return qc;
	}

}
