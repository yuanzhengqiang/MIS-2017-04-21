package fsk.thread;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import fsk.entity.older.OlderEntity;
import fsk.entity.review.ReviewEntity;
import fsk.entity.site.SiteEntity;
import fsk.entity.siteServiceArea.SiteServiceAreaEntity;
import fsk.service.older.OlderService;
import fsk.service.review.ReviewService;
import fsk.service.site.SiteService;
import fsk.service.siteServiceArea.SiteServiceAreaService;
import fsk.util.CodeCreateUtil;

public class CreateBackVisitThread extends Thread {
	public static Logger logger = Logger.getLogger(CreateBackVisitThread.class);
	public static SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
	public static SimpleDateFormat format2 = new SimpleDateFormat("yyyyMMddHHmmss");
	private static SiteService siteService = SiteService.getInstance();
	private static SiteServiceAreaService siteServiceAreaService = SiteServiceAreaService.getInstance();
	private static OlderService olderService = OlderService.getInstance();
	private static ReviewService reviewService = ReviewService.getInstance();

	public void run() {
		// 休眠60秒，减小系统重启时的cpu开支
		try {
			Thread.sleep(60 * 1000);
		} catch (InterruptedException e1) {
			logger.debug(e1);
		}
		while (true) {
			logger.debug("开始生成回访记录");
			try {
				String dayOfMouth = getMonthFirstDay();//
				String todayDate = format.format(new Date());
				String curTime = format2.format(new Date());
				// 查詢數據庫，判断是否已经生成了本月的回访记录
				boolean flagCreate = true;
				Map<String, Object> queryReview = new HashMap<String, Object>();
				queryReview.put("estimatedReviewTime_ge", todayDate + "000000");
				List<ReviewEntity> reviewList = reviewService.getListByCondition(queryReview);
				if (reviewList != null && reviewList.size() > 0) {
					flagCreate = false;
				}
				if (dayOfMouth.equals(todayDate) && flagCreate) {// 当前时间为本月1号时开始生成回访记录
					// 取到所有的站点
					List<SiteEntity> siteList = siteService.getListByCondition(null);
					// 遍历所有站点，得到站点下所有的老人
					if (siteList != null && siteList.size() > 0) {
						for (SiteEntity site : siteList) {
							Integer siteId = site.getId();
							String siteName = site.getName();
							// 根据关联表查ServiceStreetId
							Map<String, Object> querySiteArea = new HashMap<String, Object>();
							querySiteArea.put("siteId", siteId);
							List<SiteServiceAreaEntity> siteAreaList = siteServiceAreaService.getListByCondition(querySiteArea);
							if (siteAreaList != null && siteAreaList.size() > 0) {
								String streetIds = "";
								for (SiteServiceAreaEntity siteArea : siteAreaList) {
									streetIds = streetIds + siteArea.getServiceStreetId() + ",";
								}
								if (!"".equals(streetIds)) {
									// 根据streetIds查老人表
									streetIds = streetIds.replaceAll(",,", ",");
									streetIds = streetIds.substring(0, streetIds.length() - 1);
									Map<String, Object> queryOlder = new HashMap<String, Object>();
									queryOlder.put("serviceStreetId_in", streetIds);
									List<OlderEntity> olserNumList = olderService.getListByCondition(queryOlder);// 获得站点下老人的总数量
									Integer olderNum = 0;// 老人总数量
									Integer createNum = 0;// 需要生成的回访记录数量
									if (olserNumList != null) {
										olderNum = olserNumList.size();
									}
									createNum = olderNum % 3 == 0 ? olderNum / 3 : olderNum / 3 + 1;
									// 遍历查询结果,将符合生成回访记录的老人放入list中
									List<OlderEntity> olderList = new ArrayList<OlderEntity>();
									if (olserNumList != null && olserNumList.size() > 0) {
										for (OlderEntity older : olserNumList) {
											boolean flag = needCreateReview(older);
											if (flag) {
												olderList.add(older);
											}
										}
									}
									if (olderList != null && olderList.size() > 0) {
										// 判断符合生成的人数和需要生成的人数
										int num = 0;
										if (createNum >= olderList.size()) {
											num = olderList.size();
										} else {
											num = createNum;
										}
										// 遍历list生成回访记录
										for (int i = 0; i < num; i++) {
											OlderEntity older = olderList.get(i);
											ReviewEntity review = new ReviewEntity();
											review.setRecordCode(CodeCreateUtil.creatreviewNum());
											review.setOlderId(older.getId());
											review.setOlderName(older.getName());
											review.setStatus("1");// 回访状态为1
											review.setSource("1");// 回访来源为站点
											review.setSiteId(siteId);
											review.setSiteName(siteName);
											review.setEstimatedReviewTime(todayDate + "000000");
											review.setCreateTime(curTime);
											reviewService.save(review);
										}
									}
								}
							}

						}
					}
				}
				// 每小时进行一次
				Thread.sleep(60 * 60 * 1000);
			} catch (Exception e) {

			}
		}
	}

	/**
	 * 判断是否生成回访记录
	 * 
	 * @param older
	 * @return
	 */
	private boolean needCreateReview(OlderEntity older) {
		boolean flag = false;
		String createTime = older.getCreateTime();
		String lastReviewTime = older.getLastReviewTime();
		Integer menStatus = older.getMemberStatus();
		// 根据上次生成时间判断是否生成
		if (menStatus != null) {
			if (menStatus.intValue() == 0 || menStatus.intValue() == 2) {// 状态为正常或者待评估
				if (createTime != null) {
					String todayDate = format.format(new Date());
					if (countMonths(todayDate, createTime) >= 2) {// 入会时间大于等于两个月
						if (lastReviewTime == null) {
							flag = true;
						} else {
							lastReviewTime = lastReviewTime.substring(0, 6);
							if (countMonths(todayDate, lastReviewTime) >= 3) {// 上次回访时间大于等于三个月
								flag = true;
							}
						}
					}
				}
			}
		}
		return flag;
	}

	/**
	 * 返回两个时间的相差月份
	 * 
	 * @param date1
	 * @param date2
	 * @return
	 */
	public static int countMonths(String date1, String date2) {
		date1 = date1.substring(0, 6);
		date2 = date2.substring(0, 6);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMM");
		Calendar c1 = Calendar.getInstance();
		Calendar c2 = Calendar.getInstance();
		try {
			c1.setTime(sdf.parse(date1));
			c2.setTime(sdf.parse(date2));
		} catch (ParseException e) {
			e.printStackTrace();
		}
		int year = c1.get(Calendar.YEAR) - c2.get(Calendar.YEAR);
		// 开始日期若小月结束日期
		return year * 12 + c1.get(Calendar.MONTH) - c2.get(Calendar.MONTH);
	}

	/**
	 * /返回本月第一天
	 * 
	 * @return
	 */
	public String getMonthFirstDay() {
		Calendar c = Calendar.getInstance();
		c.add(Calendar.MONTH, 0);
		c.set(Calendar.DAY_OF_MONTH, 1);// 设置为1号,当前日期既为本月第一天
		String first = format.format(c.getTime());
		return first;
	}
}
