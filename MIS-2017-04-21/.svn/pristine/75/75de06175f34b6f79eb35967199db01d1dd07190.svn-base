package fsk.controller.service;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.framework.system.common.entity.json.AjaxJson;
import com.framework.system.common.entity.module.ModuleEntity;
import com.framework.system.common.service.SystemService;
import com.framework.system.util.JsonUtil;

import fsk.entity.nursingPlanService.NursingPlanServiceEntity;
import fsk.entity.service.ServiceEntity;
import fsk.handler.service.ServiceHandler;
import fsk.service.nursingPlanService.NursingPlanServiceService;
import fsk.service.service.ServiceService;

@RequestMapping("/service")
@Controller
public class ServiceController {
	private static Logger logger = Logger.getLogger(ServiceController.class);
	/**
	 * 处理器
	 */
	private ServiceHandler serviceHandler = ServiceHandler.getInstance();
	/**
	 * 服务类
	 */
	private ServiceService serviceService = ServiceService.getInstance();
	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();
	private static NursingPlanServiceService nursingPlanServiceService = NursingPlanServiceService.getInstance();

	/**
	 * 列表页
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "main")
	public ModelAndView center(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/ServiceManagement/ServiceList");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds, htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		return mav;
	}

	/**
	 * 详情页
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "mainXQ")
	public ModelAndView centerXQ(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/ServiceManagement/ServiceManagementDetail");
		String id = "";
		if (request.getParameter("id") != null && request.getParameter("id") != "") {
			id = request.getParameter("id");
		}
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds, htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("id", id);
		return mav;
	}

	/**
	 * 批量删除 ids英文逗号间隔
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "del")
	@ResponseBody
	public AjaxJson del(HttpServletRequest request) {
		AjaxJson j = new AjaxJson();
		String result = "failure";
		String des = "删除失败";
		String ids = request.getParameter("ids");
		if (ids != null && !"".equals(ids)) {

			boolean falg = serviceService.del(ids);
			if (falg) {
				result = "success";
				des = "删除成功";
			}

		}
		j.setResult(result);
		j.setDes(des);
		return j;
	}

	//

	/**
	 * 根据id删除服务项目（更改delete字段）
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "delByIds")
	@ResponseBody
	public AjaxJson delByIds(HttpServletRequest request) {
		AjaxJson j = new AjaxJson();
		String result = "failure";
		String des = "删除失败";
		String ids = request.getParameter("ids");
		if (ids != null && !"".equals(ids)) {

			// 根据id查询服务项目，将delete字段改为1
			List<ServiceEntity> serviceDelList = new ArrayList<ServiceEntity>();
			Map<String, Object> queryDeleteMap = new HashMap<String, Object>();
			queryDeleteMap.put("id_in", ids);
			List<ServiceEntity> serviceDelTempList = serviceService.getListByCondition(queryDeleteMap);
			if (serviceDelTempList != null && serviceDelTempList.size() > 0) {
				for (ServiceEntity service : serviceDelTempList) {
					service.setDeleted(1);
					serviceDelList.add(service);
				}
				boolean flag = serviceService.saveList(serviceDelTempList);
				if (flag) {
					result = "success";
					des = "删除成功";
				}
			}

			// 根据服务项目id，查询已绑定护理计划的服务项目，并将这些项目改回
			StringBuilder serviceIdsSb = new StringBuilder();
			Map<String, Object> queryMap = new HashMap<String, Object>();
			queryMap.put("serviceId_in", ids);
			List<NursingPlanServiceEntity> nursingPlanList = nursingPlanServiceService.getListByCondition(queryMap);
			if (nursingPlanList != null && nursingPlanList.size() > 0) {
				for (NursingPlanServiceEntity nursingPlan : nursingPlanList) {
					serviceIdsSb.append(nursingPlan.getServiceId() + ",");
				}
				// 根据id查询服务项目列表，取出服务项目名称,改回字段装状态
				String serviceIds = serviceIdsSb.toString();
				if (!"".equals(serviceIds)) {
					serviceIds = serviceIds.replaceAll(",,", ",");
					serviceIds = serviceIds.substring(0, serviceIds.length() - 1);
					Map<String, Object> queryNotDeleteMap = new HashMap<String, Object>();
					queryNotDeleteMap.put("id_in", serviceIds);
					List<ServiceEntity> serviceList = serviceService.getListByCondition(queryNotDeleteMap);
					if (serviceList != null && serviceList.size() > 0) {
						List<ServiceEntity> serviceNotDelList = new ArrayList<ServiceEntity>();
						StringBuilder serviceName = new StringBuilder();
						for (ServiceEntity service : serviceList) {
							serviceName.append(service.getName() + "、");
							service.setDeleted(0);
							serviceNotDelList.add(service);
						}
						serviceService.saveList(serviceNotDelList);
						serviceName.append("绑定了护理计划，无法删除！");
						des = serviceName.toString();
					}
				}
			}

		}
		j.setResult(result);
		j.setDes(des);
		return j;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handler")
	@ResponseBody
	public String query(HttpServletRequest request, HttpServletResponse response) {
		String msg = "";
		try {
			String reqmsg = request.getParameter("reqmsg");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return msg;
			}
			String action = (String) reqParams.get("action");
			String rep = serviceHandler.doHandler(1, action, reqmsg, request, response);
			msg = new String(rep.getBytes("utf-8"), "iso-8859-1");
		} catch (Exception e) {
			logger.error(e.toString());
		}

		return msg;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handlercontent")
	public void queryApp(HttpServletRequest request, HttpServletResponse response) {
		try {
			InputStream is = request.getInputStream();
			byte[] bis = IOUtils.toByteArray(is);
			String reqmsg = new String(bis, "UTF-8");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return;
			}
			String action = (String) reqParams.get("action");
			String rep = serviceHandler.doHandler(1, action, reqmsg, request, response);
			OutputStream os = response.getOutputStream();
			os.write(rep.toString().getBytes("UTF-8"));
		} catch (Exception e) {
			logger.error(e.toString());
		}
	}
}
