package fsk.controller.site;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.framework.system.common.entity.dataDic.DataDicEntity;
import com.framework.system.common.entity.json.AjaxJson;
import com.framework.system.common.entity.module.ModuleEntity;
import com.framework.system.common.service.SystemService;
import com.framework.system.common.service.dataDic.DataDicService;
import com.framework.system.common.tools.Datetools;
import com.framework.system.db.query.PageList;
import com.framework.system.util.JsonUtil;

import fsk.entity.employee.EmployeeEntity;
import fsk.entity.site.SiteEntity;
import fsk.entity.siteServiceArea.SiteServiceAreaEntity;
import fsk.handler.site.SiteHandler;
import fsk.handler.softInfo.SoftInfoHandler;
import fsk.service.employee.EmployeeService;
import fsk.service.site.SiteService;
import fsk.service.siteServiceArea.SiteServiceAreaService;

@RequestMapping("/site")
@Controller
public class SiteController {
	private static Logger logger = Logger.getLogger(SiteController.class);
	/**
	 * 处理器
	 */
	private SiteHandler siteHandler = SiteHandler.getInstance();
	/**
	 * 服务类
	 */
	private SiteService siteService = SiteService.getInstance();
	private EmployeeService employeeService = EmployeeService.getInstance();
	private DataDicService dataDicService = DataDicService.getInstance();
	private SiteServiceAreaService siteServiceAreaService = SiteServiceAreaService.getInstance();

	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();
	private SoftInfoHandler softInfoHandler = SoftInfoHandler.getInstance();

	/**
	 * 列表页
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "main")
	public ModelAndView center(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/site/SiteList");
		Integer userId = (Integer) request.getSession().getAttribute("userId");// 登录用户ID
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds, htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("userId", userId);
		return mav;
	}

	/**
	 * 批量删除 ids英文逗号间隔
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "del")
	@ResponseBody
	public AjaxJson del(HttpServletRequest request) {
		AjaxJson j = new AjaxJson();
		String result = "failure";
		String des = "删除失败";
		String ids = request.getParameter("ids");
		if (ids != null && !"".equals(ids)) {
			boolean falg = siteService.del(ids);
			if (falg) {
				result = "success";
				des = "删除成功";
			}
		}
		j.setResult(result);
		j.setDes(des);
		return j;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handler")
	@ResponseBody
	public String query(HttpServletRequest request, HttpServletResponse response) {
		String msg = "";
		try {
			String reqmsg = request.getParameter("reqmsg");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return msg;
			}
			String action = (String) reqParams.get("action");
			String rep = siteHandler.doHandler(1, action, reqmsg, request, response);
			msg = new String(rep.getBytes("utf-8"), "iso-8859-1");
		} catch (Exception e) {
			logger.error(e.toString());
		}

		return msg;
	}

	// 根据姓名获取ID
	@RequestMapping(params = "getId")
	@ResponseBody
	public String getId(String name) {
		String ID = "";
		Map<String, Object> queryMap = new HashMap<String, Object>();
		queryMap.put("name_like", name);
		List<EmployeeEntity> vList = employeeService.getListByCondition(queryMap);
		if (vList != null && vList.size() > 0) {
			for (EmployeeEntity obj : vList) {
				ID = ID + obj.getId() + ",";
				ID = ID.replaceAll(",,", ",");
			}
		}
		if (!"".equals(ID)) {
			ID = ID.substring(0, ID.length() - 1);
		} else {
			ID = "0";
		}

		JSONObject jsonResult = new JSONObject();
		jsonResult.put("ID", ID);

		String json2return = jsonResult.toString();

		try {
			json2return = new String(json2return.getBytes("utf-8"), "iso-8859-1");
		} catch (UnsupportedEncodingException e) {

		}
		return json2return;
	}

	// 根据ID获取姓名
	@RequestMapping(params = "getName")
	@ResponseBody
	public String getName(String id) {
		String name = "";
		Map<String, Object> queryMap = new HashMap<String, Object>();
		queryMap.put("id", id);
		List<EmployeeEntity> vList = employeeService.getListByCondition(queryMap);
		if (vList != null && vList.size() > 0) {
			for (EmployeeEntity obj : vList) {
				name = obj.getName();
			}
		}

		JSONObject jsonResult = new JSONObject();
		jsonResult.put("name", name);

		String json2return = jsonResult.toString();

		try {
			json2return = new String(json2return.getBytes("utf-8"), "iso-8859-1");
		} catch (UnsupportedEncodingException e) {

		}
		return json2return;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handlercontent")
	public void queryApp(HttpServletRequest request, HttpServletResponse response) {
		try {
			InputStream is = request.getInputStream();
			byte[] bis = IOUtils.toByteArray(is);
			String reqmsg = new String(bis, "UTF-8");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return;
			}
			String action = (String) reqParams.get("action");
			String rep = siteHandler.doHandler(1, action, reqmsg, request, response);
			OutputStream os = response.getOutputStream();
			os.write(rep.toString().getBytes("UTF-8"));
		} catch (Exception e) {
			logger.error(e.toString());
		}
	}

	/**
	 * 导出站点信息为 xls 文件
	 * 
	 * @param request
	 * @param response
	 * @param name_inputId
	 * @param mingcheng_input
	 * @param zhandiantype_input
	 * @param quyushen_input
	 * @param quyushi_input
	 * @param quyuqu_input
	 * @param quyujiedao_input
	 */
	@RequestMapping(params = "exportxls")
	public void exportXls(HttpServletRequest request, HttpServletResponse response, String name_inputId,
	        String mingcheng_input, String zhandiantype_input, String quyushen_input, String quyushi_input,
	        String quyuqu_input, String quyujiedao_input) {

		int pageno = 1;
		int pagesize = 10;

		if (mingcheng_input != null && !"".equals(mingcheng_input)) {
			try {
				byte source[] = mingcheng_input.getBytes("iso8859-1");
				mingcheng_input = new String(source, "UTF-8");
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
		}
		if (zhandiantype_input != null && !"".equals(zhandiantype_input)) {
			try {
				byte source[] = zhandiantype_input.getBytes("iso8859-1");
				zhandiantype_input = new String(source, "UTF-8");
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
		}
		if (quyushen_input != null && !"".equals(quyushen_input)) {
			try {
				byte source[] = quyushen_input.getBytes("iso8859-1");
				quyushen_input = new String(source, "UTF-8");
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
		}
		if (quyushi_input != null && !"".equals(quyushi_input)) {
			try {
				byte source[] = quyushi_input.getBytes("iso8859-1");
				quyushi_input = new String(source, "UTF-8");
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
		}
		if (quyuqu_input != null && !"".equals(quyuqu_input)) {
			try {
				byte source[] = quyuqu_input.getBytes("iso8859-1");
				quyuqu_input = new String(source, "UTF-8");
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
		}
		if (quyujiedao_input != null && !"".equals(quyujiedao_input)) {
			try {
				byte source[] = quyujiedao_input.getBytes("iso8859-1");
				quyujiedao_input = new String(source, "UTF-8");
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
		}

		Map<String, Object> query = new HashMap<String, Object>();
		if (name_inputId != null && !"".equals(name_inputId)) {
			query.put("masterEmployeeId", name_inputId);
		}
		if (mingcheng_input != null && !"".equals(mingcheng_input)) {
			query.put("name_like", mingcheng_input);
		}
		if (zhandiantype_input != null && !"".equals(zhandiantype_input)) {
			query.put("type", zhandiantype_input);
		}

		String idsString = "";
		if (quyushen_input != null && !quyushen_input.equals("省")) {
			if (quyushi_input != null && !quyushi_input.equals("市")) {
				if (quyuqu_input != null && !quyuqu_input.equals("区")) {
					if (quyujiedao_input != null && !quyujiedao_input.equals("街道")) {
						idsString = quyujiedao_input;
					} else {
						idsString = getSonsByfatherId(quyuqu_input);// 街道级
					}
				} else {
					idsString = getSonsByfatherId(quyushi_input);// 区级
					idsString = getSonsByfatherId(idsString);// 街道级
				}
			} else {
				idsString = getSonsByfatherId(quyushen_input);// 市级
				idsString = getSonsByfatherId(idsString);// 区级
				idsString = getSonsByfatherId(idsString);// 街道级
			}
		} else {
			idsString = "";
		}

		String siteIds = "";
		if (!"".equals(idsString)) {
			Map<String, Object> query2 = new HashMap<String, Object>();
			query2.put("serviceStreetId_in", idsString);
			List<SiteServiceAreaEntity> siteServiceAreaEntity = siteServiceAreaService.getListByCondition(query2);
			if (siteServiceAreaEntity != null && siteServiceAreaEntity.size() > 0) {
				for (int i = 0; i < siteServiceAreaEntity.size(); i++) {
					siteIds += siteServiceAreaEntity.get(i).getSiteId() + ",";
					siteIds = siteIds.replaceAll(",,", ",");
				}
				if (!"".equals(siteIds)) {
					siteIds = siteIds.substring(0, siteIds.length() - 1);
				}
			}
		}

		if (!"".equals(siteIds)) {
			query.put("id_in", siteIds);
		}

		query = systemService.addDataRuleByRoles("SiteEntity", query, request);
		List<SiteEntity> sizeList = siteService.getListByCondition(query);
		int pageListSize = 0;
		if (sizeList != null && sizeList.size() > 0) {
			pageListSize = sizeList.size();
		}
		PageList siteEntityTemp = siteService.getListByCondition(query, null, 1, pageListSize + 1, true, true, true,
		        true, true, false, true,false);
		List<SiteEntity> siteEntity = new ArrayList<SiteEntity>();
		if (siteEntityTemp != null) {
			if (siteEntityTemp.getResultList() != null && siteEntityTemp.getResultList().size() > 0) {
				for (Object obj : siteEntityTemp.getResultList()) {
					if (obj != null) {
						SiteEntity steEntity = (SiteEntity) obj;
						siteEntity.add(steEntity);
					}
				}
			}
		}

		List<DataDicEntity> dataDicfwqyEntity = null;
		String fwjiedao = "";

		try {
			String filepath = request.getSession().getServletContext().getRealPath("/view/source");
			File file = new File(filepath, "站点信息导出模板.xls");

			HSSFWorkbook workbook2003 = null;
			if (file.exists()) {
				try {
					workbook2003 = new HSSFWorkbook(new FileInputStream(file));
				} catch (Exception e) {
					e.printStackTrace();
				}
				HSSFSheet sheet = workbook2003.getSheet("Sheet1");
				if (siteEntity != null && siteEntity.size() > 0) {
					for (int i = 0; i < siteEntity.size(); i++) {
						HSSFRow row = sheet.createRow(i + 1);
						// 开始创建单元格并赋值

						HSSFCell nameCell = row.createCell(0);
						if (siteEntity.get(i).getName() == null) {
							nameCell.setCellValue("无");// 名称
						} else {
							nameCell.setCellValue(siteEntity.get(i).getName());// 名称
						}

						HSSFCell zhanzhangCell = row.createCell(1);
						if (siteEntity.get(i).getMasterEmployee() == null) {
							zhanzhangCell.setCellValue("无");// 站长
						} else {
							zhanzhangCell.setCellValue(siteEntity.get(i).getMasterEmployee().getName() == null ? "无"
							        : siteEntity.get(i).getMasterEmployee().getName());// 站长
						}

						HSSFCell siteAddressCell = row.createCell(2);
						if (siteEntity.get(i).getProvince() == null) {
							siteAddressCell.setCellValue("无");// 站点地址
						} else {
							siteAddressCell.setCellValue(siteEntity.get(i).getProvince().getName() + ","
							        + siteEntity.get(i).getCity().getName() + ","
							        + siteEntity.get(i).getArea().getName() + ","
							        + siteEntity.get(i).getStreet().getName() + ","
							        + (siteEntity.get(i).getAddress() == null ? "无" : siteEntity.get(i).getAddress()));// 站点地址
						}

						HSSFCell lianxidianhuaCell = row.createCell(3);
						if (siteEntity.get(i).getContactTel() == null) {
							lianxidianhuaCell.setCellValue("无");// 联系电话
						} else {
							lianxidianhuaCell.setCellValue(siteEntity.get(i).getContactTel());// 联系电话
						}

						HSSFCell fuwuquyuCell = row.createCell(4);
						if (siteEntity.get(i).getDataDicList() == null) {
							fuwuquyuCell.setCellValue("无");// 服务区域
						} else {
							dataDicfwqyEntity = siteEntity.get(i).getDataDicList();
							if (dataDicfwqyEntity != null && dataDicfwqyEntity.size() > 0) {
								for (int j = 0; j < dataDicfwqyEntity.size(); j++) {
									fwjiedao += dataDicfwqyEntity.get(j).getName() + ",";
									fwjiedao = fwjiedao.replaceAll(",,", ",");
								}
								if (!"".equals(fwjiedao)) {
									fwjiedao = fwjiedao.substring(0, fwjiedao.length() - 1);
									fuwuquyuCell.setCellValue(fwjiedao);// 服务区域
								} else {
									fuwuquyuCell.setCellValue("无");// 服务区域
								}
							} else {
								fuwuquyuCell.setCellValue("无");// 服务区域
							}
						}
						fwjiedao = "";

						HSSFCell zhandianleibieCell = row.createCell(5);
						if (siteEntity.get(i).getType() == null) {
							zhandianleibieCell.setCellValue("无");// 站点类别
						} else {
							zhandianleibieCell.setCellValue(siteEntity.get(i).getType());// 站点类别
						}

					}
				}
				response.setContentType("application/octet-stream");
				String time = Datetools.getCurrentDate();
				time = time.substring(0, 4) + "_" + time.substring(4, 6) + "_" + time.substring(6, 8) + " "
				        + time.substring(8, 10) + "." + time.substring(10, 12) + "." + time.substring(12, 14);
				response.addHeader("Content-Disposition", "attachment; filename=siteInformation_" + time + ".xls");
				OutputStream os = response.getOutputStream();
				workbook2003.write(os);
			}
		} catch (Exception e) {

		}
	}

	/**
	 * 根据数据字典ID查询子节点list
	 * 
	 * @return 子节点list
	 */
	public String getSonsByfatherId(String id) {
		String sonIds = "";
		if (id == null || id == "") {
			return sonIds;
		}
		Map<String, Object> query = new HashMap<String, Object>();
		if (id != null && !"".equals(id)) {
			query.put("parentId_in", id);
		}
		List<Object> objects = dataDicService.getListByCondition(query);
		if (objects != null && objects.size() > 0) {
			for (Object obj : objects) {
				DataDicEntity dataDicEntity = (DataDicEntity) obj;
				if (dataDicEntity != null) {
					sonIds += dataDicEntity.getId() + ",";
					sonIds = sonIds.replaceAll(",,", ",");
				}
			}
			if (!"".equals(sonIds)) {
				sonIds = sonIds.substring(0, sonIds.length() - 1);
			}
		}
		return sonIds;
	}

}
