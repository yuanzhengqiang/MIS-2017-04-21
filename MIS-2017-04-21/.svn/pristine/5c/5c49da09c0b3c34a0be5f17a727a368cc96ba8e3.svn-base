package fsk.thread;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.framework.system.common.entity.role.RoleEntity;
import com.framework.system.common.entity.userRole.UserRoleEntity;
import com.framework.system.common.service.role.RoleService;
import com.framework.system.common.service.userRole.UserRoleService;

import fsk.entity.employee.EmployeeEntity;
import fsk.entity.employeeDistribution.EmployeeDistributionEntity;
import fsk.entity.nursingPlan.NursingPlanEntity;
import fsk.entity.nursingPlanService.NursingPlanServiceEntity;
import fsk.entity.older.OlderEntity;
import fsk.entity.service.ServiceEntity;
import fsk.entity.serviceEmployee.ServiceEmployeeEntity;
import fsk.entity.serviceLog.ServiceLogEntity;
import fsk.entity.serviceTask.ServiceTaskEntity;
import fsk.entity.serviceTaskService.ServiceTaskServiceEntity;
import fsk.entity.site.SiteEntity;
import fsk.entity.siteEmployee.SiteEmployeeEntity;
import fsk.service.employee.EmployeeService;
import fsk.service.nursingPlan.NursingPlanService;
import fsk.service.nursingPlanService.NursingPlanServiceService;
import fsk.service.serviceEmployee.ServiceEmployeeService;
import fsk.service.serviceLog.ServiceLogService;
import fsk.service.serviceTask.ServiceTaskService;
import fsk.service.serviceTaskService.ServiceTaskServiceService;
import fsk.service.site.SiteService;
import fsk.service.siteEmployee.SiteEmployeeService;

public class CreatServiceTaskThread extends Thread {
	private static Logger logger = Logger.getLogger(CreatServiceTaskThread.class);
	private static NursingPlanService nursingPlanService = NursingPlanService.getInstance();
	private static NursingPlanServiceService nursingPlanServiceService = NursingPlanServiceService.getInstance();
	private static SimpleDateFormat formaterymdhms = new SimpleDateFormat("yyyyMMddHHmmss");
	private static SimpleDateFormat formaterymd = new SimpleDateFormat("yyyyMMdd");
	private static SimpleDateFormat formaterDay = new SimpleDateFormat("dd");
	private static SimpleDateFormat formaterym = new SimpleDateFormat("yyyyMM");
	private ServiceTaskService serviceTaskService = ServiceTaskService.getInstance();
	private static SiteService siteService = SiteService.getInstance();
	private static SiteEmployeeService siteEmployeeService = SiteEmployeeService.getInstance();
	private static ServiceLogService serviceLogService = ServiceLogService.getInstance();
	private static ServiceTaskServiceService serviceTaskServiceService = ServiceTaskServiceService.getInstance();
	private static EmployeeService employeeService = EmployeeService.getInstance();
	private static UserRoleService userRoleService = UserRoleService.getInstance();
	private static RoleService roleService = RoleService.getInstance();
	private static ServiceEmployeeService serviceEmployeeService = ServiceEmployeeService.getInstance();

	public void run() {
		try {
			Thread.sleep(15 * 1000);
		} catch (InterruptedException e) {
			logger.debug(e);
		}
		logger.debug("自动生成服务工单线程开启...");

		while (true) {
			try {
				Date curDate = new Date();
				logger.debug("开始自动生成服务工单...");
				// 获得当前时间的日期
				String dayOfToday = formaterDay.format(curDate);
				// 获得当前时间的星期
				int dayOfWeek = getDayOfWeek();
				// 当前时间为23号或者周三时，生成服务工单
				if ("23".equals(dayOfToday) || dayOfWeek == 4) {
					// 查询并 遍历所有的护理计划
					List<NursingPlanEntity> NursingPlanList = nursingPlanService.getListByCondition(null, null, true,
					        true, true);
					if (NursingPlanList != null && NursingPlanList.size() > 0) {
						for (NursingPlanEntity nursingPlan : NursingPlanList) {
							Integer olderId = nursingPlan.getOlderId();
							OlderEntity older = nursingPlan.getOlder();

							if (nursingPlan.getNursingPlanServiceList() != null
							        && nursingPlan.getNursingPlanServiceList().size() > 0 && older != null) {
								// 根据护理计划的id查NursingPlanService
								Map<String, Object> queryNursingPlanServiceMap = new HashMap<String, Object>();
								queryNursingPlanServiceMap.put("nursingPlanId", nursingPlan.getId());
								List<NursingPlanServiceEntity> nursingPlanServiceList = nursingPlanServiceService
								        .getListByCondition(queryNursingPlanServiceMap, null, true, true, true);
								if (nursingPlanServiceList != null && nursingPlanServiceList.size() > 0) {

									// 遍历护理计划服务项，判断是不是生成工单
									for (NursingPlanServiceEntity nursingPlanService : nursingPlanServiceList) {
										boolean createTask = createTask(nursingPlanService, dayOfToday, dayOfWeek,
										        nursingPlan);
										// 医保来源和单价
										BigDecimal price = null;
										Integer serviceId = nursingPlanService.getServiceId();
										ServiceEntity sevice = nursingPlanService.getService();
										if (sevice != null) {
											if (nursingPlanService.getHealthInsurance() != null) {
												if (1 == nursingPlanService.getHealthInsurance().intValue()) {
													price = sevice.getMedicalPrice();
												} else {
													price = sevice.getMarketPrice();
												}
											}
										}
										// 今日需要生成工单，且员工分配列表不为空时生成工单
										if (createTask && nursingPlanService.getEmployeeDistributionList() != null
										        && nursingPlanService.getEmployeeDistributionList().size() > 0
										        && sevice != null) {
											for (EmployeeDistributionEntity employeeDistribution : nursingPlanService
											        .getEmployeeDistributionList()) {
												Integer serviceNum = employeeDistribution.getEmployeeServiceNum();
												// 查站点名
												Integer siteId = 0;
												String siteName = "无站点信息";
												Integer chargeEmployeeId = employeeDistribution.getChargeEmployeeId();
												Map<String, Object> queryMapSite = new HashMap<String, Object>();
												queryMapSite.put("employeeId", chargeEmployeeId);
												List<SiteEmployeeEntity> siteEmployeeList = siteEmployeeService
												        .getListByCondition(queryMapSite);
												if (siteEmployeeList != null && siteEmployeeList.size() > 0) {
													SiteEmployeeEntity entity = siteEmployeeList.get(0);
													siteId = entity.getSiteId();
													if (siteId != 0) {
														SiteEntity site = siteService.getById(siteId);
														if (site != null) {
															siteName = site.getName();
														}

													}
												}
												String executionDate = employeeDistribution.getExecutionDate();
												// 负责人
												Integer ChargeEmployeeId = employeeDistribution.getChargeEmployeeId();
												EmployeeEntity ChargeEmployee = null;
												if (ChargeEmployeeId != null) {
													ChargeEmployee = employeeService.getById(ChargeEmployeeId);
												}
												String[] date = null;
												if (executionDate != null) {
													date = executionDate.split(",");
												}
												if (serviceNum != null && ChargeEmployee != null) {
													for (int i = 0; i < serviceNum.intValue(); i++) {
														// 保存工单
														// 解析预计服务时间
														String serviceExpectTime = null;
														if (date.length >= i) {
															String time = date[i];
															serviceExpectTime = createExpectTime(time);
														}
														String saveTime = formaterymdhms.format(curDate);
														ServiceTaskEntity newServiceTask = new ServiceTaskEntity();
														newServiceTask.setServiceCode(createNum());// 服务编号
														newServiceTask.setOlderId(olderId);// 服务老人ID
														newServiceTask.setOlderMemberNum(older.getMemberNum());// 服务老人会员号
														newServiceTask.setOlderName(older.getName());// 服务老人姓名
														newServiceTask.setOlderBirthdate(older.getBirthdate());// 服务老人出生日期
														newServiceTask.setServiceAreaId(older.getServiceAreaId());// 服务老人所属区县
														newServiceTask.setServiceStreetId(older.getServiceStreetId());// 服务老人所属街道
														newServiceTask.setContactName(nursingPlan.getContactName());// 联系人
														newServiceTask.setContactTel(nursingPlan.getContactTel());// 联系电话
														newServiceTask.setAddress(nursingPlan.getServiceAddress());// 服务地址
														newServiceTask.setSiteId(siteId);// 站点id
														newServiceTask.setSiteName(siteName);// 站点名
														newServiceTask.setStatus(2);// 工单状态
														newServiceTask.setPrice(price);// 价格
														newServiceTask.setHealthInsurance(nursingPlanService
														        .getHealthInsurance());// 来源
														newServiceTask.setAddPerson("系统添加");// 添加人
														newServiceTask.setAddType("系统工单");// 添加方式
														newServiceTask.setHasPay("N");// 是否付款默认否
														newServiceTask.setAddTime(saveTime);// 添加时间
														newServiceTask.setServiceExpectTime(serviceExpectTime);// 预计服务时间
														newServiceTask.setChargeEmployeeId(ChargeEmployee.getId());
														boolean saveCheck = serviceTaskService.save(newServiceTask);
														if (saveCheck) {
															// 保存工单日志
															Integer id = newServiceTask.getId();// 保存工单后得到id
															ServiceLogEntity serviceLog = new ServiceLogEntity();
															serviceLog.setServiceTaskId(id);
															serviceLog.setCreateTime(saveTime);
															serviceLog.setCreatePerson("系统添加");
															serviceLog.setLog("系统自动新增了工单");
															serviceLog.setType("新增工单");
															serviceLogService.save(serviceLog);
															// 更新护理计划的最新工单执行月份
															if (nursingPlanService.getPeriod().intValue() == 1) {
																// 按月生成的工单
																nursingPlanService
																        .setLastCreatetaskTime(getNextMonth());
															} else if (nursingPlanService.getPeriod().intValue() == 2) {
																// 按周生成的工单
																nursingPlanService
																        .setLastCreatetaskTime(getNextWeekDay());
															}
															nursingPlanServiceService.save(nursingPlanService);
															// 保存serviceTaskService关联表
															ServiceTaskServiceEntity serviceTaskService = new ServiceTaskServiceEntity();
															serviceTaskService.setServiceTaskId(id);
															serviceTaskService.setServiceId(serviceId);
															serviceTaskService.setServiceChilds(nursingPlanService
															        .getServiceChilds());
															serviceTaskService
															        .setExpectedServiceTime(nursingPlanService
															                .getExpectedServiceTime() + "分钟");
															serviceTaskServiceService.save(serviceTaskService);
															// 保存serviceEmployee关联表
															// 保存负责人关联信息
															ServiceEmployeeEntity serviceEmployee = new ServiceEmployeeEntity();
															String roleNames = getRoleNames(ChargeEmployee.getId());
															serviceEmployee.setEmployeeId(ChargeEmployee.getId());
															serviceEmployee.setName(ChargeEmployee.getName());
															serviceEmployee.setEmployeeCode(ChargeEmployee
															        .getIndexNum());
															serviceEmployee.setRole(roleNames);
															serviceEmployee.setType(1);
															serviceEmployee.setServiceTaskId(id);
															serviceEmployeeService.save(serviceEmployee);
															// 保存参与人关联信息
															String particiinfo = employeeDistribution
															        .getPartakeEmployeeName();
															if (particiinfo != null && !"".equals(particiinfo)
															        && !"|||".equals(particiinfo)) {
																String[] ids = particiinfo.split("\\|\\|\\|");
																String idses = ids[1];
																String[] empids = idses.split(",");
																for (int j = 0; j < empids.length; j++) {
																	Integer employeeIds = Integer.parseInt(empids[j]);
																	ServiceEmployeeEntity serviceEmployeeot = new ServiceEmployeeEntity();
																	String roleNamesot = getRoleNames(employeeIds);
																	EmployeeEntity employeeoy = employeeService
																	        .getById(employeeIds);
																	serviceEmployeeot.setEmployeeId(employeeIds);
																	if (employeeoy != null) {
																		serviceEmployeeot.setName(employeeoy.getName());
																		serviceEmployeeot.setEmployeeCode(employeeoy
																		        .getIndexNum());
																	}
																	serviceEmployeeot.setRole(roleNamesot);
																	serviceEmployeeot.setType(2);
																	serviceEmployeeot.setServiceTaskId(id);
																	serviceEmployeeService.save(serviceEmployeeot);
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}

						}
					}
				}
				// 每小时执行一次
				Thread.sleep(60 * 60 * 1000);
			} catch (InterruptedException e) {
			} catch (NullPointerException e1) {

			}
		}
	}

	/**
	 * 返回工单预计服务时间
	 * 
	 * @param time
	 * @return
	 */
	private String createExpectTime(String time) {
		String expectTime = null;
		if (time != null) {
			if (time.contains("号")) {
				time = time.replace("号", "");
				if (time.length() == 1) {
					time = "0" + time;
				}
				expectTime = getNextMonth() + time + "000000";
			} else if (time.contains("周")) {
				time = time.replace("周", "");
				expectTime = getNextWeek(time);
			}
		}
		return expectTime;
	}

	/**
	 * 返回下周日期
	 * 
	 * @param time
	 * @return
	 */
	private String getNextWeek(String time) {
		String expectTime = null;
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.WEEK_OF_MONTH, 1);
		cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
		if ("一".equals(time)) {
			// 默认为周一不做处理
		} else if ("二".equals(time)) {
			cal.set(Calendar.DAY_OF_YEAR, cal.get(Calendar.DAY_OF_YEAR) + 1);
		} else if ("三".equals(time)) {
			cal.set(Calendar.DAY_OF_YEAR, cal.get(Calendar.DAY_OF_YEAR) + 2);
		} else if ("四".equals(time)) {
			cal.set(Calendar.DAY_OF_YEAR, cal.get(Calendar.DAY_OF_YEAR) + 3);
		} else if ("五".equals(time)) {
			cal.set(Calendar.DAY_OF_YEAR, cal.get(Calendar.DAY_OF_YEAR) + 4);
		} else if ("六".equals(time)) {
			cal.set(Calendar.DAY_OF_YEAR, cal.get(Calendar.DAY_OF_YEAR) + 5);
		} else if ("日".equals(time)) {
			cal.set(Calendar.DAY_OF_YEAR, cal.get(Calendar.DAY_OF_YEAR) + 6);
		}
		Date date = cal.getTime();
		expectTime = formaterymd.format(date) + "000000";
		return expectTime;
	}

	/**
	 * 根据护理计划服务项以及当前时间判断是否生成工单
	 * 
	 * @param nursingPlanService
	 * @param dayOfToday
	 * @param dayOfWeek
	 * @return
	 */
	private boolean createTask(NursingPlanServiceEntity nursingPlanService, String dayOfToday, int dayOfWeek,
	        NursingPlanEntity nursingPlan) {
		boolean flag = false;
		Integer priod = nursingPlanService.getPeriod();
		if (priod != null) {
			// 服务按月生成今天为23号或服务按周生成且今天是周三则生成工单
			if (priod.intValue() == 1 && "23".equals(dayOfToday)) {
				// 按月
				boolean flagcreate = false;// 默认未生成
				if (nursingPlanService.getLastCreatetaskTime() != null) {
					String lastMonth = nursingPlanService.getLastCreatetaskTime();
					if (lastMonth.equals(getNextMonth())) {
						flagcreate = true;// 若已经生成则置为true
					}
				}
				if (!flagcreate) {
					if (nursingPlan.getStatus() != null) {
						// 当前为有效状态，下个月仍然处在有效期内
						if (nursingPlan.getStatus() == 2) {
							if (nursingPlan.getEndDate() != null && nursingPlan.getStartDate() != null) {
								try {
									Integer time = Integer.parseInt(nursingPlan.getEndDate().substring(0, 6));
									Integer time2 = Integer.parseInt(getNextMonth());
									Integer time3 = Integer.parseInt(nursingPlan.getStartDate().substring(0, 6));
									if (time.intValue() >= time2.intValue() && time3.intValue() <= time2.intValue()) {
										flag = true;
									}
								} catch (NumberFormatException e) {
									logger.debug("生成工单线程时间转换出错!" + e);
									flag = false;
								}

							}
						} else if (nursingPlan.getStatus() == 3) {
							// 当前无效，下个月开始有效
							try {
								Integer time = Integer.parseInt(nursingPlan.getStartDate().substring(0, 6));
								Integer time2 = Integer.parseInt(getNextMonth());
								if (time.intValue() == time2.intValue()) {
									flag = true;
								}
							} catch (NumberFormatException e) {
								logger.debug("生成工单线程时间转换出错!" + e);
								flag = false;
							}
						}
					}
				}
			} else if (priod.intValue() == 2 && dayOfWeek == 4) {
				// 按周
				// 护理计划处于有效状态
				if (nursingPlan.getStatus() != null && nursingPlan.getStatus().intValue() == 2) {
					String nextWeek = getNextWeekDay();
					String lastCreateTime = nursingPlanService.getLastCreatetaskTime();
					// 尚未生成工单或生成的工单不是下周的
					if (lastCreateTime == null || !nextWeek.equals(lastCreateTime)) {
						flag = true;
					}
				}

			}
		}
		return flag;
	}

	/**
	 * 返回下个月的年月日 补0六位
	 * 
	 * @return
	 */
	public static String getNextMonthFirst() {
		String str = "";
		Calendar lastDate = Calendar.getInstance();
		lastDate.add(Calendar.MONTH, 1);// 减一个月
		lastDate.set(Calendar.DATE, 1);// 把日期设置为当月第一天
		str = formaterymd.format(lastDate.getTime());
		return str = str + "000000";

	}

	/**
	 * 返回下个月的年月
	 * 
	 * @return
	 */
	public static String getNextMonth() {
		String str = "";
		Calendar lastDate = Calendar.getInstance();
		lastDate.add(Calendar.MONTH, 1);// 减一个月
		lastDate.set(Calendar.DATE, 1);// 把日期设置为当月第一天
		str = formaterym.format(lastDate.getTime());
		return str;

	}

	/**
	 * 返回两个日期的时间差
	 * 
	 * @param smdate
	 * @param bdate
	 * @return
	 */
	public static int daysBetween(String smdate, String bdate) {
		Calendar cal = Calendar.getInstance();
		long time1 = cal.getTimeInMillis();
		try {
			cal.setTime(formaterymdhms.parse(smdate));
			cal.setTime(formaterymdhms.parse(bdate));
		} catch (ParseException e) {
			e.printStackTrace();
		}
		long time2 = cal.getTimeInMillis();
		long between_days = (time2 - time1) / (1000 * 3600 * 24);
		between_days = between_days + 1;
		return Integer.parseInt(String.valueOf(between_days));
	}

	/**
	 * 生成服务工单编号
	 * 
	 * @return 返回格式：FW+14位当前时间+4位顺序码
	 */
	public String createNum() {
		String numTemp = "FW" + formaterymd.format(new Date());
		String num = "";
		Map<String, Object> mapVlue = new HashMap<String, Object>();

		Map<String, Object> queryMapService = new HashMap<String, Object>();
		queryMapService.put("serviceCode_like", numTemp);
		List<ServiceTaskEntity> serviceTasklist = serviceTaskService.getListByCondition(queryMapService);
		if (serviceTasklist != null && serviceTasklist.size() > 0) {
			for (ServiceTaskEntity entiry : serviceTasklist) {
				String code = entiry.getServiceCode();
				code = code.substring(10, 14);
				mapVlue.put(code, "yes");
			}
		}
		for (int i = 1; i < 9999; i++) {
			if (i < 10) {
				num = "000" + String.valueOf(i);
			} else if (i >= 10 && i < 100) {
				num = "00" + String.valueOf(i);
			} else if (i >= 100 && i < 1000) {
				num = "0" + String.valueOf(i);
			} else {
				num = String.valueOf(i);
			}
			if (mapVlue.get(num) == null) {
				numTemp = numTemp + num;
				break;
			}
		}
		return numTemp;
	}

	/**
	 * 根据员工ID返回角色名称
	 * 
	 * @param id
	 * @return
	 */
	public String getRoleNames(int id) {
		String roleNames = "";
		EmployeeEntity employee = employeeService.getById(id);
		if (employee != null) {
			Integer userId = employee.getUserId();
			if (userId != null) {
				Map<String, Object> queryMapUser = new HashMap<String, Object>();
				queryMapUser.put("userId", userId);
				List<UserRoleEntity> userRoleList = userRoleService.getListByCondition(queryMapUser);
				if (userRoleList != null && userRoleList.size() > 0) {
					String roleIds = "";
					for (UserRoleEntity entityUser : userRoleList) {
						roleIds = roleIds + entityUser.getRoleId() + ",";
					}
					if (!"".equals(roleIds)) {
						roleIds = roleIds.replaceAll(",,", ",");
						roleIds = roleIds.substring(0, roleIds.length() - 1);
					}
					if (!"".equals(roleIds)) {
						Map<String, Object> queryMapRole = new HashMap<String, Object>();
						queryMapRole.put("id_in", roleIds);
						List<Object> roleList = roleService.getListByCondition(queryMapRole);
						if (roleList != null && roleList.size() > 0) {
							for (Object enrurt : roleList) {
								RoleEntity roleentity = (RoleEntity) enrurt;
								roleNames = roleNames + roleentity.getName() + ",";
							}
						}
						if (!"".equals(roleNames)) {
							roleNames = roleNames.replaceAll(",,", ",");
							roleNames = roleNames.substring(0, roleNames.length() - 1);
						}
					}
				}
			}
		}
		return roleNames;
	}

	/**
	 * 返回下周周三的时间
	 * 
	 * @return
	 */
	public String getNextWeekDay() {
		Calendar calendar = Calendar.getInstance();
		calendar.set(Calendar.DAY_OF_YEAR, calendar.get(Calendar.DAY_OF_YEAR) + 7);
		Date today = calendar.getTime();
		String result = formaterymd.format(today);
		return result;
	}

	/**
	 * 返回当前日期为周几
	 * 
	 * @return
	 */
	public int getDayOfWeek() {
		Calendar cal = Calendar.getInstance();
		cal.setTime(new Date());
		return cal.get(Calendar.DAY_OF_WEEK);
	}
}
