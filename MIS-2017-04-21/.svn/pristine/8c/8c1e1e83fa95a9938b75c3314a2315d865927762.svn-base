package fsk.handler;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.common.entity.dataDic.DataDicEntity;
import com.framework.system.common.service.dataDic.DataDicService;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.query.PageList;

import fsk.entity.assessmentTask.AssessmentTaskEntity;
import fsk.entity.dev.DevEntity;
import fsk.entity.devAlarm.DevAlarmEntity;
import fsk.entity.employee.EmployeeEntity;
import fsk.entity.healthAssessment.HealthAssessmentEntity;
import fsk.entity.nursingPlan.NursingPlanEntity;
import fsk.entity.nursingPlanService.NursingPlanServiceEntity;
import fsk.entity.older.OlderEntity;
import fsk.entity.service.ServiceEntity;
import fsk.entity.serviceLog.ServiceLogEntity;
import fsk.entity.serviceTask.ServiceTaskEntity;
import fsk.entity.serviceTaskService.ServiceTaskServiceEntity;
import fsk.entity.site.SiteEntity;
import fsk.service.assessmentTask.AssessmentTaskService;
import fsk.service.dev.DevService;
import fsk.service.devAlarm.DevAlarmService;
import fsk.service.employee.EmployeeService;
import fsk.service.healthAssessment.HealthAssessmentService;
import fsk.service.nursingPlan.NursingPlanService;
import fsk.service.nursingPlanService.NursingPlanServiceService;
import fsk.service.older.OlderService;
import fsk.service.service.ServiceService;
import fsk.service.serviceLog.ServiceLogService;
import fsk.service.serviceTask.ServiceTaskService;
import fsk.service.serviceTaskService.ServiceTaskServiceService;
import fsk.service.site.SiteService;

public class showCountHanler {
	private static DataDicService dataDicService = DataDicService.getInstance();
	private static OlderService olderService = OlderService.getInstance();
	private static SiteService siteService = SiteService.getInstance();
	private static EmployeeService employeeService = EmployeeService.getInstance();
	private static ServiceTaskService serviceTaskService = ServiceTaskService.getInstance();
	private static HealthAssessmentService healthAssessmentService = HealthAssessmentService.getInstance();
	private static AssessmentTaskService assessmentTaskService = AssessmentTaskService.getInstance();
	private static NursingPlanService nursingPlanService = NursingPlanService.getInstance();
	private static NursingPlanServiceService nursingPlanServiceService = NursingPlanServiceService.getInstance();
	private static ServiceService serviceService = ServiceService.getInstance();
	private static DevService devService = DevService.getInstance();
	private static DevAlarmService devAlarmService = DevAlarmService.getInstance();
	private static ServiceLogService serviceLogService = ServiceLogService.getInstance();
	private static ServiceTaskServiceService serviceTaskServiceService = ServiceTaskServiceService.getInstance();
	private static SimpleDateFormat dataformater = new SimpleDateFormat("yyyy");
	private static Logger logger = Logger.getLogger(showCountHanler.class);

	public static String handler(Map reqParams) {
		String action = (String) reqParams.get("action");
		String returninfo = null;
		if ("QUERY_PERSON_INFO_REQUEST".equals(action)) {
			returninfo = personCount(reqParams);
		} else if ("QUERY_BUSINESS_TASK_INFO_REQUEST".equals(action)) {
			returninfo = taskCount(reqParams);
		} else if ("QUERY_DEV_MAP_INFO_REQUEST".equals(action)) {
			returninfo = devCount();
		} else if ("QUERY_SERVICE_REMIND_INFO_REQUEST".equals(action)) {
			returninfo = remindCount();
		}
		return returninfo;
	}

	private static String remindCount() {
		String contentjson = null;
		JSONObject respon = new JSONObject();
		contentjson = getremindCount();
		if (contentjson != null) {
			respon.put("action", "QUERY_SERVICE_REMIND_INFO_RESPONSE");
			respon.put("result", "100");
			respon.put("des", "success");
			respon.put("content", contentjson);
		} else {
			respon.put("action", "QUERY_SERVICE_REMIND_INFO_RESPONSE");
			respon.put("result", "200");
			respon.put("des", "failure");
		}
		return respon.toString();
	}

	private static String devCount() {
		String contentjson = null;
		JSONObject respon = new JSONObject();
		contentjson = getDevCount();
		if (contentjson != null) {
			respon.put("action", "QUERY_DEV_MAP_INFO_RESPONSE");
			respon.put("result", "100");
			respon.put("des", "success");
			respon.put("content", contentjson);
		} else {
			respon.put("action", "QUERY_DEV_MAP_INFO_RESPONSE");
			respon.put("result", "200");
			respon.put("des", "failure");
		}
		return respon.toString();
	}

	private static String personCount(Map reqParams) {
		String contentjson = null;
		JSONObject content = (JSONObject) reqParams.get("content");
		JSONObject respon = new JSONObject();
		if (content != null) {
			String province = (String) content.get("province");
			String city = (String) content.get("city");
			String area = (String) content.get("area");
			String street = (String) content.get("street");
			String streetIds = getSiteIds(province, city, area, street);// 街道id
			contentjson = getOlderCount(streetIds);
			if (contentjson != null) {
				respon.put("action", "QUERY_PERSON_INFO_RESPONSE");
				respon.put("result", "100");
				respon.put("des", "success");
				respon.put("content", contentjson);
			} else {
				respon.put("action", "QUERY_PERSON_INFO_RESPONSE");
				respon.put("result", "200");
				respon.put("des", "failure");
			}
		}
		return respon.toString();
	}

	private static String taskCount(Map reqParams) {
		String contentjson = null;
		JSONObject content = (JSONObject) reqParams.get("content");
		JSONObject respon = new JSONObject();
		if (content != null) {
			String year = (String) content.get("year");
			String month = (String) content.get("month");
			contentjson = gettaskCount(year, month);
		}
		if (contentjson != null) {
			respon.put("action", "QUERY_BUSINESS_TASK_INFO_RESPONSE");
			respon.put("result", "100");
			respon.put("des", "success");
			respon.put("content", contentjson);
		} else {
			respon.put("action", "QUERY_BUSINESS_TASK_INFO_RESPONSE");
			respon.put("result", "200");
			respon.put("des", "failure");
		}
		return respon.toString();
	}

	private static String getremindCount() {
		String rep = null;
		JSONObject jsoncontent = new JSONObject();
		JSONArray logarr = new JSONArray();
		try {
			// 将服务项目放入map中
			Map<String, Object> mapservice = new HashMap<String, Object>();// 服务信息存入map
			List<ServiceEntity> serviceList = serviceService.getListByCondition(null);
			if (serviceList != null && serviceList.size() > 0) {
				for (ServiceEntity entity : serviceList) {
					Integer id = entity.getId();// 服务项目id
					String name = entity.getName();// 服务项目类型
					mapservice.put(String.valueOf(id), name);// 将服务项目id和类型保存在map中
				}
			}
			// 按时间排序得到最新50个工单
			String logids = "";
			String serviceTsakIds = "";
			OrderVO orderVO = new OrderVO();
			orderVO.setName("createTime");
			orderVO.setOrderType("desc");
			List<OrderVO> orderList = new ArrayList<OrderVO>();
			orderList.add(orderVO);
			PageList logList = serviceLogService.getListByCondition(null, orderList, 1, 50, false);
			if (logList != null) {
				if (logList.getResultList() != null && logList.getResultList().size() > 0) {
					for (Object obj : logList.getResultList()) {
						ServiceLogEntity entity = (ServiceLogEntity) obj;
						logids = logids + entity.getId() + ",";// 日志id
						serviceTsakIds = serviceTsakIds + entity.getServiceTaskId() + ",";// 工单id
					}
					if (!"".equals(logids)) {
						logids = logids.replaceAll(",,", ",");
						logids = logids.substring(0, logids.length() - 1);
					}
					if (!"".equals(serviceTsakIds)) {
						serviceTsakIds = serviceTsakIds.replaceAll(",,", ",");
						serviceTsakIds = serviceTsakIds.substring(0, serviceTsakIds.length() - 1);
					}
				}

			}
			// 将服务工单id和服务id保存在map中
			if (!"".equals(serviceTsakIds)) {
				Map<String, Object> queryservice = new HashMap<String, Object>();
				queryservice.put("serviceTaskId_in", serviceTsakIds);
				List<ServiceTaskServiceEntity> servicetaskserviceList = serviceTaskServiceService.getListByCondition(queryservice);
				if (servicetaskserviceList != null && servicetaskserviceList.size() > 0) {
					for (ServiceTaskServiceEntity entity : servicetaskserviceList) {
						if (entity.getServiceTaskId() != null && entity.getServiceId() != null) {
							String servicetaskid = "servicetaskid_" + entity.getServiceTaskId();
							String serviceId = String.valueOf(entity.getServiceId());
							mapservice.put(servicetaskid, serviceId);
						}
					}
				}
				// 根据服务工单id获得老人的id
				List<OlderEntity> olderList = olderService.getListByCondition(null);
				if (olderList != null && olderList.size() > 0) {
					for (OlderEntity older : olderList) {
						String id = String.valueOf(older.getId());
						String name = older.getName();
						if (name != null) {
							mapservice.put("oldername_" + id, name);
						}
					}
				}
				// 工单和老人的关联信息
				Map<String, Object> mapOlder = new HashMap<String, Object>();
				mapOlder.put("id_in", serviceTsakIds);
				List<ServiceTaskEntity> serlist = serviceTaskService.getListByCondition(mapOlder);
				if (serlist != null && serlist.size() > 0) {
					for (ServiceTaskEntity entity : serlist) {
						if (entity.getOlderId() != null) {
							Integer id = entity.getId();
							String olderid = String.valueOf(entity.getOlderId());
							String key = "oldername_" + olderid;
							if (mapservice.get(key) != null) {
								mapservice.put("serviceoldername_" + id, mapservice.get(key));
							}
						}

					}
				}
			}

			// 遍历logList
			if (logList != null) {
				if (logList.getResultList() != null && logList.getResultList().size() > 0) {
					for (Object obj : logList.getResultList()) {
						JSONObject json = new JSONObject();
						ServiceLogEntity entity = (ServiceLogEntity) obj;
						json.put("create_time", entity.getCreateTime());
						json.put("service_person", entity.getCreatePerson());
						Integer servicetaskId = entity.getServiceTaskId();
						if (servicetaskId != null) {
							String key = "serviceoldername_" + servicetaskId;
							if (mapservice.get(key) != null) {
								json.put("older_name", String.valueOf(mapservice.get(key)));
							}
						}
						Integer servicetaskid = entity.getServiceTaskId();
						String key = "servicetaskid_" + servicetaskid;
						if (mapservice.get(key) != null) {
							Object keyserviceobj = mapservice.get(key);
							String keyservice = String.valueOf(keyserviceobj);
							if (mapservice.get(keyservice) != null) {
								json.put("service_name", String.valueOf(mapservice.get(keyservice)));
							}
						}
						json.put("log", entity.getLog());
						logarr.add(json);
					}
				}
			}
			jsoncontent.put("serviceloglist", logarr.toString());
			rep = jsoncontent.toString();
		} catch (Exception e) {
			logger.debug(e);
		}
		return rep;
	}

	private static String getDevCount() {
		String rep = null;
		Integer anhubao_num = 0;
		Integer location_num = 0;
		JSONArray devarr = new JSONArray();// devlist集合
		JSONObject jsoncontent = new JSONObject();// 返回集合
		try {
			// 报警信息放入map中，
			Map<String, Object> alarmInfo = new HashMap<String, Object>();
			Map<String, Object> queryAlarm = new HashMap<String, Object>();
			String twpAgoTime = getTwoTime();
			queryAlarm.put("alarmTime_ge", twpAgoTime);
			queryAlarm.put("alarmStatus", 0);
			List<DevAlarmEntity> alarmList = devAlarmService.getListByCondition(queryAlarm);
			if (alarmList != null && alarmList.size() > 0) {
				for (DevAlarmEntity entity : alarmList) {
					if (entity.getDevId() != null) {
						String id = String.valueOf(entity.getDevId());
						alarmInfo.put(id, String.valueOf(entity.getAlarmStatus()));
					}
				}
			}
			// 老人会员号信息放入map中
			Map<String, Object> olderInfo = new HashMap<String, Object>();
			List<OlderEntity> olderList = olderService.getListByCondition(null);
			if (olderList != null && olderList.size() > 0) {
				for (OlderEntity entity : olderList) {
					if (entity.getMemberNum() != null) {
						String id = String.valueOf(entity.getId());
						olderInfo.put(id, entity.getName() + "," + entity.getMemberNum());
					}
				}
			}
			// 统计设备的数量
			List<DevEntity> devList = devService.getListByCondition(null);
			if (devList != null && devList.size() > 0) {
				for (DevEntity entity : devList) {
					JSONObject json = new JSONObject();
					String devid = String.valueOf(entity.getId());
					if (alarmInfo.get(devid) != null) {
						// 设备类型分类统计
						Integer type = entity.getType();
						if (type != null) {
							if (type == 1) {
								location_num++;
							}
							if (type == 2) {
								anhubao_num++;
							}
							json.put("type", String.valueOf(type));
						}
						if (entity.getPosLong() != null) {
							String poslong = String.valueOf(entity.getPosLong());
							json.put("pos_long", poslong);
						}
						if (entity.getPosLat() != null) {
							String poslat = String.valueOf(entity.getPosLat());
							json.put("pos_lat", poslat);
						}
						Integer olderId = entity.getOlderId();
						if (olderId != null) {
							String idtemp = String.valueOf(olderId);
							if (olderInfo.get(idtemp) != null) {
								Object olderinfoobj = olderInfo.get(idtemp);
								String olderinfo = String.valueOf(olderinfoobj);
								String name = olderinfo.substring(0, olderinfo.indexOf(","));
								String num = olderinfo.substring(olderinfo.indexOf(",") + 1, olderinfo.length());
								json.put("older_id", String.valueOf(olderId));
								json.put("older_name", name);
								json.put("older_member_num", num);
							} else {
								json.put("older_id", String.valueOf(olderId));
								json.put("older_name", "未知");
								json.put("older_member_num", "未知");
							}
						} else {
							json.put("older_id", "0");
							json.put("older_name", "未知");
							json.put("older_member_num", "未知");
						}
						json.put("alarm", "Y");
						json.put("alarmStatus", alarmInfo.get(devid));
						devarr.add(json);// 装入集合
					}
				}

				for (DevEntity entity : devList) {
					JSONObject json = new JSONObject();
					String devid = String.valueOf(entity.getId());
					if (alarmInfo.get(devid) == null) {
						// 设备类型分类统计
						Integer type = entity.getType();
						if (type != null) {
							if (type == 1) {
								location_num++;
							}
							if (type == 2) {
								anhubao_num++;
							}
							json.put("type", String.valueOf(type));
						}
						if (entity.getPosLong() != null) {
							String poslong = String.valueOf(entity.getPosLong());
							json.put("pos_long", poslong);
						}
						if (entity.getPosLat() != null) {
							String poslat = String.valueOf(entity.getPosLat());
							json.put("pos_lat", poslat);
						}
						Integer olderId = entity.getOlderId();
						if (olderId != null) {
							String idtemp = String.valueOf(olderId);
							if (olderInfo.get(idtemp) != null) {
								Object olderinfoobj = olderInfo.get(idtemp);
								String olderinfo = String.valueOf(olderinfoobj);
								String name = olderinfo.substring(0, olderinfo.indexOf(","));
								String num = olderinfo.substring(olderinfo.indexOf(",") + 1, olderinfo.length());
								json.put("older_id", String.valueOf(olderId));
								json.put("older_name", name);
								json.put("older_member_num", num);
							} else {
								json.put("older_id", String.valueOf(olderId));
								json.put("older_name", "未知");
								json.put("older_member_num", "未知");
							}
						} else {
							json.put("older_id", "0");
							json.put("older_name", "未知");
							json.put("older_member_num", "未知");
						}
						json.put("alarm", "N");
						json.put("alarmStatus", alarmInfo.get(devid));
						devarr.add(json);// 装入集合
					}

				}
			}
			jsoncontent.put("anhubao_num", String.valueOf(anhubao_num));
			jsoncontent.put("location_num", String.valueOf(location_num));
			jsoncontent.put("devlist", devarr.toString());
			rep = jsoncontent.toString();
		} catch (Exception e) {
			logger.debug(e);
		}
		return rep;
	}

	private static String gettaskCount(String year, String month) {
		if (month != null) {
			if (month.length() == 1) {
				month = "0" + month;
			}
		}
		String rep = null;
		String startTime = "";
		String endTime = "";
		JSONObject json = new JSONObject();
		if (year != null && month == null) {// 指定年份
			startTime = year + "0101000001";
			endTime = year + "1231235959";
		}
		if (year != null && month != null) {// 指定月份
			startTime = year + month + "01000001";
			endTime = year + month + "31235959";
		}
		Integer service_task_num = 0;
		Integer health_assessment_num = 0;
		Integer nursing_plan_num = 0;
		Integer service_type1 = 0;
		Integer service_type2 = 0;
		Integer service_type3 = 0;
		Integer service_type4 = 0;
		Integer service_type5 = 0;
		Integer market_type1 = 0;
		Integer market_type2 = 0;
		Integer assessment_type1 = 0;
		Integer assessment_type2 = 0;
		Integer assessment_type3 = 0;
		try {
			// 服务工单统计
			Map<String, Object> queryTask = new HashMap<String, Object>();
			if (!"".equals(startTime) && !"".equals(endTime)) {
				queryTask.put("serviceEndTime_ge", startTime);
				queryTask.put("serviceEndTime_le", endTime);
			}
			List<ServiceTaskEntity> taskList = serviceTaskService.getListByCondition(queryTask);
			if (taskList != null && taskList.size() > 0) {
				service_task_num = taskList.size();// 工单总数
				for (ServiceTaskEntity entity : taskList) {// 统计工单来源
					Integer healthIns = entity.getHealthInsurance();
					if (healthIns != null) {
						if (healthIns.intValue() == 1) {
							market_type1++;
						}
						if (healthIns.intValue() == 2) {
							market_type2++;
						}
					}
				}
			}
			// 健康评估统计
			String ids = "";// 健康评估id
			Map<String, Object> queryHealthytask = new HashMap<String, Object>();
			if (!"".equals(startTime) && !"".equals(endTime)) {
				queryHealthytask.put("auditPassTime_ge", startTime);
				queryHealthytask.put("auditPassTime_le", endTime);
			}

			List<AssessmentTaskEntity> assList = assessmentTaskService.getListByCondition(queryHealthytask);
			if (assList != null && assList.size() > 0) {
				for (AssessmentTaskEntity entity : assList) {
					ids = ids + entity.getHealthAssessmentId() + ",";
				}
				if (!"".equals(ids)) {
					ids = ids.replaceAll(",,", ",");
					ids = ids.substring(0, ids.length() - 1);
				}
			}
			if (!"".equals(ids)) {
				Map<String, Object> queryHealthy = new HashMap<String, Object>();
				if (!"".equals(startTime) && !"".equals(endTime)) {
					queryHealthy.put("id_in", ids);
				}
				List<HealthAssessmentEntity> healList = healthAssessmentService.getListByCondition(queryHealthy);
				if (healList != null && healList.size() > 0) {
					health_assessment_num = healList.size();
					for (HealthAssessmentEntity entity : healList) {
						Integer type = entity.getType();
						if (type != null) {
							if (type == 1) {
								assessment_type1++;
							}
							if (type == 2) {
								assessment_type2++;
							}
							if (type == 3) {
								assessment_type3++;
							}
						}
					}
				}
			}

			// 护理计划统计
			// 取出所有的护理计划-按时间筛选
			String nuringIds = "";
			Map<String, Object> querynursing = new HashMap<String, Object>();
			// querynursing.put("status", 2);
			List<NursingPlanEntity> nursingList = nursingPlanService.getListByCondition(querynursing);
			if (nursingList != null && nursingList.size() > 0) {
				for (NursingPlanEntity entity : nursingList) {
					String nurseStart = entity.getStartDate();
					String nueseEnd = entity.getEndDate();
					if ("".equals(startTime) && "".equals(endTime)) {
						nursing_plan_num++;// 总数加1
						nuringIds = nuringIds + entity.getId() + ",";// 得到护理计划id
					} else {
						if (nurseStart != null && nueseEnd != null) {
							boolean flag = doCount(nurseStart, nueseEnd, startTime, endTime);// 判断是不是统计
							if (flag && entity.getStatus() != null) {
								if (entity.getStatus().intValue() == 2) {
									nursing_plan_num++;// 总数加1
									nuringIds = nuringIds + entity.getId() + ",";// 得到护理计划id
								}
							}
						}
					}
				}
			}
			// 将护理类型放入map中,便于统计
			Map<String, Object> servicemap = new HashMap<String, Object>();
			Map<String, Object> queryservice = new HashMap<String, Object>();
			List<ServiceEntity> serviceList = serviceService.getListByCondition(queryservice);
			if (serviceList != null && serviceList.size() > 0) {
				for (ServiceEntity entity : serviceList) {
					Integer id = entity.getId();// 服务项目id
					Integer typeId = entity.getTypeId();
					if (typeId != null) {
						DataDicEntity dataentity = dataDicService.getById(typeId);
						if (dataentity != null) {
							String name = dataentity.getName();// 服务项目类型
							servicemap.put(String.valueOf(id), name);// 将服务项目id和类型保存在map中
						}
					}
				}
			}

			// 统计护理类型
			if (!"".equals(nuringIds)) {
				nuringIds = nuringIds.replaceAll(",,", ",");
				nuringIds = nuringIds.substring(0, nuringIds.length() - 1);
				Map<String, Object> querynuring = new HashMap<String, Object>();
				querynuring.put("nursingPlanId_in", nuringIds);
				List<NursingPlanServiceEntity> nursingPlanList = nursingPlanServiceService.getListByCondition(querynuring);
				if (nursingPlanList != null && nursingPlanList.size() > 0) {
					for (NursingPlanServiceEntity entity : nursingPlanList) {
						String serviceid = String.valueOf(entity.getServiceId());
						if (servicemap.get(serviceid) != null) {
							Object nameobj = servicemap.get(serviceid);
							String nameservice = String.valueOf(nameobj);
							if ("基础护理".equals(nameservice)) {
								service_type1++;
							} else if ("临床护理".equals(nameservice)) {
								service_type2++;
							} else if ("中医康复".equals(nameservice)) {
								service_type3++;
							} else if ("康复训练".equals(nameservice)) {
								service_type4++;
							} else {
								service_type5++;
							}
						} else {
							service_type5++;
						}
					}
				}
			}
			json.put("service_task_num", String.valueOf(service_task_num));
			json.put("health_assessment_num", String.valueOf(health_assessment_num));
			json.put("nursing_plan_num", String.valueOf(nursing_plan_num));
			json.put("service_type1", String.valueOf(service_type1));
			json.put("service_type2", String.valueOf(service_type2));
			json.put("service_type3", String.valueOf(service_type3));
			json.put("service_type4", String.valueOf(service_type4));
			json.put("service_type5", String.valueOf(service_type5));
			json.put("market_type1", String.valueOf(market_type1));
			json.put("market_type2", String.valueOf(market_type2));
			json.put("assessment_type1", String.valueOf(assessment_type1));
			json.put("assessment_type2", String.valueOf(assessment_type2));
			json.put("assessment_type3", String.valueOf(assessment_type3));
			rep = json.toString();
		} catch (Exception e) {
			logger.error(e.toString());
		}
		return rep;
	}

	private static String getOlderCount(String streetIds) {
		String rep = null;

		try {
			JSONObject json = new JSONObject();
			if ("no".equals(streetIds)) {// 无地址信息时都为0
				json.put("older_num", "0");
				json.put("site_num", "0");
				json.put("service_employee_num", "0");
				json.put("older_age1", "0");
				json.put("older_age2", "0");
				json.put("older_age3", "0");
				json.put("older_age4", "0");
				json.put("older_age5", "0");
				json.put("older_sex1", "0");
				json.put("older_sex2", "0");
				json.put("older_source1", "0");
				json.put("older_source2", "0");
			} else {//
				Integer tolder_num = 0;
				Integer tsite_num = 0;
				Integer tservice_employee_num = 0;
				Integer tolder_age1 = 0;
				Integer tolder_age2 = 0;
				Integer tolder_age3 = 0;
				Integer tolder_age4 = 0;
				Integer tolder_age5 = 0;
				Integer tolder_sex1 = 0;
				Integer tolder_sex2 = 0;
				Integer tolder_source1 = 0;
				Integer tolder_source2 = 0;
				Map<String, Object> queryOlder = new HashMap<String, Object>();
				if ("".equals(streetIds)) {
					// 默认取全部
				} else {
					queryOlder.put("serviceStreetId_in", streetIds);// 站点id有值按站点
				}
				List<OlderEntity> olderList = olderService.getListByCondition(queryOlder);
				if (olderList != null && olderList.size() > 0) {
					tolder_num = olderList.size();
					for (OlderEntity older : olderList) {
						String birthday = older.getBirthdate();
						// 统计年龄范围
						if (birthday == null || "".equals(birthday)) {
							String birth = older.getIdnumber();
							if (birth != null && !"".equals(birth)) {
								birthday = birth.substring(6, 10);
							}
						}
						if (birthday != null && !"".equals(birthday)) {
							int num = getAgeNum(birthday);
							if (num == 1) {
								tolder_age1++;
							}
							if (num == 2) {
								tolder_age2++;
							}
							if (num == 3) {
								tolder_age3++;
							}
							if (num == 4) {
								tolder_age4++;
							}
							if (num == 5) {
								tolder_age5++;
							}
						}

						// 统计性别
						String xingbie = older.getGender();
						if (xingbie != null) {
							if ("男".equals(xingbie)) {
								tolder_sex1++;
							}
							if ("女".equals(xingbie)) {
								tolder_sex2++;
							}
						}
						// 市场来源统计
						String market = older.getMemberSource();
						if (market != null) {
							if ("医保".equals(market)) {
								tolder_source1++;
							} else {
								tolder_source2++;
							}
						}
					}
				}
				// 站点信息统计
				Map<String, Object> querySite = new HashMap<String, Object>();
				List<SiteEntity> siteList = siteService.getListByCondition(querySite);
				if (siteList != null && siteList.size() > 0) {
					tsite_num = siteList.size();
				}
				// 服务人员数量统计
				Map<String, Object> queryEmp = new HashMap<String, Object>();
				List<EmployeeEntity> empList = employeeService.getListByCondition(queryEmp);
				if (empList != null && empList.size() > 0) {
					tservice_employee_num = empList.size();
				}
				json.put("older_num", String.valueOf(tolder_num));
				json.put("site_num", String.valueOf(tsite_num));
				json.put("service_employee_num", String.valueOf(tservice_employee_num));
				json.put("older_age1", String.valueOf(tolder_age1));
				json.put("older_age2", String.valueOf(tolder_age2));
				json.put("older_age3", String.valueOf(tolder_age3));
				json.put("older_age4", String.valueOf(tolder_age4));
				json.put("older_age5", String.valueOf(tolder_age5));
				json.put("older_sex1", String.valueOf(tolder_sex1));
				json.put("older_sex2", String.valueOf(tolder_sex2));
				json.put("older_source1", String.valueOf(tolder_source1));
				json.put("older_source2", String.valueOf(tolder_source2));
			}
			// 慢性病统计
			JSONObject diseasejson = new JSONObject();
			Map<String, Object> queryDatadic = new HashMap<String, Object>();
			queryDatadic.put("name", "慢性病");
			List<Object> dataList = dataDicService.getListByCondition(queryDatadic);
			if (dataList != null && dataList.size() > 0) {
				DataDicEntity dataDic = (DataDicEntity) dataList.get(0);
				Integer parentId = dataDic.getId();
				Map<String, Object> queryDisease = new LinkedHashMap<String, Object>();
				queryDisease.put("parentId", parentId);
				List<Object> diseaseList = dataDicService.getListByCondition(queryDisease);
				// 将慢性病放入map集合
				if (diseaseList != null && diseaseList.size() > 0) {
					Map<String, Object> diseasemap = new HashMap<String, Object>();
					for (Object obj : diseaseList) {
						DataDicEntity disease = (DataDicEntity) obj;
						String diseaseName = disease.getName();
						diseasemap.put(diseaseName, diseaseName);
					}
					// 遍历慢性病集合。放入统计
					for (Map.Entry<String, Object> entry : diseasemap.entrySet()) {
						String name = entry.getKey();
						Map<String, Object> query = new HashMap<String, Object>();
						query.put("chronicDisease_like", name);
						if ("no".equals(streetIds)) {// 无街道信息之为0
							query.put("serviceStreetId_in", "0");
						} else if ("".equals(streetIds)) {
							// 默认查全部
						} else {
							query.put("serviceStreetId_in", streetIds);
						}
						List<OlderEntity> list = olderService.getListByCondition(query);
						if (list != null && list.size() > 0) {
							String num = String.valueOf(list.size());
							diseasejson.put(name, num);
						} else {
							diseasejson.put(name, "0");
						}
					}
				}

			}
			json.put("diseaseList", diseasejson.toString());
			rep = json.toString();
		} catch (Exception e) {
			logger.error(e.toString());
		}
		return rep;
	}

	private static int getAgeNum(String birthday) {
		int returnNum = 0;
		String curYear = dataformater.format(new Date());
		birthday = birthday.substring(0, 4);
		int cury = Integer.parseInt(curYear);
		int bir = Integer.parseInt(birthday);
		int num = cury - bir;
		if (num > 90) {
			returnNum = 5;
		} else if (num > 80) {
			returnNum = 4;
		} else if (num > 70) {
			returnNum = 3;
		} else if (num >= 60) {
			returnNum = 2;
		} else {
			returnNum = 1;
		}
		return returnNum;
	}

	private static String getSiteIds(String province, String city, String area, String street) {
		String streetIds = "";
		if ((province != null && !"".equals(province)) || (city != null && !"".equals(city)) || (area != null && !"".equals(area))
				|| (street != null && !"".equals(area))) {// 搜索条件不为空
			if (province != null && !"".equals(province) && city != null && !"".equals(city) && area != null && street != null && !"".equals(area)
					&& !"".equals(area)) {// 具体到街道
				Map<String, Object> queryStreet = new HashMap<String, Object>();
				queryStreet.put("id_in", street);
				List<Object> listStreet = dataDicService.getListByCondition(queryStreet);
				if (listStreet != null && listStreet.size() > 0) {
					DataDicEntity entity = (DataDicEntity) listStreet.get(0);
					streetIds = entity.getId() + "";
				} else {
					streetIds = "no";
				}
			}
			if (province != null && !"".equals(province) && city != null && !"".equals(city) && area != null && !"".equals(area)
					&& (street == null || "".equals(street))) {// 具体到区
				String areaId = "";
				// 根据区域名称查id
				Map<String, Object> queryArea = new HashMap<String, Object>();
				queryArea.put("id_in", area);
				List<Object> listStreet = dataDicService.getListByCondition(queryArea);
				if (listStreet != null && listStreet.size() > 0) {
					DataDicEntity entity = (DataDicEntity) listStreet.get(0);
					areaId = entity.getId() + "";
				} else {// 不存在街道信息
					streetIds = "no";
				}
				// 根据区域id查街道id
				if (!"".equals(areaId)) {
					Map<String, Object> queryStreet = new HashMap<String, Object>();
					queryStreet.put("parentId", areaId);
					List<Object> listAreaStreet = dataDicService.getListByCondition(queryStreet);
					if (listAreaStreet != null && listAreaStreet.size() > 0) {
						for (Object obj : listAreaStreet) {
							DataDicEntity entity = (DataDicEntity) obj;
							streetIds = streetIds + entity.getId() + ",";
						}
						if (!"".equals(streetIds)) {
							streetIds = streetIds.replaceAll(",", ",");
							streetIds = streetIds.substring(0, streetIds.length() - 1);
						} else {// 无街道信息
							streetIds = "no";
						}
					} else {
						streetIds = "no";
					}
				}
			}
			if (province != null && !"".equals(province) && city != null && !"".equals(city) && (area == null || "".equals(area))
					&& (street == null || "".equals(street))) {// 具体到市
				// 根据市名称查id
				String cityId = "";
				String areaId = "";
				Map<String, Object> queryCity = new HashMap<String, Object>();
				queryCity.put("id_in", city);
				List<Object> listStreet = dataDicService.getListByCondition(queryCity);
				if (listStreet != null && listStreet.size() > 0) {
					DataDicEntity entity = (DataDicEntity) listStreet.get(0);
					cityId = entity.getId() + "";
				} else {
					streetIds = "no";
				}
				// 根据城市id查区域id
				if (!"".equals(cityId)) {
					Map<String, Object> queryArea = new HashMap<String, Object>();
					queryArea.put("parentId", cityId);
					List<Object> listArea = dataDicService.getListByCondition(queryArea);
					if (listArea != null && listArea.size() > 0) {
						for (Object obj : listArea) {
							DataDicEntity entity = (DataDicEntity) obj;
							areaId = areaId + entity.getId() + ",";
						}
						if (!"".equals(areaId)) {
							areaId = areaId.replaceAll(",", ",");
							areaId = areaId.substring(0, areaId.length() - 1);
						} else {
							streetIds = "no";
						}
					} else {
						streetIds = "no";
					}
				}
				// 根据区域id查街道id
				if (!"".equals(areaId)) {
					Map<String, Object> queryStreet = new HashMap<String, Object>();
					queryStreet.put("parentId_in", areaId);
					List<Object> listAreaStreet = dataDicService.getListByCondition(queryStreet);
					if (listAreaStreet != null && listAreaStreet.size() > 0) {
						for (Object obj : listAreaStreet) {
							DataDicEntity entity = (DataDicEntity) obj;
							streetIds = streetIds + entity.getId() + ",";
						}
						if (!"".equals(streetIds)) {
							streetIds = streetIds.replaceAll(",", ",");
							streetIds = streetIds.substring(0, streetIds.length() - 1);
						} else {// 无街道信息
							streetIds = "no";
						}
					} else {
						streetIds = "no";
					}
				}
			}
			if (province != null && (city == null || "".equals(city)) && (area == null || "".equals(area)) && (street == null || "".equals(street))) {// 具体到省
				// 根据省名查id
				String provinceId = "";
				String cityId = "";
				String areaId = "";
				Map<String, Object> queryProvince = new HashMap<String, Object>();
				queryProvince.put("id_in", province);
				List<Object> listProvince = dataDicService.getListByCondition(queryProvince);
				if (listProvince != null && listProvince.size() > 0) {
					DataDicEntity entity = (DataDicEntity) listProvince.get(0);
					provinceId = entity.getId() + "";
				} else {
					streetIds = "no";
				}
				// 根据省id查市id
				if (!"".equals(provinceId)) {
					Map<String, Object> queryCity = new HashMap<String, Object>();
					queryCity.put("parentId_in", provinceId);
					List<Object> listCity = dataDicService.getListByCondition(queryCity);
					if (listCity != null && listCity.size() > 0) {
						for (Object obj : listCity) {
							DataDicEntity entity = (DataDicEntity) obj;
							cityId = cityId + entity.getId() + ",";
						}
						if (!"".equals(cityId)) {
							cityId = cityId.replaceAll(",", ",");
							cityId = cityId.substring(0, cityId.length() - 1);
						} else {// 无街道信息
							streetIds = "no";
						}
					} else {
						streetIds = "no";
					}
				}
				// 根据市id查区域id
				// 根据城市id查区域id
				if (!"".equals(cityId)) {
					Map<String, Object> queryArea = new HashMap<String, Object>();
					queryArea.put("parentId_in", cityId);
					List<Object> listArea = dataDicService.getListByCondition(queryArea);
					if (listArea != null && listArea.size() > 0) {
						for (Object obj : listArea) {
							DataDicEntity entity = (DataDicEntity) obj;
							areaId = areaId + entity.getId() + ",";
						}
						if (!"".equals(areaId)) {
							areaId = areaId.replaceAll(",", ",");
							areaId = areaId.substring(0, areaId.length() - 1);
						} else {
							streetIds = "no";
						}
					} else {
						streetIds = "no";
					}
				}
				// 根据区域id查街道id
				if (!"".equals(areaId)) {
					Map<String, Object> queryStreet = new HashMap<String, Object>();
					queryStreet.put("parentId_in", areaId);
					List<Object> listAreaStreet = dataDicService.getListByCondition(queryStreet);
					if (listAreaStreet != null && listAreaStreet.size() > 0) {
						for (Object obj : listAreaStreet) {
							DataDicEntity entity = (DataDicEntity) obj;
							streetIds = streetIds + entity.getId() + ",";
						}
						if (!"".equals(streetIds)) {
							streetIds = streetIds.replaceAll(",", ",");
							streetIds = streetIds.substring(0, streetIds.length() - 1);
						} else {// 无街道信息
							streetIds = "no";
						}
					} else {
						streetIds = "no";
					}
				}
			}
		}
		return streetIds;
	}

	// 根据时间判断是不是做统计
	private static boolean doCount(String nurseStart, String nueseEnd, String startTime, String endTime) {
		boolean flag = true;
		if (!"".equals(startTime) && !"".equals(endTime)) {
			long nurseStartlong = Long.parseLong(nurseStart);
			long nueseEndlong = Long.parseLong(nueseEnd);
			long startTimelong = Long.parseLong(startTime);
			long endTimelong = Long.parseLong(endTime);
			// 护理计划开始时间大于查询结束时间或者护理计划结束时间小于查询开始时间，就不统计
			if ((nurseStartlong - endTimelong) > 0 || (nueseEndlong - startTimelong) < 0) {
				flag = false;
			}
		}

		return flag;
	}

	// 两分钟之前的时间
	private static String getTwoTime() {

		Calendar calendar = Calendar.getInstance();
		calendar.set(Calendar.MINUTE, calendar.get(Calendar.MINUTE) - 2);
		SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
		String time = df.format(calendar.getTime());
		return time;
	}
}
