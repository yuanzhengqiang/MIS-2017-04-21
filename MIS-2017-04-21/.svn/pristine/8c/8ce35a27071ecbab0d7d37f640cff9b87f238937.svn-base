package fsk.service.olderAddress;

import java.math.BigDecimal;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import org.apache.log4j.Logger;


import fsk.entity.older.OlderEntity;

import fsk.entity.olderAddress.OlderAddressEntity;
import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;



/**   
 * @Title: Service
 * @Description: 老人地址表服务类
 * @author feng.gu
 * @date 2017-02-08 12:41:57
 * @version V1.0   
 *
 */
public class OlderAddressService {
	   private static Logger logger = Logger.getLogger(OlderAddressService.class);
	   private DBManager dbManager = DBManager.getInstance();
    		
	   private static OlderAddressService olderAddressService;
	   /**
	    * 获取实例	
	    * @return
	    */
	   public static OlderAddressService getInstance(){
		if(olderAddressService==null){
			olderAddressService = new OlderAddressService();
		}
		return olderAddressService;
	   }
	                 	                 				     				     				     				     
				     	 
	   /**
		 * 保存记录
		 * 
		 * @param obj
		 */
		public boolean save(OlderAddressEntity olderAddress) {			
			boolean result =false;
			if(olderAddress!=null){
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					 tx.beginTransaction();					 					 
					 					 				     				     					     //关联信息保存
					     OlderEntity older = olderAddress.getOlder();
						 if(older!=null){						   
							 dbManager.saveNoTransaction(older);
							 olderAddress.setOlderId(older.getId());
						 }						 
				     				     				     					 					 result=dbManager.saveNoTransaction(olderAddress);	
					 tx.commitAndClose();  
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {				    
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  			
			}	
			return result;
		}
		
		/**
		 * 批量保存记录
		 * 
		 * @param list
		 */
		public boolean saveList(List<OlderAddressEntity> olderAddressList) {
			boolean result = false;
			if (olderAddressList != null && olderAddressList.size() > 0) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 
					for(OlderAddressEntity olderAddress:olderAddressList){
						if(olderAddress!=null){												  								 
								 									 					                 								     								         //关联信息保存
									     OlderEntity older = olderAddress.getOlder();
										 if(older!=null){						   
											 dbManager.saveNoTransaction(older);
											 olderAddress.setOlderId(older.getId());
										 }									 
								     								     								     								 								 result=dbManager.saveNoTransaction(olderAddress);								 			
						}	
					}
				    tx.commitAndClose(); 
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
				/**
		 * 根据id读取记录
		 * 
		 * @param id
		 *            主键
		 * @param obj
		 */
		public OlderAddressEntity getById(Integer id) {
			OlderAddressEntity obj = null;
			if (id != null) {
				obj = (OlderAddressEntity) dbManager.getById(id, OlderAddressEntity.class);			
			}
			return obj;
		}
				
		
		/**
		 * 根据id读取记录
		 * @param id 主键
		 		             	                 				     		 * @param olderShow 是否查询关联信息
				     				     				     		 		 * @param obj
		 */
		public OlderAddressEntity getById(Integer id,Boolean olderShow) {
			OlderAddressEntity obj = null;
			if (id!=null) {
				obj = (OlderAddressEntity)dbManager.getById(id, OlderAddressEntity.class);
									 	                 				     				        //查询关联内容
						if(olderShow!=null&&olderShow.booleanValue()&&obj!=null&&obj.getOlderId()!=null&&obj.getOlderId()>0){
							OlderEntity older = (OlderEntity)dbManager.getById(obj.getOlderId(), OlderEntity.class);
							obj.setOlder(older);        	  	  
						}
				     				     				     				   			}
			return obj;
		}
		
		/**
		 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
		 * @param queryMap 查询条件集合		
		 * @return
		 */
	public List<OlderAddressEntity> getListByCondition(Map<String,Object> queryMap) {
		    List<OlderAddressEntity> returnlist = null;
			List<Object> list = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap);  			
			list = dbManager.queryByCondition(OlderAddressEntity.class,qc);    
            if(list!=null&&list.size()>0){
               returnlist = new ArrayList<OlderAddressEntity>();
               for (Object obj:list) {           
                 returnlist.add((OlderAddressEntity)obj);
               }
            }       					
			return returnlist;
		}
		
		
		/**
		 * 根据条件查询记录集合（不分页 带排序 带级联查询）
		 * @param queryMap 查询条件集合
		 * @param orderList 排序条件集合
		 		             	                 				     		 * @param olderShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		 * @return
		 */
		public List<OlderAddressEntity> getListByCondition(Map<String,Object> queryMap,List<OrderVO> orderList,Boolean olderShow) {
			List<OlderAddressEntity> returnlist = null;
			List<Object> list = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap); 
																  						OrderByCondition oc = null;
			if(orderList!=null&&orderList.size()>0){
				for(int i=0;i<orderList.size();i++){
					OrderVO order = orderList.get(i);
					String orderColumnt =null;
					String orderType=null;
					if(order.getName()!=null&&!"".equals(order.getName())){
						orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
						orderType = order.getOrderType();
						if(orderType==null||"".equals(orderType.trim())){
							orderType=OrderByCondition.desc;
						}
						if(i==0){
							oc = new OrderByCondition(orderColumnt,orderType);
						}else{
							oc.orderByCondition(new OrderByCondition(orderColumnt,orderType));
						}					
					}
					
				}
			}			
            list = dbManager.queryByConditions(OlderAddressEntity.class,qc,oc);
                                    int a=0;
            					             	                 				     				     if(olderShow!=null&&olderShow.booleanValue()){
						a++;
					 }
				     				     				     		    		                if(a>0&&list!=null&&list.size()>0){
				List<Object> result = new ArrayList<Object>();
				for(int i=0;i<list.size();i++){
					OlderAddressEntity obj = (OlderAddressEntity)list.get(i);
										 	                 				     				        //查询关联内容
						if(olderShow!=null&&olderShow.booleanValue()&&obj!=null&&obj.getOlderId()!=null&&obj.getOlderId()>0){
							OlderEntity older = (OlderEntity)dbManager.getById(obj.getOlderId(), OlderEntity.class);
							obj.setOlder(older);        	  	  
						}
				     				     				     				    					result.add(obj);					
				}
				list=result;			
		}	
					if(list!=null&&list.size()>0){
               returnlist = new ArrayList<OlderAddressEntity>();
               for (Object obj:list) {           
                 returnlist.add((OlderAddressEntity)obj);
               }
            }       					
			return returnlist;
		}
		
		/**
		 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
		 * @param queryMap 查询条件集合
		 * @param pageno 查询页码
		 * @param pagesize 查询每页记录条数		
		 * @return
		 */
		public PageList getListByCondition(Map<String,Object> queryMap,int pageno,int pagesize) {
			PageList pagelist = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap); 
																  			            pagelist = dbManager.queryByCondition(OlderAddressEntity.class,qc,pageno,pagesize);	                      			
			return pagelist;
		}
		
		/**
		 * 根据条件查询记录集合（带分页 带排序 带级联查询）
		 * @param queryMap 查询条件集合
		 * @param orderList 排序条件集合
		 * @param pageno 查询页码
		 * @param pagesize 查询每页记录条数
		 		             	                 				     		 * @param olderShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		 * @return
		 */
		public PageList getListByCondition(Map<String,Object> queryMap,List<OrderVO> orderList,int pageno,int pagesize,Boolean olderShow) {
			PageList pagelist = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap); 
																  						OrderByCondition oc = null;
			if(orderList!=null&&orderList.size()>0){
				for(int i=0;i<orderList.size();i++){
					OrderVO order = orderList.get(i);
					String orderColumnt =null;
					String orderType=null;
					if(order.getName()!=null&&!"".equals(order.getName())){
						orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
						orderType = order.getOrderType();
						if(orderType==null||"".equals(orderType.trim())){
							orderType=OrderByCondition.desc;
						}
						if(i==0){
							oc = new OrderByCondition(orderColumnt,orderType);
						}else{
							oc.orderByCondition(new OrderByCondition(orderColumnt,orderType));
						}					
					}
					
				}
			}		
			//数据权限
			List<QueryCondition> dataRuleQclist = null;
			List<Map<String, Object>> dataRuleMapList = (List<Map<String, Object>>)queryMap.get("dataRuleMapList");
			if(dataRuleMapList!=null&&dataRuleMapList.size()>0){
				dataRuleQclist = new ArrayList<QueryCondition>();
				for(Map<String, Object> dataRuleMap:dataRuleMapList){
					QueryCondition dataRuleQc = changeMapToQc(dataRuleMap);	
					dataRuleQclist.add(dataRuleQc);
				}
			}
            pagelist = dbManager.queryByConditions(OlderAddressEntity.class,qc,dataRuleQclist,oc,pageno,pagesize);	           
                                    int a=0;
            					             	                 				     				     if(olderShow!=null&&olderShow.booleanValue()){
						a++;
					 }
				     				     				     		    		                if(a>0&&pagelist!=null&&pagelist.getResultList()!=null&&pagelist.getResultList().size()>0){
				List<Object> result = new ArrayList<Object>();
				for(int i=0;i<pagelist.getResultList().size();i++){
					OlderAddressEntity obj = (OlderAddressEntity)pagelist.getResultList().get(i);
										 	                 				     				        //查询关联内容
						if(olderShow!=null&&olderShow.booleanValue()&&obj!=null&&obj.getOlderId()!=null&&obj.getOlderId()>0){
							OlderEntity older = (OlderEntity)dbManager.getById(obj.getOlderId(), OlderEntity.class);
							obj.setOlder(older);        	  	  
						}
				     				     				     				    					result.add(obj);					
				}
				pagelist.setResultList(result);			
		}	
					return pagelist;
		}
		
		/**
		 * 删除记录
		 * 
		 * @param id 主键
		 * @param obj
		 */
		public boolean del(Integer id,Boolean delOlder) {
			boolean result = false;
			if (id !=null&&id>0) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 					
										 	                 				     					    //删除关联信息
						if(delOlder!=null&&delOlder.booleanValue()){	
							OlderAddressEntity olderAddress = (OlderAddressEntity)dbManager.getById(id, OlderAddressEntity.class);
							if(olderAddress!=null&&olderAddress.getOlderId()!=null){
								dbManager.delNoTransaction(olderAddress.getOlderId(), OlderEntity.class);
							}						
						}
				     				     				     										result = dbManager.delNoTransaction(id, OlderAddressEntity.class);
					tx.commitAndClose(); 
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
		/**
		 * 批量删除记录
		 * 
		 * @param ids
		 *            主键 英文逗号间隔
		 * @param obj
		 */
		public boolean del(String ids) {
			boolean result = false;
			if (ids != null && !"".equals(ids.trim())) {
				TransactionManager tx = DbUtils.getTranManager();
				try {
					tx.beginTransaction();
					QueryCondition qc = new QueryCondition(OlderAddressEntity.ID,QueryCondition.in, ids);
					result = dbManager.delByConditionsNoTransaction(OlderAddressEntity.class, qc);
					tx.commitAndClose();
				} catch (Exception e) {
					logger.error("数据库提交失败！");
					logger.error(e);
					result = false;
					try {
						tx.rollbackAndClose();
					} catch (Exception ex) {
						logger.error("数据库回滚失败！");
						logger.error(ex);
					}
				}
			}
			return result;
		}

		/**
		 * 批量条件删除记录
		 * @param queryMap 查询条件集合
		 */
		public boolean delList(Map<String,Object> queryMap,Boolean delOlder) {
			boolean result = false;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap);   
														            						if (qc.getQueryNextCondition()!=null) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 						
										 	                 				     					     //删除关联信息
						if(delOlder!=null&&delOlder.booleanValue()){
							List<Object> list=dbManager.queryByConditionNoTransaction(OlderAddressEntity.class,qc);
							String strIds="";
							if(list!=null&&list.size()>0){
								for(Object obj:list){
									OlderAddressEntity entity=(OlderAddressEntity)obj;
									strIds += entity.getOlderId()+",";
								}
								strIds = strIds.substring(0, strIds.length()-1);
							}
							if(strIds!=null&&!"".equals(strIds)){
								QueryCondition qc1 = new QueryCondition(OlderEntity.ID, QueryCondition.in, strIds);
								dbManager.delByConditionsNoTransaction(OlderEntity.class, qc1);
							}
							
						}
				     				     				     										result = dbManager.delByConditionsNoTransaction(OlderAddressEntity.class,qc);				
					tx.commitAndClose();  
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
	private QueryCondition changeMapToQc(Map<String, Object> queryMap) {	
											Object id=queryMap.get("id");
					Object id_gt=queryMap.get("id_gt");
					Object id_ge=queryMap.get("id_ge");
					Object id_lt=queryMap.get("id_lt");
					Object id_le=queryMap.get("id_le");
					Object id_in=queryMap.get("id_in");
																Object olderId=queryMap.get("olderId");
					Object olderId_gt=queryMap.get("olderId_gt");
					Object olderId_ge=queryMap.get("olderId_ge");
					Object olderId_lt=queryMap.get("olderId_lt");
					Object olderId_le=queryMap.get("olderId_le");
					Object olderId_in=queryMap.get("olderId_in");
																Object addressType=queryMap.get("addressType");
					Object addressType_gt=queryMap.get("addressType_gt");
					Object addressType_ge=queryMap.get("addressType_ge");
					Object addressType_lt=queryMap.get("addressType_lt");
					Object addressType_le=queryMap.get("addressType_le");
					Object addressType_in=queryMap.get("addressType_in");
																Object provinceId=queryMap.get("provinceId");
					Object provinceId_gt=queryMap.get("provinceId_gt");
					Object provinceId_ge=queryMap.get("provinceId_ge");
					Object provinceId_lt=queryMap.get("provinceId_lt");
					Object provinceId_le=queryMap.get("provinceId_le");
					Object provinceId_in=queryMap.get("provinceId_in");
																Object cityId=queryMap.get("cityId");
					Object cityId_gt=queryMap.get("cityId_gt");
					Object cityId_ge=queryMap.get("cityId_ge");
					Object cityId_lt=queryMap.get("cityId_lt");
					Object cityId_le=queryMap.get("cityId_le");
					Object cityId_in=queryMap.get("cityId_in");
																Object areaId=queryMap.get("areaId");
					Object areaId_gt=queryMap.get("areaId_gt");
					Object areaId_ge=queryMap.get("areaId_ge");
					Object areaId_lt=queryMap.get("areaId_lt");
					Object areaId_le=queryMap.get("areaId_le");
					Object areaId_in=queryMap.get("areaId_in");
																					Object address=queryMap.get("address");
					Object address_like=queryMap.get("address_like");
					Object address_isNull=queryMap.get("address_isNull");
					Object address_isNotNull=queryMap.get("address_isNotNull");
					Object address_in=queryMap.get("address_in");
																										Object street=queryMap.get("street");
					Object street_like=queryMap.get("street_like");
					Object street_isNull=queryMap.get("street_isNull");
					Object street_isNotNull=queryMap.get("street_isNotNull");
					Object street_in=queryMap.get("street_in");
																										Object committeeVillage=queryMap.get("committeeVillage");
					Object committeeVillage_like=queryMap.get("committeeVillage_like");
					Object committeeVillage_isNull=queryMap.get("committeeVillage_isNull");
					Object committeeVillage_isNotNull=queryMap.get("committeeVillage_isNotNull");
					Object committeeVillage_in=queryMap.get("committeeVillage_in");
																										Object road=queryMap.get("road");
					Object road_like=queryMap.get("road_like");
					Object road_isNull=queryMap.get("road_isNull");
					Object road_isNotNull=queryMap.get("road_isNotNull");
					Object road_in=queryMap.get("road_in");
																										Object lane=queryMap.get("lane");
					Object lane_like=queryMap.get("lane_like");
					Object lane_isNull=queryMap.get("lane_isNull");
					Object lane_isNotNull=queryMap.get("lane_isNotNull");
					Object lane_in=queryMap.get("lane_in");
																										Object number=queryMap.get("number");
					Object number_like=queryMap.get("number_like");
					Object number_isNull=queryMap.get("number_isNull");
					Object number_isNotNull=queryMap.get("number_isNotNull");
					Object number_in=queryMap.get("number_in");
																										Object room=queryMap.get("room");
					Object room_like=queryMap.get("room_like");
					Object room_isNull=queryMap.get("room_isNull");
					Object room_isNotNull=queryMap.get("room_isNotNull");
					Object room_in=queryMap.get("room_in");
																										Object zipCode=queryMap.get("zipCode");
					Object zipCode_like=queryMap.get("zipCode_like");
					Object zipCode_isNull=queryMap.get("zipCode_isNull");
					Object zipCode_isNotNull=queryMap.get("zipCode_isNotNull");
					Object zipCode_in=queryMap.get("zipCode_in");
												
			

													
			
			QueryCondition qc = new QueryCondition(OlderAddressEntity.ID, QueryCondition.gt, "0");				
												if(id!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ID, QueryCondition.eq, id));}
					if(id_gt!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ID, QueryCondition.gt, id_gt));}
					if(id_ge!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ID, QueryCondition.ge, id_ge));}
					if(id_lt!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ID, QueryCondition.lt, id_lt));}
					if(id_le!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ID, QueryCondition.le, id_le));}
					if(id_in!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ID, QueryCondition.in, id_in));}
																if(olderId!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.OLDER_ID, QueryCondition.eq, olderId));}
					if(olderId_gt!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.OLDER_ID, QueryCondition.gt, olderId_gt));}
					if(olderId_ge!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.OLDER_ID, QueryCondition.ge, olderId_ge));}
					if(olderId_lt!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.OLDER_ID, QueryCondition.lt, olderId_lt));}
					if(olderId_le!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.OLDER_ID, QueryCondition.le, olderId_le));}
					if(olderId_in!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.OLDER_ID, QueryCondition.in, olderId_in));}
																if(addressType!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ADDRESS_TYPE, QueryCondition.eq, addressType));}
					if(addressType_gt!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ADDRESS_TYPE, QueryCondition.gt, addressType_gt));}
					if(addressType_ge!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ADDRESS_TYPE, QueryCondition.ge, addressType_ge));}
					if(addressType_lt!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ADDRESS_TYPE, QueryCondition.lt, addressType_lt));}
					if(addressType_le!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ADDRESS_TYPE, QueryCondition.le, addressType_le));}
					if(addressType_in!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ADDRESS_TYPE, QueryCondition.in, addressType_in));}
																if(provinceId!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.PROVINCE_ID, QueryCondition.eq, provinceId));}
					if(provinceId_gt!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.PROVINCE_ID, QueryCondition.gt, provinceId_gt));}
					if(provinceId_ge!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.PROVINCE_ID, QueryCondition.ge, provinceId_ge));}
					if(provinceId_lt!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.PROVINCE_ID, QueryCondition.lt, provinceId_lt));}
					if(provinceId_le!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.PROVINCE_ID, QueryCondition.le, provinceId_le));}
					if(provinceId_in!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.PROVINCE_ID, QueryCondition.in, provinceId_in));}
																if(cityId!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.CITY_ID, QueryCondition.eq, cityId));}
					if(cityId_gt!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.CITY_ID, QueryCondition.gt, cityId_gt));}
					if(cityId_ge!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.CITY_ID, QueryCondition.ge, cityId_ge));}
					if(cityId_lt!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.CITY_ID, QueryCondition.lt, cityId_lt));}
					if(cityId_le!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.CITY_ID, QueryCondition.le, cityId_le));}
					if(cityId_in!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.CITY_ID, QueryCondition.in, cityId_in));}
																if(areaId!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.AREA_ID, QueryCondition.eq, areaId));}
					if(areaId_gt!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.AREA_ID, QueryCondition.gt, areaId_gt));}
					if(areaId_ge!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.AREA_ID, QueryCondition.ge, areaId_ge));}
					if(areaId_lt!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.AREA_ID, QueryCondition.lt, areaId_lt));}
					if(areaId_le!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.AREA_ID, QueryCondition.le, areaId_le));}
					if(areaId_in!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.AREA_ID, QueryCondition.in, areaId_in));}
															  					if(address!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ADDRESS, QueryCondition.eq, address));}
		            if(address_like!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ADDRESS, QueryCondition.like, address_like));}
		            if(address_isNull!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ADDRESS, QueryCondition.isNull, address_isNull));}
		            if(address_isNotNull!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ADDRESS, QueryCondition.isNotNull, address_isNotNull));}
				    if(address_in!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ADDRESS, QueryCondition.in, address_in));}
				  															  					if(street!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.STREET, QueryCondition.eq, street));}
		            if(street_like!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.STREET, QueryCondition.like, street_like));}
		            if(street_isNull!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.STREET, QueryCondition.isNull, street_isNull));}
		            if(street_isNotNull!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.STREET, QueryCondition.isNotNull, street_isNotNull));}
				    if(street_in!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.STREET, QueryCondition.in, street_in));}
				  															  					if(committeeVillage!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.COMMITTEE_VILLAGE, QueryCondition.eq, committeeVillage));}
		            if(committeeVillage_like!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.COMMITTEE_VILLAGE, QueryCondition.like, committeeVillage_like));}
		            if(committeeVillage_isNull!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.COMMITTEE_VILLAGE, QueryCondition.isNull, committeeVillage_isNull));}
		            if(committeeVillage_isNotNull!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.COMMITTEE_VILLAGE, QueryCondition.isNotNull, committeeVillage_isNotNull));}
				    if(committeeVillage_in!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.COMMITTEE_VILLAGE, QueryCondition.in, committeeVillage_in));}
				  															  					if(road!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ROAD, QueryCondition.eq, road));}
		            if(road_like!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ROAD, QueryCondition.like, road_like));}
		            if(road_isNull!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ROAD, QueryCondition.isNull, road_isNull));}
		            if(road_isNotNull!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ROAD, QueryCondition.isNotNull, road_isNotNull));}
				    if(road_in!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ROAD, QueryCondition.in, road_in));}
				  															  					if(lane!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.LANE, QueryCondition.eq, lane));}
		            if(lane_like!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.LANE, QueryCondition.like, lane_like));}
		            if(lane_isNull!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.LANE, QueryCondition.isNull, lane_isNull));}
		            if(lane_isNotNull!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.LANE, QueryCondition.isNotNull, lane_isNotNull));}
				    if(lane_in!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.LANE, QueryCondition.in, lane_in));}
				  															  					if(number!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.NUMBER, QueryCondition.eq, number));}
		            if(number_like!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.NUMBER, QueryCondition.like, number_like));}
		            if(number_isNull!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.NUMBER, QueryCondition.isNull, number_isNull));}
		            if(number_isNotNull!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.NUMBER, QueryCondition.isNotNull, number_isNotNull));}
				    if(number_in!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.NUMBER, QueryCondition.in, number_in));}
				  															  					if(room!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ROOM, QueryCondition.eq, room));}
		            if(room_like!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ROOM, QueryCondition.like, room_like));}
		            if(room_isNull!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ROOM, QueryCondition.isNull, room_isNull));}
		            if(room_isNotNull!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ROOM, QueryCondition.isNotNull, room_isNotNull));}
				    if(room_in!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ROOM, QueryCondition.in, room_in));}
				  															  					if(zipCode!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ZIP_CODE, QueryCondition.eq, zipCode));}
		            if(zipCode_like!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ZIP_CODE, QueryCondition.like, zipCode_like));}
		            if(zipCode_isNull!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ZIP_CODE, QueryCondition.isNull, zipCode_isNull));}
		            if(zipCode_isNotNull!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ZIP_CODE, QueryCondition.isNotNull, zipCode_isNotNull));}
				    if(zipCode_in!=null){qc.andCondition(new QueryCondition(OlderAddressEntity.ZIP_CODE, QueryCondition.in, zipCode_in));}
				  										return qc; 
	}
		
		
}
