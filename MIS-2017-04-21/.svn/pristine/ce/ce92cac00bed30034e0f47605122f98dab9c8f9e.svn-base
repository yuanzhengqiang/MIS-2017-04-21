package fsk.controller.assessmentTask;

import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.framework.system.common.entity.json.AjaxJson;
import com.framework.system.common.entity.module.ModuleEntity;
import com.framework.system.common.service.SystemService;
import com.framework.system.db.query.PageList;
import com.framework.system.util.JsonUtil;

import fsk.entity.assessmentTask.AssessmentTaskEntity;
import fsk.entity.employee.EmployeeEntity;
import fsk.handler.assessmentTask.AssessmentTaskHandler;
import fsk.service.assessmentTask.AssessmentTaskService;
import fsk.service.employee.EmployeeService;

@RequestMapping("/assessmentTask")
@Controller
public class AssessmentTaskController {
	private static Logger logger = Logger.getLogger(AssessmentTaskController.class);
	private static SimpleDateFormat formater = new SimpleDateFormat("yyyyMMdd");
	/**
	 * 处理器
	 */
	private AssessmentTaskHandler assessmentTaskHandler = AssessmentTaskHandler.getInstance();
	/**
	 * 服务类
	 */
	private AssessmentTaskService assessmentTaskService = AssessmentTaskService.getInstance();
	private static EmployeeService employeeService = EmployeeService.getInstance();
	/**
	 * 系统服务类
	 */
	private SystemService systemService = SystemService.getInstance();

	/**
	 * 列表页
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "main")
	public ModelAndView center(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/assessmentTask/AssessmentTaskList");
		Integer userId = (Integer) request.getSession().getAttribute("userId");// 登录用户ID
		String taskStatus = "";
		String stratTime = "";
		String endTime = "";
		String pgsName = "";
		if (request.getParameter("taskStatus") != null && !request.getParameter("taskStatus").equals("")) {
			taskStatus = request.getParameter("taskStatus");
			if (request.getParameter("stratTime") != null && !request.getParameter("stratTime").equals("")) {
				stratTime = request.getParameter("stratTime");
			}
			if (request.getParameter("endTime") != null && !request.getParameter("endTime").equals("")) {
				endTime = request.getParameter("endTime");
			}
		}
		if (request.getParameter("pgsName") != null && !request.getParameter("pgsName").equals("")) {
			pgsName = request.getParameter("pgsName");
			if (pgsName != null && !pgsName.equals("")) {
				try {
					byte source[] = pgsName.getBytes("iso8859-1");
					pgsName = new String(source, "UTF-8");
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				}
			}
		}
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds, htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("userId", userId);
		mav.addObject("taskStatus", taskStatus);
		mav.addObject("stratTime", stratTime);
		mav.addObject("endTime", endTime);
		mav.addObject("pgsName", pgsName);
		return mav;
	}

	/**
	 * 新增页
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "mainAdd")
	public ModelAndView centerAdd(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/assessmentTask/AssessmentTaskAdd");
		Integer userId = (Integer) request.getSession().getAttribute("userId");// 登录用户ID
		String olderId = request.getParameter("oldid");
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds, htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("olderId", olderId);
		mav.addObject("userId", userId);
		return mav;
	}

	/**
	 * 详情页
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "mainDetails")
	public ModelAndView centerDetails(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("/fsk/assessmentTask/AssessmentTaskDetails");
		String Id = request.getParameter("id");
		Integer userId = (Integer) request.getSession().getAttribute("userId");// 登录用户ID
		// 根据登录角色和当前菜单模块获取要显示的页面模块
		String moduleId = request.getParameter("moduleId");
		String roleIds = (String) request.getSession().getAttribute("roleIds");
		if (roleIds != null && moduleId != null) {
			// 获取需要控制的页面元素
			List<ModuleEntity> htmlModules = systemService.getChildModulesByTwoModuleId(moduleId);
			if (htmlModules != null && htmlModules.size() > 0) {
				for (ModuleEntity module : htmlModules) {
					request.setAttribute(module.getCode() + "_control", "yes");
				}
				// 查询需要控制的页面元素的显示权限
				List<ModuleEntity> modules = systemService.getHTMLModulesByRoleIdsAndModuleId(roleIds, htmlModules);
				if (modules != null && modules.size() > 0) {
					for (ModuleEntity module : modules) {
						request.setAttribute(module.getCode() + "_show", "yes");
					}
				}
			}
		}
		mav.addObject("userId", userId);
		mav.addObject("Id", Id);
		return mav;
	}

	/**
	 * 批量删除 ids英文逗号间隔
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(params = "del")
	@ResponseBody
	public AjaxJson del(HttpServletRequest request) {
		AjaxJson j = new AjaxJson();
		String result = "failure";
		String des = "删除失败";
		String ids = request.getParameter("ids");
		if (ids != null && !"".equals(ids)) {
			boolean falg = assessmentTaskService.del(ids);
			if (falg) {
				result = "success";
				des = "删除成功";
				Object userId = request.getSession().getAttribute("userId");
				String ip = request.getRemoteAddr();
				logger.debug("删除记录：userId为" + userId + "的用户删除了id为" + ids + "的assessmentTask," + "来自ip: " + ip);
			}
		}
		j.setResult(result);
		j.setDes(des);
		return j;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handler")
	@ResponseBody
	public String query(HttpServletRequest request, HttpServletResponse response) {
		String msg = "";
		try {
			String reqmsg = request.getParameter("reqmsg");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return msg;
			}
			String action = (String) reqParams.get("action");
			String rep = assessmentTaskHandler.doHandler(1, action, reqmsg, request, response);
			msg = new String(rep.getBytes("utf-8"), "iso-8859-1");
		} catch (Exception e) {
			logger.error(e.toString());
		}

		return msg;
	}

	/**
	 * 消息体格式请求处理
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(params = "handlercontent")
	public void queryApp(HttpServletRequest request, HttpServletResponse response) {
		try {
			InputStream is = request.getInputStream();
			byte[] bis = IOUtils.toByteArray(is);
			String reqmsg = new String(bis, "UTF-8");
			Map reqParams = JsonUtil.getMap4Json(reqmsg);
			if (reqParams == null) {
				return;
			}
			String action = (String) reqParams.get("action");
			String rep = assessmentTaskHandler.doHandler(1, action, reqmsg, request, response);
			OutputStream os = response.getOutputStream();
			os.write(rep.toString().getBytes("UTF-8"));
		} catch (Exception e) {
			logger.error(e.toString());
		}
	}

	/**
	 * 评估任务统计
	 * 
	 * @param idnumber
	 * @return
	 */
	@RequestMapping(params = "handlerCount")
	@ResponseBody
	public String getCount(HttpServletRequest request) {
		Integer daiPingGu = 0;
		Integer daiShenHe = 0;
		Integer yiWanCheng = 0;
		JSONObject jsonResult = new JSONObject();
		jsonResult.put("result", "100");
		jsonResult.put("des", "success");
		// 待评估待审核统计
		try {
			Map<String, Object> query = new HashMap<String, Object>();
			query = systemService.addDataRuleByRoles("AssessmentTaskEntity", query, request);
			PageList entityList = assessmentTaskService.getListByCondition(query, null, 1, 100000, false, false, false, false, false);
			if (entityList != null) {
				if (entityList.getResultList() != null && entityList.getResultList().size() > 0) {
					for (Object obj : entityList.getResultList()) {
						AssessmentTaskEntity entity = (AssessmentTaskEntity) obj;
						if (entity.getTaskStatus() != null) {
							if (entity.getTaskStatus().intValue() == 1) {
								daiPingGu++;
							}
							if (entity.getTaskStatus().intValue() == 2) {
								daiShenHe++;
							}
						}
					}
				}
			}
			// 已完成统计
			String firstDay = getFirstDay();
			String lastDay = getLastDay();
			query.put("auditPassTime_ge", firstDay);
			query.put("auditPassTime_le", lastDay);
			PageList entityHeaList = assessmentTaskService.getListByCondition(query, null, 1, 100000, false, false, false, false, false);
			if (entityHeaList != null) {
				if (entityHeaList.getResultList() != null && entityHeaList.getResultList().size() > 0) {
					for (Object obj : entityHeaList.getResultList()) {
						AssessmentTaskEntity entity = (AssessmentTaskEntity) obj;
						if (entity.getTaskStatus() != null) {
							if (entity.getTaskStatus().intValue() == 3) {
								yiWanCheng++;
							}
						}
					}
				}

			}
		} catch (Exception e) {
			jsonResult.put("result", "200");
			jsonResult.put("des", "failure");
		}
		jsonResult.put("daiPingGu", daiPingGu);
		jsonResult.put("daiShenHe", daiShenHe);
		jsonResult.put("yiWanCheng", yiWanCheng);
		return jsonResult.toString();
	}

	/**
	 * 评估任务统计
	 * 
	 * @param idnumber
	 * @return
	 */
	@RequestMapping(params = "handlerQueryCount")
	@ResponseBody
	public String getQueryCount(HttpServletRequest request, String name, String startTime, String endTime, Integer pageno, Integer pagesize) {
		JSONObject jsonResult = new JSONObject();
		jsonResult.put("result", "100");
		jsonResult.put("des", "success");
		try {
			if ("".equals(name)) {// 员工不传,默认查全部
				// 先查出来员工的id
				String employeeIds = "";
				// 带时间查询
				Map<String, Object> queryTask = new HashMap<String, Object>();
				queryTask = systemService.addDataRuleByRoles("AssessmentTaskEntity", queryTask, request);
				queryTask.put("auditPassTime_le", getMonthLastDay());
				queryTask.put("auditPassTime_ge", getMonthFirstDay());
				queryTask.put("taskStatus", 3);
				JSONObject josncontent = new JSONObject();
				PageList entityList = assessmentTaskService.getListByCondition(queryTask, null, 1, 100000, false, false, false, false, false);
				if (entityList != null) {
					if (entityList.getResultList() != null && entityList.getResultList().size() > 0) {
						for (Object obj : entityList.getResultList()) {
							AssessmentTaskEntity entity = (AssessmentTaskEntity) obj;
							employeeIds = employeeIds + entity.getAssessmentEmployeeId() + ",";
						}
					}
				}
				// 不带时间查询
				Map<String, Object> queryTask2 = new HashMap<String, Object>();
				queryTask2 = systemService.addDataRuleByRoles("AssessmentTaskEntity", queryTask2, request);
				queryTask2.put("taskStatus_in", "1,2");
				PageList entityList2 = assessmentTaskService.getListByCondition(queryTask2, null, 1, 100000, false, false, false, false, false);
				if (entityList2 != null) {
					if (entityList2.getResultList() != null && entityList2.getResultList().size() > 0) {
						for (Object obj : entityList2.getResultList()) {
							AssessmentTaskEntity entity = (AssessmentTaskEntity) obj;
							employeeIds = employeeIds + entity.getAssessmentEmployeeId() + ",";
						}
					}
				}
				// 分页获得员工id
				if (!"".equals(employeeIds)) {
					employeeIds = employeeIds.replaceAll(",,", ",");
					employeeIds = employeeIds.substring(0, employeeIds.length() - 1);
					Map<String, Object> query = new HashMap<String, Object>();
					query.put("id_in", employeeIds);
					PageList enployeeList = employeeService.getListByCondition(query, null, pageno, pagesize, false, false, false, false, false, false, false);
					if (enployeeList != null) {
						if (enployeeList.getResultList() != null && enployeeList.getResultList().size() > 0) {
							jsonResult.put("result", "100");
							jsonResult.put("des", "success");

							JSONObject jsonPage = new JSONObject();
							jsonPage.put("pageno", pageno);
							jsonPage.put("pagesize", pagesize);
							jsonPage.put("recordCount", String.valueOf(enployeeList.getRecordCount()));
							jsonPage.put("pageCount", String.valueOf(enployeeList.getPageCount()));
							jsonResult.put("page", jsonPage.toString());
							// 遍历员工id，做countList统计
							JSONArray countArr = new JSONArray();
							for (Object obj : enployeeList.getResultList()) {
								Integer daiPingGu = 0;
								Integer daiShenHe = 0;
								Integer yiWanCheng = 0;
								EmployeeEntity entity = (EmployeeEntity) obj;

								// 已完成统计
								Map<String, Object> queryTaskAss = new HashMap<String, Object>();
								queryTaskAss.put("assessmentEmployeeId", entity.getId());
								queryTaskAss.put("auditPassTime_le", getMonthLastDay());
								queryTaskAss.put("auditPassTime_ge", getMonthFirstDay());
								queryTaskAss.put("taskStatus", 3);
								queryTaskAss = systemService.addDataRuleByRoles("AssessmentTaskEntity", queryTaskAss, request);
								PageList assList = assessmentTaskService.getListByCondition(queryTaskAss, null, 1, 100000, false, false, false, false, false);
								if (assList != null) {
									if (assList.getResultList() != null && assList.getResultList().size() > 0) {
										yiWanCheng = assList.getResultList().size();
									}
								}
								// 待评估待审核
								Map<String, Object> queryTaskAss2 = new HashMap<String, Object>();
								queryTaskAss2.put("assessmentEmployeeId", entity.getId());
								queryTaskAss2.put("taskStatus_in", "1,2");
								queryTaskAss2 = systemService.addDataRuleByRoles("AssessmentTaskEntity", queryTaskAss2, request);
								PageList assList2 = assessmentTaskService.getListByCondition(queryTaskAss2, null, 1, 100000, false, false, false, false, false);
								if (assList2 != null) {
									if (assList2.getResultList() != null && assList2.getResultList().size() > 0) {
										for (Object obj2 : assList2.getResultList()) {
											AssessmentTaskEntity assentity = (AssessmentTaskEntity) obj2;
											if (assentity.getTaskStatus() != null) {
												if (assentity.getTaskStatus().intValue() == 1) {
													daiPingGu++;
												}
												if (assentity.getTaskStatus().intValue() == 2) {
													daiShenHe++;
												}
											}
										}
									}
								}
								JSONObject jsonass = new JSONObject();
								jsonass.put("id", entity.getId());
								jsonass.put("name", entity.getName());
								jsonass.put("daiPingGu", daiPingGu);
								jsonass.put("daiShenHe", daiShenHe);
								jsonass.put("yiWanCheng", yiWanCheng);
								countArr.add(jsonass);
							}
							josncontent.put("countList", countArr.toString());
						}
					}
				}

				// dayList
				// s时间截点
				Map<String, Object> queryAssDay = new HashMap<String, Object>();
				Map<String, Object> queryAssDayday = null;
				if ("".equals(startTime) && "".equals(endTime)) {
					String curDay = formater.format(new Date()) + "235959";
					queryAssDayday = getDays(getSevenDay(), curDay);
				}
				if (!"".equals(startTime) && !"".equals(endTime)) {
					queryAssDayday = getDays(startTime, endTime);
				}
				queryAssDay.put("assessmentEmployeeId_in", employeeIds);
				queryAssDay.put("taskStatus", 3);
				JSONArray jsonarrday = new JSONArray();
				jsonResult.put("result", "100");
				jsonResult.put("des", "success");
				for (Map.Entry<String, Object> entry : queryAssDayday.entrySet()) {
					JSONObject jsonday = new JSONObject();
					Integer num = 0;
					String day = entry.getValue().toString();
					day = day.substring(0, 8);
					queryAssDay.put("auditPassTime_le", day + "235959");
					queryAssDay.put("auditPassTime_ge", day + "000001");
					queryAssDay = systemService.addDataRuleByRoles("AssessmentTaskEntity", queryAssDay, request);
					PageList assList = assessmentTaskService.getListByCondition(queryAssDay, null, 1, 100000, false, false, false, false, false);
					if (assList != null) {
						if (assList.getResultList() != null && assList.getResultList().size() > 0) {
							num = assList.getResultList().size();
						}
					}
					jsonday.put("day", day);
					jsonday.put("num", num);
					jsonarrday.add(jsonday);
				}
				josncontent.put("dayList", jsonarrday.toString());
				jsonResult.put("content", josncontent.toString());

			}
			// 名字不为空
			if (!"".equals(name)) {
				// 先查出来员工的id
				JSONObject josncontent = new JSONObject();

				// 分页获得员工id
				Map<String, Object> query = new HashMap<String, Object>();
				query.put("name", name);
				PageList enployeeList = employeeService.getListByCondition(query, null, pageno, pagesize, false, false, false, false, false, false, false);
				if (enployeeList != null) {
					if (enployeeList.getResultList() != null && enployeeList.getResultList().size() > 0) {
						JSONObject jsonPage = new JSONObject();
						jsonPage.put("recordCount", String.valueOf(enployeeList.getRecordCount()));
						jsonPage.put("pageCount", String.valueOf(enployeeList.getPageCount()));
						jsonResult.put("page", jsonPage.toString());
						// 遍历员工id，做countList统计
						JSONArray countArr = new JSONArray();
						for (Object obj : enployeeList.getResultList()) {
							Integer daiPingGu = 0;
							Integer daiShenHe = 0;
							Integer yiWanCheng = 0;
							EmployeeEntity entity = (EmployeeEntity) obj;

							// 已完成统计
							Map<String, Object> queryTaskAss = new HashMap<String, Object>();
							queryTaskAss.put("assessmentEmployeeId", entity.getId());
							queryTaskAss.put("auditPassTime_le", getMonthLastDay());
							queryTaskAss.put("auditPassTime_ge", getMonthFirstDay());
							queryTaskAss.put("taskStatus", 3);
							queryTaskAss = systemService.addDataRuleByRoles("AssessmentTaskEntity", queryTaskAss, request);
							PageList assList = assessmentTaskService.getListByCondition(queryTaskAss, null, 1, 100000, false, false, false, false, false);
							if (assList != null) {
								if (assList.getResultList() != null && assList.getResultList().size() > 0) {
									yiWanCheng = assList.getResultList().size();
								}
							}
							// 待评估待审核
							Map<String, Object> queryTaskAss2 = new HashMap<String, Object>();
							queryTaskAss2.put("assessmentEmployeeId", entity.getId());
							queryTaskAss2.put("taskStatus_in", "1,2");
							queryTaskAss2 = systemService.addDataRuleByRoles("AssessmentTaskEntity", queryTaskAss2, request);
							PageList assList2 = assessmentTaskService.getListByCondition(queryTaskAss2, null, 1, 100000, false, false, false, false, false);
							if (assList2 != null) {
								if (assList2.getResultList() != null && assList2.getResultList().size() > 0) {
									for (Object obj2 : assList2.getResultList()) {
										AssessmentTaskEntity assentity = (AssessmentTaskEntity) obj2;
										if (assentity.getTaskStatus() != null) {
											if (assentity.getTaskStatus().intValue() == 1) {
												daiPingGu++;
											}
											if (assentity.getTaskStatus().intValue() == 2) {
												daiShenHe++;
											}
										}
									}
								}
							}
							JSONObject jsonass = new JSONObject();
							jsonass.put("id", entity.getId());
							jsonass.put("name", entity.getName());
							jsonass.put("daiPingGu", daiPingGu);
							jsonass.put("daiShenHe", daiShenHe);
							jsonass.put("yiWanCheng", yiWanCheng);
							if (daiPingGu != 0 || daiShenHe != 0 || yiWanCheng != 0) {
								countArr.add(jsonass);
							}
						}
						josncontent.put("countList", countArr.toString());
					}
				}

				// dayList
				// s时间截点
				Map<String, Object> queryAssDay = new HashMap<String, Object>();
				Map<String, Object> queryAssDayday = null;
				if ("".equals(startTime) && "".equals(endTime)) {
					String curDay = formater.format(new Date()) + "235959";
					queryAssDayday = getDays(getSevenDay(), curDay);
				}
				if (!"".equals(startTime) && !"".equals(endTime)) {
					queryAssDayday = getDays(startTime, endTime);
				}
				queryAssDay.put("assessmentName", name);
				queryAssDay.put("taskStatus", 3);
				JSONArray jsonarrday = new JSONArray();
				for (Map.Entry<String, Object> entry : queryAssDayday.entrySet()) {
					JSONObject jsonday = new JSONObject();
					Integer num = 0;
					String day = entry.getValue().toString();
					day = day.substring(0, 8);
					queryAssDay.put("auditPassTime_le", day + "235959");
					queryAssDay.put("auditPassTime_ge", day + "000001");
					queryAssDay = systemService.addDataRuleByRoles("AssessmentTaskEntity", queryAssDay, request);
					PageList assList = assessmentTaskService.getListByCondition(queryAssDay, null, 1, 100000, false, false, false, false, false);
					if (assList != null) {
						if (assList.getResultList() != null && assList.getResultList().size() > 0) {
							num = assList.getResultList().size();
						}
					}
					jsonday.put("day", day);
					jsonday.put("num", num);
					jsonarrday.add(jsonday);
				}
				josncontent.put("dayList", jsonarrday.toString());
				jsonResult.put("content", josncontent.toString());
			}
		} catch (Exception e1) {
			jsonResult.put("result", "200");
			jsonResult.put("des", "failure");
		}
		String rep = jsonResult.toString();

		try {
			rep = new String(rep.getBytes("utf-8"), "iso-8859-1");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		return rep;
	}

	public String getFirstDay() {
		SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
		Calendar c = Calendar.getInstance();
		c.add(Calendar.MONTH, 0);
		c.set(Calendar.DAY_OF_MONTH, 1);// 设置为1号,当前日期既为本月第一天
		String first = format.format(c.getTime()) + "000001";
		return first;
	}

	public String getLastDay() {
		SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
		Calendar ca = Calendar.getInstance();
		ca.set(Calendar.DAY_OF_MONTH, ca.getActualMaximum(Calendar.DAY_OF_MONTH));
		String last = format.format(ca.getTime()) + "235959";
		return last;
	}

	// 七天前的时间
	public String getSevenDay() {

		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		Calendar c = Calendar.getInstance();
		c.add(Calendar.DATE, -6);
		Date monday = c.getTime();
		String preMonday = sdf.format(monday) + "000001";
		return preMonday;
	}

	// 本月第一天
	public String getMonthFirstDay() {
		SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
		Calendar c = Calendar.getInstance();
		c.add(Calendar.MONTH, 0);
		c.set(Calendar.DAY_OF_MONTH, 1);// 设置为1号,当前日期既为本月第一天
		String first = format.format(c.getTime()) + "000001";
		return first;
	}

	// 本月最后一天
	public String getMonthLastDay() {
		SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
		Calendar ca = Calendar.getInstance();
		ca.set(Calendar.DAY_OF_MONTH, ca.getActualMaximum(Calendar.DAY_OF_MONTH));
		String last = format.format(ca.getTime()) + "235959";
		return last;
	}

	public static Map<String, Object> getDays(String start, String end) {
		Map<String, Object> map = new LinkedHashMap<String, Object>();
		Calendar cals = Calendar.getInstance();
		Calendar cale = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
		Date dates = null;
		Date datee = null;
		try {
			dates = sdf.parse(start);
			datee = sdf.parse(end);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		cals.setTime(dates);
		cale.setTime(datee);
		while (!cals.after(cale)) {
			String date = sdf.format(cals.getTime());
			cals.add(Calendar.DAY_OF_YEAR, 1);
			map.put(date, date);
		}
		return map;
	}
}
