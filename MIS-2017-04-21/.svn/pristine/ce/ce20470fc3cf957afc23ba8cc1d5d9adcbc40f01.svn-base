package fsk.service.recharge;

import java.math.BigDecimal;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import org.apache.log4j.Logger;


import fsk.entity.older.OlderEntity;
import fsk.entity.service.ServiceEntity;
import fsk.entity.site.SiteEntity;
import fsk.entity.employee.EmployeeEntity;

import fsk.entity.recharge.RechargeEntity;
import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;



/**   
 * @Title: Service
 * @Description: 充值记录服务类
 * @author feng.gu
 * @date 2016-10-20 09:07:24
 * @version V1.0   
 *
 */
public class RechargeService {
	   private static Logger logger = Logger.getLogger(RechargeService.class);
	   private DBManager dbManager = DBManager.getInstance();
    		
	   private static RechargeService rechargeService;
	   /**
	    * 获取实例	
	    * @return
	    */
	   public static RechargeService getInstance(){
		if(rechargeService==null){
			rechargeService = new RechargeService();
		}
		return rechargeService;
	   }
	                 	                 				     				     				     				     
				     	 
	   /**
		 * 保存记录
		 * 
		 * @param obj
		 */
		public boolean save(RechargeEntity recharge) {			
			boolean result =false;
			if(recharge!=null){
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					 tx.beginTransaction();					 					 
					 					 				     				     					     //关联信息保存
					     OlderEntity older = recharge.getOlder();
						 if(older!=null){						   
							 dbManager.saveNoTransaction(older);
							 recharge.setOlderId(older.getId());
						 }						 
				     				     				     					 					 				     				     					     //关联信息保存
					     ServiceEntity service = recharge.getService();
						 if(service!=null){						   
							 dbManager.saveNoTransaction(service);
							 recharge.setServiceId(service.getId());
						 }						 
				     				     				     					 					 				     				     					     //关联信息保存
					     SiteEntity serviceSite = recharge.getServiceSite();
						 if(serviceSite!=null){						   
							 dbManager.saveNoTransaction(serviceSite);
							 recharge.setServiceSiteId(serviceSite.getId());
						 }						 
				     				     				     					 					 				     				     					     //关联信息保存
					     EmployeeEntity rechargeEmployee = recharge.getRechargeEmployee();
						 if(rechargeEmployee!=null){						   
							 dbManager.saveNoTransaction(rechargeEmployee);
							 recharge.setRechargeEmployeeId(rechargeEmployee.getId());
						 }						 
				     				     				     					 					 result=dbManager.saveNoTransaction(recharge);	
					 tx.commitAndClose();  
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {				    
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  			
			}	
			return result;
		}
		
		/**
		 * 批量保存记录
		 * 
		 * @param list
		 */
		public boolean saveList(List<RechargeEntity> rechargeList) {
			boolean result = false;
			if (rechargeList != null && rechargeList.size() > 0) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 
					for(RechargeEntity recharge:rechargeList){
						if(recharge!=null){												  								 
								 									 					                 								     								         //关联信息保存
									     OlderEntity older = recharge.getOlder();
										 if(older!=null){						   
											 dbManager.saveNoTransaction(older);
											 recharge.setOlderId(older.getId());
										 }									 
								     								     								     								 									 					                 								     								         //关联信息保存
									     ServiceEntity service = recharge.getService();
										 if(service!=null){						   
											 dbManager.saveNoTransaction(service);
											 recharge.setServiceId(service.getId());
										 }									 
								     								     								     								 									 					                 								     								         //关联信息保存
									     SiteEntity serviceSite = recharge.getServiceSite();
										 if(serviceSite!=null){						   
											 dbManager.saveNoTransaction(serviceSite);
											 recharge.setServiceSiteId(serviceSite.getId());
										 }									 
								     								     								     								 									 					                 								     								         //关联信息保存
									     EmployeeEntity rechargeEmployee = recharge.getRechargeEmployee();
										 if(rechargeEmployee!=null){						   
											 dbManager.saveNoTransaction(rechargeEmployee);
											 recharge.setRechargeEmployeeId(rechargeEmployee.getId());
										 }									 
								     								     								     								 								 result=dbManager.saveNoTransaction(recharge);								 			
						}	
					}
				    tx.commitAndClose(); 
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
				/**
		 * 根据id读取记录
		 * 
		 * @param id
		 *            主键
		 * @param obj
		 */
		public RechargeEntity getById(Integer id) {
			RechargeEntity obj = null;
			if (id != null) {
				obj = (RechargeEntity) dbManager.getById(id, RechargeEntity.class);			
			}
			return obj;
		}
				
		
		/**
		 * 根据id读取记录
		 * @param id 主键
		 		             	                 				     		 * @param olderShow 是否查询关联信息
				     				     				     		 		             	                 				     		 * @param serviceShow 是否查询关联信息
				     				     				     		 		             	                 				     		 * @param serviceSiteShow 是否查询关联信息
				     				     				     		 		             	                 				     		 * @param rechargeEmployeeShow 是否查询关联信息
				     				     				     		 		 * @param obj
		 */
		public RechargeEntity getById(Integer id,Boolean olderShow,Boolean serviceShow,Boolean serviceSiteShow,Boolean rechargeEmployeeShow) {
			RechargeEntity obj = null;
			if (id!=null) {
				obj = (RechargeEntity)dbManager.getById(id, RechargeEntity.class);
									 	                 				     				        //查询关联内容
						if(olderShow!=null&&olderShow.booleanValue()&&obj!=null&&obj.getOlderId()!=null&&obj.getOlderId()>0){
							OlderEntity older = (OlderEntity)dbManager.getById(obj.getOlderId(), OlderEntity.class);
							obj.setOlder(older);        	  	  
						}
				     				     				     				   					 	                 				     				        //查询关联内容
						if(serviceShow!=null&&serviceShow.booleanValue()&&obj!=null&&obj.getServiceId()!=null&&obj.getServiceId()>0){
							ServiceEntity service = (ServiceEntity)dbManager.getById(obj.getServiceId(), ServiceEntity.class);
							obj.setService(service);        	  	  
						}
				     				     				     				   					 	                 				     				        //查询关联内容
						if(serviceSiteShow!=null&&serviceSiteShow.booleanValue()&&obj!=null&&obj.getServiceSiteId()!=null&&obj.getServiceSiteId()>0){
							SiteEntity serviceSite = (SiteEntity)dbManager.getById(obj.getServiceSiteId(), SiteEntity.class);
							obj.setServiceSite(serviceSite);        	  	  
						}
				     				     				     				   					 	                 				     				        //查询关联内容
						if(rechargeEmployeeShow!=null&&rechargeEmployeeShow.booleanValue()&&obj!=null&&obj.getRechargeEmployeeId()!=null&&obj.getRechargeEmployeeId()>0){
							EmployeeEntity rechargeEmployee = (EmployeeEntity)dbManager.getById(obj.getRechargeEmployeeId(), EmployeeEntity.class);
							obj.setRechargeEmployee(rechargeEmployee);        	  	  
						}
				     				     				     				   			}
			return obj;
		}
		
		/**
		 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
		 * @param queryMap 查询条件集合		
		 * @return
		 */
		public List<RechargeEntity> getListByCondition(Map<String,Object> queryMap) {
		    List<RechargeEntity> returnlist = null;
			List<Object> list = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap);  			
																																					  						  						  						  			            list = dbManager.queryByCondition(RechargeEntity.class,qc);    
            if(list!=null&&list.size()>0){
               returnlist = new ArrayList<RechargeEntity>();
               for (Object obj:list) {           
                 returnlist.add((RechargeEntity)obj);
               }
            }       					
			return returnlist;
		}
		
		
		/**
		 * 根据条件查询记录集合（不分页 带排序 带级联查询）
		 * @param queryMap 查询条件集合
		 * @param orderList 排序条件集合
		 		             	                 				     		 * @param olderShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		             	                 				     		 * @param serviceShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		             	                 				     		 * @param serviceSiteShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		             	                 				     		 * @param rechargeEmployeeShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		 * @return
		 */
		public List<RechargeEntity> getListByCondition(Map<String,Object> queryMap,List<OrderVO> orderList,Boolean olderShow,Boolean serviceShow,Boolean serviceSiteShow,Boolean rechargeEmployeeShow) {
			List<RechargeEntity> returnlist = null;
			List<Object> list = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap); 
																																					  						  						  						  						OrderByCondition oc = null;
			if(orderList!=null&&orderList.size()>0){
				for(int i=0;i<orderList.size();i++){
					OrderVO order = orderList.get(i);
					String orderColumnt =null;
					String orderType=null;
					if(order.getName()!=null&&!"".equals(order.getName())){
						orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
						orderType = order.getOrderType();
						if(orderType==null||"".equals(orderType.trim())){
							orderType=OrderByCondition.desc;
						}
						if(i==0){
							oc = new OrderByCondition(orderColumnt,orderType);
						}else{
							oc.orderByCondition(new OrderByCondition(orderColumnt,orderType));
						}					
					}
					
				}
			}			
            list = dbManager.queryByConditions(RechargeEntity.class,qc,oc);
                                    int a=0;
            					             	                 				     				     if(olderShow!=null&&olderShow.booleanValue()){
						a++;
					 }
				     				     				     		    		             	                 				     				     if(serviceShow!=null&&serviceShow.booleanValue()){
						a++;
					 }
				     				     				     		    		             	                 				     				     if(serviceSiteShow!=null&&serviceSiteShow.booleanValue()){
						a++;
					 }
				     				     				     		    		             	                 				     				     if(rechargeEmployeeShow!=null&&rechargeEmployeeShow.booleanValue()){
						a++;
					 }
				     				     				     		    		                if(a>0&&list!=null&&list.size()>0){
				List<Object> result = new ArrayList<Object>();
				for(int i=0;i<list.size();i++){
					RechargeEntity obj = (RechargeEntity)list.get(i);
										 	                 				     				        //查询关联内容
						if(olderShow!=null&&olderShow.booleanValue()&&obj!=null&&obj.getOlderId()!=null&&obj.getOlderId()>0){
							OlderEntity older = (OlderEntity)dbManager.getById(obj.getOlderId(), OlderEntity.class);
							obj.setOlder(older);        	  	  
						}
				     				     				     				    					 	                 				     				        //查询关联内容
						if(serviceShow!=null&&serviceShow.booleanValue()&&obj!=null&&obj.getServiceId()!=null&&obj.getServiceId()>0){
							ServiceEntity service = (ServiceEntity)dbManager.getById(obj.getServiceId(), ServiceEntity.class);
							obj.setService(service);        	  	  
						}
				     				     				     				    					 	                 				     				        //查询关联内容
						if(serviceSiteShow!=null&&serviceSiteShow.booleanValue()&&obj!=null&&obj.getServiceSiteId()!=null&&obj.getServiceSiteId()>0){
							SiteEntity serviceSite = (SiteEntity)dbManager.getById(obj.getServiceSiteId(), SiteEntity.class);
							obj.setServiceSite(serviceSite);        	  	  
						}
				     				     				     				    					 	                 				     				        //查询关联内容
						if(rechargeEmployeeShow!=null&&rechargeEmployeeShow.booleanValue()&&obj!=null&&obj.getRechargeEmployeeId()!=null&&obj.getRechargeEmployeeId()>0){
							EmployeeEntity rechargeEmployee = (EmployeeEntity)dbManager.getById(obj.getRechargeEmployeeId(), EmployeeEntity.class);
							obj.setRechargeEmployee(rechargeEmployee);        	  	  
						}
				     				     				     				    					result.add(obj);					
				}
				list=result;			
		}	
					if(list!=null&&list.size()>0){
               returnlist = new ArrayList<RechargeEntity>();
               for (Object obj:list) {           
                 returnlist.add((RechargeEntity)obj);
               }
            }       					
			return returnlist;
		}
		
		/**
		 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
		 * @param queryMap 查询条件集合
		 * @param pageno 查询页码
		 * @param pagesize 查询每页记录条数		
		 * @return
		 */
		public PageList getListByCondition(Map<String,Object> queryMap,int pageno,int pagesize) {
			PageList pagelist = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap); 
																																					  						  						  						  			            pagelist = dbManager.queryByCondition(RechargeEntity.class,qc,pageno,pagesize);	                      			
			return pagelist;
		}
		
		/**
		 * 根据条件查询记录集合（带分页 带排序 带级联查询）
		 * @param queryMap 查询条件集合
		 * @param orderList 排序条件集合
		 * @param pageno 查询页码
		 * @param pagesize 查询每页记录条数
		 		             	                 				     		 * @param olderShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		             	                 				     		 * @param serviceShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		             	                 				     		 * @param serviceSiteShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		             	                 				     		 * @param rechargeEmployeeShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		 * @return
		 */
		public PageList getListByCondition(Map<String,Object> queryMap,List<OrderVO> orderList,int pageno,int pagesize,Boolean olderShow,Boolean serviceShow,Boolean serviceSiteShow,Boolean rechargeEmployeeShow) {
			PageList pagelist = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap); 
																																					  						  						  						  						OrderByCondition oc = null;
			if(orderList!=null&&orderList.size()>0){
				for(int i=0;i<orderList.size();i++){
					OrderVO order = orderList.get(i);
					String orderColumnt =null;
					String orderType=null;
					if(order.getName()!=null&&!"".equals(order.getName())){
						orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
						orderType = order.getOrderType();
						if(orderType==null||"".equals(orderType.trim())){
							orderType=OrderByCondition.desc;
						}
						if(i==0){
							oc = new OrderByCondition(orderColumnt,orderType);
						}else{
							oc.orderByCondition(new OrderByCondition(orderColumnt,orderType));
						}					
					}
					
				}
			}		
			//数据权限
			List<QueryCondition> dataRuleQclist = null;
			List<Map<String, Object>> dataRuleMapList = (List<Map<String, Object>>)queryMap.get("dataRuleMapList");
			if(dataRuleMapList!=null&&dataRuleMapList.size()>0){
				dataRuleQclist = new ArrayList<QueryCondition>();
				for(Map<String, Object> dataRuleMap:dataRuleMapList){
					QueryCondition dataRuleQc = changeMapToQc(dataRuleMap);	
					dataRuleQclist.add(dataRuleQc);
				}
			}
            pagelist = dbManager.queryByConditions(RechargeEntity.class,qc,dataRuleQclist,oc,pageno,pagesize);	           
                                    int a=0;
            					             	                 				     				     if(olderShow!=null&&olderShow.booleanValue()){
						a++;
					 }
				     				     				     		    		             	                 				     				     if(serviceShow!=null&&serviceShow.booleanValue()){
						a++;
					 }
				     				     				     		    		             	                 				     				     if(serviceSiteShow!=null&&serviceSiteShow.booleanValue()){
						a++;
					 }
				     				     				     		    		             	                 				     				     if(rechargeEmployeeShow!=null&&rechargeEmployeeShow.booleanValue()){
						a++;
					 }
				     				     				     		    		                if(a>0&&pagelist!=null&&pagelist.getResultList()!=null&&pagelist.getResultList().size()>0){
				List<Object> result = new ArrayList<Object>();
				for(int i=0;i<pagelist.getResultList().size();i++){
					RechargeEntity obj = (RechargeEntity)pagelist.getResultList().get(i);
										 	                 				     				        //查询关联内容
						if(olderShow!=null&&olderShow.booleanValue()&&obj!=null&&obj.getOlderId()!=null&&obj.getOlderId()>0){
							OlderEntity older = (OlderEntity)dbManager.getById(obj.getOlderId(), OlderEntity.class);
							obj.setOlder(older);        	  	  
						}
				     				     				     				    					 	                 				     				        //查询关联内容
						if(serviceShow!=null&&serviceShow.booleanValue()&&obj!=null&&obj.getServiceId()!=null&&obj.getServiceId()>0){
							ServiceEntity service = (ServiceEntity)dbManager.getById(obj.getServiceId(), ServiceEntity.class);
							obj.setService(service);        	  	  
						}
				     				     				     				    					 	                 				     				        //查询关联内容
						if(serviceSiteShow!=null&&serviceSiteShow.booleanValue()&&obj!=null&&obj.getServiceSiteId()!=null&&obj.getServiceSiteId()>0){
							SiteEntity serviceSite = (SiteEntity)dbManager.getById(obj.getServiceSiteId(), SiteEntity.class);
							obj.setServiceSite(serviceSite);        	  	  
						}
				     				     				     				    					 	                 				     				        //查询关联内容
						if(rechargeEmployeeShow!=null&&rechargeEmployeeShow.booleanValue()&&obj!=null&&obj.getRechargeEmployeeId()!=null&&obj.getRechargeEmployeeId()>0){
							EmployeeEntity rechargeEmployee = (EmployeeEntity)dbManager.getById(obj.getRechargeEmployeeId(), EmployeeEntity.class);
							obj.setRechargeEmployee(rechargeEmployee);        	  	  
						}
				     				     				     				    					result.add(obj);					
				}
				pagelist.setResultList(result);			
		}	
					return pagelist;
		}
		
		/**
		 * 删除记录
		 * 
		 * @param id 主键
		 * @param obj
		 */
		public boolean del(Integer id,Boolean delOlder,Boolean delService,Boolean delServiceSite,Boolean delRechargeEmployee) {
			boolean result = false;
			if (id !=null&&id>0) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 					
										 	                 				     					    //删除关联信息
						if(delOlder!=null&&delOlder.booleanValue()){	
							RechargeEntity recharge = (RechargeEntity)dbManager.getById(id, RechargeEntity.class);
							if(recharge!=null&&recharge.getOlderId()!=null){
								dbManager.delNoTransaction(recharge.getOlderId(), OlderEntity.class);
							}						
						}
				     				     				     										 	                 				     					    //删除关联信息
						if(delService!=null&&delService.booleanValue()){	
							RechargeEntity recharge = (RechargeEntity)dbManager.getById(id, RechargeEntity.class);
							if(recharge!=null&&recharge.getServiceId()!=null){
								dbManager.delNoTransaction(recharge.getServiceId(), ServiceEntity.class);
							}						
						}
				     				     				     										 	                 				     					    //删除关联信息
						if(delServiceSite!=null&&delServiceSite.booleanValue()){	
							RechargeEntity recharge = (RechargeEntity)dbManager.getById(id, RechargeEntity.class);
							if(recharge!=null&&recharge.getServiceSiteId()!=null){
								dbManager.delNoTransaction(recharge.getServiceSiteId(), SiteEntity.class);
							}						
						}
				     				     				     										 	                 				     					    //删除关联信息
						if(delRechargeEmployee!=null&&delRechargeEmployee.booleanValue()){	
							RechargeEntity recharge = (RechargeEntity)dbManager.getById(id, RechargeEntity.class);
							if(recharge!=null&&recharge.getRechargeEmployeeId()!=null){
								dbManager.delNoTransaction(recharge.getRechargeEmployeeId(), EmployeeEntity.class);
							}						
						}
				     				     				     										result = dbManager.delNoTransaction(id, RechargeEntity.class);
					tx.commitAndClose(); 
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
		/**
		 * 批量删除记录
		 * 
		 * @param ids
		 *            主键 英文逗号间隔
		 * @param obj
		 */
		public boolean del(String ids) {
			boolean result = false;
			if (ids != null && !"".equals(ids.trim())) {
				TransactionManager tx = DbUtils.getTranManager();
				try {
					tx.beginTransaction();
					QueryCondition qc = new QueryCondition(RechargeEntity.ID,QueryCondition.in, ids);
					result = dbManager.delByConditionsNoTransaction(RechargeEntity.class, qc);
					tx.commitAndClose();
				} catch (Exception e) {
					logger.error("数据库提交失败！");
					logger.error(e);
					result = false;
					try {
						tx.rollbackAndClose();
					} catch (Exception ex) {
						logger.error("数据库回滚失败！");
						logger.error(ex);
					}
				}
			}
			return result;
		}

		/**
		 * 批量条件删除记录
		 * @param queryMap 查询条件集合
		 */
		public boolean delList(Map<String,Object> queryMap,Boolean delOlder,Boolean delService,Boolean delServiceSite,Boolean delRechargeEmployee) {
			boolean result = false;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap);   
																																			            				            				            				            						if (qc.getQueryNextCondition()!=null) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 						
										 	                 				     					     //删除关联信息
						if(delOlder!=null&&delOlder.booleanValue()){
							List<Object> list=dbManager.queryByConditionNoTransaction(RechargeEntity.class,qc);
							String strIds="";
							if(list!=null&&list.size()>0){
								for(Object obj:list){
									RechargeEntity entity=(RechargeEntity)obj;
									strIds += entity.getOlderId()+",";
								}
								strIds = strIds.substring(0, strIds.length()-1);
							}
							if(strIds!=null&&!"".equals(strIds)){
								QueryCondition qc1 = new QueryCondition(OlderEntity.ID, QueryCondition.in, strIds);
								dbManager.delByConditionsNoTransaction(OlderEntity.class, qc1);
							}
							
						}
				     				     				     										 	                 				     					     //删除关联信息
						if(delService!=null&&delService.booleanValue()){
							List<Object> list=dbManager.queryByConditionNoTransaction(RechargeEntity.class,qc);
							String strIds="";
							if(list!=null&&list.size()>0){
								for(Object obj:list){
									RechargeEntity entity=(RechargeEntity)obj;
									strIds += entity.getServiceId()+",";
								}
								strIds = strIds.substring(0, strIds.length()-1);
							}
							if(strIds!=null&&!"".equals(strIds)){
								QueryCondition qc1 = new QueryCondition(ServiceEntity.ID, QueryCondition.in, strIds);
								dbManager.delByConditionsNoTransaction(ServiceEntity.class, qc1);
							}
							
						}
				     				     				     										 	                 				     					     //删除关联信息
						if(delServiceSite!=null&&delServiceSite.booleanValue()){
							List<Object> list=dbManager.queryByConditionNoTransaction(RechargeEntity.class,qc);
							String strIds="";
							if(list!=null&&list.size()>0){
								for(Object obj:list){
									RechargeEntity entity=(RechargeEntity)obj;
									strIds += entity.getServiceSiteId()+",";
								}
								strIds = strIds.substring(0, strIds.length()-1);
							}
							if(strIds!=null&&!"".equals(strIds)){
								QueryCondition qc1 = new QueryCondition(SiteEntity.ID, QueryCondition.in, strIds);
								dbManager.delByConditionsNoTransaction(SiteEntity.class, qc1);
							}
							
						}
				     				     				     										 	                 				     					     //删除关联信息
						if(delRechargeEmployee!=null&&delRechargeEmployee.booleanValue()){
							List<Object> list=dbManager.queryByConditionNoTransaction(RechargeEntity.class,qc);
							String strIds="";
							if(list!=null&&list.size()>0){
								for(Object obj:list){
									RechargeEntity entity=(RechargeEntity)obj;
									strIds += entity.getRechargeEmployeeId()+",";
								}
								strIds = strIds.substring(0, strIds.length()-1);
							}
							if(strIds!=null&&!"".equals(strIds)){
								QueryCondition qc1 = new QueryCondition(EmployeeEntity.ID, QueryCondition.in, strIds);
								dbManager.delByConditionsNoTransaction(EmployeeEntity.class, qc1);
							}
							
						}
				     				     				     										result = dbManager.delByConditionsNoTransaction(RechargeEntity.class,qc);				
					tx.commitAndClose();  
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
	private QueryCondition changeMapToQc(Map<String, Object> queryMap) {	
											Object id=queryMap.get("id");
					Object id_gt=queryMap.get("id_gt");
					Object id_ge=queryMap.get("id_ge");
					Object id_lt=queryMap.get("id_lt");
					Object id_le=queryMap.get("id_le");
					Object id_in=queryMap.get("id_in");
																					Object serialNumber=queryMap.get("serialNumber");
					Object serialNumber_like=queryMap.get("serialNumber_like");
					Object serialNumber_isNull=queryMap.get("serialNumber_isNull");
					Object serialNumber_isNotNull=queryMap.get("serialNumber_isNotNull");
					Object serialNumber_in=queryMap.get("serialNumber_in");
																					Object olderId=queryMap.get("olderId");
					Object olderId_gt=queryMap.get("olderId_gt");
					Object olderId_ge=queryMap.get("olderId_ge");
					Object olderId_lt=queryMap.get("olderId_lt");
					Object olderId_le=queryMap.get("olderId_le");
					Object olderId_in=queryMap.get("olderId_in");
																					Object olderName=queryMap.get("olderName");
					Object olderName_like=queryMap.get("olderName_like");
					Object olderName_isNull=queryMap.get("olderName_isNull");
					Object olderName_isNotNull=queryMap.get("olderName_isNotNull");
					Object olderName_in=queryMap.get("olderName_in");
																										Object olderMemberNum=queryMap.get("olderMemberNum");
					Object olderMemberNum_like=queryMap.get("olderMemberNum_like");
					Object olderMemberNum_isNull=queryMap.get("olderMemberNum_isNull");
					Object olderMemberNum_isNotNull=queryMap.get("olderMemberNum_isNotNull");
					Object olderMemberNum_in=queryMap.get("olderMemberNum_in");
																										Object createTime_gt=queryMap.get("createTime_gt");
					Object createTime_ge=queryMap.get("createTime_ge");
					Object createTime_lt=queryMap.get("createTime_lt");
					Object createTime_le=queryMap.get("createTime_le");
																					Object type=queryMap.get("type");
					Object type_gt=queryMap.get("type_gt");
					Object type_ge=queryMap.get("type_ge");
					Object type_lt=queryMap.get("type_lt");
					Object type_le=queryMap.get("type_le");
					Object type_in=queryMap.get("type_in");
																Object amount=queryMap.get("amount");
					Object amount_gt=queryMap.get("amount_gt");
					Object amount_ge=queryMap.get("amount_ge");
					Object amount_lt=queryMap.get("amount_lt");
					Object amount_le=queryMap.get("amount_le");
					Object amount_in=queryMap.get("amount_in");
																					Object serviceTaskCode=queryMap.get("serviceTaskCode");
					Object serviceTaskCode_like=queryMap.get("serviceTaskCode_like");
					Object serviceTaskCode_isNull=queryMap.get("serviceTaskCode_isNull");
					Object serviceTaskCode_isNotNull=queryMap.get("serviceTaskCode_isNotNull");
					Object serviceTaskCode_in=queryMap.get("serviceTaskCode_in");
																					Object serviceId=queryMap.get("serviceId");
					Object serviceId_gt=queryMap.get("serviceId_gt");
					Object serviceId_ge=queryMap.get("serviceId_ge");
					Object serviceId_lt=queryMap.get("serviceId_lt");
					Object serviceId_le=queryMap.get("serviceId_le");
					Object serviceId_in=queryMap.get("serviceId_in");
																					Object serviceName=queryMap.get("serviceName");
					Object serviceName_like=queryMap.get("serviceName_like");
					Object serviceName_isNull=queryMap.get("serviceName_isNull");
					Object serviceName_isNotNull=queryMap.get("serviceName_isNotNull");
					Object serviceName_in=queryMap.get("serviceName_in");
																					Object serviceSiteId=queryMap.get("serviceSiteId");
					Object serviceSiteId_gt=queryMap.get("serviceSiteId_gt");
					Object serviceSiteId_ge=queryMap.get("serviceSiteId_ge");
					Object serviceSiteId_lt=queryMap.get("serviceSiteId_lt");
					Object serviceSiteId_le=queryMap.get("serviceSiteId_le");
					Object serviceSiteId_in=queryMap.get("serviceSiteId_in");
																					Object serviceSiteName=queryMap.get("serviceSiteName");
					Object serviceSiteName_like=queryMap.get("serviceSiteName_like");
					Object serviceSiteName_isNull=queryMap.get("serviceSiteName_isNull");
					Object serviceSiteName_isNotNull=queryMap.get("serviceSiteName_isNotNull");
					Object serviceSiteName_in=queryMap.get("serviceSiteName_in");
																					Object rechargeType=queryMap.get("rechargeType");
					Object rechargeType_gt=queryMap.get("rechargeType_gt");
					Object rechargeType_ge=queryMap.get("rechargeType_ge");
					Object rechargeType_lt=queryMap.get("rechargeType_lt");
					Object rechargeType_le=queryMap.get("rechargeType_le");
					Object rechargeType_in=queryMap.get("rechargeType_in");
																Object rechargeEmployeeId=queryMap.get("rechargeEmployeeId");
					Object rechargeEmployeeId_gt=queryMap.get("rechargeEmployeeId_gt");
					Object rechargeEmployeeId_ge=queryMap.get("rechargeEmployeeId_ge");
					Object rechargeEmployeeId_lt=queryMap.get("rechargeEmployeeId_lt");
					Object rechargeEmployeeId_le=queryMap.get("rechargeEmployeeId_le");
					Object rechargeEmployeeId_in=queryMap.get("rechargeEmployeeId_in");
																					Object rechargeEmployeeName=queryMap.get("rechargeEmployeeName");
					Object rechargeEmployeeName_like=queryMap.get("rechargeEmployeeName_like");
					Object rechargeEmployeeName_isNull=queryMap.get("rechargeEmployeeName_isNull");
					Object rechargeEmployeeName_isNotNull=queryMap.get("rechargeEmployeeName_isNotNull");
					Object rechargeEmployeeName_in=queryMap.get("rechargeEmployeeName_in");
																										Object rechargeEmployeeIndexNum=queryMap.get("rechargeEmployeeIndexNum");
					Object rechargeEmployeeIndexNum_like=queryMap.get("rechargeEmployeeIndexNum_like");
					Object rechargeEmployeeIndexNum_isNull=queryMap.get("rechargeEmployeeIndexNum_isNull");
					Object rechargeEmployeeIndexNum_isNotNull=queryMap.get("rechargeEmployeeIndexNum_isNotNull");
					Object rechargeEmployeeIndexNum_in=queryMap.get("rechargeEmployeeIndexNum_in");
																					Object rechargeMethod=queryMap.get("rechargeMethod");
					Object rechargeMethod_gt=queryMap.get("rechargeMethod_gt");
					Object rechargeMethod_ge=queryMap.get("rechargeMethod_ge");
					Object rechargeMethod_lt=queryMap.get("rechargeMethod_lt");
					Object rechargeMethod_le=queryMap.get("rechargeMethod_le");
					Object rechargeMethod_in=queryMap.get("rechargeMethod_in");
							
			

																																		
			
			QueryCondition qc = new QueryCondition(RechargeEntity.ID, QueryCondition.gt, "0");				
												if(id!=null){qc.andCondition(new QueryCondition(RechargeEntity.ID, QueryCondition.eq, id));}
					if(id_gt!=null){qc.andCondition(new QueryCondition(RechargeEntity.ID, QueryCondition.gt, id_gt));}
					if(id_ge!=null){qc.andCondition(new QueryCondition(RechargeEntity.ID, QueryCondition.ge, id_ge));}
					if(id_lt!=null){qc.andCondition(new QueryCondition(RechargeEntity.ID, QueryCondition.lt, id_lt));}
					if(id_le!=null){qc.andCondition(new QueryCondition(RechargeEntity.ID, QueryCondition.le, id_le));}
					if(id_in!=null){qc.andCondition(new QueryCondition(RechargeEntity.ID, QueryCondition.in, id_in));}
															  					if(serialNumber!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERIAL_NUMBER, QueryCondition.eq, serialNumber));}
		            if(serialNumber_like!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERIAL_NUMBER, QueryCondition.like, serialNumber_like));}
		            if(serialNumber_isNull!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERIAL_NUMBER, QueryCondition.isNull, serialNumber_isNull));}
		            if(serialNumber_isNotNull!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERIAL_NUMBER, QueryCondition.isNotNull, serialNumber_isNotNull));}
				    if(serialNumber_in!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERIAL_NUMBER, QueryCondition.in, serialNumber_in));}
				  																if(olderId!=null){qc.andCondition(new QueryCondition(RechargeEntity.OLDER_ID, QueryCondition.eq, olderId));}
					if(olderId_gt!=null){qc.andCondition(new QueryCondition(RechargeEntity.OLDER_ID, QueryCondition.gt, olderId_gt));}
					if(olderId_ge!=null){qc.andCondition(new QueryCondition(RechargeEntity.OLDER_ID, QueryCondition.ge, olderId_ge));}
					if(olderId_lt!=null){qc.andCondition(new QueryCondition(RechargeEntity.OLDER_ID, QueryCondition.lt, olderId_lt));}
					if(olderId_le!=null){qc.andCondition(new QueryCondition(RechargeEntity.OLDER_ID, QueryCondition.le, olderId_le));}
					if(olderId_in!=null){qc.andCondition(new QueryCondition(RechargeEntity.OLDER_ID, QueryCondition.in, olderId_in));}
															  					if(olderName!=null){qc.andCondition(new QueryCondition(RechargeEntity.OLDER_NAME, QueryCondition.eq, olderName));}
		            if(olderName_like!=null){qc.andCondition(new QueryCondition(RechargeEntity.OLDER_NAME, QueryCondition.like, olderName_like));}
		            if(olderName_isNull!=null){qc.andCondition(new QueryCondition(RechargeEntity.OLDER_NAME, QueryCondition.isNull, olderName_isNull));}
		            if(olderName_isNotNull!=null){qc.andCondition(new QueryCondition(RechargeEntity.OLDER_NAME, QueryCondition.isNotNull, olderName_isNotNull));}
				    if(olderName_in!=null){qc.andCondition(new QueryCondition(RechargeEntity.OLDER_NAME, QueryCondition.in, olderName_in));}
				  															  					if(olderMemberNum!=null){qc.andCondition(new QueryCondition(RechargeEntity.OLDER_MEMBER_NUM, QueryCondition.eq, olderMemberNum));}
		            if(olderMemberNum_like!=null){qc.andCondition(new QueryCondition(RechargeEntity.OLDER_MEMBER_NUM, QueryCondition.like, olderMemberNum_like));}
		            if(olderMemberNum_isNull!=null){qc.andCondition(new QueryCondition(RechargeEntity.OLDER_MEMBER_NUM, QueryCondition.isNull, olderMemberNum_isNull));}
		            if(olderMemberNum_isNotNull!=null){qc.andCondition(new QueryCondition(RechargeEntity.OLDER_MEMBER_NUM, QueryCondition.isNotNull, olderMemberNum_isNotNull));}
				    if(olderMemberNum_in!=null){qc.andCondition(new QueryCondition(RechargeEntity.OLDER_MEMBER_NUM, QueryCondition.in, olderMemberNum_in));}
				  															  					if(createTime_gt!=null){qc.andCondition(new QueryCondition(RechargeEntity.CREATE_TIME, QueryCondition.gt, createTime_gt));}
					if(createTime_ge!=null){qc.andCondition(new QueryCondition(RechargeEntity.CREATE_TIME, QueryCondition.ge, createTime_ge));}
					if(createTime_lt!=null){qc.andCondition(new QueryCondition(RechargeEntity.CREATE_TIME, QueryCondition.lt, createTime_lt));}
					if(createTime_le!=null){qc.andCondition(new QueryCondition(RechargeEntity.CREATE_TIME, QueryCondition.le, createTime_le));}
				  																if(type!=null){qc.andCondition(new QueryCondition(RechargeEntity.TYPE, QueryCondition.eq, type));}
					if(type_gt!=null){qc.andCondition(new QueryCondition(RechargeEntity.TYPE, QueryCondition.gt, type_gt));}
					if(type_ge!=null){qc.andCondition(new QueryCondition(RechargeEntity.TYPE, QueryCondition.ge, type_ge));}
					if(type_lt!=null){qc.andCondition(new QueryCondition(RechargeEntity.TYPE, QueryCondition.lt, type_lt));}
					if(type_le!=null){qc.andCondition(new QueryCondition(RechargeEntity.TYPE, QueryCondition.le, type_le));}
					if(type_in!=null){qc.andCondition(new QueryCondition(RechargeEntity.TYPE, QueryCondition.in, type_in));}
																if(amount!=null){qc.andCondition(new QueryCondition(RechargeEntity.AMOUNT, QueryCondition.eq, amount));}
					if(amount_gt!=null){qc.andCondition(new QueryCondition(RechargeEntity.AMOUNT, QueryCondition.gt, amount_gt));}
					if(amount_ge!=null){qc.andCondition(new QueryCondition(RechargeEntity.AMOUNT, QueryCondition.ge, amount_ge));}
					if(amount_lt!=null){qc.andCondition(new QueryCondition(RechargeEntity.AMOUNT, QueryCondition.lt, amount_lt));}
					if(amount_le!=null){qc.andCondition(new QueryCondition(RechargeEntity.AMOUNT, QueryCondition.le, amount_le));}
					if(amount_in!=null){qc.andCondition(new QueryCondition(RechargeEntity.AMOUNT, QueryCondition.in, amount_in));}
															  					if(serviceTaskCode!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_TASK_CODE, QueryCondition.eq, serviceTaskCode));}
		            if(serviceTaskCode_like!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_TASK_CODE, QueryCondition.like, serviceTaskCode_like));}
		            if(serviceTaskCode_isNull!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_TASK_CODE, QueryCondition.isNull, serviceTaskCode_isNull));}
		            if(serviceTaskCode_isNotNull!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_TASK_CODE, QueryCondition.isNotNull, serviceTaskCode_isNotNull));}
				    if(serviceTaskCode_in!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_TASK_CODE, QueryCondition.in, serviceTaskCode_in));}
				  																if(serviceId!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_ID, QueryCondition.eq, serviceId));}
					if(serviceId_gt!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_ID, QueryCondition.gt, serviceId_gt));}
					if(serviceId_ge!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_ID, QueryCondition.ge, serviceId_ge));}
					if(serviceId_lt!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_ID, QueryCondition.lt, serviceId_lt));}
					if(serviceId_le!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_ID, QueryCondition.le, serviceId_le));}
					if(serviceId_in!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_ID, QueryCondition.in, serviceId_in));}
															  					if(serviceName!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_NAME, QueryCondition.eq, serviceName));}
		            if(serviceName_like!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_NAME, QueryCondition.like, serviceName_like));}
		            if(serviceName_isNull!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_NAME, QueryCondition.isNull, serviceName_isNull));}
		            if(serviceName_isNotNull!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_NAME, QueryCondition.isNotNull, serviceName_isNotNull));}
				    if(serviceName_in!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_NAME, QueryCondition.in, serviceName_in));}
				  																if(serviceSiteId!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_SITE_ID, QueryCondition.eq, serviceSiteId));}
					if(serviceSiteId_gt!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_SITE_ID, QueryCondition.gt, serviceSiteId_gt));}
					if(serviceSiteId_ge!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_SITE_ID, QueryCondition.ge, serviceSiteId_ge));}
					if(serviceSiteId_lt!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_SITE_ID, QueryCondition.lt, serviceSiteId_lt));}
					if(serviceSiteId_le!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_SITE_ID, QueryCondition.le, serviceSiteId_le));}
					if(serviceSiteId_in!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_SITE_ID, QueryCondition.in, serviceSiteId_in));}
															  					if(serviceSiteName!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_SITE_NAME, QueryCondition.eq, serviceSiteName));}
		            if(serviceSiteName_like!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_SITE_NAME, QueryCondition.like, serviceSiteName_like));}
		            if(serviceSiteName_isNull!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_SITE_NAME, QueryCondition.isNull, serviceSiteName_isNull));}
		            if(serviceSiteName_isNotNull!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_SITE_NAME, QueryCondition.isNotNull, serviceSiteName_isNotNull));}
				    if(serviceSiteName_in!=null){qc.andCondition(new QueryCondition(RechargeEntity.SERVICE_SITE_NAME, QueryCondition.in, serviceSiteName_in));}
				  																if(rechargeType!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_TYPE, QueryCondition.eq, rechargeType));}
					if(rechargeType_gt!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_TYPE, QueryCondition.gt, rechargeType_gt));}
					if(rechargeType_ge!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_TYPE, QueryCondition.ge, rechargeType_ge));}
					if(rechargeType_lt!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_TYPE, QueryCondition.lt, rechargeType_lt));}
					if(rechargeType_le!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_TYPE, QueryCondition.le, rechargeType_le));}
					if(rechargeType_in!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_TYPE, QueryCondition.in, rechargeType_in));}
																if(rechargeEmployeeId!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_EMPLOYEE_ID, QueryCondition.eq, rechargeEmployeeId));}
					if(rechargeEmployeeId_gt!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_EMPLOYEE_ID, QueryCondition.gt, rechargeEmployeeId_gt));}
					if(rechargeEmployeeId_ge!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_EMPLOYEE_ID, QueryCondition.ge, rechargeEmployeeId_ge));}
					if(rechargeEmployeeId_lt!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_EMPLOYEE_ID, QueryCondition.lt, rechargeEmployeeId_lt));}
					if(rechargeEmployeeId_le!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_EMPLOYEE_ID, QueryCondition.le, rechargeEmployeeId_le));}
					if(rechargeEmployeeId_in!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_EMPLOYEE_ID, QueryCondition.in, rechargeEmployeeId_in));}
															  					if(rechargeEmployeeName!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_EMPLOYEE_NAME, QueryCondition.eq, rechargeEmployeeName));}
		            if(rechargeEmployeeName_like!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_EMPLOYEE_NAME, QueryCondition.like, rechargeEmployeeName_like));}
		            if(rechargeEmployeeName_isNull!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_EMPLOYEE_NAME, QueryCondition.isNull, rechargeEmployeeName_isNull));}
		            if(rechargeEmployeeName_isNotNull!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_EMPLOYEE_NAME, QueryCondition.isNotNull, rechargeEmployeeName_isNotNull));}
				    if(rechargeEmployeeName_in!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_EMPLOYEE_NAME, QueryCondition.in, rechargeEmployeeName_in));}
				  															  					if(rechargeEmployeeIndexNum!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_EMPLOYEE_INDEX_NUM, QueryCondition.eq, rechargeEmployeeIndexNum));}
		            if(rechargeEmployeeIndexNum_like!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_EMPLOYEE_INDEX_NUM, QueryCondition.like, rechargeEmployeeIndexNum_like));}
		            if(rechargeEmployeeIndexNum_isNull!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_EMPLOYEE_INDEX_NUM, QueryCondition.isNull, rechargeEmployeeIndexNum_isNull));}
		            if(rechargeEmployeeIndexNum_isNotNull!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_EMPLOYEE_INDEX_NUM, QueryCondition.isNotNull, rechargeEmployeeIndexNum_isNotNull));}
				    if(rechargeEmployeeIndexNum_in!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_EMPLOYEE_INDEX_NUM, QueryCondition.in, rechargeEmployeeIndexNum_in));}
				  																if(rechargeMethod!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_METHOD, QueryCondition.eq, rechargeMethod));}
					if(rechargeMethod_gt!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_METHOD, QueryCondition.gt, rechargeMethod_gt));}
					if(rechargeMethod_ge!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_METHOD, QueryCondition.ge, rechargeMethod_ge));}
					if(rechargeMethod_lt!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_METHOD, QueryCondition.lt, rechargeMethod_lt));}
					if(rechargeMethod_le!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_METHOD, QueryCondition.le, rechargeMethod_le));}
					if(rechargeMethod_in!=null){qc.andCondition(new QueryCondition(RechargeEntity.RECHARGE_METHOD, QueryCondition.in, rechargeMethod_in));}
										return qc; 
	}
		
		
}
