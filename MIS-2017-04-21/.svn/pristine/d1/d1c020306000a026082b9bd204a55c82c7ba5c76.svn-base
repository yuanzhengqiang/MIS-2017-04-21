package fsk.parse.examinationRecord;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.db.query.OrderVO;
import com.framework.system.util.JsonUtil;

import fsk.entity.employee.EmployeeEntity;
import fsk.entity.examinationData.ExaminationDataEntity;
import fsk.entity.examinationDataFile.ExaminationDataFileEntity;
import fsk.entity.examinationDataPhoto.ExaminationDataPhotoEntity;
import fsk.entity.examinationRecord.ExaminationRecordEntity;
import fsk.entity.examinationRecordFile.ExaminationRecordFileEntity;
import fsk.entity.examinationRecordPhoto.ExaminationRecordPhotoEntity;
import fsk.entity.older.OlderEntity;

/**
 * @Title: Parse
 * @Description: 体检记录信息表解析器
 * @author feng.gu
 * @date 2016-10-11 15:23:10
 * @version V1.0
 * 
 */
public class ExaminationRecordParse {
	private static Logger logger = Logger
			.getLogger(ExaminationRecordParse.class);
	private static ExaminationRecordParse examinationRecordParse;

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static ExaminationRecordParse getInstance() {
		if (examinationRecordParse == null) {
			examinationRecordParse = new ExaminationRecordParse();
		}
		return examinationRecordParse;
	}

	public Map<String, Object> parse(int type, String command, String reqStr,
			HttpServletRequest request) {
		// 定义返回参数
		Map<String, Object> parseMap = new HashMap<String, Object>();
		if (type == 1) {
			// json
			parseMap = this.parseByJson(command, reqStr, request);
		} else if (type == 2) {
			// xml
			parseMap = this.parseByXml(command, reqStr, request);
		}
		return parseMap;
	}

	private Map<String, Object> parseByJson(String command, String reqStr,
			HttpServletRequest request) {
		// 定义返回参数
		Map<String, Object> parseMap = new HashMap<String, Object>();
		try {
			String actionReturn = null;
			ExaminationRecordEntity examinationRecordReturn = null;
			List<ExaminationRecordEntity> examinationRecordListReturn = null;
			Integer idReturn = null;
			Map<String, Object> queryMapReturn = null;
			int pagenoReturn = 1;
			int pagesizeReturn = 10;
			List<OrderVO> orderListReturn = null;

			Boolean olderShowReturn = false;
			Boolean delOlderReturn = false;
			Boolean createEmployeeShowReturn = false;
			Boolean delCreateEmployeeReturn = false;
			Boolean examinationRecordFileListShowReturn = false;
			Boolean delExaminationRecordFileListReturn = false;
			Boolean examinationRecordPhotoListShowReturn = false;
			Boolean delExaminationRecordPhotoListReturn = false;
			Boolean examinationDataListShowReturn = false;
			Boolean delExaminationDataListReturn = false;

			// json
			Map reqParams = JsonUtil.getMap4Json(reqStr);
			JSONObject contentreq = (JSONObject) reqParams.get("content");
			if ("ADD_EXAMINATION_RECORD_INFO_REQUEST".equals(command)) {
				actionReturn = "save";
				examinationRecordReturn = new ExaminationRecordEntity();
				if (true) {
					if (contentreq != null) {
						Integer id = (Integer) contentreq.get("id");
						if (id != null) {
							examinationRecordReturn.setId(id);
						}
						Integer olderId = (Integer) contentreq.get("olderId");
						if (olderId != null) {
							examinationRecordReturn.setOlderId(olderId);
						}
						String olderName = (String) contentreq.get("olderName");
						if (olderName != null) {
							examinationRecordReturn.setOlderName(olderName);
						}
						String olderAge = (String) contentreq.get("olderAge");
						if (olderAge != null) {
							examinationRecordReturn.setOlderAge(olderAge);
						}
						String examinationOrganization = (String) contentreq
								.get("examinationOrganization");
						if (examinationOrganization != null) {
							examinationRecordReturn
									.setExaminationOrganization(examinationOrganization);
						}
						String examinationTime = (String) contentreq
								.get("examinationTime");
						if (examinationTime != null) {
							examinationRecordReturn
									.setExaminationTime(examinationTime);
						}
						String createTime = (String) contentreq
								.get("createTime");
						if (createTime != null) {
							examinationRecordReturn.setCreateTime(createTime);
						}
						Integer createEmployeeId = (Integer) contentreq
								.get("createEmployeeId");
						if (createEmployeeId != null) {
							examinationRecordReturn
									.setCreateEmployeeId(createEmployeeId);
						}
						String createEmployeeName = (String) contentreq
								.get("createEmployeeName");
						if (createEmployeeName != null) {
							examinationRecordReturn
									.setCreateEmployeeName(createEmployeeName);
						}
						String contactTel = (String) contentreq
								.get("contactTel");
						if (contactTel != null) {
							examinationRecordReturn.setContactTel(contactTel);
						}
						String conclusion = (String) contentreq
								.get("conclusion");
						if (conclusion != null) {
							examinationRecordReturn.setConclusion(conclusion);
						}
						String suggestion = (String) contentreq
								.get("suggestion");
						if (suggestion != null) {
							examinationRecordReturn.setSuggestion(suggestion);
						}
					}
				}
				if (true) {
					Object older = contentreq.get("older");
					if (older != null) {
						JSONObject obj = (JSONObject) older;
						if (obj != null) {
							OlderEntity entity = new OlderEntity();
							Integer id = (Integer) obj.get("id");
							if (id != null) {
								entity.setId(id);
							}
							Integer nurseEmployeeId = (Integer) obj
									.get("nurseEmployeeId");
							if (nurseEmployeeId != null) {
								entity.setNurseEmployeeId(nurseEmployeeId);
							}
							Integer userId = (Integer) obj.get("userId");
							if (userId != null) {
								entity.setUserId(userId);
							}
							String memberNum = (String) obj.get("memberNum");
							if (memberNum != null) {
								entity.setMemberNum(memberNum);
							}
							String memberCard = (String) obj.get("memberCard");
							if (memberCard != null) {
								entity.setMemberCard(memberCard);
							}
							String memberSource = (String) obj
									.get("memberSource");
							if (memberSource != null) {
								entity.setMemberSource(memberSource);
							}
							String attentionPoint = (String) obj
									.get("attentionPoint");
							if (attentionPoint != null) {
								entity.setAttentionPoint(attentionPoint);
							}
							Integer nurseLevel = (Integer) obj
									.get("nurseLevel");
							if (nurseLevel != null) {
								entity.setNurseLevel(nurseLevel);
							}
							Integer memberStatus = (Integer) obj
									.get("memberStatus");
							if (memberStatus != null) {
								entity.setMemberStatus(memberStatus);
							}
							String lastAssessmentDate = (String) obj
									.get("lastAssessmentDate");
							if (lastAssessmentDate != null) {
								entity.setLastAssessmentDate(lastAssessmentDate);
							}
							Integer assessmentCycle = (Integer) obj
									.get("assessmentCycle");
							if (assessmentCycle != null) {
								entity.setAssessmentCycle(assessmentCycle);
							}
							Double chargeMonth = JsonUtil.getJSONDouble(obj,
									"chargeMonth");
							if (chargeMonth != null) {
								entity.setChargeMonth(BigDecimal
										.valueOf(chargeMonth));
							}
							Integer requiredServiceTimes = (Integer) obj
									.get("requiredServiceTimes");
							if (requiredServiceTimes != null) {
								entity.setRequiredServiceTimes(requiredServiceTimes);
							}
							Integer alreadyServiceTimes = (Integer) obj
									.get("alreadyServiceTimes");
							if (alreadyServiceTimes != null) {
								entity.setAlreadyServiceTimes(alreadyServiceTimes);
							}
							String mainPhoto = (String) obj.get("mainPhoto");
							if (mainPhoto != null) {
								entity.setMainPhoto(mainPhoto);
							}
							String name = (String) obj.get("name");
							if (name != null) {
								entity.setName(name);
							}
							String idnumber = (String) obj.get("idnumber");
							if (idnumber != null) {
								entity.setIdnumber(idnumber);
							}
							String socialSecurityNumber = (String) obj
									.get("socialSecurityNumber");
							if (socialSecurityNumber != null) {
								entity.setSocialSecurityNumber(socialSecurityNumber);
							}
							String gender = (String) obj.get("gender");
							if (gender != null) {
								entity.setGender(gender);
							}
							String birthdate = (String) obj.get("birthdate");
							if (birthdate != null) {
								entity.setBirthdate(birthdate);
							}
							String nation = (String) obj.get("nation");
							if (nation != null) {
								entity.setNation(nation);
							}
							String education = (String) obj.get("education");
							if (education != null) {
								entity.setEducation(education);
							}
							String maritalStatus = (String) obj
									.get("maritalStatus");
							if (maritalStatus != null) {
								entity.setMaritalStatus(maritalStatus);
							}
							String occupation = (String) obj.get("occupation");
							if (occupation != null) {
								entity.setOccupation(occupation);
							}
							String homeTel = (String) obj.get("homeTel");
							if (homeTel != null) {
								entity.setHomeTel(homeTel);
							}
							String mobileTel = (String) obj.get("mobileTel");
							if (mobileTel != null) {
								entity.setMobileTel(mobileTel);
							}
							String bloodType = (String) obj.get("bloodType");
							if (bloodType != null) {
								entity.setBloodType(bloodType);
							}
							String symptom = (String) obj.get("symptom");
							if (symptom != null) {
								entity.setSymptom(symptom);
							}
							String symptomOther = (String) obj
									.get("symptomOther");
							if (symptomOther != null) {
								entity.setSymptomOther(symptomOther);
							}
							String drugAllergy = (String) obj
									.get("drugAllergy");
							if (drugAllergy != null) {
								entity.setDrugAllergy(drugAllergy);
							}
							String drugAllergyOther = (String) obj
									.get("drugAllergyOther");
							if (drugAllergyOther != null) {
								entity.setDrugAllergyOther(drugAllergyOther);
							}
							String cognitive = (String) obj.get("cognitive");
							if (cognitive != null) {
								entity.setCognitive(cognitive);
							}
							String emotion = (String) obj.get("emotion");
							if (emotion != null) {
								entity.setEmotion(emotion);
							}
							String sportsFre = (String) obj.get("sportsFre");
							if (sportsFre != null) {
								entity.setSportsFre(sportsFre);
							}
							Integer sportsTime = (Integer) obj
									.get("sportsTime");
							if (sportsTime != null) {
								entity.setSportsTime(sportsTime);
							}
							Integer holdSportsTime = (Integer) obj
									.get("holdSportsTime");
							if (holdSportsTime != null) {
								entity.setHoldSportsTime(holdSportsTime);
							}
							String sportsType = (String) obj.get("sportsType");
							if (sportsType != null) {
								entity.setSportsType(sportsType);
							}
							String diet = (String) obj.get("diet");
							if (diet != null) {
								entity.setDiet(diet);
							}
							String smoking = (String) obj.get("smoking");
							if (smoking != null) {
								entity.setSmoking(smoking);
							}
							Integer smokingDay = (Integer) obj
									.get("smokingDay");
							if (smokingDay != null) {
								entity.setSmokingDay(smokingDay);
							}
							String quitAlcohol = (String) obj
									.get("quitAlcohol");
							if (quitAlcohol != null) {
								entity.setQuitAlcohol(quitAlcohol);
							}
							Integer quitAlcoholAge = (Integer) obj
									.get("quitAlcoholAge");
							if (quitAlcoholAge != null) {
								entity.setQuitAlcoholAge(quitAlcoholAge);
							}
							Integer startAlcoholAge = (Integer) obj
									.get("startAlcoholAge");
							if (startAlcoholAge != null) {
								entity.setStartAlcoholAge(startAlcoholAge);
							}
							Integer drunkYear = (Integer) obj.get("drunkYear");
							if (drunkYear != null) {
								entity.setDrunkYear(drunkYear);
							}
							String alcoholType = (String) obj
									.get("alcoholType");
							if (alcoholType != null) {
								entity.setAlcoholType(alcoholType);
							}
							String alcoholTypeOther = (String) obj
									.get("alcoholTypeOther");
							if (alcoholTypeOther != null) {
								entity.setAlcoholTypeOther(alcoholTypeOther);
							}
							String brainBloodVessel = (String) obj
									.get("brainBloodVessel");
							if (brainBloodVessel != null) {
								entity.setBrainBloodVessel(brainBloodVessel);
							}
							String brainBloodVesselOther = (String) obj
									.get("brainBloodVesselOther");
							if (brainBloodVesselOther != null) {
								entity.setBrainBloodVesselOther(brainBloodVesselOther);
							}
							String kindney = (String) obj.get("kindney");
							if (kindney != null) {
								entity.setKindney(kindney);
							}
							String kindneyOther = (String) obj
									.get("kindneyOther");
							if (kindneyOther != null) {
								entity.setKindneyOther(kindneyOther);
							}
							String heart = (String) obj.get("heart");
							if (heart != null) {
								entity.setHeart(heart);
							}
							String heartOther = (String) obj.get("heartOther");
							if (heartOther != null) {
								entity.setHeartOther(heartOther);
							}
							String bloodVessel = (String) obj
									.get("bloodVessel");
							if (bloodVessel != null) {
								entity.setBloodVessel(bloodVessel);
							}
							String bloodVesselOther = (String) obj
									.get("bloodVesselOther");
							if (bloodVesselOther != null) {
								entity.setBloodVesselOther(bloodVesselOther);
							}
							String eye = (String) obj.get("eye");
							if (eye != null) {
								entity.setEye(eye);
							}
							String eyeOther = (String) obj.get("eyeOther");
							if (eyeOther != null) {
								entity.setEyeOther(eyeOther);
							}
							String otherDisease = (String) obj
									.get("otherDisease");
							if (otherDisease != null) {
								entity.setOtherDisease(otherDisease);
							}
							Integer serviceProvinceId = (Integer) obj
									.get("serviceProvinceId");
							if (serviceProvinceId != null) {
								entity.setServiceProvinceId(serviceProvinceId);
							}
							Integer serviceCityId = (Integer) obj
									.get("serviceCityId");
							if (serviceCityId != null) {
								entity.setServiceCityId(serviceCityId);
							}
							Integer serviceAreaId = (Integer) obj
									.get("serviceAreaId");
							if (serviceAreaId != null) {
								entity.setServiceAreaId(serviceAreaId);
							}
							Integer serviceStreetId = (Integer) obj
									.get("serviceStreetId");
							if (serviceStreetId != null) {
								entity.setServiceStreetId(serviceStreetId);
							}
							String familyComposition = (String) obj
									.get("familyComposition");
							if (familyComposition != null) {
								entity.setFamilyComposition(familyComposition);
							}
							String live = (String) obj.get("live");
							if (live != null) {
								entity.setLive(live);
							}
							String liveOther = (String) obj.get("liveOther");
							if (liveOther != null) {
								entity.setLiveOther(liveOther);
							}
							String economic = (String) obj.get("economic");
							if (economic != null) {
								entity.setEconomic(economic);
							}
							String economicOther = (String) obj
									.get("economicOther");
							if (economicOther != null) {
								entity.setEconomicOther(economicOther);
							}
							String house = (String) obj.get("house");
							if (house != null) {
								entity.setHouse(house);
							}
							String houseOther = (String) obj.get("houseOther");
							if (houseOther != null) {
								entity.setHouseOther(houseOther);
							}
							String interest = (String) obj.get("interest");
							if (interest != null) {
								entity.setInterest(interest);
							}
							String lifeExperience = (String) obj
									.get("lifeExperience");
							if (lifeExperience != null) {
								entity.setLifeExperience(lifeExperience);
							}
							String specialExperience = (String) obj
									.get("specialExperience");
							if (specialExperience != null) {
								entity.setSpecialExperience(specialExperience);
							}
							String specialExperienceOther = (String) obj
									.get("specialExperienceOther");
							if (specialExperienceOther != null) {
								entity.setSpecialExperienceOther(specialExperienceOther);
							}
							String residence = (String) obj.get("residence");
							if (residence != null) {
								entity.setResidence(residence);
							}
							String elevator = (String) obj.get("elevator");
							if (elevator != null) {
								entity.setElevator(elevator);
							}
							String step = (String) obj.get("step");
							if (step != null) {
								entity.setStep(step);
							}
							String stepOther = (String) obj.get("stepOther");
							if (stepOther != null) {
								entity.setStepOther(stepOther);
							}
							String restroom = (String) obj.get("restroom");
							if (restroom != null) {
								entity.setRestroom(restroom);
							}
							String restroomOther = (String) obj
									.get("restroomOther");
							if (restroomOther != null) {
								entity.setRestroomOther(restroomOther);
							}
							String bathroomTub = (String) obj
									.get("bathroomTub");
							if (bathroomTub != null) {
								entity.setBathroomTub(bathroomTub);
							}
							String bathroomShower = (String) obj
									.get("bathroomShower");
							if (bathroomShower != null) {
								entity.setBathroomShower(bathroomShower);
							}
							String bathroomStrip = (String) obj
									.get("bathroomStrip");
							if (bathroomStrip != null) {
								entity.setBathroomStrip(bathroomStrip);
							}
							String kitchenOther = (String) obj
									.get("kitchenOther");
							if (kitchenOther != null) {
								entity.setKitchenOther(kitchenOther);
							}
							String kitchen = (String) obj.get("kitchen");
							if (kitchen != null) {
								entity.setKitchen(kitchen);
							}
							String clean = (String) obj.get("clean");
							if (clean != null) {
								entity.setClean(clean);
							}
							String shopping = (String) obj.get("shopping");
							if (shopping != null) {
								entity.setShopping(shopping);
							}
							String shoppingTraffic = (String) obj
									.get("shoppingTraffic");
							if (shoppingTraffic != null) {
								entity.setShoppingTraffic(shoppingTraffic);
							}
							String shoppingAccessibility = (String) obj
									.get("shoppingAccessibility");
							if (shoppingAccessibility != null) {
								entity.setShoppingAccessibility(shoppingAccessibility);
							}
							String shoppingOther = (String) obj
									.get("shoppingOther");
							if (shoppingOther != null) {
								entity.setShoppingOther(shoppingOther);
							}
							String livingEnvironmentDefect = (String) obj
									.get("livingEnvironmentDefect");
							if (livingEnvironmentDefect != null) {
								entity.setLivingEnvironmentDefect(livingEnvironmentDefect);
							}
							String dailyWater = (String) obj.get("dailyWater");
							if (dailyWater != null) {
								entity.setDailyWater(dailyWater);
							}
							String dailyDrinking = (String) obj
									.get("dailyDrinking");
							if (dailyDrinking != null) {
								entity.setDailyDrinking(dailyDrinking);
							}
							String drinking = (String) obj.get("drinking");
							if (drinking != null) {
								entity.setDrinking(drinking);
							}
							String gadget = (String) obj.get("gadget");
							if (gadget != null) {
								entity.setGadget(gadget);
							}
							String mainFood = (String) obj.get("mainFood");
							if (mainFood != null) {
								entity.setMainFood(mainFood);
							}
							String fruitsVegetables = (String) obj
									.get("fruitsVegetables");
							if (fruitsVegetables != null) {
								entity.setFruitsVegetables(fruitsVegetables);
							}
							String salt = (String) obj.get("salt");
							if (salt != null) {
								entity.setSalt(salt);
							}
							String oil = (String) obj.get("oil");
							if (oil != null) {
								entity.setOil(oil);
							}
							String fish = (String) obj.get("fish");
							if (fish != null) {
								entity.setFish(fish);
							}
							String meat = (String) obj.get("meat");
							if (meat != null) {
								entity.setMeat(meat);
							}
							String beanProducts = (String) obj
									.get("beanProducts");
							if (beanProducts != null) {
								entity.setBeanProducts(beanProducts);
							}
							String milk = (String) obj.get("milk");
							if (milk != null) {
								entity.setMilk(milk);
							}
							String foodForm = (String) obj.get("foodForm");
							if (foodForm != null) {
								entity.setFoodForm(foodForm);
							}
							String dysphagia = (String) obj.get("dysphagia");
							if (dysphagia != null) {
								entity.setDysphagia(dysphagia);
							}
							String morningSit = (String) obj.get("morningSit");
							if (morningSit != null) {
								entity.setMorningSit(morningSit);
							}
							String noonSit = (String) obj.get("noonSit");
							if (noonSit != null) {
								entity.setNoonSit(noonSit);
							}
							String nightSit = (String) obj.get("nightSit");
							if (nightSit != null) {
								entity.setNightSit(nightSit);
							}
							String lateAfternoonTea = (String) obj
									.get("lateAfternoonTea");
							if (lateAfternoonTea != null) {
								entity.setLateAfternoonTea(lateAfternoonTea);
							}
							String urine = (String) obj.get("urine");
							if (urine != null) {
								entity.setUrine(urine);
							}
							String urineNum = (String) obj.get("urineNum");
							if (urineNum != null) {
								entity.setUrineNum(urineNum);
							}
							String urineMethod = (String) obj
									.get("urineMethod");
							if (urineMethod != null) {
								entity.setUrineMethod(urineMethod);
							}
							String urineType = (String) obj.get("urineType");
							if (urineType != null) {
								entity.setUrineType(urineType);
							}
							String urineTypeOther = (String) obj
									.get("urineTypeOther");
							if (urineTypeOther != null) {
								entity.setUrineTypeOther(urineTypeOther);
							}
							String shit = (String) obj.get("shit");
							if (shit != null) {
								entity.setShit(shit);
							}
							String shitDay = (String) obj.get("shitDay");
							if (shitDay != null) {
								entity.setShitDay(shitDay);
							}
							String shitMethod = (String) obj.get("shitMethod");
							if (shitMethod != null) {
								entity.setShitMethod(shitMethod);
							}
							String shitType = (String) obj.get("shitType");
							if (shitType != null) {
								entity.setShitType(shitType);
							}
							String shitTypeOther = (String) obj
									.get("shitTypeOther");
							if (shitTypeOther != null) {
								entity.setShitTypeOther(shitTypeOther);
							}
							String sportsForm = (String) obj.get("sportsForm");
							if (sportsForm != null) {
								entity.setSportsForm(sportsForm);
							}
							String sportsT = (String) obj.get("sportsT");
							if (sportsT != null) {
								entity.setSportsT(sportsT);
							}
							String sportsF = (String) obj.get("sportsF");
							if (sportsF != null) {
								entity.setSportsF(sportsF);
							}
							String sportsNo = (String) obj.get("sportsNo");
							if (sportsNo != null) {
								entity.setSportsNo(sportsNo);
							}
							String bathNum = (String) obj.get("bathNum");
							if (bathNum != null) {
								entity.setBathNum(bathNum);
							}
							String bathMethod = (String) obj.get("bathMethod");
							if (bathMethod != null) {
								entity.setBathMethod(bathMethod);
							}
							String goOut = (String) obj.get("goOut");
							if (goOut != null) {
								entity.setGoOut(goOut);
							}
							String goOutOther = (String) obj.get("goOutOther");
							if (goOutOther != null) {
								entity.setGoOutOther(goOutOther);
							}
							String brush = (String) obj.get("brush");
							if (brush != null) {
								entity.setBrush(brush);
							}
							String communication = (String) obj
									.get("communication");
							if (communication != null) {
								entity.setCommunication(communication);
							}
							String sleepHour = (String) obj.get("sleepHour");
							if (sleepHour != null) {
								entity.setSleepHour(sleepHour);
							}
							String sleepQuality = (String) obj
									.get("sleepQuality");
							if (sleepQuality != null) {
								entity.setSleepQuality(sleepQuality);
							}
							String morningSpirit = (String) obj
									.get("morningSpirit");
							if (morningSpirit != null) {
								entity.setMorningSpirit(morningSpirit);
							}
							examinationRecordReturn.setOlder(entity);
						}
					}
				}
				if (true) {
					Object createEmployee = contentreq.get("createEmployee");
					if (createEmployee != null) {
						JSONObject obj = (JSONObject) createEmployee;
						if (obj != null) {
							EmployeeEntity entity = new EmployeeEntity();
							Integer id = (Integer) obj.get("id");
							if (id != null) {
								entity.setId(id);
							}
							Integer userId = (Integer) obj.get("userId");
							if (userId != null) {
								entity.setUserId(userId);
							}
							Integer leaderEmployeeId = (Integer) obj
									.get("leaderEmployeeId");
							if (leaderEmployeeId != null) {
								entity.setLeaderEmployeeId(leaderEmployeeId);
							}
							String mainPhoto = (String) obj.get("mainPhoto");
							if (mainPhoto != null) {
								entity.setMainPhoto(mainPhoto);
							}
							String name = (String) obj.get("name");
							if (name != null) {
								entity.setName(name);
							}
							String idnumber = (String) obj.get("idnumber");
							if (idnumber != null) {
								entity.setIdnumber(idnumber);
							}
							String gender = (String) obj.get("gender");
							if (gender != null) {
								entity.setGender(gender);
							}
							String mobileTel = (String) obj.get("mobileTel");
							if (mobileTel != null) {
								entity.setMobileTel(mobileTel);
							}
							String homeTel = (String) obj.get("homeTel");
							if (homeTel != null) {
								entity.setHomeTel(homeTel);
							}
							String birthdate = (String) obj.get("birthdate");
							if (birthdate != null) {
								entity.setBirthdate(birthdate);
							}
							Double starLevel = JsonUtil.getJSONDouble(obj,
									"starLevel");
							if (starLevel != null) {
								entity.setStarLevel(BigDecimal
										.valueOf(starLevel));
							}
							String indexNum = (String) obj.get("indexNum");
							if (indexNum != null) {
								entity.setIndexNum(indexNum);
							}
							Integer department = (Integer) obj
									.get("department");
							if (department != null) {
								entity.setDepartment(department);
							}
							Integer secondDepartmentId = (Integer) obj
									.get("secondDepartmentId");
							if (secondDepartmentId != null) {
								entity.setSecondDepartmentId(secondDepartmentId);
							}
							examinationRecordReturn.setCreateEmployee(entity);
						}
					}
				}
				if (true) {
					Object examinationRecordFileList = contentreq
							.get("examinationRecordFileList");
					if (examinationRecordFileList != null) {
						JSONArray list = (JSONArray) examinationRecordFileList;
						if (list != null) {
							List<ExaminationRecordFileEntity> entityList = new ArrayList<ExaminationRecordFileEntity>();
							for (int i = 0; i < list.size(); i++) {
								JSONObject obj = list.getJSONObject(i);
								if (obj != null) {
									ExaminationRecordFileEntity entity = new ExaminationRecordFileEntity();

									Integer id = (Integer) obj.get("id");
									if (id != null) {
										entity.setId(id);
									}
									String url = (String) obj.get("url");
									if (url != null) {
										entity.setUrl(url);
									}
									String name = (String) obj.get("name");
									if (name != null) {
										entity.setName(name);
									}
									String des = (String) obj.get("des");
									if (des != null) {
										entity.setDes(des);
									}
									Integer showIndex = (Integer) obj
											.get("showIndex");
									if (showIndex != null) {
										entity.setShowIndex(showIndex);
									}
									Integer examinationRecordId = (Integer) obj
											.get("examinationRecordId");
									if (examinationRecordId != null) {
										entity.setExaminationRecordId(examinationRecordId);
									}
									String createPerson = (String) obj
											.get("createPerson");
									if (createPerson != null) {
										entity.setCreatePerson(createPerson);
									}
									String createTime = (String) obj
											.get("createTime");
									if (createTime != null) {
										entity.setCreateTime(createTime);
									}
									entityList.add(entity);
								}
							}
							examinationRecordReturn
									.setExaminationRecordFileList(entityList);
						}

					}
				}
				if (true) {
					Object examinationRecordPhotoList = contentreq
							.get("examinationRecordPhotoList");
					if (examinationRecordPhotoList != null) {
						JSONArray list = (JSONArray) examinationRecordPhotoList;
						if (list != null) {
							List<ExaminationRecordPhotoEntity> entityList = new ArrayList<ExaminationRecordPhotoEntity>();
							for (int i = 0; i < list.size(); i++) {
								JSONObject obj = list.getJSONObject(i);
								if (obj != null) {
									ExaminationRecordPhotoEntity entity = new ExaminationRecordPhotoEntity();

									Integer id = (Integer) obj.get("id");
									if (id != null) {
										entity.setId(id);
									}
									String url = (String) obj.get("url");
									if (url != null) {
										entity.setUrl(url);
									}
									String name = (String) obj.get("name");
									if (name != null) {
										entity.setName(name);
									}
									String des = (String) obj.get("des");
									if (des != null) {
										entity.setDes(des);
									}
									Integer showIndex = (Integer) obj
											.get("showIndex");
									if (showIndex != null) {
										entity.setShowIndex(showIndex);
									}
									Integer examinationRecordId = (Integer) obj
											.get("examinationRecordId");
									if (examinationRecordId != null) {
										entity.setExaminationRecordId(examinationRecordId);
									}
									String createPerson = (String) obj
											.get("createPerson");
									if (createPerson != null) {
										entity.setCreatePerson(createPerson);
									}
									String createTime = (String) obj
											.get("createTime");
									if (createTime != null) {
										entity.setCreateTime(createTime);
									}
									entityList.add(entity);
								}
							}
							examinationRecordReturn
									.setExaminationRecordPhotoList(entityList);
						}

					}
				}
				if (true) {
					Object examinationDataList = contentreq
							.get("examinationDataList");
					if (examinationDataList != null) {
						JSONArray list = (JSONArray) examinationDataList;
						if (list != null) {
							List<ExaminationDataEntity> entityList = new ArrayList<ExaminationDataEntity>();
							for (int i = 0; i < list.size(); i++) {
								JSONObject obj = list.getJSONObject(i);
								if (obj != null) {
									ExaminationDataEntity entity = new ExaminationDataEntity();

									Integer id = (Integer) obj.get("id");
									if (id != null) {
										entity.setId(id);
									}
									Integer type1DataDicId = (Integer) obj
											.get("type1DataDicId");
									if (type1DataDicId != null) {
										entity.setType1DataDicId(type1DataDicId);
									}
									Integer type2DataDicId = (Integer) obj
											.get("type2DataDicId");
									if (type2DataDicId != null) {
										entity.setType2DataDicId(type2DataDicId);
									}
									String examinationItem = (String) obj
											.get("examinationItem");
									if (examinationItem != null) {
										entity.setExaminationItem(examinationItem);
									}
									String examinationResult = (String) obj
											.get("examinationResult");
									if (examinationResult != null) {
										entity.setExaminationResult(examinationResult);
									}
									String unit = (String) obj.get("unit");
									if (unit != null) {
										entity.setUnit(unit);
									}
									String abnormalPrompt = (String) obj
											.get("abnormalPrompt");
									if (abnormalPrompt != null) {
										entity.setAbnormalPrompt(abnormalPrompt);
									}
									String referenceRange = (String) obj
											.get("referenceRange");
									if (referenceRange != null) {
										entity.setReferenceRange(referenceRange);
									}
									String conclusion = (String) obj
											.get("conclusion");
									if (conclusion != null) {
										entity.setConclusion(conclusion);
									}
									String examinationTime = (String) obj
											.get("examinationTime");
									if (examinationTime != null) {
										entity.setExaminationTime(examinationTime);
									}
									String createTime = (String) obj
											.get("createTime");
									if (createTime != null) {
										entity.setCreateTime(createTime);
									}
									Integer examinationRecordId = (Integer) obj
											.get("examinationRecordId");
									if (examinationRecordId != null) {
										entity.setExaminationRecordId(examinationRecordId);
									}
									// 解析体检数据关联表的文件关联表
									Object examinationDataFileList = obj
											.get("examinationDataFileList");
									if (examinationDataFileList != null) {
										JSONArray filelist = (JSONArray) examinationDataFileList;
										if (filelist != null) {
											List<ExaminationDataFileEntity> entityfileList = new ArrayList<ExaminationDataFileEntity>();
											for (int j = 0; j < filelist.size(); j++) {
												JSONObject objfile = filelist
														.getJSONObject(j);
												if (objfile != null) {
													ExaminationDataFileEntity fileentity = new ExaminationDataFileEntity();
													Integer idt = (Integer) objfile
															.get("id");
													if (idt != null) {
														fileentity.setId(idt);
													}
													String urlt = (String) objfile
															.get("url");
													if (urlt != null) {
														fileentity.setUrl(urlt);
													}
													String namet = (String) objfile
															.get("name");
													if (namet != null) {
														fileentity
																.setName(namet);
													}
													String dest = (String) objfile
															.get("des");
													if (dest != null) {
														fileentity.setDes(dest);
													}
													Integer showin = (Integer) objfile
															.get("showIndex");
													if (showin != null) {
														fileentity
																.setShowIndex(showin);
													}
													Integer examinationDataIdt = (Integer) objfile
															.get("examinationDataId");
													if (examinationDataIdt != null) {
														fileentity
																.setExaminationDataId(examinationDataIdt);
													}
													String creatp = (String) objfile
															.get("createPerson");
													if (creatp != null) {
														fileentity
																.setCreatePerson(creatp);
													}
													String creattime = (String) objfile
															.get("createTime");
													if (creattime != null) {
														fileentity
																.setCreateTime(creattime);
													}
													entityfileList
															.add(fileentity);
												}
											}
											entity.setExaminationDataFileList(entityfileList);
										}
									}
									// 解析文件关联表的图片关联表
									Object examinationDataPhotoList = obj
											.get("examinationDataPhotoList");
									if (examinationDataPhotoList != null) {
										JSONArray photolist = (JSONArray) examinationDataPhotoList;
										if (photolist != null) {
											List<ExaminationDataPhotoEntity> entityphotoList = new ArrayList<ExaminationDataPhotoEntity>();
											for (int j = 0; j < photolist
													.size(); j++) {
												JSONObject jsonphoto = photolist
														.getJSONObject(j);
												if (jsonphoto != null) {
													ExaminationDataPhotoEntity objphoto = new ExaminationDataPhotoEntity();
													Integer idt = (Integer) jsonphoto
															.get("id");
													if (idt != null) {
														objphoto.setId(idt);
													}
													String urlt = (String) jsonphoto
															.get("url");
													if (urlt != null) {
														objphoto.setUrl(urlt);
													}
													String namet = (String) jsonphoto
															.get("name");
													if (namet != null) {
														objphoto.setName(namet);
													}
													String dest = (String) jsonphoto
															.get("des");
													if (dest != null) {
														objphoto.setDes(dest);
													}
													Integer showin = (Integer) jsonphoto
															.get("showIndex");
													if (showin != null) {
														objphoto.setShowIndex(showin);
													}
													Integer examinationDataIdt = (Integer) jsonphoto
															.get("examinationDataId");
													if (examinationDataIdt != null) {
														objphoto.setExaminationDataId(examinationDataIdt);
													}
													String creatp = (String) jsonphoto
															.get("createPerson");
													if (creatp != null) {
														objphoto.setCreatePerson(creatp);
													}
													String creattime = (String) jsonphoto
															.get("createTime");
													if (creattime != null) {
														objphoto.setCreateTime(creattime);
													}
													entityphotoList
															.add(objphoto);
												}
											}
											entity.setExaminationDataPhotoList(entityphotoList);
										}
									}
									entityList.add(entity);
								}
							}
							examinationRecordReturn
									.setExaminationDataList(entityList);
						}

					}
				}
			} else if ("QUERY_EXAMINATION_RECORD_INFO_REQUEST".equals(command)) {
				actionReturn = "getById";
				if (true) {
					if (contentreq != null) {
						idReturn = (Integer) contentreq.get("id");
						String olderShow = (String) contentreq.get("olderShow");
						if ("true".equals(olderShow)) {
							olderShowReturn = true;
						}
						String createEmployeeShow = (String) contentreq
								.get("createEmployeeShow");
						if ("true".equals(createEmployeeShow)) {
							createEmployeeShowReturn = true;
						}
						String examinationRecordFileListShow = (String) contentreq
								.get("examinationRecordFileListShow");
						if ("true".equals(examinationRecordFileListShow)) {
							examinationRecordFileListShowReturn = true;
						}
						String examinationRecordPhotoListShow = (String) contentreq
								.get("examinationRecordPhotoListShow");
						if ("true".equals(examinationRecordPhotoListShow)) {
							examinationRecordPhotoListShowReturn = true;
						}
						String examinationDataListShow = (String) contentreq
								.get("examinationDataListShow");
						if ("true".equals(examinationDataListShow)) {
							examinationDataListShowReturn = true;
						}
					}
				}
			} else if ("QUERY_EXAMINATION_RECORD_LIST_REQUEST".equals(command)) {
				actionReturn = "getListByCondition";
				if (true) {
					if (contentreq != null) {
						queryMapReturn = new HashMap<String, Object>();
						Integer id_gt = (Integer) contentreq.get("id_gt");
						Integer id_ge = (Integer) contentreq.get("id_ge");
						Integer id_lt = (Integer) contentreq.get("id_lt");
						Integer id_le = (Integer) contentreq.get("id_le");
						String id_in = (String) contentreq.get("id_in");
						Integer id = (Integer) contentreq.get("id");
						if (id_gt != null) {
							queryMapReturn.put("id_gt", id_gt);
						}
						if (id_ge != null) {
							queryMapReturn.put("id_ge", id_ge);
						}
						if (id_lt != null) {
							queryMapReturn.put("id_lt", id_lt);
						}
						if (id_le != null) {
							queryMapReturn.put("id_le", id_le);
						}
						if (id_in != null) {
							queryMapReturn.put("id_in", id_in);
						}
						if (id != null) {
							queryMapReturn.put("id", id);
						}
						Integer olderId_gt = (Integer) contentreq
								.get("olderId_gt");
						Integer olderId_ge = (Integer) contentreq
								.get("olderId_ge");
						Integer olderId_lt = (Integer) contentreq
								.get("olderId_lt");
						Integer olderId_le = (Integer) contentreq
								.get("olderId_le");
						String olderId_in = (String) contentreq
								.get("olderId_in");
						Integer olderId = (Integer) contentreq.get("olderId");
						if (olderId_gt != null) {
							queryMapReturn.put("olderId_gt", olderId_gt);
						}
						if (olderId_ge != null) {
							queryMapReturn.put("olderId_ge", olderId_ge);
						}
						if (olderId_lt != null) {
							queryMapReturn.put("olderId_lt", olderId_lt);
						}
						if (olderId_le != null) {
							queryMapReturn.put("olderId_le", olderId_le);
						}
						if (olderId_in != null) {
							queryMapReturn.put("olderId_in", olderId_in);
						}
						if (olderId != null) {
							queryMapReturn.put("olderId", olderId);
						}
						String olderName_like = (String) contentreq
								.get("olderName_like");
						String olderName_isNull = (String) contentreq
								.get("olderName_isNull");
						String olderName_isNotNull = (String) contentreq
								.get("olderName_isNotNull");
						String olderName_in = (String) contentreq
								.get("olderName_in");
						String olderName = (String) contentreq.get("olderName");
						if (olderName_like != null) {
							queryMapReturn
									.put("olderName_like", olderName_like);
						}
						if (olderName_isNull != null) {
							queryMapReturn.put("olderName_isNull",
									olderName_isNull);
						}
						if (olderName_isNotNull != null) {
							queryMapReturn.put("olderName_isNotNull",
									olderName_isNotNull);
						}
						if (olderName_in != null) {
							queryMapReturn.put("olderName_in", olderName_in);
						}
						if (olderName != null) {
							queryMapReturn.put("olderName", olderName);
						}
						String olderAge_like = (String) contentreq
								.get("olderAge_like");
						String olderAge_isNull = (String) contentreq
								.get("olderAge_isNull");
						String olderAge_isNotNull = (String) contentreq
								.get("olderAge_isNotNull");
						String olderAge_in = (String) contentreq
								.get("olderAge_in");
						String olderAge = (String) contentreq.get("olderAge");
						if (olderAge_like != null) {
							queryMapReturn.put("olderAge_like", olderAge_like);
						}
						if (olderAge_isNull != null) {
							queryMapReturn.put("olderAge_isNull",
									olderAge_isNull);
						}
						if (olderAge_isNotNull != null) {
							queryMapReturn.put("olderAge_isNotNull",
									olderAge_isNotNull);
						}
						if (olderAge_in != null) {
							queryMapReturn.put("olderAge_in", olderAge_in);
						}
						if (olderAge != null) {
							queryMapReturn.put("olderAge", olderAge);
						}
						String examinationOrganization_like = (String) contentreq
								.get("examinationOrganization_like");
						String examinationOrganization_isNull = (String) contentreq
								.get("examinationOrganization_isNull");
						String examinationOrganization_isNotNull = (String) contentreq
								.get("examinationOrganization_isNotNull");
						String examinationOrganization_in = (String) contentreq
								.get("examinationOrganization_in");
						String examinationOrganization = (String) contentreq
								.get("examinationOrganization");
						if (examinationOrganization_like != null) {
							queryMapReturn.put("examinationOrganization_like",
									examinationOrganization_like);
						}
						if (examinationOrganization_isNull != null) {
							queryMapReturn.put(
									"examinationOrganization_isNull",
									examinationOrganization_isNull);
						}
						if (examinationOrganization_isNotNull != null) {
							queryMapReturn.put(
									"examinationOrganization_isNotNull",
									examinationOrganization_isNotNull);
						}
						if (examinationOrganization_in != null) {
							queryMapReturn.put("examinationOrganization_in",
									examinationOrganization_in);
						}
						if (examinationOrganization != null) {
							queryMapReturn.put("examinationOrganization",
									examinationOrganization);
						}
						String examinationTime_gt = (String) contentreq
								.get("examinationTime_gt");
						String examinationTime_ge = (String) contentreq
								.get("examinationTime_ge");
						String examinationTime_lt = (String) contentreq
								.get("examinationTime_lt");
						String examinationTime_le = (String) contentreq
								.get("examinationTime_le");
						if (examinationTime_gt != null) {
							queryMapReturn.put("examinationTime_gt",
									examinationTime_gt);
						}
						if (examinationTime_ge != null) {
							queryMapReturn.put("examinationTime_ge",
									examinationTime_ge);
						}
						if (examinationTime_lt != null) {
							queryMapReturn.put("examinationTime_lt",
									examinationTime_lt);
						}
						if (examinationTime_le != null) {
							queryMapReturn.put("examinationTime_le",
									examinationTime_le);
						}
						String createTime_gt = (String) contentreq
								.get("createTime_gt");
						String createTime_ge = (String) contentreq
								.get("createTime_ge");
						String createTime_lt = (String) contentreq
								.get("createTime_lt");
						String createTime_le = (String) contentreq
								.get("createTime_le");
						if (createTime_gt != null) {
							queryMapReturn.put("createTime_gt", createTime_gt);
						}
						if (createTime_ge != null) {
							queryMapReturn.put("createTime_ge", createTime_ge);
						}
						if (createTime_lt != null) {
							queryMapReturn.put("createTime_lt", createTime_lt);
						}
						if (createTime_le != null) {
							queryMapReturn.put("createTime_le", createTime_le);
						}
						Integer createEmployeeId_gt = (Integer) contentreq
								.get("createEmployeeId_gt");
						Integer createEmployeeId_ge = (Integer) contentreq
								.get("createEmployeeId_ge");
						Integer createEmployeeId_lt = (Integer) contentreq
								.get("createEmployeeId_lt");
						Integer createEmployeeId_le = (Integer) contentreq
								.get("createEmployeeId_le");
						String createEmployeeId_in = (String) contentreq
								.get("createEmployeeId_in");
						Integer createEmployeeId = (Integer) contentreq
								.get("createEmployeeId");
						if (createEmployeeId_gt != null) {
							queryMapReturn.put("createEmployeeId_gt",
									createEmployeeId_gt);
						}
						if (createEmployeeId_ge != null) {
							queryMapReturn.put("createEmployeeId_ge",
									createEmployeeId_ge);
						}
						if (createEmployeeId_lt != null) {
							queryMapReturn.put("createEmployeeId_lt",
									createEmployeeId_lt);
						}
						if (createEmployeeId_le != null) {
							queryMapReturn.put("createEmployeeId_le",
									createEmployeeId_le);
						}
						if (createEmployeeId_in != null) {
							queryMapReturn.put("createEmployeeId_in",
									createEmployeeId_in);
						}
						if (createEmployeeId != null) {
							queryMapReturn.put("createEmployeeId",
									createEmployeeId);
						}
						String createEmployeeName_like = (String) contentreq
								.get("createEmployeeName_like");
						String createEmployeeName_isNull = (String) contentreq
								.get("createEmployeeName_isNull");
						String createEmployeeName_isNotNull = (String) contentreq
								.get("createEmployeeName_isNotNull");
						String createEmployeeName_in = (String) contentreq
								.get("createEmployeeName_in");
						String createEmployeeName = (String) contentreq
								.get("createEmployeeName");
						if (createEmployeeName_like != null) {
							queryMapReturn.put("createEmployeeName_like",
									createEmployeeName_like);
						}
						if (createEmployeeName_isNull != null) {
							queryMapReturn.put("createEmployeeName_isNull",
									createEmployeeName_isNull);
						}
						if (createEmployeeName_isNotNull != null) {
							queryMapReturn.put("createEmployeeName_isNotNull",
									createEmployeeName_isNotNull);
						}
						if (createEmployeeName_in != null) {
							queryMapReturn.put("createEmployeeName_in",
									createEmployeeName_in);
						}
						if (createEmployeeName != null) {
							queryMapReturn.put("createEmployeeName",
									createEmployeeName);
						}
						String contactTel_like = (String) contentreq
								.get("contactTel_like");
						String contactTel_isNull = (String) contentreq
								.get("contactTel_isNull");
						String contactTel_isNotNull = (String) contentreq
								.get("contactTel_isNotNull");
						String contactTel_in = (String) contentreq
								.get("contactTel_in");
						String contactTel = (String) contentreq
								.get("contactTel");
						if (contactTel_like != null) {
							queryMapReturn.put("contactTel_like",
									contactTel_like);
						}
						if (contactTel_isNull != null) {
							queryMapReturn.put("contactTel_isNull",
									contactTel_isNull);
						}
						if (contactTel_isNotNull != null) {
							queryMapReturn.put("contactTel_isNotNull",
									contactTel_isNotNull);
						}
						if (contactTel_in != null) {
							queryMapReturn.put("contactTel_in", contactTel_in);
						}
						if (contactTel != null) {
							queryMapReturn.put("contactTel", contactTel);
						}
						String conclusion_like = (String) contentreq
								.get("conclusion_like");
						String conclusion_isNull = (String) contentreq
								.get("conclusion_isNull");
						String conclusion_isNotNull = (String) contentreq
								.get("conclusion_isNotNull");
						String conclusion_in = (String) contentreq
								.get("conclusion_in");
						String conclusion = (String) contentreq
								.get("conclusion");
						if (conclusion_like != null) {
							queryMapReturn.put("conclusion_like",
									conclusion_like);
						}
						if (conclusion_isNull != null) {
							queryMapReturn.put("conclusion_isNull",
									conclusion_isNull);
						}
						if (conclusion_isNotNull != null) {
							queryMapReturn.put("conclusion_isNotNull",
									conclusion_isNotNull);
						}
						if (conclusion_in != null) {
							queryMapReturn.put("conclusion_in", conclusion_in);
						}
						if (conclusion != null) {
							queryMapReturn.put("conclusion", conclusion);
						}
						String suggestion_like = (String) contentreq
								.get("suggestion_like");
						String suggestion_isNull = (String) contentreq
								.get("suggestion_isNull");
						String suggestion_isNotNull = (String) contentreq
								.get("suggestion_isNotNull");
						String suggestion_in = (String) contentreq
								.get("suggestion_in");
						String suggestion = (String) contentreq
								.get("suggestion");
						if (suggestion_like != null) {
							queryMapReturn.put("suggestion_like",
									suggestion_like);
						}
						if (suggestion_isNull != null) {
							queryMapReturn.put("suggestion_isNull",
									suggestion_isNull);
						}
						if (suggestion_isNotNull != null) {
							queryMapReturn.put("suggestion_isNotNull",
									suggestion_isNotNull);
						}
						if (suggestion_in != null) {
							queryMapReturn.put("suggestion_in", suggestion_in);
						}
						if (suggestion != null) {
							queryMapReturn.put("suggestion", suggestion);
						}

						Integer examinationRecordFileId = (Integer) contentreq
								.get("examinationRecordFileId");
						if (examinationRecordFileId != null) {
							queryMapReturn.put("examinationRecordFileId",
									examinationRecordFileId);
						}
						Integer examinationRecordPhotoId = (Integer) contentreq
								.get("examinationRecordPhotoId");
						if (examinationRecordPhotoId != null) {
							queryMapReturn.put("examinationRecordPhotoId",
									examinationRecordPhotoId);
						}
						Integer examinationDataId = (Integer) contentreq
								.get("examinationDataId");
						if (examinationDataId != null) {
							queryMapReturn.put("examinationDataId",
									examinationDataId);
						}

						String olderShow = (String) contentreq.get("olderShow");
						if ("true".equals(olderShow)) {
							olderShowReturn = true;
						}
						String createEmployeeShow = (String) contentreq
								.get("createEmployeeShow");
						if ("true".equals(createEmployeeShow)) {
							createEmployeeShowReturn = true;
						}
						String examinationRecordFileListShow = (String) contentreq
								.get("examinationRecordFileListShow");
						if ("true".equals(examinationRecordFileListShow)) {
							examinationRecordFileListShowReturn = true;
						}
						String examinationRecordPhotoListShow = (String) contentreq
								.get("examinationRecordPhotoListShow");
						if ("true".equals(examinationRecordPhotoListShow)) {
							examinationRecordPhotoListShowReturn = true;
						}
						String examinationDataListShow = (String) contentreq
								.get("examinationDataListShow");
						if ("true".equals(examinationDataListShow)) {
							examinationDataListShowReturn = true;
						}
					}
					JSONObject pagereq = (JSONObject) reqParams.get("page");
					if (pagereq != null) {
						String pagenotemp = (String) pagereq.get("pageno");
						String pagesizetemp = (String) pagereq.get("pagesize");
						if ((pagenotemp != null)
								&& (!"".equals(pagenotemp.trim()))) {
							pagenoReturn = Integer.valueOf(pagenotemp)
									.intValue();
						}
						if ((pagesizetemp != null)
								&& (!"".equals(pagesizetemp.trim()))) {
							pagesizeReturn = Integer.valueOf(pagesizetemp)
									.intValue();
						}
					}
					Object orderreq = (Object) reqParams.get("order");
					if (orderreq != null) {
						JSONArray order = (JSONArray) orderreq;
						orderListReturn = new ArrayList<OrderVO>();
						for (int i = 0; i < order.size(); i++) {
							JSONObject obj = order.getJSONObject(i);
							OrderVO orderVO = new OrderVO();
							orderVO.setName((String) obj.get("column"));
							orderVO.setOrderType((String) obj.get("type"));
							orderListReturn.add(orderVO);
						}
					}
				}
			} else if ("DEL_EXAMINATION_RECORD_INFO_REQUEST".equals(command)) {
				actionReturn = "del";
				if (true) {
					if (contentreq != null) {
						idReturn = (Integer) contentreq.get("id");
						String delOlder = (String) contentreq.get("delOlder");
						if ("true".equals(delOlder)) {
							delOlderReturn = true;
						}
						String delCreateEmployee = (String) contentreq
								.get("delCreateEmployee");
						if ("true".equals(delCreateEmployee)) {
							delCreateEmployeeReturn = true;
						}
						String delExaminationRecordFileList = (String) contentreq
								.get("delExaminationRecordFileList");
						if ("true".equals(delExaminationRecordFileList)) {
							delExaminationRecordFileListReturn = true;
						}
						String delExaminationRecordPhotoList = (String) contentreq
								.get("delExaminationRecordPhotoList");
						if ("true".equals(delExaminationRecordPhotoList)) {
							delExaminationRecordPhotoListReturn = true;
						}
						String delExaminationDataList = (String) contentreq
								.get("delExaminationDataList");
						if ("true".equals(delExaminationDataList)) {
							delExaminationDataListReturn = true;
						}
					}
				}
			} else if ("DEL_EXAMINATION_RECORD_LIST_REQUEST".equals(command)) {
				actionReturn = "delList";
				if (true) {
					if (contentreq != null) {
						queryMapReturn = new HashMap<String, Object>();
						Integer id_gt = (Integer) contentreq.get("id_gt");
						Integer id_ge = (Integer) contentreq.get("id_ge");
						Integer id_lt = (Integer) contentreq.get("id_lt");
						Integer id_le = (Integer) contentreq.get("id_le");
						String id_in = (String) contentreq.get("id_in");
						Integer id = (Integer) contentreq.get("id");
						if (id_gt != null) {
							queryMapReturn.put("id_gt", id_gt);
						}
						if (id_ge != null) {
							queryMapReturn.put("id_ge", id_ge);
						}
						if (id_lt != null) {
							queryMapReturn.put("id_lt", id_lt);
						}
						if (id_le != null) {
							queryMapReturn.put("id_le", id_le);
						}
						if (id_in != null) {
							queryMapReturn.put("id_in", id_in);
						}
						if (id != null) {
							queryMapReturn.put("id", id);
						}
						Integer olderId_gt = (Integer) contentreq
								.get("olderId_gt");
						Integer olderId_ge = (Integer) contentreq
								.get("olderId_ge");
						Integer olderId_lt = (Integer) contentreq
								.get("olderId_lt");
						Integer olderId_le = (Integer) contentreq
								.get("olderId_le");
						String olderId_in = (String) contentreq
								.get("olderId_in");
						Integer olderId = (Integer) contentreq.get("olderId");
						if (olderId_gt != null) {
							queryMapReturn.put("olderId_gt", olderId_gt);
						}
						if (olderId_ge != null) {
							queryMapReturn.put("olderId_ge", olderId_ge);
						}
						if (olderId_lt != null) {
							queryMapReturn.put("olderId_lt", olderId_lt);
						}
						if (olderId_le != null) {
							queryMapReturn.put("olderId_le", olderId_le);
						}
						if (olderId_in != null) {
							queryMapReturn.put("olderId_in", olderId_in);
						}
						if (olderId != null) {
							queryMapReturn.put("olderId", olderId);
						}
						String olderName_like = (String) contentreq
								.get("olderName_like");
						String olderName_isNull = (String) contentreq
								.get("olderName_isNull");
						String olderName_isNotNull = (String) contentreq
								.get("olderName_isNotNull");
						String olderName_in = (String) contentreq
								.get("olderName_in");
						String olderName = (String) contentreq.get("olderName");
						if (olderName_like != null) {
							queryMapReturn
									.put("olderName_like", olderName_like);
						}
						if (olderName_isNull != null) {
							queryMapReturn.put("olderName_isNull",
									olderName_isNull);
						}
						if (olderName_isNotNull != null) {
							queryMapReturn.put("olderName_isNotNull",
									olderName_isNotNull);
						}
						if (olderName_in != null) {
							queryMapReturn.put("olderName_in", olderName_in);
						}
						if (olderName != null) {
							queryMapReturn.put("olderName", olderName);
						}
						String olderAge_like = (String) contentreq
								.get("olderAge_like");
						String olderAge_isNull = (String) contentreq
								.get("olderAge_isNull");
						String olderAge_isNotNull = (String) contentreq
								.get("olderAge_isNotNull");
						String olderAge_in = (String) contentreq
								.get("olderAge_in");
						String olderAge = (String) contentreq.get("olderAge");
						if (olderAge_like != null) {
							queryMapReturn.put("olderAge_like", olderAge_like);
						}
						if (olderAge_isNull != null) {
							queryMapReturn.put("olderAge_isNull",
									olderAge_isNull);
						}
						if (olderAge_isNotNull != null) {
							queryMapReturn.put("olderAge_isNotNull",
									olderAge_isNotNull);
						}
						if (olderAge_in != null) {
							queryMapReturn.put("olderAge_in", olderAge_in);
						}
						if (olderAge != null) {
							queryMapReturn.put("olderAge", olderAge);
						}
						String examinationOrganization_like = (String) contentreq
								.get("examinationOrganization_like");
						String examinationOrganization_isNull = (String) contentreq
								.get("examinationOrganization_isNull");
						String examinationOrganization_isNotNull = (String) contentreq
								.get("examinationOrganization_isNotNull");
						String examinationOrganization_in = (String) contentreq
								.get("examinationOrganization_in");
						String examinationOrganization = (String) contentreq
								.get("examinationOrganization");
						if (examinationOrganization_like != null) {
							queryMapReturn.put("examinationOrganization_like",
									examinationOrganization_like);
						}
						if (examinationOrganization_isNull != null) {
							queryMapReturn.put(
									"examinationOrganization_isNull",
									examinationOrganization_isNull);
						}
						if (examinationOrganization_isNotNull != null) {
							queryMapReturn.put(
									"examinationOrganization_isNotNull",
									examinationOrganization_isNotNull);
						}
						if (examinationOrganization_in != null) {
							queryMapReturn.put("examinationOrganization_in",
									examinationOrganization_in);
						}
						if (examinationOrganization != null) {
							queryMapReturn.put("examinationOrganization",
									examinationOrganization);
						}
						String examinationTime_gt = (String) contentreq
								.get("examinationTime_gt");
						String examinationTime_ge = (String) contentreq
								.get("examinationTime_ge");
						String examinationTime_lt = (String) contentreq
								.get("examinationTime_lt");
						String examinationTime_le = (String) contentreq
								.get("examinationTime_le");
						if (examinationTime_gt != null) {
							queryMapReturn.put("examinationTime_gt",
									examinationTime_gt);
						}
						if (examinationTime_ge != null) {
							queryMapReturn.put("examinationTime_ge",
									examinationTime_ge);
						}
						if (examinationTime_lt != null) {
							queryMapReturn.put("examinationTime_lt",
									examinationTime_lt);
						}
						if (examinationTime_le != null) {
							queryMapReturn.put("examinationTime_le",
									examinationTime_le);
						}
						String createTime_gt = (String) contentreq
								.get("createTime_gt");
						String createTime_ge = (String) contentreq
								.get("createTime_ge");
						String createTime_lt = (String) contentreq
								.get("createTime_lt");
						String createTime_le = (String) contentreq
								.get("createTime_le");
						if (createTime_gt != null) {
							queryMapReturn.put("createTime_gt", createTime_gt);
						}
						if (createTime_ge != null) {
							queryMapReturn.put("createTime_ge", createTime_ge);
						}
						if (createTime_lt != null) {
							queryMapReturn.put("createTime_lt", createTime_lt);
						}
						if (createTime_le != null) {
							queryMapReturn.put("createTime_le", createTime_le);
						}
						Integer createEmployeeId_gt = (Integer) contentreq
								.get("createEmployeeId_gt");
						Integer createEmployeeId_ge = (Integer) contentreq
								.get("createEmployeeId_ge");
						Integer createEmployeeId_lt = (Integer) contentreq
								.get("createEmployeeId_lt");
						Integer createEmployeeId_le = (Integer) contentreq
								.get("createEmployeeId_le");
						String createEmployeeId_in = (String) contentreq
								.get("createEmployeeId_in");
						Integer createEmployeeId = (Integer) contentreq
								.get("createEmployeeId");
						if (createEmployeeId_gt != null) {
							queryMapReturn.put("createEmployeeId_gt",
									createEmployeeId_gt);
						}
						if (createEmployeeId_ge != null) {
							queryMapReturn.put("createEmployeeId_ge",
									createEmployeeId_ge);
						}
						if (createEmployeeId_lt != null) {
							queryMapReturn.put("createEmployeeId_lt",
									createEmployeeId_lt);
						}
						if (createEmployeeId_le != null) {
							queryMapReturn.put("createEmployeeId_le",
									createEmployeeId_le);
						}
						if (createEmployeeId_in != null) {
							queryMapReturn.put("createEmployeeId_in",
									createEmployeeId_in);
						}
						if (createEmployeeId != null) {
							queryMapReturn.put("createEmployeeId",
									createEmployeeId);
						}
						String createEmployeeName_like = (String) contentreq
								.get("createEmployeeName_like");
						String createEmployeeName_isNull = (String) contentreq
								.get("createEmployeeName_isNull");
						String createEmployeeName_isNotNull = (String) contentreq
								.get("createEmployeeName_isNotNull");
						String createEmployeeName_in = (String) contentreq
								.get("createEmployeeName_in");
						String createEmployeeName = (String) contentreq
								.get("createEmployeeName");
						if (createEmployeeName_like != null) {
							queryMapReturn.put("createEmployeeName_like",
									createEmployeeName_like);
						}
						if (createEmployeeName_isNull != null) {
							queryMapReturn.put("createEmployeeName_isNull",
									createEmployeeName_isNull);
						}
						if (createEmployeeName_isNotNull != null) {
							queryMapReturn.put("createEmployeeName_isNotNull",
									createEmployeeName_isNotNull);
						}
						if (createEmployeeName_in != null) {
							queryMapReturn.put("createEmployeeName_in",
									createEmployeeName_in);
						}
						if (createEmployeeName != null) {
							queryMapReturn.put("createEmployeeName",
									createEmployeeName);
						}
						String contactTel_like = (String) contentreq
								.get("contactTel_like");
						String contactTel_isNull = (String) contentreq
								.get("contactTel_isNull");
						String contactTel_isNotNull = (String) contentreq
								.get("contactTel_isNotNull");
						String contactTel_in = (String) contentreq
								.get("contactTel_in");
						String contactTel = (String) contentreq
								.get("contactTel");
						if (contactTel_like != null) {
							queryMapReturn.put("contactTel_like",
									contactTel_like);
						}
						if (contactTel_isNull != null) {
							queryMapReturn.put("contactTel_isNull",
									contactTel_isNull);
						}
						if (contactTel_isNotNull != null) {
							queryMapReturn.put("contactTel_isNotNull",
									contactTel_isNotNull);
						}
						if (contactTel_in != null) {
							queryMapReturn.put("contactTel_in", contactTel_in);
						}
						if (contactTel != null) {
							queryMapReturn.put("contactTel", contactTel);
						}
						String conclusion_like = (String) contentreq
								.get("conclusion_like");
						String conclusion_isNull = (String) contentreq
								.get("conclusion_isNull");
						String conclusion_isNotNull = (String) contentreq
								.get("conclusion_isNotNull");
						String conclusion_in = (String) contentreq
								.get("conclusion_in");
						String conclusion = (String) contentreq
								.get("conclusion");
						if (conclusion_like != null) {
							queryMapReturn.put("conclusion_like",
									conclusion_like);
						}
						if (conclusion_isNull != null) {
							queryMapReturn.put("conclusion_isNull",
									conclusion_isNull);
						}
						if (conclusion_isNotNull != null) {
							queryMapReturn.put("conclusion_isNotNull",
									conclusion_isNotNull);
						}
						if (conclusion_in != null) {
							queryMapReturn.put("conclusion_in", conclusion_in);
						}
						if (conclusion != null) {
							queryMapReturn.put("conclusion", conclusion);
						}
						String suggestion_like = (String) contentreq
								.get("suggestion_like");
						String suggestion_isNull = (String) contentreq
								.get("suggestion_isNull");
						String suggestion_isNotNull = (String) contentreq
								.get("suggestion_isNotNull");
						String suggestion_in = (String) contentreq
								.get("suggestion_in");
						String suggestion = (String) contentreq
								.get("suggestion");
						if (suggestion_like != null) {
							queryMapReturn.put("suggestion_like",
									suggestion_like);
						}
						if (suggestion_isNull != null) {
							queryMapReturn.put("suggestion_isNull",
									suggestion_isNull);
						}
						if (suggestion_isNotNull != null) {
							queryMapReturn.put("suggestion_isNotNull",
									suggestion_isNotNull);
						}
						if (suggestion_in != null) {
							queryMapReturn.put("suggestion_in", suggestion_in);
						}
						if (suggestion != null) {
							queryMapReturn.put("suggestion", suggestion);
						}

						String delOlder = (String) contentreq.get("delOlder");
						if ("true".equals(delOlder)) {
							delOlderReturn = true;
						}
						String delCreateEmployee = (String) contentreq
								.get("delCreateEmployee");
						if ("true".equals(delCreateEmployee)) {
							delCreateEmployeeReturn = true;
						}
						Integer examinationRecordFileId = (Integer) contentreq
								.get("examinationRecordFileId");
						if (examinationRecordFileId != null) {
							queryMapReturn.put("examinationRecordFileId",
									examinationRecordFileId);
						}
						String delExaminationRecordFileList = (String) contentreq
								.get("delExaminationRecordFileList");
						if ("true".equals(delExaminationRecordFileList)) {
							delExaminationRecordFileListReturn = true;
						}
						Integer examinationRecordPhotoId = (Integer) contentreq
								.get("examinationRecordPhotoId");
						if (examinationRecordPhotoId != null) {
							queryMapReturn.put("examinationRecordPhotoId",
									examinationRecordPhotoId);
						}
						String delExaminationRecordPhotoList = (String) contentreq
								.get("delExaminationRecordPhotoList");
						if ("true".equals(delExaminationRecordPhotoList)) {
							delExaminationRecordPhotoListReturn = true;
						}
						Integer examinationDataId = (Integer) contentreq
								.get("examinationDataId");
						if (examinationDataId != null) {
							queryMapReturn.put("examinationDataId",
									examinationDataId);
						}
						String delExaminationDataList = (String) contentreq
								.get("delExaminationDataList");
						if ("true".equals(delExaminationDataList)) {
							delExaminationDataListReturn = true;
						}
					}
					JSONObject pagereq = (JSONObject) reqParams.get("page");
					if (pagereq != null) {
						String pagenotemp = (String) pagereq.get("pageno");
						String pagesizetemp = (String) pagereq.get("pagesize");
						if ((pagenotemp != null)
								&& (!"".equals(pagenotemp.trim()))) {
							pagenoReturn = Integer.valueOf(pagenotemp)
									.intValue();
						}
						if ((pagesizetemp != null)
								&& (!"".equals(pagesizetemp.trim()))) {
							pagesizeReturn = Integer.valueOf(pagesizetemp)
									.intValue();
						}
					}
				}
			}

			if (actionReturn != null && !"".equals(actionReturn)) {
				parseMap.put("action", actionReturn);
			}
			if (examinationRecordReturn != null) {
				parseMap.put("examinationRecord", examinationRecordReturn);
			}
			if (examinationRecordListReturn != null
					&& examinationRecordListReturn.size() > 0) {
				parseMap.put("examinationRecordList",
						examinationRecordListReturn);
			}
			if (idReturn != null) {
				parseMap.put("id", idReturn);
			}
			if (orderListReturn != null && orderListReturn.size() > 0) {
				parseMap.put("orderList", orderListReturn);
			}
			if (queryMapReturn != null) {
				parseMap.put("queryMap", queryMapReturn);
			}
			if (pagenoReturn > 0) {
				parseMap.put("pageno", pagenoReturn);
			}
			if (pagesizeReturn > 0) {
				parseMap.put("pagesize", pagesizeReturn);
			}

			if (olderShowReturn != null) {
				parseMap.put("olderShow", olderShowReturn);
			}
			if (delOlderReturn != null) {
				parseMap.put("delOlder", delOlderReturn);
			}
			if (createEmployeeShowReturn != null) {
				parseMap.put("createEmployeeShow", createEmployeeShowReturn);
			}
			if (delCreateEmployeeReturn != null) {
				parseMap.put("delCreateEmployee", delCreateEmployeeReturn);
			}
			if (examinationRecordFileListShowReturn != null) {
				parseMap.put("examinationRecordFileListShow",
						examinationRecordFileListShowReturn);
			}
			if (delExaminationRecordFileListReturn != null) {
				parseMap.put("delExaminationRecordFileList",
						delExaminationRecordFileListReturn);
			}
			if (examinationRecordPhotoListShowReturn != null) {
				parseMap.put("examinationRecordPhotoListShow",
						examinationRecordPhotoListShowReturn);
			}
			if (delExaminationRecordPhotoListReturn != null) {
				parseMap.put("delExaminationRecordPhotoList",
						delExaminationRecordPhotoListReturn);
			}
			if (examinationDataListShowReturn != null) {
				parseMap.put("examinationDataListShow",
						examinationDataListShowReturn);
			}
			if (delExaminationDataListReturn != null) {
				parseMap.put("delExaminationDataList",
						delExaminationDataListReturn);
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error(e);
		}
		return parseMap;
	}

	private Map<String, Object> parseByXml(String command, String reqStr,
			HttpServletRequest request) {
		// TODO Auto-generated method stub
		return null;
	}
}
