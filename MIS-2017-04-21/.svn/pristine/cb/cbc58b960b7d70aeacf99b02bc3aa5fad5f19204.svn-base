package fsk.service.serviceTaskPhysiologicalParametersHistory;

import java.math.BigDecimal;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import org.apache.log4j.Logger;


import fsk.entity.serviceTask.ServiceTaskEntity;
import fsk.entity.physiologicalParametersHistory.PhysiologicalParametersHistoryEntity;

import fsk.entity.serviceTaskPhysiologicalParametersHistory.ServiceTaskPhysiologicalParametersHistoryEntity;
import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;



/**   
 * @Title: Service
 * @Description: 服务工单生理参数历史关联表服务类
 * @author feng.gu
 * @date 2016-07-27 15:36:06
 * @version V1.0   
 *
 */
public class ServiceTaskPhysiologicalParametersHistoryService {
	   private static Logger logger = Logger.getLogger(ServiceTaskPhysiologicalParametersHistoryService.class);
	   private DBManager dbManager = DBManager.getInstance();
    		
	   private static ServiceTaskPhysiologicalParametersHistoryService serviceTaskPhysiologicalParametersHistoryService;
	   /**
	    * 获取实例	
	    * @return
	    */
	   public static ServiceTaskPhysiologicalParametersHistoryService getInstance(){
		if(serviceTaskPhysiologicalParametersHistoryService==null){
			serviceTaskPhysiologicalParametersHistoryService = new ServiceTaskPhysiologicalParametersHistoryService();
		}
		return serviceTaskPhysiologicalParametersHistoryService;
	   }
	                 	                 				     				     				     				     
				     	 
	   /**
		 * 保存记录
		 * 
		 * @param obj
		 */
		public boolean save(ServiceTaskPhysiologicalParametersHistoryEntity serviceTaskPhysiologicalParametersHistory) {			
			boolean result =false;
			if(serviceTaskPhysiologicalParametersHistory!=null){
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					 tx.beginTransaction();					 					 
					 					 				     				     					     //关联信息保存
					     ServiceTaskEntity serviceTask = serviceTaskPhysiologicalParametersHistory.getServiceTask();
						 if(serviceTask!=null){						   
							 dbManager.saveNoTransaction(serviceTask);
							 serviceTaskPhysiologicalParametersHistory.setServiceTaskId(serviceTask.getId());
						 }						 
				     				     				     					 					 				     				     					     //关联信息保存
					     PhysiologicalParametersHistoryEntity physiologicalParametersHistory = serviceTaskPhysiologicalParametersHistory.getPhysiologicalParametersHistory();
						 if(physiologicalParametersHistory!=null){						   
							 dbManager.saveNoTransaction(physiologicalParametersHistory);
							 serviceTaskPhysiologicalParametersHistory.setPhysiologicalParametersHistoryId(physiologicalParametersHistory.getId());
						 }						 
				     				     				     					 					 result=dbManager.saveNoTransaction(serviceTaskPhysiologicalParametersHistory);	
					 tx.commitAndClose();  
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {				    
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  			
			}	
			return result;
		}
		
		/**
		 * 批量保存记录
		 * 
		 * @param list
		 */
		public boolean saveList(List<ServiceTaskPhysiologicalParametersHistoryEntity> serviceTaskPhysiologicalParametersHistoryList) {
			boolean result = false;
			if (serviceTaskPhysiologicalParametersHistoryList != null && serviceTaskPhysiologicalParametersHistoryList.size() > 0) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 
					for(ServiceTaskPhysiologicalParametersHistoryEntity serviceTaskPhysiologicalParametersHistory:serviceTaskPhysiologicalParametersHistoryList){
						if(serviceTaskPhysiologicalParametersHistory!=null){												  								 
								 									 					                 								     								         //关联信息保存
									     ServiceTaskEntity serviceTask = serviceTaskPhysiologicalParametersHistory.getServiceTask();
										 if(serviceTask!=null){						   
											 dbManager.saveNoTransaction(serviceTask);
											 serviceTaskPhysiologicalParametersHistory.setServiceTaskId(serviceTask.getId());
										 }									 
								     								     								     								 									 					                 								     								         //关联信息保存
									     PhysiologicalParametersHistoryEntity physiologicalParametersHistory = serviceTaskPhysiologicalParametersHistory.getPhysiologicalParametersHistory();
										 if(physiologicalParametersHistory!=null){						   
											 dbManager.saveNoTransaction(physiologicalParametersHistory);
											 serviceTaskPhysiologicalParametersHistory.setPhysiologicalParametersHistoryId(physiologicalParametersHistory.getId());
										 }									 
								     								     								     								 								 result=dbManager.saveNoTransaction(serviceTaskPhysiologicalParametersHistory);								 			
						}	
					}
				    tx.commitAndClose(); 
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
				/**
		 * 根据id读取记录
		 * 
		 * @param id
		 *            主键
		 * @param obj
		 */
		public ServiceTaskPhysiologicalParametersHistoryEntity getById(Integer id) {
			ServiceTaskPhysiologicalParametersHistoryEntity obj = null;
			if (id != null) {
				obj = (ServiceTaskPhysiologicalParametersHistoryEntity) dbManager.getById(id, ServiceTaskPhysiologicalParametersHistoryEntity.class);			
			}
			return obj;
		}
				
		
		/**
		 * 根据id读取记录
		 * @param id 主键
		 		             	                 				     		 * @param serviceTaskShow 是否查询关联信息
				     				     				     		 		             	                 				     		 * @param physiologicalParametersHistoryShow 是否查询关联信息
				     				     				     		 		 * @param obj
		 */
		public ServiceTaskPhysiologicalParametersHistoryEntity getById(Integer id,Boolean serviceTaskShow,Boolean physiologicalParametersHistoryShow) {
			ServiceTaskPhysiologicalParametersHistoryEntity obj = null;
			if (id!=null) {
				obj = (ServiceTaskPhysiologicalParametersHistoryEntity)dbManager.getById(id, ServiceTaskPhysiologicalParametersHistoryEntity.class);
									 	                 				     				        //查询关联内容
						if(serviceTaskShow!=null&&serviceTaskShow.booleanValue()&&obj!=null&&obj.getServiceTaskId()!=null&&obj.getServiceTaskId()>0){
							ServiceTaskEntity serviceTask = (ServiceTaskEntity)dbManager.getById(obj.getServiceTaskId(), ServiceTaskEntity.class);
							obj.setServiceTask(serviceTask);        	  	  
						}
				     				     				     				   					 	                 				     				        //查询关联内容
						if(physiologicalParametersHistoryShow!=null&&physiologicalParametersHistoryShow.booleanValue()&&obj!=null&&obj.getPhysiologicalParametersHistoryId()!=null&&obj.getPhysiologicalParametersHistoryId()>0){
							PhysiologicalParametersHistoryEntity physiologicalParametersHistory = (PhysiologicalParametersHistoryEntity)dbManager.getById(obj.getPhysiologicalParametersHistoryId(), PhysiologicalParametersHistoryEntity.class);
							obj.setPhysiologicalParametersHistory(physiologicalParametersHistory);        	  	  
						}
				     				     				     				   			}
			return obj;
		}
		
		/**
		 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
		 * @param queryMap 查询条件集合		
		 * @return
		 */
		public List<ServiceTaskPhysiologicalParametersHistoryEntity> getListByCondition(Map<String,Object> queryMap) {
		    List<ServiceTaskPhysiologicalParametersHistoryEntity> returnlist = null;
			List<Object> list = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
												Object id=queryMap.get("id");
					Object id_gt=queryMap.get("id_gt");
					Object id_ge=queryMap.get("id_ge");
					Object id_lt=queryMap.get("id_lt");
					Object id_le=queryMap.get("id_le");
					Object id_in=queryMap.get("id_in");
																Object physiologicalParametersHistoryId=queryMap.get("physiologicalParametersHistoryId");
					Object physiologicalParametersHistoryId_gt=queryMap.get("physiologicalParametersHistoryId_gt");
					Object physiologicalParametersHistoryId_ge=queryMap.get("physiologicalParametersHistoryId_ge");
					Object physiologicalParametersHistoryId_lt=queryMap.get("physiologicalParametersHistoryId_lt");
					Object physiologicalParametersHistoryId_le=queryMap.get("physiologicalParametersHistoryId_le");
					Object physiologicalParametersHistoryId_in=queryMap.get("physiologicalParametersHistoryId_in");
																Object serviceTaskId=queryMap.get("serviceTaskId");
					Object serviceTaskId_gt=queryMap.get("serviceTaskId_gt");
					Object serviceTaskId_ge=queryMap.get("serviceTaskId_ge");
					Object serviceTaskId_lt=queryMap.get("serviceTaskId_lt");
					Object serviceTaskId_le=queryMap.get("serviceTaskId_le");
					Object serviceTaskId_in=queryMap.get("serviceTaskId_in");
							
			

																				
			
			QueryCondition qc = new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.gt, "0");				
												if(id!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.eq, id));}
					if(id_gt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.gt, id_gt));}
					if(id_ge!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.ge, id_ge));}
					if(id_lt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.lt, id_lt));}
					if(id_le!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.le, id_le));}
					if(id_in!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.in, id_in));}
																if(physiologicalParametersHistoryId!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.eq, physiologicalParametersHistoryId));}
					if(physiologicalParametersHistoryId_gt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.gt, physiologicalParametersHistoryId_gt));}
					if(physiologicalParametersHistoryId_ge!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.ge, physiologicalParametersHistoryId_ge));}
					if(physiologicalParametersHistoryId_lt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.lt, physiologicalParametersHistoryId_lt));}
					if(physiologicalParametersHistoryId_le!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.le, physiologicalParametersHistoryId_le));}
					if(physiologicalParametersHistoryId_in!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.in, physiologicalParametersHistoryId_in));}
																if(serviceTaskId!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.eq, serviceTaskId));}
					if(serviceTaskId_gt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.gt, serviceTaskId_gt));}
					if(serviceTaskId_ge!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.ge, serviceTaskId_ge));}
					if(serviceTaskId_lt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.lt, serviceTaskId_lt));}
					if(serviceTaskId_le!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.le, serviceTaskId_le));}
					if(serviceTaskId_in!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.in, serviceTaskId_in));}
										
						  						  			            list = dbManager.queryByCondition(ServiceTaskPhysiologicalParametersHistoryEntity.class,qc);    
            if(list!=null&&list.size()>0){
               returnlist = new ArrayList<ServiceTaskPhysiologicalParametersHistoryEntity>();
               for (Object obj:list) {           
                 returnlist.add((ServiceTaskPhysiologicalParametersHistoryEntity)obj);
               }
            }       					
			return returnlist;
		}
		
		
		/**
		 * 根据条件查询记录集合（不分页 带排序 带级联查询）
		 * @param queryMap 查询条件集合
		 * @param orderList 排序条件集合
		 		             	                 				     		 * @param serviceTaskShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		             	                 				     		 * @param physiologicalParametersHistoryShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		 * @return
		 */
		public List<ServiceTaskPhysiologicalParametersHistoryEntity> getListByCondition(Map<String,Object> queryMap,List<OrderVO> orderList,Boolean serviceTaskShow,Boolean physiologicalParametersHistoryShow) {
			List<ServiceTaskPhysiologicalParametersHistoryEntity> returnlist = null;
			List<Object> list = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
												Object id=queryMap.get("id");
					Object id_gt=queryMap.get("id_gt");
					Object id_ge=queryMap.get("id_ge");
					Object id_lt=queryMap.get("id_lt");
					Object id_le=queryMap.get("id_le");
					Object id_in=queryMap.get("id_in");
																Object physiologicalParametersHistoryId=queryMap.get("physiologicalParametersHistoryId");
					Object physiologicalParametersHistoryId_gt=queryMap.get("physiologicalParametersHistoryId_gt");
					Object physiologicalParametersHistoryId_ge=queryMap.get("physiologicalParametersHistoryId_ge");
					Object physiologicalParametersHistoryId_lt=queryMap.get("physiologicalParametersHistoryId_lt");
					Object physiologicalParametersHistoryId_le=queryMap.get("physiologicalParametersHistoryId_le");
					Object physiologicalParametersHistoryId_in=queryMap.get("physiologicalParametersHistoryId_in");
																Object serviceTaskId=queryMap.get("serviceTaskId");
					Object serviceTaskId_gt=queryMap.get("serviceTaskId_gt");
					Object serviceTaskId_ge=queryMap.get("serviceTaskId_ge");
					Object serviceTaskId_lt=queryMap.get("serviceTaskId_lt");
					Object serviceTaskId_le=queryMap.get("serviceTaskId_le");
					Object serviceTaskId_in=queryMap.get("serviceTaskId_in");
							
			

																				
			
			QueryCondition qc = new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.gt, "0");				
												if(id!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.eq, id));}
					if(id_gt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.gt, id_gt));}
					if(id_ge!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.ge, id_ge));}
					if(id_lt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.lt, id_lt));}
					if(id_le!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.le, id_le));}
					if(id_in!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.in, id_in));}
																if(physiologicalParametersHistoryId!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.eq, physiologicalParametersHistoryId));}
					if(physiologicalParametersHistoryId_gt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.gt, physiologicalParametersHistoryId_gt));}
					if(physiologicalParametersHistoryId_ge!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.ge, physiologicalParametersHistoryId_ge));}
					if(physiologicalParametersHistoryId_lt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.lt, physiologicalParametersHistoryId_lt));}
					if(physiologicalParametersHistoryId_le!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.le, physiologicalParametersHistoryId_le));}
					if(physiologicalParametersHistoryId_in!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.in, physiologicalParametersHistoryId_in));}
																if(serviceTaskId!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.eq, serviceTaskId));}
					if(serviceTaskId_gt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.gt, serviceTaskId_gt));}
					if(serviceTaskId_ge!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.ge, serviceTaskId_ge));}
					if(serviceTaskId_lt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.lt, serviceTaskId_lt));}
					if(serviceTaskId_le!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.le, serviceTaskId_le));}
					if(serviceTaskId_in!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.in, serviceTaskId_in));}
										
						  						  						OrderByCondition oc = null;
			if(orderList!=null&&orderList.size()>0){
				for(int i=0;i<orderList.size();i++){
					OrderVO order = orderList.get(i);
					String orderColumnt =null;
					String orderType=null;
					if(order.getName()!=null&&!"".equals(order.getName())){
						orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
						orderType = order.getOrderType();
						if(orderType==null||"".equals(orderType.trim())){
							orderType=OrderByCondition.desc;
						}
						if(i==0){
							oc = new OrderByCondition(orderColumnt,orderType);
						}else{
							oc.orderByCondition(new OrderByCondition(orderColumnt,orderType));
						}					
					}
					
				}
			}			
            list = dbManager.queryByConditions(ServiceTaskPhysiologicalParametersHistoryEntity.class,qc,oc);
                                    int a=0;
            					             	                 				     				     if(serviceTaskShow!=null&&serviceTaskShow.booleanValue()){
						a++;
					 }
				     				     				     		    		             	                 				     				     if(physiologicalParametersHistoryShow!=null&&physiologicalParametersHistoryShow.booleanValue()){
						a++;
					 }
				     				     				     		    		                if(a>0&&list!=null&&list.size()>0){
				List<Object> result = new ArrayList<Object>();
				for(int i=0;i<list.size();i++){
					ServiceTaskPhysiologicalParametersHistoryEntity obj = (ServiceTaskPhysiologicalParametersHistoryEntity)list.get(i);
										 	                 				     				        //查询关联内容
						if(serviceTaskShow!=null&&serviceTaskShow.booleanValue()&&obj!=null&&obj.getServiceTaskId()!=null&&obj.getServiceTaskId()>0){
							ServiceTaskEntity serviceTask = (ServiceTaskEntity)dbManager.getById(obj.getServiceTaskId(), ServiceTaskEntity.class);
							obj.setServiceTask(serviceTask);        	  	  
						}
				     				     				     				    					 	                 				     				        //查询关联内容
						if(physiologicalParametersHistoryShow!=null&&physiologicalParametersHistoryShow.booleanValue()&&obj!=null&&obj.getPhysiologicalParametersHistoryId()!=null&&obj.getPhysiologicalParametersHistoryId()>0){
							PhysiologicalParametersHistoryEntity physiologicalParametersHistory = (PhysiologicalParametersHistoryEntity)dbManager.getById(obj.getPhysiologicalParametersHistoryId(), PhysiologicalParametersHistoryEntity.class);
							obj.setPhysiologicalParametersHistory(physiologicalParametersHistory);        	  	  
						}
				     				     				     				    					result.add(obj);					
				}
				list=result;			
		}	
					if(list!=null&&list.size()>0){
               returnlist = new ArrayList<ServiceTaskPhysiologicalParametersHistoryEntity>();
               for (Object obj:list) {           
                 returnlist.add((ServiceTaskPhysiologicalParametersHistoryEntity)obj);
               }
            }       					
			return returnlist;
		}
		
		/**
		 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
		 * @param queryMap 查询条件集合
		 * @param pageno 查询页码
		 * @param pagesize 查询每页记录条数		
		 * @return
		 */
		public PageList getListByCondition(Map<String,Object> queryMap,int pageno,int pagesize) {
			PageList pagelist = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
												Object id=queryMap.get("id");
					Object id_gt=queryMap.get("id_gt");
					Object id_ge=queryMap.get("id_ge");
					Object id_lt=queryMap.get("id_lt");
					Object id_le=queryMap.get("id_le");
					Object id_in=queryMap.get("id_in");
																Object physiologicalParametersHistoryId=queryMap.get("physiologicalParametersHistoryId");
					Object physiologicalParametersHistoryId_gt=queryMap.get("physiologicalParametersHistoryId_gt");
					Object physiologicalParametersHistoryId_ge=queryMap.get("physiologicalParametersHistoryId_ge");
					Object physiologicalParametersHistoryId_lt=queryMap.get("physiologicalParametersHistoryId_lt");
					Object physiologicalParametersHistoryId_le=queryMap.get("physiologicalParametersHistoryId_le");
					Object physiologicalParametersHistoryId_in=queryMap.get("physiologicalParametersHistoryId_in");
																Object serviceTaskId=queryMap.get("serviceTaskId");
					Object serviceTaskId_gt=queryMap.get("serviceTaskId_gt");
					Object serviceTaskId_ge=queryMap.get("serviceTaskId_ge");
					Object serviceTaskId_lt=queryMap.get("serviceTaskId_lt");
					Object serviceTaskId_le=queryMap.get("serviceTaskId_le");
					Object serviceTaskId_in=queryMap.get("serviceTaskId_in");
							
			

																				
			
			QueryCondition qc = new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.gt, "0");				
												if(id!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.eq, id));}
					if(id_gt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.gt, id_gt));}
					if(id_ge!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.ge, id_ge));}
					if(id_lt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.lt, id_lt));}
					if(id_le!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.le, id_le));}
					if(id_in!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.in, id_in));}
																if(physiologicalParametersHistoryId!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.eq, physiologicalParametersHistoryId));}
					if(physiologicalParametersHistoryId_gt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.gt, physiologicalParametersHistoryId_gt));}
					if(physiologicalParametersHistoryId_ge!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.ge, physiologicalParametersHistoryId_ge));}
					if(physiologicalParametersHistoryId_lt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.lt, physiologicalParametersHistoryId_lt));}
					if(physiologicalParametersHistoryId_le!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.le, physiologicalParametersHistoryId_le));}
					if(physiologicalParametersHistoryId_in!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.in, physiologicalParametersHistoryId_in));}
																if(serviceTaskId!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.eq, serviceTaskId));}
					if(serviceTaskId_gt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.gt, serviceTaskId_gt));}
					if(serviceTaskId_ge!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.ge, serviceTaskId_ge));}
					if(serviceTaskId_lt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.lt, serviceTaskId_lt));}
					if(serviceTaskId_le!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.le, serviceTaskId_le));}
					if(serviceTaskId_in!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.in, serviceTaskId_in));}
										
						  						  			            pagelist = dbManager.queryByCondition(ServiceTaskPhysiologicalParametersHistoryEntity.class,qc,pageno,pagesize);	                      			
			return pagelist;
		}
		
		/**
		 * 根据条件查询记录集合（带分页 带排序 带级联查询）
		 * @param queryMap 查询条件集合
		 * @param orderList 排序条件集合
		 * @param pageno 查询页码
		 * @param pagesize 查询每页记录条数
		 		             	                 				     		 * @param serviceTaskShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		             	                 				     		 * @param physiologicalParametersHistoryShow 是否查询关联信息,默认false(当为true时注意效率)
				     				     				     		 		 * @return
		 */
		public PageList getListByCondition(Map<String,Object> queryMap,List<OrderVO> orderList,int pageno,int pagesize,Boolean serviceTaskShow,Boolean physiologicalParametersHistoryShow) {
			PageList pagelist = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
												Object id=queryMap.get("id");
					Object id_gt=queryMap.get("id_gt");
					Object id_ge=queryMap.get("id_ge");
					Object id_lt=queryMap.get("id_lt");
					Object id_le=queryMap.get("id_le");
					Object id_in=queryMap.get("id_in");
																Object physiologicalParametersHistoryId=queryMap.get("physiologicalParametersHistoryId");
					Object physiologicalParametersHistoryId_gt=queryMap.get("physiologicalParametersHistoryId_gt");
					Object physiologicalParametersHistoryId_ge=queryMap.get("physiologicalParametersHistoryId_ge");
					Object physiologicalParametersHistoryId_lt=queryMap.get("physiologicalParametersHistoryId_lt");
					Object physiologicalParametersHistoryId_le=queryMap.get("physiologicalParametersHistoryId_le");
					Object physiologicalParametersHistoryId_in=queryMap.get("physiologicalParametersHistoryId_in");
																Object serviceTaskId=queryMap.get("serviceTaskId");
					Object serviceTaskId_gt=queryMap.get("serviceTaskId_gt");
					Object serviceTaskId_ge=queryMap.get("serviceTaskId_ge");
					Object serviceTaskId_lt=queryMap.get("serviceTaskId_lt");
					Object serviceTaskId_le=queryMap.get("serviceTaskId_le");
					Object serviceTaskId_in=queryMap.get("serviceTaskId_in");
							
			

																				
			
			QueryCondition qc = new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.gt, "0");				
												if(id!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.eq, id));}
					if(id_gt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.gt, id_gt));}
					if(id_ge!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.ge, id_ge));}
					if(id_lt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.lt, id_lt));}
					if(id_le!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.le, id_le));}
					if(id_in!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.in, id_in));}
																if(physiologicalParametersHistoryId!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.eq, physiologicalParametersHistoryId));}
					if(physiologicalParametersHistoryId_gt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.gt, physiologicalParametersHistoryId_gt));}
					if(physiologicalParametersHistoryId_ge!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.ge, physiologicalParametersHistoryId_ge));}
					if(physiologicalParametersHistoryId_lt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.lt, physiologicalParametersHistoryId_lt));}
					if(physiologicalParametersHistoryId_le!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.le, physiologicalParametersHistoryId_le));}
					if(physiologicalParametersHistoryId_in!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.in, physiologicalParametersHistoryId_in));}
																if(serviceTaskId!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.eq, serviceTaskId));}
					if(serviceTaskId_gt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.gt, serviceTaskId_gt));}
					if(serviceTaskId_ge!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.ge, serviceTaskId_ge));}
					if(serviceTaskId_lt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.lt, serviceTaskId_lt));}
					if(serviceTaskId_le!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.le, serviceTaskId_le));}
					if(serviceTaskId_in!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.in, serviceTaskId_in));}
										
						  						  						OrderByCondition oc = null;
			if(orderList!=null&&orderList.size()>0){
				for(int i=0;i<orderList.size();i++){
					OrderVO order = orderList.get(i);
					String orderColumnt =null;
					String orderType=null;
					if(order.getName()!=null&&!"".equals(order.getName())){
						orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
						orderType = order.getOrderType();
						if(orderType==null||"".equals(orderType.trim())){
							orderType=OrderByCondition.desc;
						}
						if(i==0){
							oc = new OrderByCondition(orderColumnt,orderType);
						}else{
							oc.orderByCondition(new OrderByCondition(orderColumnt,orderType));
						}					
					}
					
				}
			}		
            pagelist = dbManager.queryByConditions(ServiceTaskPhysiologicalParametersHistoryEntity.class,qc,oc,pageno,pagesize);	           
                                    int a=0;
            					             	                 				     				     if(serviceTaskShow!=null&&serviceTaskShow.booleanValue()){
						a++;
					 }
				     				     				     		    		             	                 				     				     if(physiologicalParametersHistoryShow!=null&&physiologicalParametersHistoryShow.booleanValue()){
						a++;
					 }
				     				     				     		    		                if(a>0&&pagelist!=null&&pagelist.getResultList()!=null&&pagelist.getResultList().size()>0){
				List<Object> result = new ArrayList<Object>();
				for(int i=0;i<pagelist.getResultList().size();i++){
					ServiceTaskPhysiologicalParametersHistoryEntity obj = (ServiceTaskPhysiologicalParametersHistoryEntity)pagelist.getResultList().get(i);
										 	                 				     				        //查询关联内容
						if(serviceTaskShow!=null&&serviceTaskShow.booleanValue()&&obj!=null&&obj.getServiceTaskId()!=null&&obj.getServiceTaskId()>0){
							ServiceTaskEntity serviceTask = (ServiceTaskEntity)dbManager.getById(obj.getServiceTaskId(), ServiceTaskEntity.class);
							obj.setServiceTask(serviceTask);        	  	  
						}
				     				     				     				    					 	                 				     				        //查询关联内容
						if(physiologicalParametersHistoryShow!=null&&physiologicalParametersHistoryShow.booleanValue()&&obj!=null&&obj.getPhysiologicalParametersHistoryId()!=null&&obj.getPhysiologicalParametersHistoryId()>0){
							PhysiologicalParametersHistoryEntity physiologicalParametersHistory = (PhysiologicalParametersHistoryEntity)dbManager.getById(obj.getPhysiologicalParametersHistoryId(), PhysiologicalParametersHistoryEntity.class);
							obj.setPhysiologicalParametersHistory(physiologicalParametersHistory);        	  	  
						}
				     				     				     				    					result.add(obj);					
				}
				pagelist.setResultList(result);			
		}	
					return pagelist;
		}
		
		/**
		 * 删除记录
		 * 
		 * @param id 主键
		 * @param obj
		 */
		public boolean del(Integer id,Boolean delServiceTask,Boolean delPhysiologicalParametersHistory) {
			boolean result = false;
			if (id !=null&&id>0) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 					
										 	                 				     					    //删除关联信息
						if(delServiceTask!=null&&delServiceTask.booleanValue()){	
							ServiceTaskPhysiologicalParametersHistoryEntity serviceTaskPhysiologicalParametersHistory = (ServiceTaskPhysiologicalParametersHistoryEntity)dbManager.getById(id, ServiceTaskPhysiologicalParametersHistoryEntity.class);
							if(serviceTaskPhysiologicalParametersHistory!=null&&serviceTaskPhysiologicalParametersHistory.getServiceTaskId()!=null){
								dbManager.delNoTransaction(serviceTaskPhysiologicalParametersHistory.getServiceTaskId(), ServiceTaskEntity.class);
							}						
						}
				     				     				     										 	                 				     					    //删除关联信息
						if(delPhysiologicalParametersHistory!=null&&delPhysiologicalParametersHistory.booleanValue()){	
							ServiceTaskPhysiologicalParametersHistoryEntity serviceTaskPhysiologicalParametersHistory = (ServiceTaskPhysiologicalParametersHistoryEntity)dbManager.getById(id, ServiceTaskPhysiologicalParametersHistoryEntity.class);
							if(serviceTaskPhysiologicalParametersHistory!=null&&serviceTaskPhysiologicalParametersHistory.getPhysiologicalParametersHistoryId()!=null){
								dbManager.delNoTransaction(serviceTaskPhysiologicalParametersHistory.getPhysiologicalParametersHistoryId(), PhysiologicalParametersHistoryEntity.class);
							}						
						}
				     				     				     										result = dbManager.delNoTransaction(id, ServiceTaskPhysiologicalParametersHistoryEntity.class);
					tx.commitAndClose(); 
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
		/**
		 * 批量删除记录
		 * 
		 * @param ids
		 *            主键 英文逗号间隔
		 * @param obj
		 */
		public boolean del(String ids) {
			boolean result = false;
			if (ids != null && !"".equals(ids.trim())) {
				TransactionManager tx = DbUtils.getTranManager();
				try {
					tx.beginTransaction();
					QueryCondition qc = new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID,QueryCondition.in, ids);
					result = dbManager.delByConditionsNoTransaction(ServiceTaskPhysiologicalParametersHistoryEntity.class, qc);
					tx.commitAndClose();
				} catch (Exception e) {
					logger.error("数据库提交失败！");
					logger.error(e);
					result = false;
					try {
						tx.rollbackAndClose();
					} catch (Exception ex) {
						logger.error("数据库回滚失败！");
						logger.error(ex);
					}
				}
			}
			return result;
		}

		/**
		 * 批量条件删除记录
		 * @param queryMap 查询条件集合
		 */
		public boolean delList(Map<String,Object> queryMap,Boolean delServiceTask,Boolean delPhysiologicalParametersHistory) {
			boolean result = false;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
												Object id=queryMap.get("id");
					Object id_gt=queryMap.get("id_gt");
					Object id_ge=queryMap.get("id_ge");
					Object id_lt=queryMap.get("id_lt");
					Object id_le=queryMap.get("id_le");
					Object id_in=queryMap.get("id_in");
																Object physiologicalParametersHistoryId=queryMap.get("physiologicalParametersHistoryId");
					Object physiologicalParametersHistoryId_gt=queryMap.get("physiologicalParametersHistoryId_gt");
					Object physiologicalParametersHistoryId_ge=queryMap.get("physiologicalParametersHistoryId_ge");
					Object physiologicalParametersHistoryId_lt=queryMap.get("physiologicalParametersHistoryId_lt");
					Object physiologicalParametersHistoryId_le=queryMap.get("physiologicalParametersHistoryId_le");
					Object physiologicalParametersHistoryId_in=queryMap.get("physiologicalParametersHistoryId_in");
																Object serviceTaskId=queryMap.get("serviceTaskId");
					Object serviceTaskId_gt=queryMap.get("serviceTaskId_gt");
					Object serviceTaskId_ge=queryMap.get("serviceTaskId_ge");
					Object serviceTaskId_lt=queryMap.get("serviceTaskId_lt");
					Object serviceTaskId_le=queryMap.get("serviceTaskId_le");
					Object serviceTaskId_in=queryMap.get("serviceTaskId_in");
																											
			QueryCondition qc = new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.gt, "0");				
												if(id!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.eq, id));}
					if(id_gt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.gt, id_gt));}
					if(id_ge!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.ge, id_ge));}
					if(id_lt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.lt, id_lt));}
					if(id_le!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.le, id_le));}
					if(id_in!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.ID, QueryCondition.in, id_in));}
																if(physiologicalParametersHistoryId!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.eq, physiologicalParametersHistoryId));}
					if(physiologicalParametersHistoryId_gt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.gt, physiologicalParametersHistoryId_gt));}
					if(physiologicalParametersHistoryId_ge!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.ge, physiologicalParametersHistoryId_ge));}
					if(physiologicalParametersHistoryId_lt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.lt, physiologicalParametersHistoryId_lt));}
					if(physiologicalParametersHistoryId_le!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.le, physiologicalParametersHistoryId_le));}
					if(physiologicalParametersHistoryId_in!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.PHYSIOLOGICAL_PARAMETERS_HISTORY_ID, QueryCondition.in, physiologicalParametersHistoryId_in));}
																if(serviceTaskId!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.eq, serviceTaskId));}
					if(serviceTaskId_gt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.gt, serviceTaskId_gt));}
					if(serviceTaskId_ge!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.ge, serviceTaskId_ge));}
					if(serviceTaskId_lt!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.lt, serviceTaskId_lt));}
					if(serviceTaskId_le!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.le, serviceTaskId_le));}
					if(serviceTaskId_in!=null){qc.andCondition(new QueryCondition(ServiceTaskPhysiologicalParametersHistoryEntity.SERVICE_TASK_ID, QueryCondition.in, serviceTaskId_in));}
										
				            				            						if (qc.getQueryNextCondition()!=null) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 						
										 	                 				     					     //删除关联信息
						if(delServiceTask!=null&&delServiceTask.booleanValue()){
							List<Object> list=dbManager.queryByConditionNoTransaction(ServiceTaskPhysiologicalParametersHistoryEntity.class,qc);
							String strIds="";
							if(list!=null&&list.size()>0){
								for(Object obj:list){
									ServiceTaskPhysiologicalParametersHistoryEntity entity=(ServiceTaskPhysiologicalParametersHistoryEntity)obj;
									strIds += entity.getServiceTaskId()+",";
								}
								strIds = strIds.substring(0, strIds.length()-1);
							}
							if(strIds!=null&&!"".equals(strIds)){
								QueryCondition qc1 = new QueryCondition(ServiceTaskEntity.ID, QueryCondition.in, strIds);
								dbManager.delByConditionsNoTransaction(ServiceTaskEntity.class, qc1);
							}
							
						}
				     				     				     										 	                 				     					     //删除关联信息
						if(delPhysiologicalParametersHistory!=null&&delPhysiologicalParametersHistory.booleanValue()){
							List<Object> list=dbManager.queryByConditionNoTransaction(ServiceTaskPhysiologicalParametersHistoryEntity.class,qc);
							String strIds="";
							if(list!=null&&list.size()>0){
								for(Object obj:list){
									ServiceTaskPhysiologicalParametersHistoryEntity entity=(ServiceTaskPhysiologicalParametersHistoryEntity)obj;
									strIds += entity.getPhysiologicalParametersHistoryId()+",";
								}
								strIds = strIds.substring(0, strIds.length()-1);
							}
							if(strIds!=null&&!"".equals(strIds)){
								QueryCondition qc1 = new QueryCondition(PhysiologicalParametersHistoryEntity.ID, QueryCondition.in, strIds);
								dbManager.delByConditionsNoTransaction(PhysiologicalParametersHistoryEntity.class, qc1);
							}
							
						}
				     				     				     										result = dbManager.delByConditionsNoTransaction(ServiceTaskPhysiologicalParametersHistoryEntity.class,qc);				
					tx.commitAndClose();  
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
		
}
