package com.framework.system.common.handler.dataRule;

import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.framework.system.common.entity.dataRule.DataRuleEntity;
import com.framework.system.common.pack.dataRule.DataRulePack;
import com.framework.system.common.parse.dataRule.DataRuleParse;
import com.framework.system.common.service.dataRule.DataRuleService;

import com.framework.system.business.handler.BaseHandler;
import com.framework.system.db.query.OrderVO;

/**
 * @Title: Handler
 * @Description: 数据规则功能业务处理器
 * @author feng.gu
 * @date 2015-12-02 09:20:58
 * @version V1.0
 * 
 */
public class DataRuleHandler extends BaseHandler {
	private static Logger logger = Logger.getLogger(DataRuleService.class);
	/**
	 * 解析器
	 */
	private DataRuleParse dataRuleParse = DataRuleParse.getInstance();
	/**
	 * 业务处理器
	 */
	private DataRuleService dataRuleService = DataRuleService.getInstance();
	/**
	 * 封装器
	 */
	private DataRulePack dataRulePack = DataRulePack.getInstance();

	private static DataRuleHandler dataRuleHandler;
	
	private static SimpleDateFormat formater = new SimpleDateFormat("yyyyMMddHHmmss");

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static DataRuleHandler getInstance() {
		if (dataRuleHandler == null) {
			dataRuleHandler = new DataRuleHandler();
		}
		return dataRuleHandler;
	}

	/**
	 * 
	 * @param type
	 *            1-json 2-xml
	 * @param entityName
	 * @param command
	 * @param reqStr
	 * @param request
	 * @param response
	 */
	public String doHandler(int type, String command, String reqStr,
			HttpServletRequest request, HttpServletResponse response) {
		String resultStr = "";
		try {
			// 解析
			Map<String, Object> parseMap = dataRuleParse.parse(type, command,
					reqStr, request);
			String action = (String) parseMap.get("action");
			DataRuleEntity dataRule = (DataRuleEntity) parseMap.get("dataRule");
			List<DataRuleEntity> dataRuleList = (List<DataRuleEntity>) parseMap
					.get("dataRuleList");
			Integer id = (Integer) parseMap.get("id");
			Map<String, Object> queryMap = (Map<String, Object>) parseMap
					.get("queryMap");
			int pageno = (Integer) parseMap.get("pageno");
			int pagesize = (Integer) parseMap.get("pagesize");
			List<OrderVO> orderList = (List<OrderVO>) parseMap.get("orderList");

			Boolean createUserShow = (Boolean) parseMap.get("createUserShow");
			Boolean delCreateUser = (Boolean) parseMap.get("delCreateUser");
			Boolean updateUserShow = (Boolean) parseMap.get("updateUserShow");
			Boolean delUpdateUser = (Boolean) parseMap.get("delUpdateUser");

			// 业务处理
			Object result = null;
			if ("save".equals(action)) {
				Date date = new Date();
				Integer userId = (Integer)request.getSession().getAttribute("userId");
				if(dataRule.getId()!=null){
					dataRule.setUpdateTime(formater.format(date));
					dataRule.setUpdateUserId(userId);
				}else{
					dataRule.setCreateTime(formater.format(date));
					dataRule.setCreateUserId(userId);
				}
				result = dataRuleService.save(dataRule);
			} else if ("saveList".equals(action)) {
				result = dataRuleService.saveList(dataRuleList);
			} else if ("getById".equals(action)) {
				result = dataRuleService.getById(id, createUserShow,
						updateUserShow);
			} else if ("getListByCondition".equals(action)) {
				result = dataRuleService.getListByCondition(queryMap,
						orderList, pageno, pagesize, createUserShow,
						updateUserShow);
			} else if ("del".equals(action)) {
				result = dataRuleService.del(id, delCreateUser, delUpdateUser);
			} else if ("delList".equals(action)) {
				result = dataRuleService.delList(queryMap, delCreateUser,
						delUpdateUser);
			}
			// 封装
			Map<String, Object> packMap = dataRulePack.pack(type, action,
					result, dataRule);
			String actionBack = (String) packMap.get("action");
			String resultBack = (String) packMap.get("result");
			String desBack = (String) packMap.get("des");
			JSONObject pageBack = (JSONObject) packMap.get("page");
			JSONObject contentBack = (JSONObject) packMap.get("content");

			JSONObject repJson = new JSONObject();
			if (actionBack != null && !"".equals(actionBack)) {
				repJson.put("action", actionBack);
			}
			if (resultBack != null && !"".equals(resultBack)) {
				repJson.put("result", resultBack);
			}
			if (desBack != null && !"".equals(desBack)) {
				repJson.put("des", desBack);
			}
			if (pageBack != null) {
				repJson.put("page", pageBack);
			}
			if (contentBack != null && !"".equals(contentBack)) {
				repJson.put("content", contentBack);
			}
			logger.debug("返回消息：" + repJson.toString());
			resultStr = repJson.toString();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error(e);
		}
		return resultStr;
	}
}
