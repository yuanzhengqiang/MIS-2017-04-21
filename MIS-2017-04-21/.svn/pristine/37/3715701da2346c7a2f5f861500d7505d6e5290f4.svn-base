package com.framework.system.common.controller.login;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.framework.system.common.entity.dataDic.DataDicEntity;
import com.framework.system.common.entity.json.AjaxJson;
import com.framework.system.common.entity.module.ModuleEntity;
import com.framework.system.common.entity.privilege.PrivilegeEntity;
import com.framework.system.common.entity.role.RoleEntity;
import com.framework.system.common.entity.user.UserEntity;
import com.framework.system.common.entity.userRole.UserRoleEntity;
import com.framework.system.common.service.SystemService;
import com.framework.system.common.service.dataDic.DataDicService;
import com.framework.system.common.service.module.ModuleService;
import com.framework.system.common.service.privilege.PrivilegeService;
import com.framework.system.common.service.role.RoleService;
import com.framework.system.common.service.user.UserService;
import com.framework.system.common.service.userRole.UserRoleService;
import com.framework.system.common.tools.Datetools;
import com.framework.system.util.Md5Utils;

import fsk.entity.employee.EmployeeEntity;
import fsk.entity.employeePositionalTitle.EmployeePositionalTitleEntity;
import fsk.entity.older.OlderEntity;
import fsk.entity.site.SiteEntity;
import fsk.entity.siteEmployee.SiteEmployeeEntity;
import fsk.init.SystemInit;
import fsk.service.BusinessService;
import fsk.service.employee.EmployeeService;
import fsk.service.employeePositionalTitle.EmployeePositionalTitleService;
import fsk.service.older.OlderService;
import fsk.service.site.SiteService;
import fsk.service.siteEmployee.SiteEmployeeService;
import fsk.util.SQLserverUtils;

@Controller
@RequestMapping("/systemLogin")
public class SystemLogin {
	private static Logger logger = Logger.getLogger(SystemLogin.class);
	private UserService userService = UserService.getInstance();
	private EmployeeService employeeService = EmployeeService.getInstance();
	private SystemService systemService = SystemService.getInstance();
	private BusinessService businessService = BusinessService.getInstance();
	private static PrivilegeService privilegeService = PrivilegeService.getInstance();
	private static ModuleService moduleService = ModuleService.getInstance();
	private static RoleService roleService = RoleService.getInstance();
	private static SiteEmployeeService siteEmployeeService = SiteEmployeeService.getInstance();
	private static SiteService siteService = SiteService.getInstance();
	private static DataDicService dataDicService = DataDicService.getInstance();
	private static EmployeePositionalTitleService employeePositionalTitleService = EmployeePositionalTitleService.getInstance();
	private static UserRoleService userRoleService = UserRoleService.getInstance();
	private static OlderService olderService = OlderService.getInstance();
	private static SQLserverUtils sqlserver = SQLserverUtils.getInstance();

	@RequestMapping(params = "loginpage")
	public ModelAndView loginpage() {
		ModelAndView mav = new ModelAndView("/system/" + SystemInit.loginpage);
		return mav;
	}

	@RequestMapping(params = "login")
	@ResponseBody
	public AjaxJson login(HttpServletRequest request) {
		AjaxJson j = new AjaxJson();
		String result = "failure";
		String msg = "登录失败";
		try {
			String username = request.getParameter("username").trim();
			String password = request.getParameter("password").trim();
			String type = null;
			try {
				type = request.getParameter("type").trim();
			} catch (Exception e) {

			}
			if (username == null || "".equals(username)) {
				result = "failure";
				msg = "请输入用户名";
				j.setResult(result);
				j.setDes(msg);
				return j;
			}
			if (password == null || Md5Utils.MD5("").equals(password)) {
				result = "failure";
				msg = "请输入密码";
				j.setResult(result);
				j.setDes(msg);
				return j;
			}
			// 校验
			String md5_pwd = Md5Utils.MD5(username + "$" + password);
			Map<String, Object> queryMap = new HashMap<String, Object>();
			queryMap.put("loginname", username);
			List<UserEntity> listn = userService.getListByCondition(queryMap);
			if (listn == null || listn.size() == 0) {
				result = "failure";
				msg = "用户名不存在，请先注册";
				j.setResult(result);
				j.setDes(msg);
				return j;
			}

			queryMap.put("password", md5_pwd);
			List<UserEntity> list = userService.getListByCondition(queryMap);
			if (list != null && list.size() > 0) {
				UserEntity user = (UserEntity) list.get(0);
				if (user != null) {
					Map<String, Object> queryOlder = new HashMap<String, Object>();
					queryOlder.put("userId", user.getId());
					List<OlderEntity> olderList = olderService.getListByCondition(queryOlder);
					if (olderList != null && olderList.size() > 0) {
						result = "failure";
						msg = "用户名和密码不匹配";
					} else {
						result = "success";
						msg = "登录成功";
						// 用户名保存到session
						request.getSession().setAttribute("userId", user.getId());
						EmployeeEntity empObject = null;
						if (user.getId() != null && user.getId() != 0) {
							Map<String, Object> queryMapEmp = new HashMap<String, Object>();
							queryMapEmp.put("userId", user.getId());
							List<EmployeeEntity> employeeEnt = employeeService.getListByCondition(queryMapEmp);
							if (employeeEnt != null && employeeEnt.size() > 0) {
								EmployeeEntity employee = (EmployeeEntity) employeeEnt.get(0);
								empObject = employeeEnt.get(0);
								request.getSession().setAttribute("employeeId", employee.getId());
								request.getSession().setAttribute("nickname", employee.getName());
							} else {
								request.getSession().setAttribute("nickname", user.getNickname());
							}
						} else {
							request.getSession().setAttribute("nickname", user.getNickname());
						}
						request.getSession().setAttribute("loginname", user.getLoginname());

						// 角色保存到session
						String roleIds = systemService.getUserRoleIdsByUserId(user.getId());
						if (roleIds != null && roleIds.length() > 0) {
							request.getSession().setAttribute("roleIds", roleIds);
						}
						// 保存用户业务相关id到session
						businessService.getUserBusinessId(user.getId(), request);
						user.setLastLoginTime(user.getLoginTime()); // 把原来的“本次登录时间”改为“上次登录时间”
						user.setLoginTime(Datetools.getCurrentDate()); // 把当前时间设为“本次登录时间”
						if (user.getLoginNum() != null && user.getLoginNum() > 0) { // 本月登入次数+1
							user.setLoginNum(user.getLoginNum() + 1);
						} else {
							user.setLoginNum(1);
						}

						userService.save(user);

						if ("1".equals(SystemInit.IsLocal)) {// 是否为本地坐席 1是 2否
							// 获取当前登录用户坐席电话分机号
							List<Map<String, Object>> Server_ChannelIP = sqlserver.selectBySQL("select ExtCode from Server_ChannelIP where IPAddress='"
							        + request.getRemoteAddr() + "'");
							String extCode = "";
							if (Server_ChannelIP != null && Server_ChannelIP.size() > 0) {
								Map<String, Object> server_ChannelIPSonMap = Server_ChannelIP.get(0);
								if (server_ChannelIPSonMap != null && server_ChannelIPSonMap.size() > 0) {
									extCode = (String) server_ChannelIPSonMap.get("ExtCode");
								}
							}
							request.getSession().setAttribute("ExtCode", extCode);
							// 根据当前登录用户坐席电话分机号，将人员名称Update到监控表中，监控CTI的登录情况
							Boolean ifSuccess = sqlserver.updateBySQL("update  Server_ChannelIP set Memo='',powerSource='',VNum='',VName='',OperName='"
							        + user.getNickname() + "' where ExtCode=" + extCode);
							// 获取坐席接听电话级别
							List<Map<String, Object>> CTI_member = sqlserver.selectBySQL("select level from CTI_member where ExtCode='" + extCode + "'");
							Integer login_Level = 10;// 默认没有取到值的话设为最后级别
							if (CTI_member != null && CTI_member.size() > 0) {
								Map<String, Object> CTI_memberSonMap = CTI_member.get(0);
								if (CTI_memberSonMap != null && CTI_memberSonMap.size() > 0) {
									login_Level = (Integer) CTI_memberSonMap.get("level");
								}
							}
							request.getSession().setAttribute("login_Level", login_Level);
						}

						/* 安卓登录返回信息 */
						if (type != null && type.equals("android") && empObject != null) {
							j.setSessionId(request.getSession().getId());
							String moduleIds = "";
							Map<String, Object> queryMapPri = new HashMap<String, Object>();
							queryMapPri.put("roleId_in", roleIds);
							List<Object> listPri = privilegeService.getListByCondition(queryMapPri);

							/* 添加员工角色名称 */
							Integer userIds = empObject.getUserId();
							Map<String, Object> queryMapUserRole = new HashMap<String, Object>();
							queryMapUserRole.put("userId", userIds);
							List<UserRoleEntity> datauuList = userRoleService.getListByCondition(queryMapUserRole);
							String ids = "";
							String rolrNam = "";
							if (datauuList != null && datauuList.size() > 0) {
								for (UserRoleEntity userRoleEntity : datauuList) {
									ids = ids + userRoleEntity.getRoleId() + ",";
								}
								if (!"".equals(ids)) {
									ids = ids.replaceAll(",,", ",");
									ids = ids.substring(0, ids.length() - 1);
									Map<String, Object> queryMapRole = new HashMap<String, Object>();
									queryMapRole.put("id_in", ids);
									List<Object> dUserList = roleService.getListByCondition(queryMapRole);
									if (dUserList != null && dUserList.size() > 0) {
										for (int i = 0; i < dUserList.size(); i++) {
											RoleEntity RovvdEntity = (RoleEntity) dUserList.get(i);
											rolrNam = rolrNam + RovvdEntity.getName() + ",";
										}
										rolrNam = rolrNam.replaceAll(",,", ",");
										rolrNam = rolrNam.substring(0, rolrNam.length() - 1);
										empObject.setRoleNames(rolrNam);
									}
								}
							}
							// 服务站点
							String siteStreetName = "";
							Map<String, Object> queryMapSiteEmp = new HashMap<String, Object>();
							queryMapSiteEmp.put("employeeId", empObject.getId());
							List<SiteEmployeeEntity> siteEmpList = siteEmployeeService.getListByCondition(queryMapSiteEmp);
							String siteIds = "";
							if (siteEmpList != null && siteEmpList.size() > 0) {
								for (int n = 0; n < siteEmpList.size(); n++) {
									SiteEmployeeEntity siteEmployeeEntity = siteEmpList.get(n);
									if (n < siteEmpList.size() - 1) {
										siteIds = siteIds + siteEmployeeEntity.getSiteId() + ",";
									} else {
										siteIds = siteIds + siteEmployeeEntity.getSiteId();
									}
								}
							}

							Map<String, Object> queryMapSiteArea = new HashMap<String, Object>();
							queryMapSiteArea.put("id_in", siteIds);
							List<SiteEntity> siteAreaList = siteService.getListByCondition(queryMapSiteArea);
							if (siteAreaList != null && siteAreaList.size() > 0) {
								for (int l = 0; l < siteAreaList.size(); l++) {
									SiteEntity entityTemp = siteAreaList.get(l);
									if (l < siteAreaList.size() - 1) {
										siteStreetName = siteStreetName + entityTemp.getName() + ",";
									} else {
										siteStreetName = siteStreetName + entityTemp.getName();
									}
								}
							}
							empObject.setSiteStreetName(siteStreetName);

							// 职称
							String zhichengname = "";
							Map<String, Object> queryMapemp = new HashMap<String, Object>();
							queryMapemp.put("employeeId", empObject.getId());
							List<EmployeePositionalTitleEntity> employeePositionalTitleList = employeePositionalTitleService.getListByCondition(queryMapemp);
							if (employeePositionalTitleList != null && employeePositionalTitleList.size() > 0) {
								String epids = "";
								for (int n = 0; n < employeePositionalTitleList.size(); n++) {
									EmployeePositionalTitleEntity entitytemp = (EmployeePositionalTitleEntity) employeePositionalTitleList.get(n);
									if (n < employeePositionalTitleList.size() - 1) {
										epids = epids + String.valueOf(entitytemp.getPositionalTitleId()) + ",";
									} else {
										epids = epids + String.valueOf(entitytemp.getPositionalTitleId());
									}
								}
								Map<String, Object> queryMapdata = new HashMap<String, Object>();
								queryMapdata.put("id_in", epids);
								List<Object> dataList = dataDicService.getListByCondition(queryMapdata);
								if (dataList != null && dataList.size() > 0) {
									for (int n = 0; n < dataList.size(); n++) {
										DataDicEntity dataDicEntity = (DataDicEntity) dataList.get(n);
										if (n < dataList.size() - 1) {
											zhichengname = zhichengname + dataDicEntity.getName() + ",";
										} else {
											zhichengname = zhichengname + dataDicEntity.getName();
										}
									}
									empObject.setZhichengs(zhichengname);
								}
							}

							j.setEmployee(empObject);

							if (listPri != null && listPri.size() > 0) {
								for (int i = 0; i < listPri.size(); i++) {
									PrivilegeEntity entity = (PrivilegeEntity) listPri.get(i);
									moduleIds = moduleIds + entity.getModuleId() + ",";
								}
								if (!"".equals(moduleIds)) {
									moduleIds = moduleIds.replaceAll(",,", ",");
									moduleIds = moduleIds.substring(0, moduleIds.length() - 1);
									Map<String, Object> mapName = new HashMap<String, Object>();
									JSONArray modList = new JSONArray();
									Map<String, Object> queryMapMod = new HashMap<String, Object>();
									queryMapMod.put("id_in", moduleIds);
									queryMapMod.put("type", 4);
									List<Object> listMod = moduleService.getListByCondition(queryMapMod);
									if (listMod != null && listMod.size() > 0) {
										for (int i = 0; i < listMod.size(); i++) {
											ModuleEntity entity = (ModuleEntity) listMod.get(i);
											String modName = entity.getName();
											if (mapName.get(modName) == null) {
												mapName.put(modName, modName);
											}
										}
										for (Entry<String, Object> entry : mapName.entrySet()) {
											JSONObject jsonName = new JSONObject();
											jsonName.put("name", entry.getValue());
											modList.add(jsonName);
										}
										j.setModuleList(modList);
									}

								}
							}

						} else if (empObject == null && type != null) {
							result = "failure";
							msg = "该用户没有权限登录";
						}
						// 保存session到内存
						HttpSession session = request.getSession();
						SystemInit.onlineList.add(session);
						if (SystemInit.onlineList != null && SystemInit.onlineList.size() > 0) {
							for (HttpSession sessionList : SystemInit.onlineList) {
								if (sessionList.getId() == null) {
									SystemInit.onlineList.remove(sessionList);
								}
							}
							System.out.println("在线人数：" + SystemInit.onlineList.size() + "人。");
						}
					}

				}
			} else {
				result = "failure";
				msg = "密码错误";
				j.setResult(result);
				j.setDes(msg);
				return j;
			}
		} catch (Exception e) {
			logger.error(e.toString());
		}
		j.setResult(result);
		j.setDes(msg);
		return j;
	}

	// 用户登出
	@RequestMapping(params = "logout")
	public ModelAndView logout(HttpServletRequest request) {
		if (request != null && request.getSession() != null && request.getSession().getId() != null) {
			if (SystemInit.onlineList.contains(request.getSession())) {
				SystemInit.onlineList.remove(request.getSession());
				System.out.println("在线人数：" + SystemInit.onlineList.size() + "人。");

			}
		}
		request.getSession().removeAttribute("userId");
		request.getSession().removeAttribute("loginname");
		request.getSession().removeAttribute("roleIds");
		request.getSession().removeAttribute("employeeId");
		request.getSession().removeAttribute("nickname");
		request.getSession().invalidate();
		return loginpage();
	}

}
