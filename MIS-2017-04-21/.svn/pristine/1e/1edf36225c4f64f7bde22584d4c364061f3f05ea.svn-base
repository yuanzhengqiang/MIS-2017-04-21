package fsk.service.medNotice;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;

import fsk.entity.medNotice.MedNoticeEntity;
import fsk.entity.medPlan.MedPlanEntity;

/**
 * @Title: Service
 * @Description: 服药提醒服务类
 * @author feng.gu
 * @date 2016-10-19 16:11:44
 * @version V1.0
 * 
 */
public class MedNoticeService {
	private static Logger logger = Logger.getLogger(MedNoticeService.class);
	private DBManager dbManager = DBManager.getInstance();

	private static MedNoticeService medNoticeService;

	/**
	 * 获取实例
	 * 
	 * @return
	 */
	public static MedNoticeService getInstance() {
		if (medNoticeService == null) {
			medNoticeService = new MedNoticeService();
		}
		return medNoticeService;
	}

	/**
	 * 保存记录
	 * 
	 * @param obj
	 */
	public boolean save(MedNoticeEntity medNotice) {
		boolean result = false;
		if (medNotice != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 关联信息保存
				MedPlanEntity medPlan = medNotice.getMedPlan();
				if (medPlan != null) {
					dbManager.saveNoTransaction(medPlan);
					medNotice.setMedPlanId(medPlan.getId());
				}
				result = dbManager.saveNoTransaction(medNotice);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量保存记录
	 * 
	 * @param list
	 */
	public boolean saveList(List<MedNoticeEntity> medNoticeList) {
		boolean result = false;
		if (medNoticeList != null && medNoticeList.size() > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				for (MedNoticeEntity medNotice : medNoticeList) {
					if (medNotice != null) {
						// 关联信息保存
						MedPlanEntity medPlan = medNotice.getMedPlan();
						if (medPlan != null) {
							dbManager.saveNoTransaction(medPlan);
							medNotice.setMedPlanId(medPlan.getId());
						}
						result = dbManager.saveNoTransaction(medNotice);
					}
				}
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public MedNoticeEntity getById(Integer id) {
		MedNoticeEntity obj = null;
		if (id != null) {
			obj = (MedNoticeEntity) dbManager
					.getById(id, MedNoticeEntity.class);
		}
		return obj;
	}

	/**
	 * 根据id读取记录
	 * 
	 * @param id
	 *            主键
	 * @param medPlanShow
	 *            是否查询关联信息
	 * @param obj
	 */
	public MedNoticeEntity getById(Integer id, Boolean medPlanShow) {
		MedNoticeEntity obj = null;
		if (id != null) {
			obj = (MedNoticeEntity) dbManager
					.getById(id, MedNoticeEntity.class);
			// 查询关联内容
			if (medPlanShow != null && medPlanShow.booleanValue()
					&& obj != null && obj.getMedPlanId() != null
					&& obj.getMedPlanId() > 0) {
				MedPlanEntity medPlan = (MedPlanEntity) dbManager.getById(
						obj.getMedPlanId(), MedPlanEntity.class);
				obj.setMedPlan(medPlan);
			}
		}
		return obj;
	}

	/**
	 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @return
	 */
	public List<MedNoticeEntity> getListByCondition(Map<String, Object> queryMap) {
		List<MedNoticeEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		list = dbManager.queryByCondition(MedNoticeEntity.class, qc);
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<MedNoticeEntity>();
			for (Object obj : list) {
				returnlist.add((MedNoticeEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（不分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param medPlanShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public List<MedNoticeEntity> getListByCondition(
			Map<String, Object> queryMap, List<OrderVO> orderList,
			Boolean medPlanShow) {
		List<MedNoticeEntity> returnlist = null;
		List<Object> list = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		list = dbManager.queryByConditions(MedNoticeEntity.class, qc, oc);
		int a = 0;
		if (medPlanShow != null && medPlanShow.booleanValue()) {
			a++;
		}
		if (a > 0 && list != null && list.size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < list.size(); i++) {
				MedNoticeEntity obj = (MedNoticeEntity) list.get(i);
				// 查询关联内容
				if (medPlanShow != null && medPlanShow.booleanValue()
						&& obj != null && obj.getMedPlanId() != null
						&& obj.getMedPlanId() > 0) {
					MedPlanEntity medPlan = (MedPlanEntity) dbManager.getById(
							obj.getMedPlanId(), MedPlanEntity.class);
					obj.setMedPlan(medPlan);
				}
				result.add(obj);
			}
			list = result;
		}
		if (list != null && list.size() > 0) {
			returnlist = new ArrayList<MedNoticeEntity>();
			for (Object obj : list) {
				returnlist.add((MedNoticeEntity) obj);
			}
		}
		return returnlist;
	}

	/**
	 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			int pageno, int pagesize) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		pagelist = dbManager.queryByCondition(MedNoticeEntity.class, qc,
				pageno, pagesize);
		return pagelist;
	}

	/**
	 * 根据条件查询记录集合（带分页 带排序 带级联查询）
	 * 
	 * @param queryMap
	 *            查询条件集合
	 * @param orderList
	 *            排序条件集合
	 * @param pageno
	 *            查询页码
	 * @param pagesize
	 *            查询每页记录条数
	 * @param medPlanShow
	 *            是否查询关联信息,默认false(当为true时注意效率)
	 * @return
	 */
	public PageList getListByCondition(Map<String, Object> queryMap,
			List<OrderVO> orderList, int pageno, int pagesize,
			Boolean medPlanShow) {
		PageList pagelist = null;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		OrderByCondition oc = null;
		if (orderList != null && orderList.size() > 0) {
			for (int i = 0; i < orderList.size(); i++) {
				OrderVO order = orderList.get(i);
				String orderColumnt = null;
				String orderType = null;
				if (order.getName() != null && !"".equals(order.getName())) {
					orderColumnt = StringUtil.formatFieldToColumnt(order
							.getName());
					orderType = order.getOrderType();
					if (orderType == null || "".equals(orderType.trim())) {
						orderType = OrderByCondition.desc;
					}
					if (i == 0) {
						oc = new OrderByCondition(orderColumnt, orderType);
					} else {
						oc.orderByCondition(new OrderByCondition(orderColumnt,
								orderType));
					}
				}

			}
		}
		// 数据权限
		List<QueryCondition> dataRuleQclist = null;
		List<Map<String, Object>> dataRuleMapList = (List<Map<String, Object>>) queryMap
				.get("dataRuleMapList");
		if (dataRuleMapList != null && dataRuleMapList.size() > 0) {
			dataRuleQclist = new ArrayList<QueryCondition>();
			for (Map<String, Object> dataRuleMap : dataRuleMapList) {
				QueryCondition dataRuleQc = changeMapToQc(dataRuleMap);
				dataRuleQclist.add(dataRuleQc);
			}
		}
		pagelist = dbManager.queryByConditions(MedNoticeEntity.class, qc,
				dataRuleQclist, oc, pageno, pagesize);
		int a = 0;
		if (medPlanShow != null && medPlanShow.booleanValue()) {
			a++;
		}
		if (a > 0 && pagelist != null && pagelist.getResultList() != null
				&& pagelist.getResultList().size() > 0) {
			List<Object> result = new ArrayList<Object>();
			for (int i = 0; i < pagelist.getResultList().size(); i++) {
				MedNoticeEntity obj = (MedNoticeEntity) pagelist
						.getResultList().get(i);
				// 查询关联内容
				if (medPlanShow != null && medPlanShow.booleanValue()
						&& obj != null && obj.getMedPlanId() != null
						&& obj.getMedPlanId() > 0) {
					MedPlanEntity medPlan = (MedPlanEntity) dbManager.getById(
							obj.getMedPlanId(), MedPlanEntity.class);
					obj.setMedPlan(medPlan);
				}
				result.add(obj);
			}
			pagelist.setResultList(result);
		}
		return pagelist;
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 *            主键
	 * @param obj
	 */
	public boolean del(Integer id, Boolean delMedPlan) {
		boolean result = false;
		if (id != null && id > 0) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delMedPlan != null && delMedPlan.booleanValue()) {
					MedNoticeEntity medNotice = (MedNoticeEntity) dbManager
							.getById(id, MedNoticeEntity.class);
					if (medNotice != null && medNotice.getMedPlanId() != null) {
						dbManager.delNoTransaction(medNotice.getMedPlanId(),
								MedPlanEntity.class);
					}
				}
				result = dbManager.delNoTransaction(id, MedNoticeEntity.class);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            主键 英文逗号间隔
	 * @param obj
	 */
	public boolean del(String ids) {
		boolean result = false;
		if (ids != null && !"".equals(ids.trim())) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				QueryCondition qc = new QueryCondition(MedNoticeEntity.ID,
						QueryCondition.in, ids);
				result = dbManager.delByConditionsNoTransaction(
						MedNoticeEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	/**
	 * 批量条件删除记录
	 * 
	 * @param queryMap
	 *            查询条件集合
	 */
	public boolean delList(Map<String, Object> queryMap, Boolean delMedPlan) {
		boolean result = false;
		if (queryMap == null) {
			queryMap = new HashMap<String, Object>();
		}
		QueryCondition qc = changeMapToQc(queryMap);
		if (qc.getQueryNextCondition() != null) {
			TransactionManager tx = DbUtils.getTranManager();
			try {
				tx.beginTransaction();
				// 删除关联信息
				if (delMedPlan != null && delMedPlan.booleanValue()) {
					List<Object> list = dbManager
							.queryByConditionNoTransaction(
									MedNoticeEntity.class, qc);
					String strIds = "";
					if (list != null && list.size() > 0) {
						for (Object obj : list) {
							MedNoticeEntity entity = (MedNoticeEntity) obj;
							strIds += entity.getMedPlanId() + ",";
						}
						strIds = strIds.substring(0, strIds.length() - 1);
					}
					if (strIds != null && !"".equals(strIds)) {
						QueryCondition qc1 = new QueryCondition(
								MedPlanEntity.ID, QueryCondition.in, strIds);
						dbManager.delByConditionsNoTransaction(
								MedPlanEntity.class, qc1);
					}

				}
				result = dbManager.delByConditionsNoTransaction(
						MedNoticeEntity.class, qc);
				tx.commitAndClose();
			} catch (Exception e) {
				logger.error("数据库提交失败！");
				logger.error(e);
				result = false;
				try {
					tx.rollbackAndClose();
				} catch (Exception ex) {
					logger.error("数据库回滚失败！");
					logger.error(ex);
				}
			}
		}
		return result;
	}

	private QueryCondition changeMapToQc(Map<String, Object> queryMap) {
		Object id = queryMap.get("id");
		Object id_gt = queryMap.get("id_gt");
		Object id_ge = queryMap.get("id_ge");
		Object id_lt = queryMap.get("id_lt");
		Object id_le = queryMap.get("id_le");
		Object id_in = queryMap.get("id_in");
		Object noticeTime_gt = queryMap.get("noticeTime_gt");
		Object noticeTime_ge = queryMap.get("noticeTime_ge");
		Object noticeTime_lt = queryMap.get("noticeTime_lt");
		Object noticeTime_le = queryMap.get("noticeTime_le");
		Object noticeContent = queryMap.get("noticeContent");
		Object noticeContent_like = queryMap.get("noticeContent_like");
		Object noticeContent_isNull = queryMap.get("noticeContent_isNull");
		Object noticeContent_isNotNull = queryMap
				.get("noticeContent_isNotNull");
		Object noticeContent_in = queryMap.get("noticeContent_in");
		Object medPlanId = queryMap.get("medPlanId");
		Object medPlanId_gt = queryMap.get("medPlanId_gt");
		Object medPlanId_ge = queryMap.get("medPlanId_ge");
		Object medPlanId_lt = queryMap.get("medPlanId_lt");
		Object medPlanId_le = queryMap.get("medPlanId_le");
		Object medPlanId_in = queryMap.get("medPlanId_in");

		QueryCondition qc = new QueryCondition(MedNoticeEntity.ID,
				QueryCondition.gt, "0");
		if (id != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.ID,
					QueryCondition.eq, id));
		}
		if (id_gt != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.ID,
					QueryCondition.gt, id_gt));
		}
		if (id_ge != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.ID,
					QueryCondition.ge, id_ge));
		}
		if (id_lt != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.ID,
					QueryCondition.lt, id_lt));
		}
		if (id_le != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.ID,
					QueryCondition.le, id_le));
		}
		if (id_in != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.ID,
					QueryCondition.in, id_in));
		}
		if (noticeTime_gt != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.NOTICE_TIME,
					QueryCondition.gt, noticeTime_gt));
		}
		if (noticeTime_ge != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.NOTICE_TIME,
					QueryCondition.ge, noticeTime_ge));
		}
		if (noticeTime_lt != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.NOTICE_TIME,
					QueryCondition.lt, noticeTime_lt));
		}
		if (noticeTime_le != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.NOTICE_TIME,
					QueryCondition.le, noticeTime_le));
		}
		if (noticeContent != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.NOTICE_CONTENT,
					QueryCondition.eq, noticeContent));
		}
		if (noticeContent_like != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.NOTICE_CONTENT,
					QueryCondition.like, noticeContent_like));
		}
		if (noticeContent_isNull != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.NOTICE_CONTENT,
					QueryCondition.isNull, noticeContent_isNull));
		}
		if (noticeContent_isNotNull != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.NOTICE_CONTENT,
					QueryCondition.isNotNull, noticeContent_isNotNull));
		}
		if (noticeContent_in != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.NOTICE_CONTENT,
					QueryCondition.in, noticeContent_in));
		}
		if (medPlanId != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.MED_PLAN_ID,
					QueryCondition.eq, medPlanId));
		}
		if (medPlanId_gt != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.MED_PLAN_ID,
					QueryCondition.gt, medPlanId_gt));
		}
		if (medPlanId_ge != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.MED_PLAN_ID,
					QueryCondition.ge, medPlanId_ge));
		}
		if (medPlanId_lt != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.MED_PLAN_ID,
					QueryCondition.lt, medPlanId_lt));
		}
		if (medPlanId_le != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.MED_PLAN_ID,
					QueryCondition.le, medPlanId_le));
		}
		if (medPlanId_in != null) {
			qc.andCondition(new QueryCondition(MedNoticeEntity.MED_PLAN_ID,
					QueryCondition.in, medPlanId_in));
		}
		return qc;
	}

}
