package fsk.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.poi.POIXMLDocument;
import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.hwpf.usermodel.Range;
import org.apache.poi.xwpf.usermodel.BreakType;
import org.apache.poi.xwpf.usermodel.Document;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import org.apache.xmlbeans.XmlException;
import org.apache.xmlbeans.XmlToken;
import org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps;
import org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D;
import org.openxmlformats.schemas.drawingml.x2006.wordprocessingDrawing.CTInline;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.framework.system.common.entity.dataDic.DataDicEntity;
import com.framework.system.common.service.dataDic.DataDicService;
import com.framework.system.util.FileUtil;

import fsk.entity.older.OlderEntity;
import fsk.entity.olderAddress.OlderAddressEntity;
import fsk.service.older.OlderService;
import fsk.service.olderAddress.OlderAddressService;
import fsk.util.officeUtils.OfficeUtil;


@RequestMapping("/export")
@Controller
public class ExportRequestListController {
	
	public static OfficeUtil ou = new OfficeUtil();
	
	private static Logger logger = Logger.getLogger(ExportRequestListController.class);
	
	private static CustomXWPFDocument cd = new CustomXWPFDocument();
	
	@RequestMapping(params = "exportdoc")
	void exportWord(String olderId, HttpServletRequest request,
			HttpServletResponse response) {
		String separator = FileUtil.getFileSeparator();
		String filePath = request.getSession().getServletContext().getRealPath("source");
		filePath = filePath + separator +"微信服务号“长护险代理”菜单需求.docx";
		int olderid = Integer.parseInt(olderId);
		OlderEntity olderEntity = this.getOlderInfo(olderid);
		Map<String, String> para = initPara(olderEntity);
		// 替换word 中内容
		replaceAndGenerateWord(filePath, para, request, response, olderEntity);
	}
	
	
	/**
	 * @Description: 获得老人的基本信息实体
	 * @param olderid
	 * @return
	 */
	private OlderEntity getOlderInfo(int olderid) {
		return OlderService.getInstance().getById(olderid);
	}
	
	
	/**
	 * @Description: 获得服务的区
	 * @param older
	 * @return
	 */
	private String getServiceArea(final int areaId){
		String area = null;
		DataDicEntity entity = DataDicService.getInstance().getById(areaId);
		if (entity != null)
			area = entity.getName();
		return area;
	}
	
	
	/**
	 * 初始化替换的内容
	 * @param olderid
	 * @return
	 */
	private Map<String, String> initPara(final OlderEntity olderEntity){
		Map<String, String> map = null;
		if (olderEntity != null) {
			int olderid = olderEntity.getId();
			map = new HashMap<String, String>();
			Integer age = getOlderAge(olderEntity);
			Map<String, Object> querymap = new HashMap<String, Object>();
			querymap.put("addressType_in", "0");//居住地址-0
			querymap.put("olderId", olderid);
			List<OlderAddressEntity> list_live =OlderAddressService.getInstance().getListByCondition(querymap);
			OlderAddressEntity live_addr = ((list_live != null && list_live.size() > 0) ? list_live.get(0) : null);
			querymap.put("addressType_in", "1");//户籍地址-1
			querymap.put("olderId", olderid);
			List<OlderAddressEntity> list_huji =OlderAddressService.getInstance().getListByCondition(querymap);
			OlderAddressEntity huji_addr = ((list_huji != null && list_huji.size() > 0) ? list_huji.get(0) : null);
			querymap.put("addressType_in", "2");//收信地址-2
			querymap.put("olderId", olderid);
			List<OlderAddressEntity> list_shou =OlderAddressService.getInstance().getListByCondition(querymap);
			OlderAddressEntity shou_addr = ((list_shou != null && list_shou.size() > 0) ? list_shou.get(0) : null);
			String area_live = getServiceArea((live_addr != null ? live_addr.getAreaId() : 0));
			String area_huji = getServiceArea((huji_addr != null ? huji_addr.getAreaId() : 0));
			String area_shou = getServiceArea((shou_addr != null ? shou_addr.getAreaId() : 0));
			map.put("a", olderEntity.getName() != null ? " "+ olderEntity.getName()+" " : "");
			map.put("b", age != null ? " "+age.intValue() + " " : "");
			// 收信地址-2/户籍地址-1/居住地址-0
			map.put("c", area_huji != null ? " "+area_huji+" " : ""); // 户籍地址-区
			map.put("j", area_live != null ? " "+area_live+" " : ""); // 居住地址-区
			map.put("r", area_shou != null ? " "+area_shou+" " : ""); // 收信地址-区
			
			map.put("d", ((huji_addr != null && huji_addr.getStreet() != null) ? " "+huji_addr.getStreet()+" " : "    ")); // 户籍地址-街道
			map.put("k", ((live_addr != null && live_addr.getStreet() != null) ? " "+live_addr.getStreet()+" " : "")); // 户籍地址-街道
			map.put("s", ((shou_addr != null && shou_addr.getStreet() != null) ? " "+shou_addr.getStreet()+" " : "")); // 户籍地址-街道
			
			map.put("e", ((huji_addr != null && huji_addr.getCommitteeVillage() != null) ? " "+huji_addr.getCommitteeVillage()+" " : "")); // 户籍地址-居委
			map.put("l", ((live_addr != null && live_addr.getCommitteeVillage() != null) ? " "+live_addr.getCommitteeVillage()+" " : "")); // 户籍地址-居委
			map.put("t", ((shou_addr != null && shou_addr.getCommitteeVillage() != null) ? " "+shou_addr.getCommitteeVillage()+" " : "")); // 户籍地址-居委
			
			map.put("f", ((huji_addr != null && huji_addr.getRoad() != null) ? " "+huji_addr.getRoad()+" " : "")); // 户籍地址-居委
			map.put("m", ((live_addr != null && live_addr.getRoad() != null) ? " "+live_addr.getRoad()+" " : "")); // 户籍地址-居委
			map.put("u", ((shou_addr != null && shou_addr.getRoad() != null) ? " "+shou_addr.getRoad()+" " : "")); // 户籍地址-居委
			
			map.put("g", ((huji_addr != null && huji_addr.getLane() != null) ? " "+huji_addr.getLane()+" " : "    ")); // 户籍地址-弄
			map.put("n", ((live_addr != null && live_addr.getLane() != null) ? " "+live_addr.getLane()+" " : "")); // 户籍地址-弄
			map.put("v", ((shou_addr != null && shou_addr.getLane() != null) ? " "+shou_addr.getLane()+" " : "")); // 户籍地址-弄
			
			map.put("h", ((huji_addr != null && huji_addr.getNumber() != null) ? " "+huji_addr.getNumber()+" " : "")); // 户籍地址-号
			map.put("o", ((live_addr != null && live_addr.getNumber() != null) ? " "+live_addr.getNumber()+" " : "")); // 户籍地址-号
			map.put("w", ((shou_addr != null && shou_addr.getNumber() != null) ? " "+shou_addr.getNumber()+" " : "")); // 户籍地址-号
			
			map.put("i", ((huji_addr != null && huji_addr.getRoom() != null) ? " "+huji_addr.getRoom()+" " : "")); // 户籍地址-室
			map.put("p", ((live_addr != null && live_addr.getRoom() != null) ? " "+live_addr.getRoom()+" " : "")); // 户籍地址-室
			map.put("x", ((shou_addr != null && shou_addr.getRoom() != null) ? " "+shou_addr.getRoom()+" " : "")); // 户籍地址-室
			
			map.put("q", ((live_addr != null && live_addr.getZipCode() != null) ? " "+live_addr.getZipCode()+" " : ""));	// 居住地址-邮编
			map.put("y", ((shou_addr != null && shou_addr.getZipCode() != null) ? " "+shou_addr.getZipCode()+" " : ""));	// 居住地址-邮编
			
			map.put("z", ((olderEntity != null && olderEntity.getHomeTel() != null && !"".equals(olderEntity.getHomeTel().trim())) ? " "+olderEntity.getHomeTel()+" " : "              "));	// 居住地址-邮编
			map.put("Z", ((olderEntity != null && olderEntity.getMobileTel() != null && !"".equals(olderEntity.getMobileTel().trim())) ? " "+olderEntity.getMobileTel()+" " : "              "));	// 居住地址-邮编
			
			String idcard = olderEntity.getIdnumber();
			if (idcard != null && idcard.length() > 0) {
				map.put("A", (idcard.length() >= 1 ? idcard.charAt(0)+"" : ""));
				map.put("B", (idcard.length() >= 2 ? idcard.charAt(1)+"" : ""));
				map.put("C", (idcard.length() >= 3 ? idcard.charAt(2)+"" : ""));
				map.put("D", (idcard.length() >= 4 ? idcard.charAt(3)+"" : ""));
				map.put("E", (idcard.length() >= 5 ? idcard.charAt(4)+"" : ""));
				map.put("F", (idcard.length() >= 6 ? idcard.charAt(5)+"" : ""));
				map.put("G", (idcard.length() >= 7 ? idcard.charAt(6)+"" : ""));
				map.put("H", (idcard.length() >= 8 ? idcard.charAt(7)+"" : ""));
				map.put("I", (idcard.length() >= 9 ? idcard.charAt(8)+"" : ""));
				map.put("J", (idcard.length() >= 10 ? idcard.charAt(9)+"" : ""));
				map.put("K", (idcard.length() >= 11 ? idcard.charAt(10)+"" : ""));
				map.put("L", (idcard.length() >= 12 ? idcard.charAt(11)+"" : ""));
				map.put("M", (idcard.length() >= 13 ? idcard.charAt(12)+"" : ""));
				map.put("N", (idcard.length() >= 14 ? idcard.charAt(13)+"" : ""));
				map.put("O", (idcard.length() >= 15 ? idcard.charAt(14)+"" : ""));
				map.put("P", (idcard.length() >= 16 ? idcard.charAt(15)+"" : ""));
				map.put("Q", (idcard.length() >= 17 ? idcard.charAt(16)+"" : ""));
				map.put("R", (idcard.length() >= 18 ? idcard.charAt(17)+"" : ""));
			} else {
				map.put("A", "");
				map.put("B", "");
				map.put("C", "");
				map.put("D", "");
				map.put("E", "");
				map.put("F", "");
				map.put("G", "");
				map.put("H", "");
				map.put("I", "");
				map.put("J", "");
				map.put("K", "");
				map.put("L", "");
				map.put("M", "");
				map.put("N", "");
				map.put("O", "");
				map.put("P", "");
				map.put("Q", "");
				map.put("R", "");
			}
			
			String num = olderEntity.getSocialSecurityNumber();
			if (num != null && num.length() > 0) {
				map.put("α", (num.length() >= 1 ? num.charAt(0)+"" : ""));
				map.put("β", (num.length() >= 2 ? num.charAt(1)+"" : ""));
				map.put("γ", (num.length() >= 3 ? num.charAt(2)+"" : ""));
				map.put("δ", (num.length() >= 4 ? num.charAt(3)+"" : ""));
				map.put("ε", (num.length() >= 5 ? num.charAt(4)+"" : ""));
				map.put("ζ", (num.length() >= 6 ? num.charAt(5)+"" : ""));
				map.put("η", (num.length() >= 7 ? num.charAt(6)+"" : ""));
				map.put("θ", (num.length() >= 8 ? num.charAt(7)+"" : ""));
				map.put("λ", (num.length() >= 9 ? num.charAt(8)+"" : ""));
				map.put("ξ", (num.length() >= 10 ? num.charAt(9)+"" : ""));
				map.put("π", (num.length() >= 11 ? num.charAt(10)+"" : ""));
				map.put("ρ", (num.length() >= 12 ? num.charAt(11)+"" : ""));
				map.put("σ", (num.length() >= 13 ? num.charAt(12)+"" : ""));
				map.put("φ", (num.length() >= 14 ? num.charAt(13)+"" : ""));
				map.put("ψ", (num.length() >= 15 ? num.charAt(14)+"" : ""));
				map.put("Ω", (num.length() >= 16 ? num.charAt(15)+"" : ""));
				map.put("Φ", (num.length() >= 17 ? num.charAt(16)+"" : ""));
				map.put("Σ", (num.length() >= 18 ? num.charAt(17)+"" : ""));
			} else {
				map.put("α", "");
				map.put("β", "");
				map.put("γ", "");
				map.put("δ", "");
				map.put("ε", "");
				map.put("ζ", "");
				map.put("η", "");
				map.put("θ", "");
				map.put("λ", "");
				map.put("ξ", "");
				map.put("π", "");
				map.put("ρ", "");
				map.put("σ", "");
				map.put("φ", "");
				map.put("ψ", "");
				map.put("Ω", "");
				map.put("Φ", "");
				map.put("Σ", "");
			}
			// 老人的性别
			String gender = getGender(olderEntity.getGender());
			map.put("S", gender);
			// 老人的生活情况
			String life = getLifeCondition(olderEntity.getLivingCondition());
			map.put("T", life);
		}
		return map;
	}
	
	
	/**
	 * @Description: 获得年龄
	 * @param older
	 * @return
	 */
	private Integer getOlderAge(final OlderEntity older) {
		String str_age = older.getBirthdate();
		if (str_age != null && str_age.length() > 0) {
			str_age = str_age.substring(0, 4);
			int int_age = Integer.parseInt(str_age);
			Date date = new Date();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy");
			String year = sdf.format(date);
			int int_year = Integer.parseInt(year);
			return int_year - int_age;
		} else {
			return null;
		}
	}
	
	
	/**
	 * 替换word中需要替换的内容 
	 * @param srcPath
	 * @param map
	 * @param request
	 * @param response
	 * @return
	 */
    private boolean replaceAndGenerateWord(String srcPath, Map<String, String> map,
		HttpServletRequest request, HttpServletResponse response, final OlderEntity olderEntity) {
        try {
            XWPFDocument document = new XWPFDocument(POIXMLDocument.openPackage(srcPath));
            // 替换段落中的指定文字  
            Iterator<XWPFParagraph> itPara = document.getParagraphsIterator();	// 获取段落的迭代器
            while (itPara.hasNext()) {
                XWPFParagraph paragraph = (XWPFParagraph) itPara.next();
                System.out.println(paragraph.getText());
                // 获得所有的run
                List<XWPFRun> runs = paragraph.getRuns();
                for (int i = 0; i < runs.size(); i++) {
                    String oneparaString = runs.get(i).getText(runs.get(i).getTextPosition());
					for (Map.Entry<String, String> entry : map.entrySet()) {
						// 替换文本
								oneparaString = oneparaString.replace(entry.getKey(), entry.getValue());
							}
                            runs.get(i).setText(oneparaString, 0);
                        }
                    }
  
                    //  替换表格中的指定文字  
            Iterator<XWPFTable> itTable = document.getTablesIterator();  
            while (itTable.hasNext()) {  
            	XWPFTable table = (XWPFTable) itTable.next();  
                int rcount = table.getNumberOfRows();  
                for (int i = 0; i < rcount; i++) {  
                    XWPFTableRow row = table.getRow(i);  
                    List<XWPFTableCell> cells = row.getTableCells();  
                    for (XWPFTableCell cell : cells) {
                        String cellTextString = cell.getText();
                        for (Entry<String, String> e : map.entrySet()) {
                            if (cellTextString.contains(e.getKey()))
                                cellTextString = cellTextString.replace(e.getKey(), e.getValue());
                        }
                        cell.removeParagraph(0);  
                        cell.setText(cellTextString);  
                    }
                }
            }
            // 插入一个新页，在新页中放入身份证图片
            ou.addNewPage(document, BreakType.PAGE);
            // 获得文件分割符
            String separator = FileUtil.getFileSeparator();
            // 获得身份证图片的路径
            String filePath = request.getSession().getServletContext().getRealPath("photos") + separator + "OlderIdentityPhotos";
            
            /**
             * 获得身份证正面图片路径
             * 创建一个新的段落并插入到 word 中
             */
            String blipId1 = null;	// 获得身份证正面图片路径
            String frontPicPath = olderEntity.getIdFront();
            if (frontPicPath != null && frontPicPath.length() > 0) {
            	frontPicPath = frontPicPath.substring(frontPicPath.lastIndexOf('/') + 1);
            	frontPicPath = filePath + separator + frontPicPath;
            	// 建立图片的标识符
            	File file = new File(frontPicPath);
				FileInputStream fileinstream = null;
				try {
					fileinstream = new FileInputStream(file);
					if (file != null) {
						if (fileinstream != null) {
							blipId1 = document.addPictureData(fileinstream, Document.PICTURE_TYPE_PNG);
							// 创建一个新的段落
							XWPFParagraph p1 = document.createParagraph();
							if (blipId1 != null && blipId1.length() > 0) {
								cd.createPicture(blipId1,
										document.getNextPicNameNumber(Document.PICTURE_TYPE_PNG), 540,
										360, p1);
							}
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
					logger.error("没有找到文件");
				}
            }
            
            // 获得身份证反面图片路径
            String backPicPath = olderEntity.getIdBack();
            if (backPicPath != null && backPicPath.length() > 0) {
            	backPicPath = backPicPath.substring(backPicPath.lastIndexOf('/') + 1);
            	backPicPath = filePath + separator + backPicPath;
            	// 建立图片的标识符
            	File file = new File(backPicPath);
            	FileInputStream fileinstream = null;
            	try {
            		fileinstream = new FileInputStream(file);
            		if (file != null) {
            			if (fileinstream != null) {
            				String blipId2 = document.addPictureData(fileinstream, Document.PICTURE_TYPE_PNG);
            				// 创建一个新的段落
            				XWPFParagraph p2 = document.createParagraph();
            				// 插入身份证反面图片
            				cd.createPicture(blipId2,
            						document.getNextPicNameNumber(Document.PICTURE_TYPE_PNG), 540,
            						360, p2);
            			}
            		}
            	} catch (Exception e) {
					e.printStackTrace();
					logger.error("没有找到文件");
            	}
            }
          
            String filename = olderEntity.getName() + "_" + "长护险代理" + ".doc";
            
            response.setHeader("Content-Disposition", "attachment; filename=" + URLEncoder.encode(filename, "UTF-8"));
            
    		try {
    			OutputStream os = response.getOutputStream();
    			document.write(os);
    			os.flush();
    			os.close();
    		} catch (Exception e) {
    			e.printStackTrace();
    			logger.error("文档保存失败");
    			return false;
    		}
            return true;
        } catch (Exception e) {  
            e.printStackTrace();
            return false;  
        }
    }
    
    
    private String getGender(String str){
    	String gender = " ①男  ②女   ";
    	if (str.equals("男")) {
    		gender = " ①男√  ②女   ";
    	} else {
    		gender = " ①男  ②女√  ";
    	}
    	return gender;
    }
    
    private String getLifeCondition(String str){
    	String life = " ①独居  ②孤老  ③纯老  ④其他   ";
    	if (str.equals("独居")) {
    		life = " ①独居√  ②孤老  ③纯老  ④其他   ";
    	} else if (str.equals("孤老")) {
    		life = " ①独居  ②孤老√  ③纯老  ④其他   ";
    	} else if (str.equals("纯老")) {
    		life = " ①独居  ②孤老  ③纯老√  ④其他   ";
    	} else if (str.equals("其他")) {
	    	life = " ①独居  ②孤老  ③纯老  ④其他√   ";
	    }
    	return life;
    }
}
