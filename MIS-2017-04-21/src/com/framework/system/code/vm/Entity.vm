package ${requestMap.entityInfo.bussiPackage}.entity.${requestMap.entityInfo.entityPackage};

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

#foreach( $relation in $requestMap.relationList)
#if(${relation.relation}!="ParentToOne")
#if(${relation.joinColumnFirstUpper}=="User")
import com.framework.system.common.entity.user.UserEntity;
#else
#if(${relation.joinColumnFirstUpper}=="DataDic")
import com.framework.system.common.entity.dataDic.DataDicEntity;
#else
import ${requestMap.entityInfo.bussiPackage}.entity.${relation.joinColumn}.${relation.joinColumnFirstUpper}Entity;
#end
#end
#end
#end


import com.framework.system.db.dao.annotation.ColumnDescription;
import com.framework.system.db.dao.annotation.RelationlDescription;
import com.framework.system.db.dao.annotation.TableDescription;

/**   
 * @Title: Entity
 * @Description: $requestMap.entityInfo.tableDescription
 * @author feng.gu
 * @date $requestMap.entityInfo.createTime
 * @version V1.0   
 *
 */
@TableDescription(name = "$requestMap.entityInfo.tableName")
public class ${requestMap.entityInfo.entityName}Entity implements java.io.Serializable {
    #foreach( $column in $requestMap.columntList)
public final static String $column.fieldUpperName = "$column.fieldUpperName";
    #end 

    #foreach( $column in $requestMap.columntList)
/**
	 * $column.filedComment
	 */
	@ColumnDescription(name = "$column.fieldUpperName"#if($column.isPrimaryKey=='Y'), isPrimaryKey = true, isAutoIncrement = true#end)
	private $column.fieldType $column.fieldName;
    #end
    
    #foreach( $column in $requestMap.columntList)
public $column.fieldType get${column.fieldFirstUpperName}() {
		return $column.fieldName;
	}

	public void set${column.fieldFirstUpperName}($column.fieldType $column.fieldName) {
		this.$column.fieldName = $column.fieldName;
	}
    #end 
    
    #foreach( $relation in $requestMap.relationList)
/**
     * 关系描述
	 */
	#if(${relation.relation}!="ParentToOne")
    @RelationlDescription(relation = "${relation.relation}",
	#if(${relation.relation}=="ManyToMany")
	#if(${relation.jionFirst}=="Y")
	joinEntity="${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}Entity"
	#else
	joinEntity="${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}Entity"
	#end
	#else
	joinEntity="${relation.joinColumnFirstUpper}Entity"#end
	#if(${relation.relation}=="ManyToMany"||${relation.relation}=="OneToMany")
	#if(${relation.relation}=="OneToMany")
	,joinColumn="${requestMap.entityInfo.tableUpperName}_ID"
	#else
	,joinColumn="${requestMap.entityInfo.tableUpperName}_ID"
	#end
	#else,joinColumn="ID"#end
	#if(${relation.relation}=="ManyToMany"),inverseJoinColumn="${relation.joinColumnUpper}_ID",inverseJoinEntity="${relation.joinColumnFirstUpper}Entity"#end)
	#if(${relation.relation}=="ManyToMany")
    private List<${relation.joinColumnFirstUpper}Entity> ${relation.joinColumn}List;
	        
	public List<${relation.joinColumnFirstUpper}Entity> get${relation.joinColumnFirstUpper}List() {
		return ${relation.joinColumn}List;
    }
	
	public void set${relation.joinColumnFirstUpper}List(List<${relation.joinColumnFirstUpper}Entity> ${relation.joinColumn}List) {
		this.${relation.joinColumn}List = ${relation.joinColumn}List;
	}
    #end
		
	#if(${relation.relation}=="OneToMany")
	private List<${relation.joinColumnFirstUpper}Entity> ${relation.joinColumn}List;
	        
	public List<${relation.joinColumnFirstUpper}Entity> get${relation.joinColumnFirstUpper}List() {
		return ${relation.joinColumn}List;
	}
	
	public void set${relation.joinColumnFirstUpper}List(List<${relation.joinColumnFirstUpper}Entity> ${relation.joinColumn}List) {
		this.${relation.joinColumn}List = ${relation.joinColumn}List;
	}
	#end
		
	#if(${relation.relation}=="ManyToOne"||${relation.relation}=="OneToOne")
	private ${relation.joinColumnFirstUpper}Entity ${relation.joinEntityName};
	        
	public ${relation.joinColumnFirstUpper}Entity get${relation.joinEntityFirstUpper}() {
		return ${relation.joinEntityName};
    }
	
	public void set${relation.joinEntityFirstUpper}(${relation.joinColumnFirstUpper}Entity ${relation.joinEntityName}) {
		this.${relation.joinEntityName} = ${relation.joinEntityName};
	}
	#end
	#else
	#if(${relation.relation}=="ParentToOne")
    @RelationlDescription(relation = "ManyToOne",joinEntity="${requestMap.entityInfo.entityName}Entity"	,joinColumn="PARENT_ID"	)
	private ${requestMap.entityInfo.entityName}Entity parent${requestMap.entityInfo.entityName};

	public ${requestMap.entityInfo.entityName}Entity getParent${requestMap.entityInfo.entityName}() {
		return parent${requestMap.entityInfo.entityName};
	}

	public void setParent${requestMap.entityInfo.entityName}(${requestMap.entityInfo.entityName}Entity parent${requestMap.entityInfo.entityName}) {
		this.parent${requestMap.entityInfo.entityName} = parent${requestMap.entityInfo.entityName};
	}
	
	@RelationlDescription(relation = "OneToMany",joinEntity="${requestMap.entityInfo.entityName}Entity"	,joinColumn="PARENT_ID"	)
	private List<${requestMap.entityInfo.entityName}Entity> child${requestMap.entityInfo.entityName}List;

	public List<${requestMap.entityInfo.entityName}Entity> getChild${requestMap.entityInfo.entityName}List() {
		return child${requestMap.entityInfo.entityName}List;
	}

	public void setChild${requestMap.entityInfo.entityName}List(List<${requestMap.entityInfo.entityName}Entity> child${requestMap.entityInfo.entityName}List) {
		this.child${requestMap.entityInfo.entityName}List = child${requestMap.entityInfo.entityName}List;
	}
	#end
	#end
#end
	
}
