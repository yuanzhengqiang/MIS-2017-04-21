package ${requestMap.entityInfo.bussiPackage}.service.$requestMap.entityInfo.entityPackage;

import java.math.BigDecimal;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import org.apache.log4j.Logger;


#foreach( $relation in $requestMap.relationList)
#if(${relation.relation}!="ParentToOne")
#if(${relation.joinColumnFirstUpper}=="User")
import com.framework.system.common.entity.user.UserEntity;
#else
#if(${relation.joinColumnFirstUpper}=="DataDic")
import com.framework.system.common.entity.dataDic.DataDicEntity;
#else
import ${requestMap.entityInfo.bussiPackage}.entity.${relation.joinColumn}.${relation.joinColumnFirstUpper}Entity;
#if(${relation.relation}=="ManyToMany")
#if(${relation.jionFirst}=='Y')import ${requestMap.entityInfo.bussiPackage}.entity.${requestMap.entityInfo.entityPackage}${relation.joinColumnFirstUpper}.#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity;#end
#if(${relation.jionFirst}=='N')import ${requestMap.entityInfo.bussiPackage}.entity.${relation.joinColumn}${requestMap.entityInfo.entityName}.${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}Entity;#end
#end
#end
#end
#end
#end

import ${requestMap.entityInfo.bussiPackage}.entity.${requestMap.entityInfo.entityPackage}.${requestMap.entityInfo.entityName}Entity;
import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.query.OrderByCondition;
import com.framework.system.db.query.OrderVO;
import com.framework.system.db.transaction.TransactionManager;
import com.framework.system.util.StringUtil;



/**   
 * @Title: Service
 * @Description: $requestMap.entityInfo.tableDescription服务类
 * @author feng.gu
 * @date $requestMap.entityInfo.createTime
 * @version V1.0   
 *
 */
public class ${requestMap.entityInfo.entityName}Service {
	   private static Logger logger = Logger.getLogger(${requestMap.entityInfo.entityName}Service.class);
	   private DBManager dbManager = DBManager.getInstance();
    		
	   private static ${requestMap.entityInfo.entityName}Service ${requestMap.entityInfo.entityPackage}Service;
	   /**
	    * 获取实例	
	    * @return
	    */
	   public static ${requestMap.entityInfo.entityName}Service getInstance(){
		if(${requestMap.entityInfo.entityPackage}Service==null){
			${requestMap.entityInfo.entityPackage}Service = new ${requestMap.entityInfo.entityName}Service();
		}
		return ${requestMap.entityInfo.entityPackage}Service;
	   }
	                 #if(${relation.relation}=="ManyToMany")
	                 #end
	                 #if(${relation.relation}=="OneToMany")
				     #end
				     #if(${relation.relation}=="ManyToOne")
				     #end
				     #if(${relation.relation}=="ParentToOne")
				     #end
				     #if(${relation.relation}=="OneToOne")
				     #end
				     
				     #if(${relation.relation}=="ManyToMany")#end#if(${relation.relation}=="OneToMany")#end#if(${relation.relation}=="ManyToOne")#end#if(${relation.relation}=="ParentToOne")#end#if(${relation.relation}=="OneToOne")#end
	 
	   /**
		 * 保存记录
		 * 
		 * @param obj
		 */
		public boolean save(${requestMap.entityInfo.entityName}Entity ${requestMap.entityInfo.entityPackage}) {			
			boolean result =false;
			if(${requestMap.entityInfo.entityPackage}!=null){
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					 tx.beginTransaction();					 					 
					 #foreach( $relation in $requestMap.relationList)
					 #if(${relation.relation}=="ManyToMany")
					 dbManager.saveNoTransaction(${requestMap.entityInfo.entityPackage});
						 if(${requestMap.entityInfo.entityPackage}.get${relation.joinColumnFirstUpper}List()!=null&&${requestMap.entityInfo.entityPackage}.get${relation.joinColumnFirstUpper}List().size()>0){
							   //先删除原先绑定关系
							    QueryCondition qc = new QueryCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.${requestMap.entityInfo.tableUpperName}_ID, QueryCondition.eq, ${requestMap.entityInfo.entityPackage}.getId());
								List<Object> list = dbManager.queryByConditionNoTransaction(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class, qc);
			    	            if ((list != null) && (list.size() > 0)) {
			    	              for (Object obj : list) {
			    	            	  #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity entity = (#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity)obj;
			    	            	  dbManager.delNoTransaction(entity.getId(), #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class);
			    	              }   	
			    	            }
			    	            //绑定现在的关系		    	           
							    for(${relation.joinColumnFirstUpper}Entity ${relation.joinColumn}:${requestMap.entityInfo.entityPackage}.get${relation.joinColumnFirstUpper}List()){
							    	Integer ${relation.joinColumn}Id = ${relation.joinColumn}.getId();						    	
			    	                if(${relation.joinColumn}Id!=null){
			    	                		#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity entity = new #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity();
				    	                	entity.set${requestMap.entityInfo.entityName}Id(${requestMap.entityInfo.entityPackage}.getId());
				    	                	entity.set${relation.joinColumnFirstUpper}Id(${relation.joinColumn}Id);
				    	                	dbManager.saveNoTransaction(entity);		    	                	
			    	                }
							    }
						 }
				     #end
				     #if(${relation.relation}=="OneToMany")				     
					     if(${requestMap.entityInfo.entityPackage}.get${relation.joinColumnFirstUpper}List()!=null&&${requestMap.entityInfo.entityPackage}.get${relation.joinColumnFirstUpper}List().size()>0){						   
			    	            //关联信息保存
			    	            if(${requestMap.entityInfo.entityPackage}.getId()==null){	  
			    	                dbManager.saveNoTransaction(${requestMap.entityInfo.entityPackage}); 
			    	            } 	           
							    for(${relation.joinColumnFirstUpper}Entity ${relation.joinColumn}Entity:${requestMap.entityInfo.entityPackage}.get${relation.joinColumnFirstUpper}List()){
							    	${relation.joinColumn}Entity.set${requestMap.entityInfo.entityName}Id(${requestMap.entityInfo.entityPackage}.getId());
							    	dbManager.saveNoTransaction(${relation.joinColumn}Entity);
							    }
						 }
				     #end
				     #if(${relation.relation}=="ManyToOne")
					     //关联信息保存
					     ${relation.joinColumnFirstUpper}Entity ${relation.joinEntityName} = ${requestMap.entityInfo.entityPackage}.get${relation.joinEntityFirstUpper}();
						 if(${relation.joinEntityName}!=null){						   
							 dbManager.saveNoTransaction(${relation.joinEntityName});
							 ${requestMap.entityInfo.entityPackage}.set${relation.joinEntityFirstUpper}Id(${relation.joinEntityName}.getId());
						 }						 
				     #end
				     #if(${relation.relation}=="OneToOne")
					     //关联信息保存
						 ${relation.joinColumnFirstUpper}Entity ${relation.joinEntityName} = ${requestMap.entityInfo.entityPackage}.get${relation.joinEntityFirstUpper}();
						 if(${relation.joinEntityName}!=null){						   
							 dbManager.saveNoTransaction(${relation.joinEntityName});
							 ${requestMap.entityInfo.entityPackage}.set${relation.joinEntityFirstUpper}Id(${relation.joinEntityName}.getId());
						 }
				     #end
				     #if(${relation.relation}=="ParentToOne")
					     //关联信息保存
					     ${requestMap.entityInfo.entityName}Entity parent${requestMap.entityInfo.entityName} = ${requestMap.entityInfo.entityPackage}.getParent${requestMap.entityInfo.entityName}();
						 if(parent${requestMap.entityInfo.entityName}!=null){						   
							 dbManager.saveNoTransaction(parent${requestMap.entityInfo.entityName});
							 ${requestMap.entityInfo.entityPackage}.setParentId(parent${requestMap.entityInfo.entityName}.getId());
						 }	
						 //关联信息保存
						 if(${requestMap.entityInfo.entityPackage}.getChild${requestMap.entityInfo.entityName}List()!=null&&${requestMap.entityInfo.entityPackage}.getChild${requestMap.entityInfo.entityName}List().size()>0){						   			    	            	    	           
							    for(${requestMap.entityInfo.entityName}Entity ${requestMap.entityInfo.entityPackage}Entity:${requestMap.entityInfo.entityPackage}.getChild${requestMap.entityInfo.entityName}List()){
							    	dbManager.saveNoTransaction(${requestMap.entityInfo.entityPackage}Entity);
							    }
						 }					 					
				     #end
					 #end
					 result=dbManager.saveNoTransaction(${requestMap.entityInfo.entityPackage});	
					 tx.commitAndClose();  
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {				    
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  			
			}	
			return result;
		}
		
		/**
		 * 批量保存记录
		 * 
		 * @param list
		 */
		public boolean saveList(List<${requestMap.entityInfo.entityName}Entity> ${requestMap.entityInfo.entityPackage}List) {
			boolean result = false;
			if (${requestMap.entityInfo.entityPackage}List != null && ${requestMap.entityInfo.entityPackage}List.size() > 0) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 
					for(${requestMap.entityInfo.entityName}Entity ${requestMap.entityInfo.entityPackage}:${requestMap.entityInfo.entityPackage}List){
						if(${requestMap.entityInfo.entityPackage}!=null){												  								 
								 #foreach( $relation in $requestMap.relationList)
									 #if(${relation.relation}=="ManyToMany")
										 if(${requestMap.entityInfo.entityPackage}.get${relation.joinColumnFirstUpper}List()!=null&&${requestMap.entityInfo.entityPackage}.get${relation.joinColumnFirstUpper}List().size()>0){
										   //先删除原先绑定关系
										    QueryCondition qc = new QueryCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.${requestMap.entityInfo.tableUpperName}_ID, QueryCondition.eq, ${requestMap.entityInfo.entityPackage}.getId());
											List<Object> list = dbManager.queryByConditionNoTransaction(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class, qc);
						    	            if ((list != null) && (list.size() > 0)) {
						    	              for (Object obj : list) {
						    	            	  #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity entity = (#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity)obj;
						    	            	  dbManager.delNoTransaction(entity.getId(), #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class);
						    	              }   	
						    	            }
						    	            //绑定现在的关系		    	           
										    for(${relation.joinColumnFirstUpper}Entity ${relation.joinColumn}:${requestMap.entityInfo.entityPackage}.get${relation.joinColumnFirstUpper}List()){
										    	Integer ${relation.joinColumn}Id = ${relation.joinColumn}.getId();
						    	                if(${relation.joinColumn}Id!=null){
						    	                	#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity entity = new #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity();
						    	                	entity.set${requestMap.entityInfo.entityName}Id(${requestMap.entityInfo.entityPackage}.getId());
						    	                	entity.set${relation.joinColumnFirstUpper}Id(${relation.joinColumn}Id);
						    	                	dbManager.saveNoTransaction(entity);
						    	                }
										    }
									     }
					                 #end
					                 #if(${relation.relation}=="OneToMany")
					                     //关联信息保存
						                 if(${requestMap.entityInfo.entityPackage}.get${relation.joinColumnFirstUpper}List()!=null&&${requestMap.entityInfo.entityPackage}.get${relation.joinColumnFirstUpper}List().size()>0){										 		    	           
										 if(${requestMap.entityInfo.entityPackage}.getId()==null){
										     dbManager.saveNoTransaction(${requestMap.entityInfo.entityPackage});
										 }
										 for(${relation.joinColumnFirstUpper}Entity ${relation.joinColumn}Entity:${requestMap.entityInfo.entityPackage}.get${relation.joinColumnFirstUpper}List()){
										     ${relation.joinColumn}Entity.set${requestMap.entityInfo.entityName}Id(${requestMap.entityInfo.entityPackage}.getId());
										     dbManager.saveNoTransaction(${relation.joinColumn}Entity);
										 }
									     }
								     #end
								     #if(${relation.relation}=="ManyToOne")
								         //关联信息保存
									     ${relation.joinColumnFirstUpper}Entity ${relation.joinEntityName} = ${requestMap.entityInfo.entityPackage}.get${relation.joinEntityFirstUpper}();
										 if(${relation.joinEntityName}!=null){						   
											 dbManager.saveNoTransaction(${relation.joinEntityName});
											 ${requestMap.entityInfo.entityPackage}.set${relation.joinEntityFirstUpper}Id(${relation.joinEntityName}.getId());
										 }									 
								     #end
								     #if(${relation.relation}=="OneToOne")
									     //关联信息保存
									     ${relation.joinColumnFirstUpper}Entity ${relation.joinEntityName} = ${requestMap.entityInfo.entityPackage}.get${relation.joinEntityFirstUpper}();
										 if(${relation.joinEntityName}!=null){						   
											 dbManager.saveNoTransaction(${relation.joinEntityName});
											 ${requestMap.entityInfo.entityPackage}.set${relation.joinEntityFirstUpper}Id(${relation.joinEntityName}.getId());
										 }											 
								     #end
								     #if(${relation.relation}=="ParentToOne")
									     //关联信息保存
									     ${requestMap.entityInfo.entityName}Entity parent${requestMap.entityInfo.entityName} = ${requestMap.entityInfo.entityPackage}.getParent${requestMap.entityInfo.entityName}();
										 if(parent${requestMap.entityInfo.entityName}!=null){						   
											 dbManager.saveNoTransaction(parent${requestMap.entityInfo.entityName});
											 ${requestMap.entityInfo.entityPackage}.setParentId(parent${requestMap.entityInfo.entityName}.getId());
										 }	
										  //关联信息保存	
										 if(${requestMap.entityInfo.entityPackage}.getChild${requestMap.entityInfo.entityName}List()!=null&&${requestMap.entityInfo.entityPackage}.getChild${requestMap.entityInfo.entityName}List().size()>0){						   						    	               	           
										    for(${requestMap.entityInfo.entityName}Entity ${requestMap.entityInfo.entityPackage}Entity:${requestMap.entityInfo.entityPackage}.getChild${requestMap.entityInfo.entityName}List()){
										    	dbManager.saveNoTransaction(${requestMap.entityInfo.entityPackage}Entity);
										    }
									     }									 
								     #end								 								 								 
								 #end	
								 result=dbManager.saveNoTransaction(${requestMap.entityInfo.entityPackage});								 			
						}	
					}
				    tx.commitAndClose(); 
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
		#if($requestMap.relationList.size()>0)
		/**
		 * 根据id读取记录
		 * 
		 * @param id
		 *            主键
		 * @param obj
		 */
		public ${requestMap.entityInfo.entityName}Entity getById(Integer id) {
			${requestMap.entityInfo.entityName}Entity obj = null;
			if (id != null) {
				obj = (${requestMap.entityInfo.entityName}Entity) dbManager.getById(id, ${requestMap.entityInfo.entityName}Entity.class);			
			}
			return obj;
		}
		#end
		
		
		/**
		 * 根据id读取记录
		 * @param id 主键
		 #foreach( $relation in $requestMap.relationList)
		             #if(${relation.relation}=="ManyToMany")
		 * @param ${relation.joinColumn}ListShow 是否查询关联信息
	                 #end	     
	                 #if(${relation.relation}=="OneToMany")
	     * @param ${relation.joinColumn}ListShow 是否查询关联信息
				     #end
				     #if(${relation.relation}=="ManyToOne")
		 * @param ${relation.joinEntityName}Show 是否查询关联信息
				     #end
				     #if(${relation.relation}=="OneToOne")
		 * @param ${relation.joinEntityName}Show 是否查询关联信息
				     #end
				     #if(${relation.relation}=="ParentToOne")
		 * @param parent${requestMap.entityInfo.entityName}Show 是否查询关联信息
		   @param child${requestMap.entityInfo.entityName}ListShow 是否查询关联信息
				     #end
		 #end
		 * @param obj
		 */
		public ${requestMap.entityInfo.entityName}Entity getById(Integer id#foreach( $relation in $requestMap.relationList)#if(${relation.relation}=="ManyToMany"),Boolean ${relation.joinColumn}ListShow#end#if(${relation.relation}=="OneToMany"),Boolean ${relation.joinColumn}ListShow#end#if(${relation.relation}=="ManyToOne"),Boolean ${relation.joinEntityName}Show#end#if(${relation.relation}=="OneToOne"),Boolean ${relation.joinEntityName}Show#end#if(${relation.relation}=="ParentToOne"),Boolean parent${requestMap.entityInfo.entityName}Show,Boolean child${requestMap.entityInfo.entityName}ListShow#end#end) {
			${requestMap.entityInfo.entityName}Entity obj = null;
			if (id!=null) {
				obj = (${requestMap.entityInfo.entityName}Entity)dbManager.getById(id, ${requestMap.entityInfo.entityName}Entity.class);
				#foreach( $relation in $requestMap.relationList)
					 #if(${relation.relation}=="ManyToMany")
					    //查询关联内容
						if(${relation.joinColumn}ListShow!=null&&${relation.joinColumn}ListShow.booleanValue()&&obj!=null&&obj.getId()!=null&&obj.getId()>0){
							List<Object> rlist = dbManager.searchListByColumn(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class, #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.${requestMap.entityInfo.tableUpperName}_ID, String.valueOf(id));
			            	  if(rlist!=null&&rlist.size()>0){
			            		  for(Object robj:rlist){
			            			  #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity robject = (#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity)robj;
			            			  Integer ${relation.joinColumn}Id = robject.get${relation.joinColumnFirstUpper}Id();
			            			  if(${relation.joinColumn}Id!=null){
			            				  ${relation.joinColumnFirstUpper}Entity ${relation.joinColumn} = (${relation.joinColumnFirstUpper}Entity)dbManager.getById(${relation.joinColumn}Id,${relation.joinColumnFirstUpper}Entity.class);
			            				  List<${relation.joinColumnFirstUpper}Entity> ${relation.joinColumn}List = obj.get${relation.joinColumnFirstUpper}List();
			            				  if(${relation.joinColumn}List==null||${relation.joinColumn}List.size()==0){
			            					  ${relation.joinColumn}List=new ArrayList<${relation.joinColumnFirstUpper}Entity>();
			            				  }
			            				  ${relation.joinColumn}List.add(${relation.joinColumn});
			            				  obj.set${relation.joinColumnFirstUpper}List(${relation.joinColumn}List);
			            			  }
			            		  }
			            	  }	            	  	  
						}
	                 #end
	                 #if(${relation.relation}=="OneToMany")
	                    //查询关联内容
						if(${relation.joinColumn}ListShow!=null&&${relation.joinColumn}ListShow.booleanValue()&&obj!=null&&obj.getId()!=null&&obj.getId()>0){
							List<Object> list = dbManager.searchListByColumn(${relation.joinColumnFirstUpper}Entity.class, ${relation.joinColumnFirstUpper}Entity.${requestMap.entityInfo.tableUpperName}_ID, String.valueOf(id));
			            	  if(list!=null&&list.size()>0){
			            		  List<${relation.joinColumnFirstUpper}Entity> ${relation.joinColumn}List= new ArrayList<${relation.joinColumnFirstUpper}Entity>();
			            		  for(Object o:list){
			            			  ${relation.joinColumn}List.add((${relation.joinColumnFirstUpper}Entity)o);
			            		  }
			            		  obj.set${relation.joinColumnFirstUpper}List(${relation.joinColumn}List);          		  
			            	  }	            	  	  
						}
				     #end
				     #if(${relation.relation}=="ManyToOne")
				        //查询关联内容
						if(${relation.joinEntityName}Show!=null&&${relation.joinEntityName}Show.booleanValue()&&obj!=null&&obj.get${relation.joinEntityFirstUpper}Id()!=null&&obj.get${relation.joinEntityFirstUpper}Id()>0){
							${relation.joinColumnFirstUpper}Entity ${relation.joinEntityName} = (${relation.joinColumnFirstUpper}Entity)dbManager.getById(obj.get${relation.joinEntityFirstUpper}Id(), ${relation.joinColumnFirstUpper}Entity.class);
							obj.set${relation.joinEntityFirstUpper}(${relation.joinEntityName});        	  	  
						}
				     #end
				     #if(${relation.relation}=="OneToOne")
				        //查询关联内容
						if(${relation.joinEntityName}Show!=null&&${relation.joinEntityName}Show.booleanValue()&&obj!=null&&obj.get${relation.joinEntityFirstUpper}Id()!=null&&obj.get${relation.joinEntityFirstUpper}Id()>0){
							${relation.joinColumnFirstUpper}Entity ${relation.joinEntityName} = (${relation.joinColumnFirstUpper}Entity)dbManager.getById(obj.get${relation.joinEntityFirstUpper}Id(), ${relation.joinColumnFirstUpper}Entity.class);
							obj.set${relation.joinEntityFirstUpper}(${relation.joinEntityName});        	  	  
						}
				     #end
				     #if(${relation.relation}=="ParentToOne")
				        //查询关联内容
						if(parent${requestMap.entityInfo.entityName}Show!=null&&parent${requestMap.entityInfo.entityName}Show.booleanValue()&&obj!=null&&obj.getParentId()!=null&&obj.getParentId()>0){
					        ${requestMap.entityInfo.entityName}Entity ${requestMap.entityInfo.entityPackage} = (${requestMap.entityInfo.entityName}Entity)dbManager.getById(obj.getParentId(), ${requestMap.entityInfo.entityName}Entity.class);
					        obj.setParent${requestMap.entityInfo.entityName}(${requestMap.entityInfo.entityPackage});        	  	  
				        }
				        //查询关联内容
						if(child${requestMap.entityInfo.entityName}ListShow!=null&&child${requestMap.entityInfo.entityName}ListShow.booleanValue()&&obj!=null&&obj.getId()!=null&&obj.getId()>0){
							List<Object> list = dbManager.searchListByColumn(${requestMap.entityInfo.entityName}Entity.class, ${requestMap.entityInfo.entityName}Entity.PARENT_ID, String.valueOf(id));
			            	  if(list!=null&&list.size()>0){
			            		  List<${requestMap.entityInfo.entityName}Entity> child${requestMap.entityInfo.entityName}List= new ArrayList<${requestMap.entityInfo.entityName}Entity>();
			            		  for(Object o:list){
			            			  child${requestMap.entityInfo.entityName}List.add((${requestMap.entityInfo.entityName}Entity)o);
			            		  }
			            		  obj.setChild${requestMap.entityInfo.entityName}List(child${requestMap.entityInfo.entityName}List);          		  
			            	  }	            	  	  
						}
				     #end
				   #end
			}
			return obj;
		}
		
		/**
		 * 根据条件查询记录集合（不分页 不带排序 不级联查询）
		 * @param queryMap 查询条件集合		
		 * @return
		 */
		public List<${requestMap.entityInfo.entityName}Entity> getListByCondition(Map<String,Object> queryMap) {
		    List<${requestMap.entityInfo.entityName}Entity> returnlist = null;
			List<Object> list = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap);  			
			#foreach( $relation in $requestMap.relationList)
				#if(${relation.relation}=="ManyToMany")
				Object ${relation.joinColumn}Id=queryMap.get("${relation.joinColumn}Id");
				#end
			#end		 			
			#foreach( $relation in $requestMap.relationList)
			  #if(${relation.relation}=="ManyToMany")	            
	            if(${relation.joinColumn}Id!=null){
	            	QueryCondition qc1 = new QueryCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.${relation.joinColumnUpper}_ID, QueryCondition.eq, ${relation.joinColumn}Id);
	            	List<Object> rlist = dbManager.queryByCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class, qc1);
	            	if(rlist!=null&&rlist.size()>0){
	            		String strIds = "";
	            		for(int i=0;i<rlist.size();i++){
	            			#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity entity = (#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity)rlist.get(i);
	            			Integer temp = entity.get${requestMap.entityInfo.entityName}Id();
	            			if(temp!=null){
	            				if (i == rlist.size() - 1)
	                            	strIds = strIds + temp;
	                            else {
	                            	strIds = strIds + temp + ",";
	                            }
	            			}                       
	            		}
	            		if(strIds!=null&&!"".equals(strIds)){
	            			qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.ID, QueryCondition.in, strIds));
	            		}
	            	}else{
				        return returnlist;
			        }
				}
				#end
			#end					
            list = dbManager.queryByCondition(${requestMap.entityInfo.entityName}Entity.class,qc);    
            if(list!=null&&list.size()>0){
               returnlist = new ArrayList<${requestMap.entityInfo.entityName}Entity>();
               for (Object obj:list) {           
                 returnlist.add((${requestMap.entityInfo.entityName}Entity)obj);
               }
            }       					
			return returnlist;
		}
		
		
		/**
		 * 根据条件查询记录集合（不分页 带排序 带级联查询）
		 * @param queryMap 查询条件集合
		 * @param orderList 排序条件集合
		 #foreach( $relation in $requestMap.relationList)
		             #if(${relation.relation}=="ManyToMany")
		 * @param ${relation.joinColumn}ListShow 是否查询关联信息,默认false(当为true时注意效率)
	                 #end	     
	                 #if(${relation.relation}=="OneToMany")
	     * @param ${relation.joinColumn}ListShow 是否查询关联信息,默认false(当为true时注意效率)
				     #end
				     #if(${relation.relation}=="ManyToOne")
		 * @param ${relation.joinEntityName}Show 是否查询关联信息,默认false(当为true时注意效率)
				     #end
				     #if(${relation.relation}=="OneToOne")
		 * @param ${relation.joinEntityName}Show 是否查询关联信息,默认false(当为true时注意效率)
				     #end
				     #if(${relation.relation}=="ParentToOne")
		 * @param parent${requestMap.entityInfo.entityName}Show 是否查询关联信息,默认false(当为true时注意效率)
		   @param child${requestMap.entityInfo.entityName}ListShow 是否查询关联信息,默认false(当为true时注意效率)
				     #end
		 #end
		 * @return
		 */
		public List<${requestMap.entityInfo.entityName}Entity> getListByCondition(Map<String,Object> queryMap,List<OrderVO> orderList#foreach( $relation in $requestMap.relationList)#if(${relation.relation}=="ManyToMany"),Boolean ${relation.joinColumn}ListShow#end#if(${relation.relation}=="OneToMany"),Boolean ${relation.joinColumn}ListShow#end#if(${relation.relation}=="ManyToOne"),Boolean ${relation.joinEntityName}Show#end#if(${relation.relation}=="OneToOne"),Boolean ${relation.joinEntityName}Show#end#if(${relation.relation}=="ParentToOne"),Boolean parent${requestMap.entityInfo.entityName}Show,Boolean child${requestMap.entityInfo.entityName}ListShow#end#end) {
			List<${requestMap.entityInfo.entityName}Entity> returnlist = null;
			List<Object> list = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap); 
			#foreach( $relation in $requestMap.relationList)
				#if(${relation.relation}=="ManyToMany")
				Object ${relation.joinColumn}Id=queryMap.get("${relation.joinColumn}Id");
				#end
			#end  			
			#foreach( $relation in $requestMap.relationList)
			  #if(${relation.relation}=="ManyToMany")	            
	            if(${relation.joinColumn}Id!=null){
	            	QueryCondition qc1 = new QueryCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.${relation.joinColumnUpper}_ID, QueryCondition.eq, ${relation.joinColumn}Id);
	            	List<Object> rlist = dbManager.queryByCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class, qc1);
	            	if(rlist!=null&&rlist.size()>0){
	            		String strIds = "";
	            		for(int i=0;i<rlist.size();i++){
	            			#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity entity = (#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity)rlist.get(i);
	            			Integer temp = entity.get${requestMap.entityInfo.entityName}Id();
	            			if(temp!=null){
	            				if (i == rlist.size() - 1)
	                            	strIds = strIds + temp;
	                            else {
	                            	strIds = strIds + temp + ",";
	                            }
	            			}                       
	            		}
	            		if(strIds!=null&&!"".equals(strIds)){
	            			qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.ID, QueryCondition.in, strIds));
	            		}
	            	}else{
				        return returnlist;
			        }
				}
				#end
			#end
			OrderByCondition oc = null;
			if(orderList!=null&&orderList.size()>0){
				for(int i=0;i<orderList.size();i++){
					OrderVO order = orderList.get(i);
					String orderColumnt =null;
					String orderType=null;
					if(order.getName()!=null&&!"".equals(order.getName())){
						orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
						orderType = order.getOrderType();
						if(orderType==null||"".equals(orderType.trim())){
							orderType=OrderByCondition.desc;
						}
						if(i==0){
							oc = new OrderByCondition(orderColumnt,orderType);
						}else{
							oc.orderByCondition(new OrderByCondition(orderColumnt,orderType));
						}					
					}
					
				}
			}			
            list = dbManager.queryByConditions(${requestMap.entityInfo.entityName}Entity.class,qc,oc);
            #set($a=0)
            #if($requestMap.relationList.size()>0)
            int a=0;
            #end           
			#foreach( $relation in $requestMap.relationList)
		             #if(${relation.relation}=="ManyToMany")
		             #set($a=$a+1)
		             if(${relation.joinColumn}ListShow!=null&&${relation.joinColumn}ListShow.booleanValue()){
						a++;
					 }
	                 #end	     
	                 #if(${relation.relation}=="OneToMany")
	                 #set($a=$a+1)
	                 if(${relation.joinColumn}ListShow!=null&&${relation.joinColumn}ListShow.booleanValue()){
						a++;
					 }
				     #end
				     #if(${relation.relation}=="ManyToOne")
				     #set($a=$a+1)
				     if(${relation.joinEntityName}Show!=null&&${relation.joinEntityName}Show.booleanValue()){
						a++;
					 }
				     #end
				     #if(${relation.relation}=="OneToOne")
				     #set($a=$a+1)
				     if(${relation.joinEntityName}Show!=null&&${relation.joinEntityName}Show.booleanValue()){
						a++;
					 }
				     #end
				     #if(${relation.relation}=="ParentToOne")
				     #set($a=$a+1)
				     if(parent${requestMap.entityInfo.entityName}Show!=null&&parent${requestMap.entityInfo.entityName}Show.booleanValue()){
						a++;
					 }
					 if(child${requestMap.entityInfo.entityName}ListShow!=null&&child${requestMap.entityInfo.entityName}ListShow.booleanValue()){
						a++;
					 }
				     #end
		    #end
		    #if($a>0)		    
            if(a>0&&list!=null&&list.size()>0){
				List<Object> result = new ArrayList<Object>();
				for(int i=0;i<list.size();i++){
					${requestMap.entityInfo.entityName}Entity obj = (${requestMap.entityInfo.entityName}Entity)list.get(i);
					#foreach( $relation in $requestMap.relationList)
					 #if(${relation.relation}=="ManyToMany")
					    //查询关联内容
						if(${relation.joinColumn}ListShow!=null&&${relation.joinColumn}ListShow.booleanValue()&&obj!=null&&obj.getId()!=null&&obj.getId()>0){
							List<Object> rlist = dbManager.searchListByColumn(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class, #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.${requestMap.entityInfo.tableUpperName}_ID, String.valueOf(obj.getId()));
			            	  if(rlist!=null&&rlist.size()>0){
			            		  for(Object robj:rlist){
			            			  #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity robject = (#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity)robj;
			            			  Integer objId = robject.get${relation.joinColumnFirstUpper}Id();
			            			  if(objId!=null){
			            				  ${relation.joinColumnFirstUpper}Entity ${relation.joinColumn} = (${relation.joinColumnFirstUpper}Entity)dbManager.getById(objId,${relation.joinColumnFirstUpper}Entity.class);
			            				  List<${relation.joinColumnFirstUpper}Entity> ${relation.joinColumn}List = obj.get${relation.joinColumnFirstUpper}List();
			            				  if(${relation.joinColumn}List==null||${relation.joinColumn}List.size()==0){
			            					  ${relation.joinColumn}List=new ArrayList<${relation.joinColumnFirstUpper}Entity>();
			            				  }
			            				  ${relation.joinColumn}List.add(${relation.joinColumn});
			            				  obj.set${relation.joinColumnFirstUpper}List(${relation.joinColumn}List);
			            			  }
			            		  }
			            	  }	            	  	  
						}
	                 #end
	                 #if(${relation.relation}=="OneToMany")
	                    //查询关联内容
						if(${relation.joinColumn}ListShow!=null&&${relation.joinColumn}ListShow.booleanValue()&&obj!=null&&obj.getId()!=null&&obj.getId()>0){
							List<Object> objList = dbManager.searchListByColumn(${relation.joinColumnFirstUpper}Entity.class, ${relation.joinColumnFirstUpper}Entity.${requestMap.entityInfo.tableUpperName}_ID, String.valueOf(obj.getId()));
			            	  if(objList!=null&&objList.size()>0){
			            		  List<${relation.joinColumnFirstUpper}Entity> ${relation.joinColumn}List= new ArrayList<${relation.joinColumnFirstUpper}Entity>();
			            		  for(Object o:objList){
			            			  ${relation.joinColumn}List.add((${relation.joinColumnFirstUpper}Entity)o);
			            		  }
			            		  obj.set${relation.joinColumnFirstUpper}List(${relation.joinColumn}List);          		  
			            	  }	            	  	  
						}
				     #end
				     #if(${relation.relation}=="ManyToOne")
				        //查询关联内容
						if(${relation.joinEntityName}Show!=null&&${relation.joinEntityName}Show.booleanValue()&&obj!=null&&obj.get${relation.joinEntityFirstUpper}Id()!=null&&obj.get${relation.joinEntityFirstUpper}Id()>0){
							${relation.joinColumnFirstUpper}Entity ${relation.joinEntityName} = (${relation.joinColumnFirstUpper}Entity)dbManager.getById(obj.get${relation.joinEntityFirstUpper}Id(), ${relation.joinColumnFirstUpper}Entity.class);
							obj.set${relation.joinEntityFirstUpper}(${relation.joinEntityName});        	  	  
						}
				     #end
				     #if(${relation.relation}=="OneToOne")
				        //查询关联内容
						if(${relation.joinEntityName}Show!=null&&${relation.joinEntityName}Show.booleanValue()&&obj!=null&&obj.get${relation.joinEntityFirstUpper}Id()!=null&&obj.get${relation.joinEntityFirstUpper}Id()>0){
							${relation.joinColumnFirstUpper}Entity ${relation.joinEntityName} = (${relation.joinColumnFirstUpper}Entity)dbManager.getById(obj.get${relation.joinEntityFirstUpper}Id(), ${relation.joinColumnFirstUpper}Entity.class);
							obj.set${relation.joinEntityFirstUpper}(${relation.joinEntityName});        	  	  
						}
				     #end
				     #if(${relation.relation}=="ParentToOne")
				        //查询关联内容
						if(parent${requestMap.entityInfo.entityName}Show!=null&&parent${requestMap.entityInfo.entityName}Show.booleanValue()&&obj.getParentId()!=null&&obj!=null&&obj.getParentId()>0){
					        ${requestMap.entityInfo.entityName}Entity ${requestMap.entityInfo.entityPackage} = (${requestMap.entityInfo.entityName}Entity)dbManager.getById(obj.getParentId(), ${requestMap.entityInfo.entityName}Entity.class);
					        obj.setParent${requestMap.entityInfo.entityName}(${requestMap.entityInfo.entityPackage});        	  	  
				        }
				        //查询关联内容
						if(child${requestMap.entityInfo.entityName}ListShow!=null&&child${requestMap.entityInfo.entityName}ListShow.booleanValue()&&obj!=null&&obj.getId()!=null&&obj.getId()>0){
							List<Object> objList = dbManager.searchListByColumn(${requestMap.entityInfo.entityName}Entity.class, ${requestMap.entityInfo.entityName}Entity.PARENT_ID, String.valueOf(obj.getId()));
			            	  if(objList!=null&&objList.size()>0){
			            		  List<${requestMap.entityInfo.entityName}Entity> child${requestMap.entityInfo.entityName}List= new ArrayList<${requestMap.entityInfo.entityName}Entity>();
			            		  for(Object o:objList){
			            			  child${requestMap.entityInfo.entityName}List.add((${requestMap.entityInfo.entityName}Entity)o);
			            		  }
			            		  obj.setChild${requestMap.entityInfo.entityName}List(child${requestMap.entityInfo.entityName}List);          		  
			            	  }	            	  	  
						}
				     #end
				    #end
					result.add(obj);					
				}
				list=result;			
		}	
		#end						
			if(list!=null&&list.size()>0){
               returnlist = new ArrayList<${requestMap.entityInfo.entityName}Entity>();
               for (Object obj:list) {           
                 returnlist.add((${requestMap.entityInfo.entityName}Entity)obj);
               }
            }       					
			return returnlist;
		}
		
		/**
		 * 根据条件查询记录集合（带分页 不带排序 不级联查询）
		 * @param queryMap 查询条件集合
		 * @param pageno 查询页码
		 * @param pagesize 查询每页记录条数		
		 * @return
		 */
		public PageList getListByCondition(Map<String,Object> queryMap,int pageno,int pagesize) {
			PageList pagelist = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap); 
			#foreach( $relation in $requestMap.relationList)
				#if(${relation.relation}=="ManyToMany")
				Object ${relation.joinColumn}Id=queryMap.get("${relation.joinColumn}Id");
				#end
			#end 			
			#foreach( $relation in $requestMap.relationList)
			  #if(${relation.relation}=="ManyToMany")	            
	            if(${relation.joinColumn}Id!=null){
	            	QueryCondition qc1 = new QueryCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.${relation.joinColumnUpper}_ID, QueryCondition.eq, ${relation.joinColumn}Id);
	            	List<Object> rlist = dbManager.queryByCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class, qc1);
	            	if(rlist!=null&&rlist.size()>0){
	            		String strIds = "";
	            		for(int i=0;i<rlist.size();i++){
	            			#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity entity = (#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity)rlist.get(i);
	            			Integer temp = entity.get${requestMap.entityInfo.entityName}Id();
	            			if(temp!=null){
	            				if (i == rlist.size() - 1)
	                            	strIds = strIds + temp;
	                            else {
	                            	strIds = strIds + temp + ",";
	                            }
	            			}                       
	            		}
	            		if(strIds!=null&&!"".equals(strIds)){
	            			qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.ID, QueryCondition.in, strIds));
	            		}
	            	}else{
				        return pagelist;
			        }
				}
				#end
			#end				
            pagelist = dbManager.queryByCondition(${requestMap.entityInfo.entityName}Entity.class,qc,pageno,pagesize);	                      			
			return pagelist;
		}
		
		/**
		 * 根据条件查询记录集合（带分页 带排序 带级联查询）
		 * @param queryMap 查询条件集合
		 * @param orderList 排序条件集合
		 * @param pageno 查询页码
		 * @param pagesize 查询每页记录条数
		 #foreach( $relation in $requestMap.relationList)
		             #if(${relation.relation}=="ManyToMany")
		 * @param ${relation.joinColumn}ListShow 是否查询关联信息,默认false(当为true时注意效率)
	                 #end	     
	                 #if(${relation.relation}=="OneToMany")
	     * @param ${relation.joinColumn}ListShow 是否查询关联信息,默认false(当为true时注意效率)
				     #end
				     #if(${relation.relation}=="ManyToOne")
		 * @param ${relation.joinEntityName}Show 是否查询关联信息,默认false(当为true时注意效率)
				     #end
				     #if(${relation.relation}=="OneToOne")
		 * @param ${relation.joinEntityName}Show 是否查询关联信息,默认false(当为true时注意效率)
				     #end
				     #if(${relation.relation}=="ParentToOne")
		 * @param parent${requestMap.entityInfo.entityName}Show 是否查询关联信息,默认false(当为true时注意效率)
		   @param child${requestMap.entityInfo.entityName}ListShow 是否查询关联信息,默认false(当为true时注意效率)
				     #end
		 #end
		 * @return
		 */
		public PageList getListByCondition(Map<String,Object> queryMap,List<OrderVO> orderList,int pageno,int pagesize#foreach( $relation in $requestMap.relationList)#if(${relation.relation}=="ManyToMany"),Boolean ${relation.joinColumn}ListShow#end#if(${relation.relation}=="OneToMany"),Boolean ${relation.joinColumn}ListShow#end#if(${relation.relation}=="ManyToOne"),Boolean ${relation.joinEntityName}Show#end#if(${relation.relation}=="OneToOne"),Boolean ${relation.joinEntityName}Show#end#if(${relation.relation}=="ParentToOne"),Boolean parent${requestMap.entityInfo.entityName}Show,Boolean child${requestMap.entityInfo.entityName}ListShow#end#end) {
			PageList pagelist = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap); 
			#foreach( $relation in $requestMap.relationList)
				#if(${relation.relation}=="ManyToMany")
				Object ${relation.joinColumn}Id=queryMap.get("${relation.joinColumn}Id");
				#end
			#end  			
			#foreach( $relation in $requestMap.relationList)
			  #if(${relation.relation}=="ManyToMany")	            
	            if(${relation.joinColumn}Id!=null){
	            	QueryCondition qc1 = new QueryCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.${relation.joinColumnUpper}_ID, QueryCondition.eq, ${relation.joinColumn}Id);
	            	List<Object> rlist = dbManager.queryByCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class, qc1);
	            	if(rlist!=null&&rlist.size()>0){
	            		String strIds = "";
	            		for(int i=0;i<rlist.size();i++){
	            			#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity entity = (#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity)rlist.get(i);
	            			Integer temp = entity.get${requestMap.entityInfo.entityName}Id();
	            			if(temp!=null){
	            				if (i == rlist.size() - 1)
	                            	strIds = strIds + temp;
	                            else {
	                            	strIds = strIds + temp + ",";
	                            }
	            			}                       
	            		}
	            		if(strIds!=null&&!"".equals(strIds)){
	            			qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.ID, QueryCondition.in, strIds));
	            		}
	            	}else{
				        return pagelist;
			        }
				}
				#end
			#end
			OrderByCondition oc = null;
			if(orderList!=null&&orderList.size()>0){
				for(int i=0;i<orderList.size();i++){
					OrderVO order = orderList.get(i);
					String orderColumnt =null;
					String orderType=null;
					if(order.getName()!=null&&!"".equals(order.getName())){
						orderColumnt = StringUtil.formatFieldToColumnt(order.getName());
						orderType = order.getOrderType();
						if(orderType==null||"".equals(orderType.trim())){
							orderType=OrderByCondition.desc;
						}
						if(i==0){
							oc = new OrderByCondition(orderColumnt,orderType);
						}else{
							oc.orderByCondition(new OrderByCondition(orderColumnt,orderType));
						}					
					}
					
				}
			}		
			//数据权限
			List<QueryCondition> dataRuleQclist = null;
			List<Map<String, Object>> dataRuleMapList = (List<Map<String, Object>>)queryMap.get("dataRuleMapList");
			if(dataRuleMapList!=null&&dataRuleMapList.size()>0){
				dataRuleQclist = new ArrayList<QueryCondition>();
				for(Map<String, Object> dataRuleMap:dataRuleMapList){
					QueryCondition dataRuleQc = changeMapToQc(dataRuleMap);	
					dataRuleQclist.add(dataRuleQc);
				}
			}
            pagelist = dbManager.queryByConditions(${requestMap.entityInfo.entityName}Entity.class,qc,dataRuleQclist,oc,pageno,pagesize);	           
            #set($a=0)
            #if($requestMap.relationList.size()>0)
            int a=0;
            #end           
			#foreach( $relation in $requestMap.relationList)
		             #if(${relation.relation}=="ManyToMany")
		             #set($a=$a+1)
		             if(${relation.joinColumn}ListShow!=null&&${relation.joinColumn}ListShow.booleanValue()){
						a++;
					 }
	                 #end	     
	                 #if(${relation.relation}=="OneToMany")
	                 #set($a=$a+1)
	                 if(${relation.joinColumn}ListShow!=null&&${relation.joinColumn}ListShow.booleanValue()){
						a++;
					 }
				     #end
				     #if(${relation.relation}=="ManyToOne")
				     #set($a=$a+1)
				     if(${relation.joinEntityName}Show!=null&&${relation.joinEntityName}Show.booleanValue()){
						a++;
					 }
				     #end
				     #if(${relation.relation}=="OneToOne")
				     #set($a=$a+1)
				     if(${relation.joinEntityName}Show!=null&&${relation.joinEntityName}Show.booleanValue()){
						a++;
					 }
				     #end
				     #if(${relation.relation}=="ParentToOne")
				     #set($a=$a+1)
				     if(parent${requestMap.entityInfo.entityName}Show!=null&&parent${requestMap.entityInfo.entityName}Show.booleanValue()){
						a++;
					 }
					 if(child${requestMap.entityInfo.entityName}ListShow!=null&&child${requestMap.entityInfo.entityName}ListShow.booleanValue()){
						a++;
					 }
				     #end
		    #end
		    #if($a>0)		    
            if(a>0&&pagelist!=null&&pagelist.getResultList()!=null&&pagelist.getResultList().size()>0){
				List<Object> result = new ArrayList<Object>();
				for(int i=0;i<pagelist.getResultList().size();i++){
					${requestMap.entityInfo.entityName}Entity obj = (${requestMap.entityInfo.entityName}Entity)pagelist.getResultList().get(i);
					#foreach( $relation in $requestMap.relationList)
					 #if(${relation.relation}=="ManyToMany")
					    //查询关联内容
						if(${relation.joinColumn}ListShow!=null&&${relation.joinColumn}ListShow.booleanValue()&&obj!=null&&obj.getId()!=null&&obj.getId()>0){
							List<Object> rlist = dbManager.searchListByColumn(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class, #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.${requestMap.entityInfo.tableUpperName}_ID, String.valueOf(obj.getId()));
			            	  if(rlist!=null&&rlist.size()>0){
			            		  for(Object robj:rlist){
			            			  #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity robject = (#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity)robj;
			            			  Integer objId = robject.get${relation.joinColumnFirstUpper}Id();
			            			  if(objId!=null){
			            				  ${relation.joinColumnFirstUpper}Entity ${relation.joinColumn} = (${relation.joinColumnFirstUpper}Entity)dbManager.getById(objId,${relation.joinColumnFirstUpper}Entity.class);
			            				  List<${relation.joinColumnFirstUpper}Entity> ${relation.joinColumn}List = obj.get${relation.joinColumnFirstUpper}List();
			            				  if(${relation.joinColumn}List==null||${relation.joinColumn}List.size()==0){
			            					  ${relation.joinColumn}List=new ArrayList<${relation.joinColumnFirstUpper}Entity>();
			            				  }
			            				  ${relation.joinColumn}List.add(${relation.joinColumn});
			            				  obj.set${relation.joinColumnFirstUpper}List(${relation.joinColumn}List);
			            			  }
			            		  }
			            	  }	            	  	  
						}
	                 #end
	                 #if(${relation.relation}=="OneToMany")
	                    //查询关联内容
						if(${relation.joinColumn}ListShow!=null&&${relation.joinColumn}ListShow.booleanValue()&&obj!=null&&obj.getId()!=null&&obj.getId()>0){
							List<Object> objList = dbManager.searchListByColumn(${relation.joinColumnFirstUpper}Entity.class, ${relation.joinColumnFirstUpper}Entity.${requestMap.entityInfo.tableUpperName}_ID, String.valueOf(obj.getId()));
			            	  if(objList!=null&&objList.size()>0){
			            		  List<${relation.joinColumnFirstUpper}Entity> ${relation.joinColumn}List= new ArrayList<${relation.joinColumnFirstUpper}Entity>();
			            		  for(Object o:objList){
			            			  ${relation.joinColumn}List.add((${relation.joinColumnFirstUpper}Entity)o);
			            		  }
			            		  obj.set${relation.joinColumnFirstUpper}List(${relation.joinColumn}List);          		  
			            	  }	            	  	  
						}
				     #end
				     #if(${relation.relation}=="ManyToOne")
				        //查询关联内容
						if(${relation.joinEntityName}Show!=null&&${relation.joinEntityName}Show.booleanValue()&&obj!=null&&obj.get${relation.joinEntityFirstUpper}Id()!=null&&obj.get${relation.joinEntityFirstUpper}Id()>0){
							${relation.joinColumnFirstUpper}Entity ${relation.joinEntityName} = (${relation.joinColumnFirstUpper}Entity)dbManager.getById(obj.get${relation.joinEntityFirstUpper}Id(), ${relation.joinColumnFirstUpper}Entity.class);
							obj.set${relation.joinEntityFirstUpper}(${relation.joinEntityName});        	  	  
						}
				     #end
				     #if(${relation.relation}=="OneToOne")
				        //查询关联内容
						if(${relation.joinColumn}Show!=null&&${relation.joinColumn}Show.booleanValue()&&obj!=null&&obj.getParentId()!=null&&obj.getParentId()>0){
							${relation.joinColumnFirstUpper}Entity ${relation.joinColumn} = (${relation.joinColumnFirstUpper}Entity)dbManager.getById(obj.getParentId(), ${relation.joinColumnFirstUpper}Entity.class);
							obj.set${relation.joinColumnFirstUpper}(${relation.joinColumn});        	  	  
						}
				     #end
				     #if(${relation.relation}=="ParentToOne")
				        //查询关联内容
						if(parent${requestMap.entityInfo.entityName}Show!=null&&parent${requestMap.entityInfo.entityName}Show.booleanValue()&&obj!=null&&obj.getParentId()!=null&&obj.getParentId()>0){
					        ${requestMap.entityInfo.entityName}Entity ${requestMap.entityInfo.entityPackage} = (${requestMap.entityInfo.entityName}Entity)dbManager.getById(obj.getParentId(), ${requestMap.entityInfo.entityName}Entity.class);
					        obj.setParent${requestMap.entityInfo.entityName}(${requestMap.entityInfo.entityPackage});        	  	  
				        }
				        //查询关联内容
						if(child${requestMap.entityInfo.entityName}ListShow!=null&&child${requestMap.entityInfo.entityName}ListShow.booleanValue()&&obj!=null&&obj.getId()!=null&&obj.getId()>0){
							List<Object> objList = dbManager.searchListByColumn(${requestMap.entityInfo.entityName}Entity.class, ${requestMap.entityInfo.entityName}Entity.PARENT_ID, String.valueOf(obj.getId()));
			            	  if(objList!=null&&objList.size()>0){
			            		  List<${requestMap.entityInfo.entityName}Entity> child${requestMap.entityInfo.entityName}List= new ArrayList<${requestMap.entityInfo.entityName}Entity>();
			            		  for(Object o:objList){
			            			  child${requestMap.entityInfo.entityName}List.add((${requestMap.entityInfo.entityName}Entity)o);
			            		  }
			            		  obj.setChild${requestMap.entityInfo.entityName}List(child${requestMap.entityInfo.entityName}List);          		  
			            	  }	            	  	  
						}
				     #end
				    #end
					result.add(obj);					
				}
				pagelist.setResultList(result);			
		}	
		#end				
			return pagelist;
		}
		
		/**
		 * 删除记录
		 * 
		 * @param id 主键
		 * @param obj
		 */
		public boolean del(Integer id#foreach( $relation in $requestMap.relationList)#if(${relation.relation}=="ManyToMany"),Boolean del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List#end#if(${relation.relation}=="OneToMany"),Boolean del${relation.joinColumnFirstUpper}List#end#if(${relation.relation}=="ManyToOne"),Boolean del${relation.joinEntityFirstUpper}#end#if(${relation.relation}=="OneToOne"),Boolean del${relation.joinEntityFirstUpper}#end#if(${relation.relation}=="ParentToOne"),Boolean delParent${requestMap.entityInfo.entityName},Boolean delChild${requestMap.entityInfo.entityName}List#end#end) {
			boolean result = false;
			if (id !=null&&id>0) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 					
					#foreach( $relation in $requestMap.relationList)
					 #if(${relation.relation}=="ManyToMany")
					    //删除关联信息
						if(del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List!=null&&del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List.booleanValue()){
							QueryCondition qc = new QueryCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.${requestMap.entityInfo.tableUpperName}_ID, QueryCondition.eq, id);
							dbManager.delByConditionsNoTransaction(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class, qc);
						}
	                 #end
	                 #if(${relation.relation}=="OneToMany")
	                    //删除关联信息
						if(del${relation.joinColumnFirstUpper}List!=null&&del${relation.joinColumnFirstUpper}List.booleanValue()){
							QueryCondition qc = new QueryCondition(${relation.joinColumnFirstUpper}Entity.${requestMap.entityInfo.tableUpperName}_ID, QueryCondition.eq, id);
							dbManager.delByConditionsNoTransaction(${relation.joinColumnFirstUpper}Entity.class, qc);
						}
				     #end
				     #if(${relation.relation}=="ManyToOne")
					    //删除关联信息
						if(del${relation.joinEntityFirstUpper}!=null&&del${relation.joinEntityFirstUpper}.booleanValue()){	
							${requestMap.entityInfo.entityName}Entity ${requestMap.entityInfo.entityPackage} = (${requestMap.entityInfo.entityName}Entity)dbManager.getById(id, ${requestMap.entityInfo.entityName}Entity.class);
							if(${requestMap.entityInfo.entityPackage}!=null&&${requestMap.entityInfo.entityPackage}.get${relation.joinEntityFirstUpper}Id()!=null){
								dbManager.delNoTransaction(${requestMap.entityInfo.entityPackage}.get${relation.joinEntityFirstUpper}Id(), ${relation.joinColumnFirstUpper}Entity.class);
							}						
						}
				     #end
				     #if(${relation.relation}=="OneToOne")
					    //删除关联信息
						if(del${relation.joinEntityFirstUpper}!=null&&del${relation.joinEntityFirstUpper}.booleanValue()){	
							${requestMap.entityInfo.entityName}Entity ${requestMap.entityInfo.entityPackage} = (${requestMap.entityInfo.entityName}Entity)dbManager.getById(id, ${requestMap.entityInfo.entityName}Entity.class);
							if(${requestMap.entityInfo.entityPackage}!=null&&${requestMap.entityInfo.entityPackage}.get${relation.joinEntityFirstUpper}Id()!=null){
								dbManager.delNoTransaction(${requestMap.entityInfo.entityPackage}.get${relation.joinEntityFirstUpper}Id(), ${relation.joinColumnFirstUpper}Entity.class);
							}						
						}
				     #end
				     #if(${relation.relation}=="ParentToOne")
					    //删除关联信息
						if(delParent${requestMap.entityInfo.entityName}!=null&&delParent${requestMap.entityInfo.entityName}.booleanValue()){	
						    ${requestMap.entityInfo.entityName}Entity ${requestMap.entityInfo.entityPackage} = (${requestMap.entityInfo.entityName}Entity)dbManager.getById(id, ${requestMap.entityInfo.entityName}Entity.class);
						    if(${requestMap.entityInfo.entityPackage}.getParentId()!=null){
							dbManager.delNoTransaction(${requestMap.entityInfo.entityPackage}.getParentId(), ${requestMap.entityInfo.entityName}Entity.class);
						    }						
					    }
					    //删除关联信息
						if(delChild${requestMap.entityInfo.entityName}List!=null&&delChild${requestMap.entityInfo.entityName}List.booleanValue()){
							QueryCondition qc = new QueryCondition(${requestMap.entityInfo.entityName}Entity.PARENT_ID, QueryCondition.eq, id);
							dbManager.delByConditionsNoTransaction(${requestMap.entityInfo.entityName}Entity.class, qc);
						}
				     #end					
					#end
					result = dbManager.delNoTransaction(id, ${requestMap.entityInfo.entityName}Entity.class);
					tx.commitAndClose(); 
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
		/**
		 * 批量删除记录
		 * 
		 * @param ids
		 *            主键 英文逗号间隔
		 * @param obj
		 */
		public boolean del(String ids) {
			boolean result = false;
			if (ids != null && !"".equals(ids.trim())) {
				TransactionManager tx = DbUtils.getTranManager();
				try {
					tx.beginTransaction();
					QueryCondition qc = new QueryCondition(${requestMap.entityInfo.entityName}Entity.ID,QueryCondition.in, ids);
					result = dbManager.delByConditionsNoTransaction(${requestMap.entityInfo.entityName}Entity.class, qc);
					tx.commitAndClose();
				} catch (Exception e) {
					logger.error("数据库提交失败！");
					logger.error(e);
					result = false;
					try {
						tx.rollbackAndClose();
					} catch (Exception ex) {
						logger.error("数据库回滚失败！");
						logger.error(ex);
					}
				}
			}
			return result;
		}

		/**
		 * 批量条件删除记录
		 * @param queryMap 查询条件集合
		 */
		public boolean delList(Map<String,Object> queryMap#foreach( $relation in $requestMap.relationList)#if(${relation.relation}=="ManyToMany"),Boolean del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List#end#if(${relation.relation}=="OneToMany"),Boolean del${relation.joinColumnFirstUpper}List#end#if(${relation.relation}=="ManyToOne"),Boolean del${relation.joinEntityFirstUpper}#end#if(${relation.relation}=="OneToOne"),Boolean del${relation.joinEntityFirstUpper}#end#if(${relation.relation}=="ParentToOne"),Boolean delParent${requestMap.entityInfo.entityName}List,Boolean delChild${requestMap.entityInfo.entityName}List#end#end) {
			boolean result = false;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			QueryCondition qc = changeMapToQc(queryMap);   
			#foreach( $relation in $requestMap.relationList)
				#if(${relation.relation}=="ManyToMany")
				Object ${relation.joinColumn}Id=queryMap.get("${relation.joinColumn}Id");
				#end
			#end			
			#foreach( $relation in $requestMap.relationList)
	            #if(${relation.relation}=="ManyToMany")
	            if(${relation.joinColumn}Id!=null){
	            	QueryCondition qc1 = new QueryCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.${relation.joinColumnUpper}_ID, QueryCondition.eq, ${relation.joinColumn}Id);
	            	List<Object> rlist = dbManager.queryByCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class, qc1);
	            	if(rlist!=null&&rlist.size()>0){
	            		String strIds = "";
	            		for(int i=0;i<rlist.size();i++){
	            			#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity entity = (#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity)rlist.get(i);
	            			Integer temp = entity.get${requestMap.entityInfo.entityName}Id();
	            			if(temp!=null){
	            				if (i == rlist.size() - 1)
	                            	strIds = strIds + temp;
	                            else {
	                            	strIds = strIds + temp + ",";
	                            }
	            			}                       
	            		}
	            		if(strIds!=null&&!"".equals(strIds)){
	            			qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.ID, QueryCondition.in, strIds));
	            		}
	            	}else{
				        return result;
			        }
				}
				#end
			#end	
			if (qc.getQueryNextCondition()!=null) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 						
					#foreach( $relation in $requestMap.relationList)
					 #if(${relation.relation}=="ManyToMany")
						 //删除关联信息
						if(del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List!=null&&del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List.booleanValue()){
							List<Object> list=dbManager.queryByConditionNoTransaction(${requestMap.entityInfo.entityName}Entity.class,qc);
							String strIds="";
							if(list!=null&&list.size()>0){
								for(Object obj:list){
									${requestMap.entityInfo.entityName}Entity entity=(${requestMap.entityInfo.entityName}Entity)obj;
									strIds += entity.getId()+",";
								}
								strIds = strIds.substring(0, strIds.length()-1);
							}
							if(strIds!=null&&!"".equals(strIds)){
								QueryCondition qc1 = new QueryCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.${requestMap.entityInfo.tableUpperName}_ID, QueryCondition.in, strIds);
								dbManager.delByConditionsNoTransaction(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class, qc1);
							}
							
						}	
	                 #end
	                 #if(${relation.relation}=="OneToMany")
		                 //删除关联信息
						if(del${relation.joinColumnFirstUpper}List!=null&&del${relation.joinColumnFirstUpper}List.booleanValue()){
							List<Object> list=dbManager.queryByConditionNoTransaction(${requestMap.entityInfo.entityName}Entity.class,qc);
							String strIds="";
							if(list!=null&&list.size()>0){
								for(Object obj:list){
									${requestMap.entityInfo.entityName}Entity entity=(${requestMap.entityInfo.entityName}Entity)obj;
									strIds += entity.getId()+",";
								}
								strIds = strIds.substring(0, strIds.length()-1);
							}
							if(strIds!=null&&!"".equals(strIds)){
								QueryCondition qc1 = new QueryCondition(${relation.joinColumnFirstUpper}Entity.${requestMap.entityInfo.tableUpperName}_ID, QueryCondition.in, strIds);
								dbManager.delByConditionsNoTransaction(${relation.joinColumnFirstUpper}Entity.class, qc1);
							}
							
						}
				     #end
				     #if(${relation.relation}=="ManyToOne")
					     //删除关联信息
						if(del${relation.joinEntityFirstUpper}!=null&&del${relation.joinEntityFirstUpper}.booleanValue()){
							List<Object> list=dbManager.queryByConditionNoTransaction(${requestMap.entityInfo.entityName}Entity.class,qc);
							String strIds="";
							if(list!=null&&list.size()>0){
								for(Object obj:list){
									${requestMap.entityInfo.entityName}Entity entity=(${requestMap.entityInfo.entityName}Entity)obj;
									strIds += entity.get${relation.joinEntityFirstUpper}Id()+",";
								}
								strIds = strIds.substring(0, strIds.length()-1);
							}
							if(strIds!=null&&!"".equals(strIds)){
								QueryCondition qc1 = new QueryCondition(${relation.joinColumnFirstUpper}Entity.ID, QueryCondition.in, strIds);
								dbManager.delByConditionsNoTransaction(${relation.joinColumnFirstUpper}Entity.class, qc1);
							}
							
						}
				     #end
				     #if(${relation.relation}=="OneToOne")
					     //删除关联信息
						if(del${relation.joinColumnFirstUpper}!=null&&del${relation.joinColumnFirstUpper}.booleanValue()){						
								List<Object> list = dbManager.queryByConditionNoTransaction(${requestMap.entityInfo.entityName}Entity.class,qc);
								String strIds="";
								if(list!=null&&list.size()>0){
									for(Object obj:list){
										${requestMap.entityInfo.entityName}Entity entity=(${requestMap.entityInfo.entityName}Entity)obj;
										strIds += entity.getParentId()+",";
									}
									strIds = strIds.substring(0, strIds.length()-1);
								}
								if(strIds!=null&&!"".equals(strIds)){
									QueryCondition qc1 = new QueryCondition(${relation.joinColumnFirstUpper}Entity.ID, QueryCondition.in, strIds);
									dbManager.delByConditionsNoTransaction(${relation.joinColumnFirstUpper}Entity.class, qc1);
								}					
						}
				     #end
				     #if(${relation.relation}=="ParentToOne")
					     //删除关联信息
						if(delParent${requestMap.entityInfo.entityName}List!=null&&delParent${requestMap.entityInfo.entityName}List.booleanValue()){						
								List<Object> list = dbManager.queryByConditionNoTransaction(${requestMap.entityInfo.entityName}Entity.class,qc);
								String strIds="";
								if(list!=null&&list.size()>0){
									for(Object obj:list){
										${requestMap.entityInfo.entityName}Entity entity=(${requestMap.entityInfo.entityName}Entity)obj;
										strIds += entity.getParentId()+",";
									}
									strIds = strIds.substring(0, strIds.length()-1);
								}
								if(strIds!=null&&!"".equals(strIds)){
									QueryCondition qc1 = new QueryCondition(${requestMap.entityInfo.entityName}Entity.ID, QueryCondition.in, strIds);
									dbManager.delByConditionsNoTransaction(${requestMap.entityInfo.entityName}Entity.class, qc1);
								}					
					    }
					     //删除关联信息
						if(delChild${requestMap.entityInfo.entityName}List!=null&&delChild${requestMap.entityInfo.entityName}List.booleanValue()){
							List<Object> list=dbManager.queryByConditionNoTransaction(${requestMap.entityInfo.entityName}Entity.class,qc);
							String strIds="";
							if(list!=null&&list.size()>0){
								for(Object obj:list){
									${requestMap.entityInfo.entityName}Entity entity=(${requestMap.entityInfo.entityName}Entity)obj;
									strIds += entity.getId()+",";
								}
								strIds = strIds.substring(0, strIds.length()-1);
							}
							if(strIds!=null&&!"".equals(strIds)){
								QueryCondition qc1 = new QueryCondition(${requestMap.entityInfo.entityName}Entity.PARENT_ID, QueryCondition.in, strIds);
								dbManager.delByConditionsNoTransaction(${requestMap.entityInfo.entityName}Entity.class, qc1);
							}
							
						}
				     #end					
					#end
					result = dbManager.delByConditionsNoTransaction(${requestMap.entityInfo.entityName}Entity.class,qc);				
					tx.commitAndClose();  
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
	private QueryCondition changeMapToQc(Map<String, Object> queryMap) {	
		#foreach( $column in $requestMap.columntList)
				#if("Long"==$column.fieldType||"Integer"==$column.fieldType||"Float"==$column.fieldType||"BigDecimal"==$column.fieldType)
					Object ${column.fieldName}=queryMap.get("${column.fieldName}");
					Object ${column.fieldName}_gt=queryMap.get("${column.fieldName}_gt");
					Object ${column.fieldName}_ge=queryMap.get("${column.fieldName}_ge");
					Object ${column.fieldName}_lt=queryMap.get("${column.fieldName}_lt");
					Object ${column.fieldName}_le=queryMap.get("${column.fieldName}_le");
					Object ${column.fieldName}_in=queryMap.get("${column.fieldName}_in");
				#else
					#if(${column.fieldUpperName.indexOf("TIME")}>-1||${column.fieldUpperName.indexOf("DATE")}>-1)  
					Object ${column.fieldName}_gt=queryMap.get("${column.fieldName}_gt");
					Object ${column.fieldName}_ge=queryMap.get("${column.fieldName}_ge");
					Object ${column.fieldName}_lt=queryMap.get("${column.fieldName}_lt");
					Object ${column.fieldName}_le=queryMap.get("${column.fieldName}_le");
					#else
					Object ${column.fieldName}=queryMap.get("${column.fieldName}");
					Object ${column.fieldName}_like=queryMap.get("${column.fieldName}_like");
					Object ${column.fieldName}_isNull=queryMap.get("${column.fieldName}_isNull");
					Object ${column.fieldName}_isNotNull=queryMap.get("${column.fieldName}_isNotNull");
					Object ${column.fieldName}_in=queryMap.get("${column.fieldName}_in");
					#end  					
				#end
			#end

			

			#foreach( $relation in $requestMap.relationList)
				#if(${relation.relation}=="ManyToMany")
				Object ${relation.joinColumn}Id=queryMap.get("${relation.joinColumn}Id");
				#end
			#end
			
			
			QueryCondition qc = new QueryCondition(${requestMap.entityInfo.entityName}Entity.ID, QueryCondition.gt, "0");				
			#foreach( $column in $requestMap.columntList)
				#if("Long"==$column.fieldType||"Integer"==$column.fieldType||"Float"==$column.fieldType||"BigDecimal"==$column.fieldType)
					if(${column.fieldName}!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.eq, ${column.fieldName}));}
					if(${column.fieldName}_gt!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.gt, ${column.fieldName}_gt));}
					if(${column.fieldName}_ge!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.ge, ${column.fieldName}_ge));}
					if(${column.fieldName}_lt!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.lt, ${column.fieldName}_lt));}
					if(${column.fieldName}_le!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.le, ${column.fieldName}_le));}
					if(${column.fieldName}_in!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.in, ${column.fieldName}_in));}
				#else
				  #if(${column.fieldUpperName.indexOf("TIME")}>-1||${column.fieldUpperName.indexOf("DATE")}>-1)  
					if(${column.fieldName}_gt!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.gt, ${column.fieldName}_gt));}
					if(${column.fieldName}_ge!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.ge, ${column.fieldName}_ge));}
					if(${column.fieldName}_lt!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.lt, ${column.fieldName}_lt));}
					if(${column.fieldName}_le!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.le, ${column.fieldName}_le));}
				  #else
					if(${column.fieldName}!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.eq, ${column.fieldName}));}
		            if(${column.fieldName}_like!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.like, ${column.fieldName}_like));}
		            if(${column.fieldName}_isNull!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.isNull, ${column.fieldName}_isNull));}
		            if(${column.fieldName}_isNotNull!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.isNotNull, ${column.fieldName}_isNotNull));}
				    if(${column.fieldName}_in!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.in, ${column.fieldName}_in));}
				  #end
				#end
			#end  
			return qc; 
	}
		
		
}
