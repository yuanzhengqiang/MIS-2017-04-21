package ${requestMap.entityInfo.bussiPackage}.service.$requestMap.entityInfo.entityPackage;

import java.math.BigDecimal;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import org.apache.log4j.Logger;


#foreach( $relation in $requestMap.relationList)
import ${requestMap.entityInfo.bussiPackage}.entity.${relation.joinColumn}.${relation.joinColumnFirstUpper}Entity;
#if(${relation.jionFirst}=='Y')import ${requestMap.entityInfo.bussiPackage}.entity.${requestMap.entityInfo.entityPackage}${relation.joinColumnFirstUpper}.${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}Entity;#end
#if(${relation.jionFirst}=='N')import ${requestMap.entityInfo.bussiPackage}.entity.${relation.joinColumn}${requestMap.entityInfo.entityName}.${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}Entity;#end
#end
import ${requestMap.entityInfo.bussiPackage}.entity.${requestMap.entityInfo.entityPackage}.${requestMap.entityInfo.entityName}Entity;
import com.framework.system.db.connect.DbUtils;
import com.framework.system.db.manager.DBManager;
import com.framework.system.db.query.PageList;
import com.framework.system.db.query.QueryCondition;
import com.framework.system.db.transaction.TransactionManager;



/**   
 * @Title: Service
 * @Description: $requestMap.entityInfo.tableDescription服务类
 * @author feng.gu
 * @date $requestMap.entityInfo.createTime
 * @version V1.0   
 *
 */
public class ${requestMap.entityInfo.entityName}Service {
	   private static Logger logger = Logger.getLogger(${requestMap.entityInfo.entityName}Service.class);
	   private DBManager dbManager = DBManager.getInstance();
    		
	   private static ${requestMap.entityInfo.entityName}Service ${requestMap.entityInfo.entityPackage}Service;
	   /**
	    * 获取实例	
	    * @return
	    */
	   public static ${requestMap.entityInfo.entityName}Service getInstance(){
		if(${requestMap.entityInfo.entityPackage}Service==null){
			${requestMap.entityInfo.entityPackage}Service = new ${requestMap.entityInfo.entityName}Service();
		}
		return ${requestMap.entityInfo.entityPackage}Service;
	   }
	 
	   /**
		 * 保存记录
		 * 
		 * @param obj
		 */
		public boolean save(${requestMap.entityInfo.entityName}Entity ${requestMap.entityInfo.entityPackage}) {			
			boolean result =false;
			if(${requestMap.entityInfo.entityPackage}!=null){
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					 tx.beginTransaction();					 
					 dbManager.saveNoTransaction(${requestMap.entityInfo.entityPackage});
					 #foreach( $relation in $requestMap.relationList)
					 if(${requestMap.entityInfo.entityPackage}.get${relation.joinColumnFirstUpper}List()!=null&&${requestMap.entityInfo.entityPackage}.get${relation.joinColumnFirstUpper}List().size()>0){
						   //先删除原先绑定关系
						    QueryCondition qc = new QueryCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.${requestMap.entityInfo.tableUpperName}_ID, QueryCondition.eq, ${requestMap.entityInfo.entityPackage}.getId());
							List<Object> list = dbManager.queryByCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class, qc);
		    	            if ((list != null) && (list.size() > 0)) {
		    	              for (Object obj : list) {
		    	            	  #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity entity = (#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity)obj;
		    	            	  dbManager.delNoTransaction(entity.getId(), #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class);
		    	              }   	
		    	            }
		    	            //绑定现在的关系		    	           
						    for(${relation.joinColumnFirstUpper}Entity ${relation.joinColumn}:${requestMap.entityInfo.entityPackage}.get${relation.joinColumnFirstUpper}List()){
						    	Integer ${relation.joinColumn}Id = ${relation.joinColumn}.getId();						    	
		    	                if(${relation.joinColumn}Id!=null){
		    	                		#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity entity = new #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity();
			    	                	entity.set${requestMap.entityInfo.entityName}Id(${requestMap.entityInfo.entityPackage}.getId());
			    	                	entity.set${relation.joinColumnFirstUpper}Id(${relation.joinColumn}Id);
			    	                	dbManager.saveNoTransaction(entity);		    	                	
		    	                }
						    }
					 }
					 #end
					 tx.commitAndClose();   
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {				    
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  			
			}	
			return result;
		}
		
		/**
		 * 批量保存记录
		 * 
		 * @param list
		 */
		public boolean saveList(List<${requestMap.entityInfo.entityName}Entity> ${requestMap.entityInfo.entityPackage}List) {
			boolean result = false;
			if (${requestMap.entityInfo.entityPackage}List != null && ${requestMap.entityInfo.entityPackage}List.size() > 0) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 
					for(${requestMap.entityInfo.entityName}Entity ${requestMap.entityInfo.entityPackage}:${requestMap.entityInfo.entityPackage}List){
						if(${requestMap.entityInfo.entityPackage}!=null){												  
								 dbManager.saveNoTransaction(${requestMap.entityInfo.entityPackage});
								 #foreach( $relation in $requestMap.relationList)
								 if(${requestMap.entityInfo.entityPackage}.get${relation.joinColumnFirstUpper}List()!=null&&${requestMap.entityInfo.entityPackage}.get${relation.joinColumnFirstUpper}List().size()>0){
									   //先删除原先绑定关系
									    QueryCondition qc = new QueryCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.${requestMap.entityInfo.tableUpperName}_ID, QueryCondition.eq, ${requestMap.entityInfo.entityPackage}.getId());
										List<Object> list = dbManager.queryByCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class, qc);
					    	            if ((list != null) && (list.size() > 0)) {
					    	              for (Object obj : list) {
					    	            	  #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity entity = (#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity)obj;
					    	            	  dbManager.delNoTransaction(entity.getId(), #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class);
					    	              }   	
					    	            }
					    	            //绑定现在的关系		    	           
									    for(${relation.joinColumnFirstUpper}Entity ${relation.joinColumn}:${requestMap.entityInfo.entityPackage}.get${relation.joinColumnFirstUpper}List()){
									    	Integer ${relation.joinColumn}Id = ${relation.joinColumn}.getId();
					    	                if(${relation.joinColumn}Id!=null){
					    	                	#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity entity = new #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity();
					    	                	entity.set${requestMap.entityInfo.entityName}Id(${requestMap.entityInfo.entityPackage}.getId());
					    	                	entity.set${relation.joinColumnFirstUpper}Id(${relation.joinColumn}Id);
					    	                	dbManager.saveNoTransaction(entity);
					    	                }
									    }
								 }
								 #end
								 			
						}	
					}
				    tx.commitAndClose();   
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
		/**
		 * 根据id读取记录
		 * @param id 主键
		 #foreach( $relation in $requestMap.relationList)
		 * @param ${relation.joinColumn}ListShow 是否查询关联信息
		 #end
		 * @param obj
		 */
		public ${requestMap.entityInfo.entityName}Entity getById(Integer id#foreach( $relation in $requestMap.relationList),Boolean ${relation.joinColumn}ListShow#end) {
			${requestMap.entityInfo.entityName}Entity obj = null;
			if (id!=null) {
				obj = (${requestMap.entityInfo.entityName}Entity)dbManager.getById(id, ${requestMap.entityInfo.entityName}Entity.class);
				#foreach( $relation in $requestMap.relationList)
				//查询关联内容
				if(${relation.joinColumn}ListShow!=null&&${relation.joinColumn}ListShow.booleanValue()&&obj!=null&&obj.getId()>0){
					List<Object> rlist = dbManager.searchListByColumn(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class, #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.${requestMap.entityInfo.tableUpperName}_ID, String.valueOf(id));
	            	  if(rlist!=null&&rlist.size()>0){
	            		  for(Object robj:rlist){
	            			  #if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity robject = (#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity)robj;
	            			  Integer ${relation.joinColumn}Id = robject.get${relation.joinColumnFirstUpper}Id();
	            			  if(${relation.joinColumn}Id!=null){
	            				  ${relation.joinColumnFirstUpper}Entity ${relation.joinColumn} = (${relation.joinColumnFirstUpper}Entity)dbManager.getById(${relation.joinColumn}Id,${relation.joinColumnFirstUpper}Entity.class);
	            				  List<${relation.joinColumnFirstUpper}Entity> ${relation.joinColumn}List = obj.get${relation.joinColumnFirstUpper}List();
	            				  if(${relation.joinColumn}List==null||${relation.joinColumn}List.size()==0){
	            					  ${relation.joinColumn}List=new ArrayList<${relation.joinColumnFirstUpper}Entity>();
	            				  }
	            				  ${relation.joinColumn}List.add(${relation.joinColumn});
	            				  obj.set${relation.joinColumnFirstUpper}List(${relation.joinColumn}List);
	            			  }
	            		  }
	            	  }	            	  	  
				}
				#end
			}
			return obj;
		}
		
		/**
		 * 根据id读取记录集合
		 * @param queryMap 查询条件集合
		 * @param pageno
		 * @param pagesize
		 * @return
		 */
		public PageList getListByCondition(Map<String,Object> queryMap,int pageno,int pagesize) {
			PageList pagelist = null;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			#foreach( $column in $requestMap.columntList)
				#if("Long"==$column.fieldType||"Integer"==$column.fieldType||"Float"==$column.fieldType||"BigDecimal"==$column.fieldType)
					Object ${column.fieldName}=queryMap.get("${column.fieldName}");
					Object ${column.fieldName}_gt=queryMap.get("${column.fieldName}_gt");
					Object ${column.fieldName}_ge=queryMap.get("${column.fieldName}_ge");
					Object ${column.fieldName}_lt=queryMap.get("${column.fieldName}_lt");
					Object ${column.fieldName}_le=queryMap.get("${column.fieldName}_le");
					Object ${column.fieldName}_in=queryMap.get("${column.fieldName}_in");
				#else
					Object ${column.fieldName}=queryMap.get("${column.fieldName}");
					Object ${column.fieldName}_like=queryMap.get("${column.fieldName}_like");
					Object ${column.fieldName}_isNull=queryMap.get("${column.fieldName}_isNull");
					Object ${column.fieldName}_isNotNull=queryMap.get("${column.fieldName}_isNotNull");
				#end
			#end
			#foreach( $relation in $requestMap.relationList)
			Object ${relation.joinColumn}Id=queryMap.get("${relation.joinColumn}Id");
			#end
			
			QueryCondition qc = new QueryCondition(${requestMap.entityInfo.entityName}Entity.ID, QueryCondition.gt, "0");				
			#foreach( $column in $requestMap.columntList)
				#if("Long"==$column.fieldType||"Integer"==$column.fieldType||"Float"==$column.fieldType||"BigDecimal"==$column.fieldType)
					if(${column.fieldName}!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.in, ${column.fieldName}));}
					if(${column.fieldName}_gt!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.gt, ${column.fieldName}_gt));}
					if(${column.fieldName}_ge!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.ge, ${column.fieldName}_ge));}
					if(${column.fieldName}_lt!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.lt, ${column.fieldName}_lt));}
					if(${column.fieldName}_le!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.le, ${column.fieldName}_le));}
					if(${column.fieldName}_in!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.in, ${column.fieldName}_in));}
				#else
					if(${column.fieldName}!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.eq, ${column.fieldName}));}
		            if(${column.fieldName}_like!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.like, ${column.fieldName}_like));}
		            if(${column.fieldName}_isNull!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.isNull, ${column.fieldName}_isNull));}
		            if(${column.fieldName}_isNotNull!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.isNotNull, ${column.fieldName}_isNotNull));}
				#end
			#end   
            #foreach( $relation in $requestMap.relationList)
            if(${relation.joinColumn}Id!=null){
            	QueryCondition qc1 = new QueryCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.${relation.joinColumnUpper}_ID, QueryCondition.eq, ${relation.joinColumn}Id);
            	List<Object> rlist = dbManager.queryByCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class, qc1);
            	if(rlist!=null&&rlist.size()>0){
            		String strIds = "";
            		for(int i=0;i<rlist.size();i++){
            			#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity entity = (#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity)rlist.get(i);
            			Integer temp = entity.get${requestMap.entityInfo.entityName}Id();
            			if(temp!=null){
            				if (i == rlist.size() - 1)
                            	strIds = strIds + temp;
                            else {
                            	strIds = strIds + temp + ",";
                            }
            			}                       
            		}
            		if(strIds!=null&&!"".equals(strIds)){
            			qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.ID, QueryCondition.in, strIds));
            		}
            	}
			}
			#end
            pagelist = dbManager.queryByCondition(${requestMap.entityInfo.entityName}Entity.class,qc,pageno,pagesize);						
			return pagelist;
		}
		
		/**
		 * 删除记录
		 * 
		 * @param id 主键
		 * @param obj
		 */
		public boolean del(Integer id#foreach( $relation in $requestMap.relationList),Boolean del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List#end) {
			boolean result = false;
			if (id !=null&&id>0) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 
					result = dbManager.delNoTransaction(id, ${requestMap.entityInfo.entityName}Entity.class);
					#foreach( $relation in $requestMap.relationList)
					//删除关联信息
					if(del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List!=null&&del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List.booleanValue()){
						QueryCondition qc = new QueryCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.${requestMap.entityInfo.tableUpperName}_ID, QueryCondition.eq, id);
						dbManager.delByConditionsNoTransaction(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class, qc);
					}
					#end
					tx.commitAndClose();   
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}

		/**
		 * 批量条件删除记录
		 * @param queryMap 查询条件集合
		 #foreach( $relation in $requestMap.relationList)
		 * @param del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List 是否删除关联信息
		 #end
		 */
		public boolean delList(Map<String,Object> queryMap#foreach( $relation in $requestMap.relationList),Boolean del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List#end) {
			boolean result = false;
			if(queryMap==null){
				queryMap = new HashMap<String,Object>();
			}
			#foreach( $column in $requestMap.columntList)
				#if("Long"==$column.fieldType||"Integer"==$column.fieldType||"Float"==$column.fieldType||"BigDecimal"==$column.fieldType)
					Object ${column.fieldName}=queryMap.get("${column.fieldName}");
					Object ${column.fieldName}_gt=queryMap.get("${column.fieldName}_gt");
					Object ${column.fieldName}_ge=queryMap.get("${column.fieldName}_ge");
					Object ${column.fieldName}_lt=queryMap.get("${column.fieldName}_lt");
					Object ${column.fieldName}_le=queryMap.get("${column.fieldName}_le");
					Object ${column.fieldName}_in=queryMap.get("${column.fieldName}_in");
				#else
					Object ${column.fieldName}=queryMap.get("${column.fieldName}");
					Object ${column.fieldName}_like=queryMap.get("${column.fieldName}_like");
					Object ${column.fieldName}_isNull=queryMap.get("${column.fieldName}_isNull");
					Object ${column.fieldName}_isNotNull=queryMap.get("${column.fieldName}_isNotNull");
				#end
			#end
			#foreach( $relation in $requestMap.relationList)
			Object ${relation.joinColumn}Id=queryMap.get("${relation.joinColumn}Id");
			#end
			
			QueryCondition qc = new QueryCondition(${requestMap.entityInfo.entityName}Entity.ID, QueryCondition.gt, "0");				
			#foreach( $column in $requestMap.columntList)
				#if("Long"==$column.fieldType||"Integer"==$column.fieldType||"Float"==$column.fieldType||"BigDecimal"==$column.fieldType)
					if(${column.fieldName}!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.in, ${column.fieldName}));}
					if(${column.fieldName}_gt!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.gt, ${column.fieldName}_gt));}
					if(${column.fieldName}_ge!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.ge, ${column.fieldName}_ge));}
					if(${column.fieldName}_lt!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.lt, ${column.fieldName}_lt));}
					if(${column.fieldName}_le!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.le, ${column.fieldName}_le));}
					if(${column.fieldName}_in!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.in, ${column.fieldName}_in));}
				#else
					if(${column.fieldName}!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.eq, ${column.fieldName}));}
		            if(${column.fieldName}_like!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.like, ${column.fieldName}_like));}
		            if(${column.fieldName}_isNull!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.isNull, ${column.fieldName}_isNull));}
		            if(${column.fieldName}_isNotNull!=null){qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.${column.fieldUpperName}, QueryCondition.isNotNull, ${column.fieldName}_isNotNull));}
				#end
			#end   
			
            #foreach( $relation in $requestMap.relationList)
            if(${relation.joinColumn}Id!=null){
            	QueryCondition qc1 = new QueryCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.${relation.joinColumnUpper}_ID, QueryCondition.eq, ${relation.joinColumn}Id);
            	List<Object> rlist = dbManager.queryByCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class, qc1);
            	if(rlist!=null&&rlist.size()>0){
            		String strIds = "";
            		for(int i=0;i<rlist.size();i++){
            			#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity entity = (#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity)rlist.get(i);
            			Integer temp = entity.get${requestMap.entityInfo.entityName}Id();
            			if(temp!=null){
            				if (i == rlist.size() - 1)
                            	strIds = strIds + temp;
                            else {
                            	strIds = strIds + temp + ",";
                            }
            			}                       
            		}
            		if(strIds!=null&&!"".equals(strIds)){
            			qc.andCondition(new QueryCondition(${requestMap.entityInfo.entityName}Entity.ID, QueryCondition.in, strIds));
            		}
            	}
			}
			#end	
			if (qc.getQueryNextCondition()!=null) {
				TransactionManager tx = DbUtils.getTranManager();   
				try{   
					tx.beginTransaction(); 	
					result = dbManager.delByConditionsNoTransaction(${requestMap.entityInfo.entityName}Entity.class,qc);
					#foreach( $relation in $requestMap.relationList)
					//删除关联信息
					if(del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List!=null&&del#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}List.booleanValue()){
						List<Object> list=dbManager.queryByCondition(${requestMap.entityInfo.entityName}Entity.class,qc);
						String strIds="";
						if(list!=null&&list.size()>0){
							for(Object obj:list){
								${requestMap.entityInfo.entityName}Entity entity=(${requestMap.entityInfo.entityName}Entity)obj;
								strIds += entity.getId()+",";
							}
							strIds = strIds.substring(0, strIds.length()-1);
						}
						if(strIds!=null&&!"".equals(strIds)){
							QueryCondition qc1 = new QueryCondition(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.${requestMap.entityInfo.tableUpperName}_ID, QueryCondition.in, strIds);
							dbManager.delByConditionsNoTransaction(#if(${relation.jionFirst}=='Y')${requestMap.entityInfo.entityName}${relation.joinColumnFirstUpper}#end#if(${relation.jionFirst}=='N')${relation.joinColumnFirstUpper}${requestMap.entityInfo.entityName}#{end}Entity.class, qc1);
						}
						
					}	
					#end				
					tx.commitAndClose();   
				}catch (Exception e) { 
					 logger.error("数据库提交失败！");
					 logger.error(e);
					 result = false;
				     try {
						   tx.rollbackAndClose();
					 } catch (Exception ex) {					   
						   logger.error("数据库回滚失败！");
						   logger.error(ex);
					 }   
				}  
			}
			return result;
		}
		
		
}
